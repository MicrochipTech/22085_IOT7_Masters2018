
SensorBoardProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000165a0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000498  20000000  000165a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00030498  2**0
                  CONTENTS
  3 .bss          00002868  20000498  00016a38  00030498  2**2
                  ALLOC
  4 .stack        00002000  20002d00  000192a0  00030498  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030498  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000304c0  2**0
                  CONTENTS, READONLY
  7 .debug_info   000b3be2  00000000  00000000  00030519  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010ee6  00000000  00000000  000e40fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002198  00000000  00000000  000f4fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000204c0  00000000  00000000  000f7179  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00040a38  00000000  00000000  00117639  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000b0bbc  00000000  00000000  00158071  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0002ec12  00000000  00000000  00208c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002f18  00000000  00000000  0023783f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006fdc  00000000  00000000  0023a758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 4d 00 20 dd e2 00 00 d9 e2 00 00 d9 e2 00 00     .M. ............
	...
      2c:	d9 e2 00 00 00 00 00 00 00 00 00 00 d9 e2 00 00     ................
      3c:	d9 e2 00 00 d9 e2 00 00 d9 e2 00 00 0d 0e 00 00     ................
      4c:	55 9f 00 00 d9 e2 00 00 d9 e2 00 00 55 2c 00 00     U...........U,..
      5c:	d9 e2 00 00 89 9e 00 00 99 9e 00 00 a9 9e 00 00     ................
      6c:	b9 9e 00 00 c9 9e 00 00 d9 9e 00 00 d9 e2 00 00     ................
      7c:	d9 e2 00 00 d9 e2 00 00 b5 15 00 00 c5 15 00 00     ................
	...
      94:	d5 15 00 00 d9 e2 00 00 d9 e2 00 00 d9 e2 00 00     ................
      a4:	d9 e2 00 00 d9 e2 00 00 d9 e2 00 00 00 00 00 00     ................

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000498 	.word	0x20000498
      d4:	00000000 	.word	0x00000000
      d8:	000165a0 	.word	0x000165a0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000049c 	.word	0x2000049c
     108:	000165a0 	.word	0x000165a0
     10c:	000165a0 	.word	0x000165a0
     110:	00000000 	.word	0x00000000

00000114 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     114:	2000      	movs	r0, #0
     116:	4770      	bx	lr

00000118 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     118:	4b0b      	ldr	r3, [pc, #44]	; (148 <udi_hid_generic_setreport+0x30>)
     11a:	885b      	ldrh	r3, [r3, #2]
     11c:	0a1a      	lsrs	r2, r3, #8
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
		udd_g_ctrlreq.payload_size =
				sizeof(udi_hid_generic_report_feature);
		return true;
	}
	return false;
     11e:	2000      	movs	r0, #0
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     120:	2a03      	cmp	r2, #3
     122:	d000      	beq.n	126 <udi_hid_generic_setreport+0xe>
}
     124:	4770      	bx	lr
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     126:	32fc      	adds	r2, #252	; 0xfc
     128:	421a      	tst	r2, r3
     12a:	d1fb      	bne.n	124 <udi_hid_generic_setreport+0xc>
					udd_g_ctrlreq.req.wLength)) {
     12c:	4b06      	ldr	r3, [pc, #24]	; (148 <udi_hid_generic_setreport+0x30>)
			&& (sizeof(udi_hid_generic_report_feature) ==
     12e:	88db      	ldrh	r3, [r3, #6]
     130:	2b04      	cmp	r3, #4
     132:	d1f7      	bne.n	124 <udi_hid_generic_setreport+0xc>
		udd_g_ctrlreq.payload =
     134:	4b04      	ldr	r3, [pc, #16]	; (148 <udi_hid_generic_setreport+0x30>)
     136:	4a05      	ldr	r2, [pc, #20]	; (14c <udi_hid_generic_setreport+0x34>)
     138:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     13a:	4a05      	ldr	r2, [pc, #20]	; (150 <udi_hid_generic_setreport+0x38>)
     13c:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
     13e:	2204      	movs	r2, #4
     140:	819a      	strh	r2, [r3, #12]
		return true;
     142:	3001      	adds	r0, #1
     144:	e7ee      	b.n	124 <udi_hid_generic_setreport+0xc>
     146:	46c0      	nop			; (mov r8, r8)
     148:	200029d4 	.word	0x200029d4
     14c:	200004c0 	.word	0x200004c0
     150:	00000211 	.word	0x00000211

00000154 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     154:	2201      	movs	r2, #1
     156:	4b01      	ldr	r3, [pc, #4]	; (15c <udi_hid_generic_report_in_sent+0x8>)
     158:	701a      	strb	r2, [r3, #0]
}
     15a:	4770      	bx	lr
     15c:	200004b4 	.word	0x200004b4

00000160 <udi_hid_generic_report_out_enable>:
{
     160:	b510      	push	{r4, lr}
     162:	b082      	sub	sp, #8
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <udi_hid_generic_report_out_enable+0x18>)
     166:	9300      	str	r3, [sp, #0]
     168:	2340      	movs	r3, #64	; 0x40
     16a:	4a04      	ldr	r2, [pc, #16]	; (17c <udi_hid_generic_report_out_enable+0x1c>)
     16c:	2100      	movs	r1, #0
     16e:	2002      	movs	r0, #2
     170:	4c03      	ldr	r4, [pc, #12]	; (180 <udi_hid_generic_report_out_enable+0x20>)
     172:	47a0      	blx	r4
}
     174:	b002      	add	sp, #8
     176:	bd10      	pop	{r4, pc}
     178:	000001bd 	.word	0x000001bd
     17c:	20000504 	.word	0x20000504
     180:	00002295 	.word	0x00002295

00000184 <udi_hid_generic_enable>:
{
     184:	b510      	push	{r4, lr}
	udi_hid_generic_rate = 0;
     186:	2300      	movs	r3, #0
     188:	4a07      	ldr	r2, [pc, #28]	; (1a8 <udi_hid_generic_enable+0x24>)
     18a:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_protocol = 0;
     18c:	4a07      	ldr	r2, [pc, #28]	; (1ac <udi_hid_generic_enable+0x28>)
     18e:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_b_report_in_free = true;
     190:	2201      	movs	r2, #1
     192:	4b07      	ldr	r3, [pc, #28]	; (1b0 <udi_hid_generic_enable+0x2c>)
     194:	701a      	strb	r2, [r3, #0]
	if (!udi_hid_generic_report_out_enable())
     196:	4b07      	ldr	r3, [pc, #28]	; (1b4 <udi_hid_generic_enable+0x30>)
     198:	4798      	blx	r3
     19a:	2800      	cmp	r0, #0
     19c:	d100      	bne.n	1a0 <udi_hid_generic_enable+0x1c>
}
     19e:	bd10      	pop	{r4, pc}
	return UDI_HID_GENERIC_ENABLE_EXT();
     1a0:	4b05      	ldr	r3, [pc, #20]	; (1b8 <udi_hid_generic_enable+0x34>)
     1a2:	4798      	blx	r3
     1a4:	e7fb      	b.n	19e <udi_hid_generic_enable+0x1a>
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	200004bc 	.word	0x200004bc
     1ac:	200004b8 	.word	0x200004b8
     1b0:	200004b4 	.word	0x200004b4
     1b4:	00000161 	.word	0x00000161
     1b8:	00003cad 	.word	0x00003cad

000001bc <udi_hid_generic_report_out_received>:
{
     1bc:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status)
     1be:	2800      	cmp	r0, #0
     1c0:	d103      	bne.n	1ca <udi_hid_generic_report_out_received+0xe>
	if (sizeof(udi_hid_generic_report_out) == nb_received) {
     1c2:	2940      	cmp	r1, #64	; 0x40
     1c4:	d002      	beq.n	1cc <udi_hid_generic_report_out_received+0x10>
	udi_hid_generic_report_out_enable();
     1c6:	4b03      	ldr	r3, [pc, #12]	; (1d4 <udi_hid_generic_report_out_received+0x18>)
     1c8:	4798      	blx	r3
}
     1ca:	bd10      	pop	{r4, pc}
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
     1cc:	4802      	ldr	r0, [pc, #8]	; (1d8 <udi_hid_generic_report_out_received+0x1c>)
     1ce:	4b03      	ldr	r3, [pc, #12]	; (1dc <udi_hid_generic_report_out_received+0x20>)
     1d0:	4798      	blx	r3
     1d2:	e7f8      	b.n	1c6 <udi_hid_generic_report_out_received+0xa>
     1d4:	00000161 	.word	0x00000161
     1d8:	20000504 	.word	0x20000504
     1dc:	00003cb5 	.word	0x00003cb5

000001e0 <udi_hid_generic_disable>:
{
     1e0:	b510      	push	{r4, lr}
	UDI_HID_GENERIC_DISABLE_EXT();
     1e2:	4b01      	ldr	r3, [pc, #4]	; (1e8 <udi_hid_generic_disable+0x8>)
     1e4:	4798      	blx	r3
}
     1e6:	bd10      	pop	{r4, pc}
     1e8:	00003cb1 	.word	0x00003cb1

000001ec <udi_hid_generic_setup>:
{
     1ec:	b510      	push	{r4, lr}
	return udi_hid_setup(&udi_hid_generic_rate,
     1ee:	4b03      	ldr	r3, [pc, #12]	; (1fc <udi_hid_generic_setup+0x10>)
     1f0:	4a03      	ldr	r2, [pc, #12]	; (200 <udi_hid_generic_setup+0x14>)
     1f2:	4904      	ldr	r1, [pc, #16]	; (204 <udi_hid_generic_setup+0x18>)
     1f4:	4804      	ldr	r0, [pc, #16]	; (208 <udi_hid_generic_setup+0x1c>)
     1f6:	4c05      	ldr	r4, [pc, #20]	; (20c <udi_hid_generic_setup+0x20>)
     1f8:	47a0      	blx	r4
}
     1fa:	bd10      	pop	{r4, pc}
     1fc:	00000119 	.word	0x00000119
     200:	20000014 	.word	0x20000014
     204:	200004b8 	.word	0x200004b8
     208:	200004bc 	.word	0x200004bc
     20c:	000002c1 	.word	0x000002c1

00000210 <udi_hid_generic_setfeature_valid>:
{
     210:	b510      	push	{r4, lr}
	if (sizeof(udi_hid_generic_report_feature) != udd_g_ctrlreq.payload_size)
     212:	4b04      	ldr	r3, [pc, #16]	; (224 <udi_hid_generic_setfeature_valid+0x14>)
     214:	899b      	ldrh	r3, [r3, #12]
     216:	2b04      	cmp	r3, #4
     218:	d000      	beq.n	21c <udi_hid_generic_setfeature_valid+0xc>
}
     21a:	bd10      	pop	{r4, pc}
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
     21c:	4802      	ldr	r0, [pc, #8]	; (228 <udi_hid_generic_setfeature_valid+0x18>)
     21e:	4b03      	ldr	r3, [pc, #12]	; (22c <udi_hid_generic_setfeature_valid+0x1c>)
     220:	4798      	blx	r3
     222:	e7fa      	b.n	21a <udi_hid_generic_setfeature_valid+0xa>
     224:	200029d4 	.word	0x200029d4
     228:	200004c0 	.word	0x200004c0
     22c:	00003d11 	.word	0x00003d11

00000230 <udi_hid_generic_send_report_in>:
{
     230:	b570      	push	{r4, r5, r6, lr}
     232:	b084      	sub	sp, #16
     234:	0005      	movs	r5, r0
	if (!udi_hid_generic_b_report_in_free)
     236:	4b1b      	ldr	r3, [pc, #108]	; (2a4 <udi_hid_generic_send_report_in+0x74>)
     238:	7818      	ldrb	r0, [r3, #0]
     23a:	2800      	cmp	r0, #0
     23c:	d101      	bne.n	242 <udi_hid_generic_send_report_in+0x12>
}
     23e:	b004      	add	sp, #16
     240:	bd70      	pop	{r4, r5, r6, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     242:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     246:	425a      	negs	r2, r3
     248:	4153      	adcs	r3, r2
     24a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     24c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     24e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     252:	2200      	movs	r2, #0
     254:	4b14      	ldr	r3, [pc, #80]	; (2a8 <udi_hid_generic_send_report_in+0x78>)
     256:	701a      	strb	r2, [r3, #0]
	return flags;
     258:	9e03      	ldr	r6, [sp, #12]
	memset(&udi_hid_generic_report_in, 0,
     25a:	4c14      	ldr	r4, [pc, #80]	; (2ac <udi_hid_generic_send_report_in+0x7c>)
     25c:	3240      	adds	r2, #64	; 0x40
     25e:	2100      	movs	r1, #0
     260:	0020      	movs	r0, r4
     262:	4b13      	ldr	r3, [pc, #76]	; (2b0 <udi_hid_generic_send_report_in+0x80>)
     264:	4798      	blx	r3
	memcpy(&udi_hid_generic_report_in, data,
     266:	2240      	movs	r2, #64	; 0x40
     268:	0029      	movs	r1, r5
     26a:	0020      	movs	r0, r4
     26c:	4b11      	ldr	r3, [pc, #68]	; (2b4 <udi_hid_generic_send_report_in+0x84>)
     26e:	4798      	blx	r3
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     270:	4b11      	ldr	r3, [pc, #68]	; (2b8 <udi_hid_generic_send_report_in+0x88>)
     272:	9300      	str	r3, [sp, #0]
     274:	2340      	movs	r3, #64	; 0x40
     276:	0022      	movs	r2, r4
     278:	2100      	movs	r1, #0
     27a:	2081      	movs	r0, #129	; 0x81
     27c:	4c0f      	ldr	r4, [pc, #60]	; (2bc <udi_hid_generic_send_report_in+0x8c>)
     27e:	47a0      	blx	r4
							udi_hid_generic_report_in_sent);
     280:	2301      	movs	r3, #1
     282:	4058      	eors	r0, r3
	udi_hid_generic_b_report_in_free =
     284:	4b07      	ldr	r3, [pc, #28]	; (2a4 <udi_hid_generic_send_report_in+0x74>)
     286:	7018      	strb	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     288:	2e00      	cmp	r6, #0
     28a:	d005      	beq.n	298 <udi_hid_generic_send_report_in+0x68>
		cpu_irq_enable();
     28c:	2201      	movs	r2, #1
     28e:	4b06      	ldr	r3, [pc, #24]	; (2a8 <udi_hid_generic_send_report_in+0x78>)
     290:	701a      	strb	r2, [r3, #0]
     292:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     296:	b662      	cpsie	i
	return !udi_hid_generic_b_report_in_free;
     298:	4b02      	ldr	r3, [pc, #8]	; (2a4 <udi_hid_generic_send_report_in+0x74>)
     29a:	7818      	ldrb	r0, [r3, #0]
     29c:	2301      	movs	r3, #1
     29e:	4058      	eors	r0, r3
     2a0:	e7cd      	b.n	23e <udi_hid_generic_send_report_in+0xe>
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	200004b4 	.word	0x200004b4
     2a8:	200002c6 	.word	0x200002c6
     2ac:	200004c4 	.word	0x200004c4
     2b0:	000109ff 	.word	0x000109ff
     2b4:	000109c9 	.word	0x000109c9
     2b8:	00000155 	.word	0x00000155
     2bc:	00002295 	.word	0x00002295

000002c0 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
     2c0:	b570      	push	{r4, r5, r6, lr}
     2c2:	0005      	movs	r5, r0
     2c4:	0014      	movs	r4, r2
	if (Udd_setup_is_in()) {
     2c6:	4a3b      	ldr	r2, [pc, #236]	; (3b4 <udi_hid_setup+0xf4>)
     2c8:	7812      	ldrb	r2, [r2, #0]
     2ca:	b250      	sxtb	r0, r2
     2cc:	2800      	cmp	r0, #0
     2ce:	db05      	blt.n	2dc <udi_hid_setup+0x1c>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     2d0:	2460      	movs	r4, #96	; 0x60
     2d2:	4022      	ands	r2, r4
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     2d4:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     2d6:	2a20      	cmp	r2, #32
     2d8:	d04f      	beq.n	37a <udi_hid_setup+0xba>
}
     2da:	bd70      	pop	{r4, r5, r6, pc}
     2dc:	2060      	movs	r0, #96	; 0x60
     2de:	4002      	ands	r2, r0
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     2e0:	d103      	bne.n	2ea <udi_hid_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
     2e2:	4834      	ldr	r0, [pc, #208]	; (3b4 <udi_hid_setup+0xf4>)
     2e4:	7840      	ldrb	r0, [r0, #1]
     2e6:	2806      	cmp	r0, #6
     2e8:	d00d      	beq.n	306 <udi_hid_setup+0x46>
	return false;	// Request not supported
     2ea:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     2ec:	2a20      	cmp	r2, #32
     2ee:	d1f4      	bne.n	2da <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
     2f0:	4a30      	ldr	r2, [pc, #192]	; (3b4 <udi_hid_setup+0xf4>)
     2f2:	7852      	ldrb	r2, [r2, #1]
     2f4:	2a02      	cmp	r2, #2
     2f6:	d034      	beq.n	362 <udi_hid_setup+0xa2>
     2f8:	2a03      	cmp	r2, #3
     2fa:	d038      	beq.n	36e <udi_hid_setup+0xae>
	return false;	// Request not supported
     2fc:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     2fe:	2a01      	cmp	r2, #1
     300:	d1eb      	bne.n	2da <udi_hid_setup+0x1a>
				return setup_report();
     302:	4798      	blx	r3
     304:	e7e9      	b.n	2da <udi_hid_setup+0x1a>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     306:	4b2c      	ldr	r3, [pc, #176]	; (3b8 <udi_hid_setup+0xf8>)
     308:	4798      	blx	r3
     30a:	0003      	movs	r3, r0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     30c:	7a82      	ldrb	r2, [r0, #10]
		return false;
     30e:	2000      	movs	r0, #0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     310:	2a21      	cmp	r2, #33	; 0x21
     312:	d1e2      	bne.n	2da <udi_hid_setup+0x1a>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     314:	4a27      	ldr	r2, [pc, #156]	; (3b4 <udi_hid_setup+0xf4>)
     316:	8852      	ldrh	r2, [r2, #2]
     318:	0a12      	lsrs	r2, r2, #8
     31a:	2a21      	cmp	r2, #33	; 0x21
     31c:	d013      	beq.n	346 <udi_hid_setup+0x86>
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     31e:	7bd9      	ldrb	r1, [r3, #15]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
     320:	2000      	movs	r0, #0
	if (ptr_hid_desc->bRDescriptorType ==
     322:	4291      	cmp	r1, r2
     324:	d1d9      	bne.n	2da <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = report_desc;
     326:	4a23      	ldr	r2, [pc, #140]	; (3b4 <udi_hid_setup+0xf4>)
     328:	6094      	str	r4, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
     32a:	7c19      	ldrb	r1, [r3, #16]
     32c:	3309      	adds	r3, #9
     32e:	7a1b      	ldrb	r3, [r3, #8]
     330:	021b      	lsls	r3, r3, #8
     332:	430b      	orrs	r3, r1
		udd_g_ctrlreq.payload_size =
     334:	88d0      	ldrh	r0, [r2, #6]
     336:	1c19      	adds	r1, r3, #0
     338:	b29b      	uxth	r3, r3
     33a:	4283      	cmp	r3, r0
     33c:	d900      	bls.n	340 <udi_hid_setup+0x80>
     33e:	1c01      	adds	r1, r0, #0
     340:	8191      	strh	r1, [r2, #12]
		return true;
     342:	2001      	movs	r0, #1
     344:	e7c9      	b.n	2da <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     346:	4a1b      	ldr	r2, [pc, #108]	; (3b4 <udi_hid_setup+0xf4>)
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
     348:	0019      	movs	r1, r3
     34a:	3109      	adds	r1, #9
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     34c:	6091      	str	r1, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
     34e:	7a5b      	ldrb	r3, [r3, #9]
     350:	88d0      	ldrh	r0, [r2, #6]
     352:	1c19      	adds	r1, r3, #0
     354:	b29b      	uxth	r3, r3
     356:	4283      	cmp	r3, r0
     358:	d900      	bls.n	35c <udi_hid_setup+0x9c>
     35a:	1c01      	adds	r1, r0, #0
		udd_g_ctrlreq.payload_size =
     35c:	8191      	strh	r1, [r2, #12]
		return true;
     35e:	2001      	movs	r0, #1
     360:	e7bb      	b.n	2da <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = rate;
     362:	4b14      	ldr	r3, [pc, #80]	; (3b4 <udi_hid_setup+0xf4>)
     364:	609d      	str	r5, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     366:	2201      	movs	r2, #1
     368:	819a      	strh	r2, [r3, #12]
				return true;
     36a:	2001      	movs	r0, #1
     36c:	e7b5      	b.n	2da <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = protocol;
     36e:	4b11      	ldr	r3, [pc, #68]	; (3b4 <udi_hid_setup+0xf4>)
     370:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     372:	2201      	movs	r2, #1
     374:	819a      	strh	r2, [r3, #12]
				return true;
     376:	2001      	movs	r0, #1
     378:	e7af      	b.n	2da <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
     37a:	4a0e      	ldr	r2, [pc, #56]	; (3b4 <udi_hid_setup+0xf4>)
     37c:	7852      	ldrb	r2, [r2, #1]
     37e:	2a0a      	cmp	r2, #10
     380:	d006      	beq.n	390 <udi_hid_setup+0xd0>
     382:	2a0b      	cmp	r2, #11
     384:	d00a      	beq.n	39c <udi_hid_setup+0xdc>
	return false;	// Request not supported
     386:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     388:	2a09      	cmp	r2, #9
     38a:	d1a6      	bne.n	2da <udi_hid_setup+0x1a>
				return setup_report();
     38c:	4798      	blx	r3
     38e:	e7a4      	b.n	2da <udi_hid_setup+0x1a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     390:	4b08      	ldr	r3, [pc, #32]	; (3b4 <udi_hid_setup+0xf4>)
     392:	885b      	ldrh	r3, [r3, #2]
     394:	0a1b      	lsrs	r3, r3, #8
     396:	702b      	strb	r3, [r5, #0]
				return true;
     398:	2001      	movs	r0, #1
     39a:	e79e      	b.n	2da <udi_hid_setup+0x1a>
				if (0 != udd_g_ctrlreq.req.wLength)
     39c:	4b05      	ldr	r3, [pc, #20]	; (3b4 <udi_hid_setup+0xf4>)
     39e:	88db      	ldrh	r3, [r3, #6]
					return false;
     3a0:	2000      	movs	r0, #0
				if (0 != udd_g_ctrlreq.req.wLength)
     3a2:	2b00      	cmp	r3, #0
     3a4:	d000      	beq.n	3a8 <udi_hid_setup+0xe8>
     3a6:	e798      	b.n	2da <udi_hid_setup+0x1a>
				*protocol = udd_g_ctrlreq.req.wValue;
     3a8:	4b02      	ldr	r3, [pc, #8]	; (3b4 <udi_hid_setup+0xf4>)
     3aa:	885b      	ldrh	r3, [r3, #2]
     3ac:	700b      	strb	r3, [r1, #0]
				return true;
     3ae:	3001      	adds	r0, #1
     3b0:	e793      	b.n	2da <udi_hid_setup+0x1a>
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	200029d4 	.word	0x200029d4
     3b8:	00000559 	.word	0x00000559

000003bc <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     3bc:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
     3be:	4b11      	ldr	r3, [pc, #68]	; (404 <udc_next_desc_in_iface+0x48>)
     3c0:	681b      	ldr	r3, [r3, #0]
     3c2:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     3c4:	7894      	ldrb	r4, [r2, #2]
     3c6:	78d3      	ldrb	r3, [r2, #3]
     3c8:	021b      	lsls	r3, r3, #8
     3ca:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     3cc:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     3ce:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     3d0:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     3d2:	4290      	cmp	r0, r2
     3d4:	d210      	bcs.n	3f8 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     3d6:	7843      	ldrb	r3, [r0, #1]
     3d8:	2b04      	cmp	r3, #4
     3da:	d00f      	beq.n	3fc <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     3dc:	428b      	cmp	r3, r1
     3de:	d00a      	beq.n	3f6 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     3e0:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     3e2:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
     3e4:	4290      	cmp	r0, r2
     3e6:	d205      	bcs.n	3f4 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     3e8:	7843      	ldrb	r3, [r0, #1]
     3ea:	2b04      	cmp	r3, #4
     3ec:	d008      	beq.n	400 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
     3ee:	428b      	cmp	r3, r1
     3f0:	d1f6      	bne.n	3e0 <udc_next_desc_in_iface+0x24>
     3f2:	e000      	b.n	3f6 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
     3f4:	2000      	movs	r0, #0
}
     3f6:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
     3f8:	2000      	movs	r0, #0
     3fa:	e7fc      	b.n	3f6 <udc_next_desc_in_iface+0x3a>
     3fc:	2000      	movs	r0, #0
     3fe:	e7fa      	b.n	3f6 <udc_next_desc_in_iface+0x3a>
     400:	2000      	movs	r0, #0
     402:	e7f8      	b.n	3f6 <udc_next_desc_in_iface+0x3a>
     404:	20000550 	.word	0x20000550

00000408 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     408:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     40a:	4b03      	ldr	r3, [pc, #12]	; (418 <udc_valid_address+0x10>)
     40c:	885b      	ldrh	r3, [r3, #2]
     40e:	207f      	movs	r0, #127	; 0x7f
     410:	4018      	ands	r0, r3
     412:	4b02      	ldr	r3, [pc, #8]	; (41c <udc_valid_address+0x14>)
     414:	4798      	blx	r3
}
     416:	bd10      	pop	{r4, pc}
     418:	200029d4 	.word	0x200029d4
     41c:	0000246d 	.word	0x0000246d

00000420 <udc_update_iface_desc>:
{
     420:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
     422:	4b19      	ldr	r3, [pc, #100]	; (488 <udc_update_iface_desc+0x68>)
     424:	781b      	ldrb	r3, [r3, #0]
		return false;
     426:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
     428:	2b00      	cmp	r3, #0
     42a:	d029      	beq.n	480 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     42c:	4b17      	ldr	r3, [pc, #92]	; (48c <udc_update_iface_desc+0x6c>)
     42e:	681b      	ldr	r3, [r3, #0]
     430:	681b      	ldr	r3, [r3, #0]
     432:	791c      	ldrb	r4, [r3, #4]
     434:	4284      	cmp	r4, r0
     436:	d923      	bls.n	480 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     438:	4a15      	ldr	r2, [pc, #84]	; (490 <udc_update_iface_desc+0x70>)
     43a:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     43c:	789a      	ldrb	r2, [r3, #2]
     43e:	78dc      	ldrb	r4, [r3, #3]
     440:	0224      	lsls	r4, r4, #8
     442:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     444:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
     446:	42a3      	cmp	r3, r4
     448:	d21c      	bcs.n	484 <udc_update_iface_desc+0x64>
     44a:	2500      	movs	r5, #0
     44c:	2601      	movs	r6, #1
     44e:	e007      	b.n	460 <udc_update_iface_desc+0x40>
     450:	4a0f      	ldr	r2, [pc, #60]	; (490 <udc_update_iface_desc+0x70>)
     452:	6013      	str	r3, [r2, #0]
     454:	e00f      	b.n	476 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
     456:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     458:	189b      	adds	r3, r3, r2
     45a:	0035      	movs	r5, r6
	while (ptr_end_desc >
     45c:	42a3      	cmp	r3, r4
     45e:	d20c      	bcs.n	47a <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     460:	785a      	ldrb	r2, [r3, #1]
     462:	2a04      	cmp	r2, #4
     464:	d1f7      	bne.n	456 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     466:	789a      	ldrb	r2, [r3, #2]
     468:	4282      	cmp	r2, r0
     46a:	d1f4      	bne.n	456 <udc_update_iface_desc+0x36>
     46c:	78da      	ldrb	r2, [r3, #3]
     46e:	428a      	cmp	r2, r1
     470:	d1f1      	bne.n	456 <udc_update_iface_desc+0x36>
     472:	2d00      	cmp	r5, #0
     474:	d1ec      	bne.n	450 <udc_update_iface_desc+0x30>
				return true; // Interface found
     476:	2201      	movs	r2, #1
     478:	e002      	b.n	480 <udc_update_iface_desc+0x60>
     47a:	4a05      	ldr	r2, [pc, #20]	; (490 <udc_update_iface_desc+0x70>)
     47c:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
     47e:	2200      	movs	r2, #0
}
     480:	0010      	movs	r0, r2
     482:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
     484:	2200      	movs	r2, #0
     486:	e7fb      	b.n	480 <udc_update_iface_desc+0x60>
     488:	2000054c 	.word	0x2000054c
     48c:	20000550 	.word	0x20000550
     490:	20000554 	.word	0x20000554

00000494 <udc_iface_disable>:
{
     494:	b5f0      	push	{r4, r5, r6, r7, lr}
     496:	46c6      	mov	lr, r8
     498:	b500      	push	{lr}
     49a:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
     49c:	2100      	movs	r1, #0
     49e:	4b13      	ldr	r3, [pc, #76]	; (4ec <udc_iface_disable+0x58>)
     4a0:	4798      	blx	r3
     4a2:	1e05      	subs	r5, r0, #0
     4a4:	d103      	bne.n	4ae <udc_iface_disable+0x1a>
}
     4a6:	0028      	movs	r0, r5
     4a8:	bc04      	pop	{r2}
     4aa:	4690      	mov	r8, r2
     4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     4ae:	4b10      	ldr	r3, [pc, #64]	; (4f0 <udc_iface_disable+0x5c>)
     4b0:	681b      	ldr	r3, [r3, #0]
     4b2:	685b      	ldr	r3, [r3, #4]
     4b4:	00a2      	lsls	r2, r4, #2
     4b6:	58d3      	ldr	r3, [r2, r3]
     4b8:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     4ba:	68db      	ldr	r3, [r3, #12]
     4bc:	4798      	blx	r3
     4be:	0001      	movs	r1, r0
     4c0:	0020      	movs	r0, r4
     4c2:	4b0a      	ldr	r3, [pc, #40]	; (4ec <udc_iface_disable+0x58>)
     4c4:	4798      	blx	r3
     4c6:	1e05      	subs	r5, r0, #0
     4c8:	d0ed      	beq.n	4a6 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     4ca:	4b0a      	ldr	r3, [pc, #40]	; (4f4 <udc_iface_disable+0x60>)
     4cc:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     4ce:	4e0a      	ldr	r6, [pc, #40]	; (4f8 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
     4d0:	4f0a      	ldr	r7, [pc, #40]	; (4fc <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     4d2:	2105      	movs	r1, #5
     4d4:	0020      	movs	r0, r4
     4d6:	47b0      	blx	r6
     4d8:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
     4da:	d002      	beq.n	4e2 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
     4dc:	7880      	ldrb	r0, [r0, #2]
     4de:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     4e0:	e7f7      	b.n	4d2 <udc_iface_disable+0x3e>
	udi_api->disable();
     4e2:	4643      	mov	r3, r8
     4e4:	685b      	ldr	r3, [r3, #4]
     4e6:	4798      	blx	r3
	return true;
     4e8:	e7dd      	b.n	4a6 <udc_iface_disable+0x12>
     4ea:	46c0      	nop			; (mov r8, r8)
     4ec:	00000421 	.word	0x00000421
     4f0:	20000550 	.word	0x20000550
     4f4:	20000554 	.word	0x20000554
     4f8:	000003bd 	.word	0x000003bd
     4fc:	00001fad 	.word	0x00001fad

00000500 <udc_iface_enable>:
{
     500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     502:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     504:	4b0f      	ldr	r3, [pc, #60]	; (544 <udc_iface_enable+0x44>)
     506:	4798      	blx	r3
     508:	2800      	cmp	r0, #0
     50a:	d019      	beq.n	540 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     50c:	4b0e      	ldr	r3, [pc, #56]	; (548 <udc_iface_enable+0x48>)
     50e:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     510:	4e0e      	ldr	r6, [pc, #56]	; (54c <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     512:	4f0f      	ldr	r7, [pc, #60]	; (550 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     514:	2105      	movs	r1, #5
     516:	0020      	movs	r0, r4
     518:	47b0      	blx	r6
     51a:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
     51c:	d009      	beq.n	532 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     51e:	7903      	ldrb	r3, [r0, #4]
     520:	7942      	ldrb	r2, [r0, #5]
     522:	0212      	lsls	r2, r2, #8
     524:	431a      	orrs	r2, r3
     526:	78c1      	ldrb	r1, [r0, #3]
     528:	7880      	ldrb	r0, [r0, #2]
     52a:	47b8      	blx	r7
     52c:	2800      	cmp	r0, #0
     52e:	d1f1      	bne.n	514 <udc_iface_enable+0x14>
     530:	e006      	b.n	540 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     532:	4b08      	ldr	r3, [pc, #32]	; (554 <udc_iface_enable+0x54>)
     534:	681b      	ldr	r3, [r3, #0]
     536:	685b      	ldr	r3, [r3, #4]
     538:	00ad      	lsls	r5, r5, #2
     53a:	58eb      	ldr	r3, [r5, r3]
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	4798      	blx	r3
}
     540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     542:	46c0      	nop			; (mov r8, r8)
     544:	00000421 	.word	0x00000421
     548:	20000554 	.word	0x20000554
     54c:	000003bd 	.word	0x000003bd
     550:	00002005 	.word	0x00002005
     554:	20000550 	.word	0x20000550

00000558 <udc_get_interface_desc>:
	return udc_ptr_iface;
     558:	4b01      	ldr	r3, [pc, #4]	; (560 <udc_get_interface_desc+0x8>)
     55a:	6818      	ldr	r0, [r3, #0]
}
     55c:	4770      	bx	lr
     55e:	46c0      	nop			; (mov r8, r8)
     560:	20000554 	.word	0x20000554

00000564 <udc_start>:
{
     564:	b510      	push	{r4, lr}
	udd_enable();
     566:	4b01      	ldr	r3, [pc, #4]	; (56c <udc_start+0x8>)
     568:	4798      	blx	r3
}
     56a:	bd10      	pop	{r4, pc}
     56c:	0000251d 	.word	0x0000251d

00000570 <udc_reset>:
{
     570:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     572:	4b12      	ldr	r3, [pc, #72]	; (5bc <udc_reset+0x4c>)
     574:	781b      	ldrb	r3, [r3, #0]
     576:	2b00      	cmp	r3, #0
     578:	d011      	beq.n	59e <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     57a:	4b11      	ldr	r3, [pc, #68]	; (5c0 <udc_reset+0x50>)
     57c:	681b      	ldr	r3, [r3, #0]
     57e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     580:	791b      	ldrb	r3, [r3, #4]
     582:	2b00      	cmp	r3, #0
     584:	d00b      	beq.n	59e <udc_reset+0x2e>
     586:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
     588:	4e0e      	ldr	r6, [pc, #56]	; (5c4 <udc_reset+0x54>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     58a:	4d0d      	ldr	r5, [pc, #52]	; (5c0 <udc_reset+0x50>)
			udc_iface_disable(iface_num);
     58c:	0020      	movs	r0, r4
     58e:	47b0      	blx	r6
				iface_num++) {
     590:	3401      	adds	r4, #1
     592:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     594:	682b      	ldr	r3, [r5, #0]
     596:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     598:	791b      	ldrb	r3, [r3, #4]
     59a:	42a3      	cmp	r3, r4
     59c:	d8f6      	bhi.n	58c <udc_reset+0x1c>
	udc_num_configuration = 0;
     59e:	2200      	movs	r2, #0
     5a0:	4b06      	ldr	r3, [pc, #24]	; (5bc <udc_reset+0x4c>)
     5a2:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
     5a4:	4b08      	ldr	r3, [pc, #32]	; (5c8 <udc_reset+0x58>)
     5a6:	881b      	ldrh	r3, [r3, #0]
     5a8:	079b      	lsls	r3, r3, #30
     5aa:	d403      	bmi.n	5b4 <udc_reset+0x44>
	udc_device_status =
     5ac:	2200      	movs	r2, #0
     5ae:	4b06      	ldr	r3, [pc, #24]	; (5c8 <udc_reset+0x58>)
     5b0:	801a      	strh	r2, [r3, #0]
}
     5b2:	bd70      	pop	{r4, r5, r6, pc}
		UDC_REMOTEWAKEUP_DISABLE();
     5b4:	4b05      	ldr	r3, [pc, #20]	; (5cc <udc_reset+0x5c>)
     5b6:	4798      	blx	r3
     5b8:	e7f8      	b.n	5ac <udc_reset+0x3c>
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	2000054c 	.word	0x2000054c
     5c0:	20000550 	.word	0x20000550
     5c4:	00000495 	.word	0x00000495
     5c8:	20000544 	.word	0x20000544
     5cc:	00003cb1 	.word	0x00003cb1

000005d0 <udc_sof_notify>:
{
     5d0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     5d2:	4b0e      	ldr	r3, [pc, #56]	; (60c <udc_sof_notify+0x3c>)
     5d4:	781b      	ldrb	r3, [r3, #0]
     5d6:	2b00      	cmp	r3, #0
     5d8:	d017      	beq.n	60a <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     5da:	4b0d      	ldr	r3, [pc, #52]	; (610 <udc_sof_notify+0x40>)
     5dc:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     5de:	681a      	ldr	r2, [r3, #0]
     5e0:	7912      	ldrb	r2, [r2, #4]
     5e2:	2a00      	cmp	r2, #0
     5e4:	d011      	beq.n	60a <udc_sof_notify+0x3a>
     5e6:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     5e8:	4d09      	ldr	r5, [pc, #36]	; (610 <udc_sof_notify+0x40>)
     5ea:	e006      	b.n	5fa <udc_sof_notify+0x2a>
				iface_num++) {
     5ec:	3401      	adds	r4, #1
     5ee:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     5f0:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
     5f2:	681a      	ldr	r2, [r3, #0]
     5f4:	7912      	ldrb	r2, [r2, #4]
     5f6:	42a2      	cmp	r2, r4
     5f8:	d907      	bls.n	60a <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     5fa:	685b      	ldr	r3, [r3, #4]
     5fc:	00a2      	lsls	r2, r4, #2
     5fe:	58d3      	ldr	r3, [r2, r3]
     600:	691b      	ldr	r3, [r3, #16]
     602:	2b00      	cmp	r3, #0
     604:	d0f2      	beq.n	5ec <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     606:	4798      	blx	r3
     608:	e7f0      	b.n	5ec <udc_sof_notify+0x1c>
}
     60a:	bd70      	pop	{r4, r5, r6, pc}
     60c:	2000054c 	.word	0x2000054c
     610:	20000550 	.word	0x20000550

00000614 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     616:	4bb6      	ldr	r3, [pc, #728]	; (8f0 <udc_process_setup+0x2dc>)
     618:	2200      	movs	r2, #0
     61a:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     61c:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     61e:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     620:	781b      	ldrb	r3, [r3, #0]
     622:	b25a      	sxtb	r2, r3
     624:	2a00      	cmp	r2, #0
     626:	db13      	blt.n	650 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     628:	2260      	movs	r2, #96	; 0x60
     62a:	421a      	tst	r2, r3
     62c:	d100      	bne.n	630 <udc_process_setup+0x1c>
     62e:	e0d7      	b.n	7e0 <udc_process_setup+0x1cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     630:	4baf      	ldr	r3, [pc, #700]	; (8f0 <udc_process_setup+0x2dc>)
     632:	781a      	ldrb	r2, [r3, #0]
     634:	231f      	movs	r3, #31
     636:	4013      	ands	r3, r2
     638:	2b01      	cmp	r3, #1
     63a:	d100      	bne.n	63e <udc_process_setup+0x2a>
     63c:	e18e      	b.n	95c <udc_process_setup+0x348>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     63e:	4bac      	ldr	r3, [pc, #688]	; (8f0 <udc_process_setup+0x2dc>)
     640:	781a      	ldrb	r2, [r3, #0]
     642:	231f      	movs	r3, #31
     644:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     646:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     648:	2b02      	cmp	r3, #2
     64a:	d100      	bne.n	64e <udc_process_setup+0x3a>
     64c:	e1df      	b.n	a0e <udc_process_setup+0x3fa>
#endif
}
     64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
     650:	4aa7      	ldr	r2, [pc, #668]	; (8f0 <udc_process_setup+0x2dc>)
     652:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
     654:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
     656:	2a00      	cmp	r2, #0
     658:	d0f9      	beq.n	64e <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     65a:	2160      	movs	r1, #96	; 0x60
     65c:	4219      	tst	r1, r3
     65e:	d1e7      	bne.n	630 <udc_process_setup+0x1c>
     660:	211f      	movs	r1, #31
     662:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     664:	d108      	bne.n	678 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
     666:	49a2      	ldr	r1, [pc, #648]	; (8f0 <udc_process_setup+0x2dc>)
     668:	7849      	ldrb	r1, [r1, #1]
     66a:	2906      	cmp	r1, #6
     66c:	d023      	beq.n	6b6 <udc_process_setup+0xa2>
     66e:	2908      	cmp	r1, #8
     670:	d100      	bne.n	674 <udc_process_setup+0x60>
     672:	e084      	b.n	77e <udc_process_setup+0x16a>
     674:	2900      	cmp	r1, #0
     676:	d017      	beq.n	6a8 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     678:	2b01      	cmp	r3, #1
     67a:	d100      	bne.n	67e <udc_process_setup+0x6a>
     67c:	e087      	b.n	78e <udc_process_setup+0x17a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     67e:	2b02      	cmp	r3, #2
     680:	d1d6      	bne.n	630 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     682:	4b9b      	ldr	r3, [pc, #620]	; (8f0 <udc_process_setup+0x2dc>)
     684:	785b      	ldrb	r3, [r3, #1]
	return false;
     686:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     688:	2b00      	cmp	r3, #0
     68a:	d000      	beq.n	68e <udc_process_setup+0x7a>
     68c:	e12b      	b.n	8e6 <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     68e:	2a02      	cmp	r2, #2
     690:	d1d5      	bne.n	63e <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     692:	4b97      	ldr	r3, [pc, #604]	; (8f0 <udc_process_setup+0x2dc>)
     694:	7918      	ldrb	r0, [r3, #4]
     696:	4b97      	ldr	r3, [pc, #604]	; (8f4 <udc_process_setup+0x2e0>)
     698:	4798      	blx	r3
     69a:	4b97      	ldr	r3, [pc, #604]	; (8f8 <udc_process_setup+0x2e4>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     69c:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     69e:	2102      	movs	r1, #2
     6a0:	0018      	movs	r0, r3
     6a2:	4b96      	ldr	r3, [pc, #600]	; (8fc <udc_process_setup+0x2e8>)
     6a4:	4798      	blx	r3
     6a6:	e0fd      	b.n	8a4 <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     6a8:	2a02      	cmp	r2, #2
     6aa:	d1c8      	bne.n	63e <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     6ac:	3102      	adds	r1, #2
     6ae:	4894      	ldr	r0, [pc, #592]	; (900 <udc_process_setup+0x2ec>)
     6b0:	4b92      	ldr	r3, [pc, #584]	; (8fc <udc_process_setup+0x2e8>)
     6b2:	4798      	blx	r3
     6b4:	e0f6      	b.n	8a4 <udc_process_setup+0x290>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     6b6:	4b8e      	ldr	r3, [pc, #568]	; (8f0 <udc_process_setup+0x2dc>)
     6b8:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     6ba:	0a13      	lsrs	r3, r2, #8
     6bc:	2b02      	cmp	r3, #2
     6be:	d023      	beq.n	708 <udc_process_setup+0xf4>
     6c0:	b2d9      	uxtb	r1, r3
     6c2:	2902      	cmp	r1, #2
     6c4:	d90f      	bls.n	6e6 <udc_process_setup+0xd2>
     6c6:	2b03      	cmp	r3, #3
     6c8:	d034      	beq.n	734 <udc_process_setup+0x120>
     6ca:	2b0f      	cmp	r3, #15
     6cc:	d000      	beq.n	6d0 <udc_process_setup+0xbc>
     6ce:	e19c      	b.n	a0a <udc_process_setup+0x3f6>
		if (udc_config.conf_bos == NULL) {
     6d0:	4b8c      	ldr	r3, [pc, #560]	; (904 <udc_process_setup+0x2f0>)
     6d2:	6898      	ldr	r0, [r3, #8]
     6d4:	2800      	cmp	r0, #0
     6d6:	d0b2      	beq.n	63e <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     6d8:	7883      	ldrb	r3, [r0, #2]
     6da:	78c1      	ldrb	r1, [r0, #3]
     6dc:	0209      	lsls	r1, r1, #8
     6de:	4319      	orrs	r1, r3
     6e0:	4b86      	ldr	r3, [pc, #536]	; (8fc <udc_process_setup+0x2e8>)
     6e2:	4798      	blx	r3
     6e4:	e007      	b.n	6f6 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     6e6:	2b01      	cmp	r3, #1
     6e8:	d000      	beq.n	6ec <udc_process_setup+0xd8>
     6ea:	e18e      	b.n	a0a <udc_process_setup+0x3f6>
				(uint8_t *) udc_config.confdev_lsfs,
     6ec:	4b85      	ldr	r3, [pc, #532]	; (904 <udc_process_setup+0x2f0>)
     6ee:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
     6f0:	7801      	ldrb	r1, [r0, #0]
     6f2:	4b82      	ldr	r3, [pc, #520]	; (8fc <udc_process_setup+0x2e8>)
     6f4:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     6f6:	4b7e      	ldr	r3, [pc, #504]	; (8f0 <udc_process_setup+0x2dc>)
     6f8:	88da      	ldrh	r2, [r3, #6]
     6fa:	899b      	ldrh	r3, [r3, #12]
     6fc:	4293      	cmp	r3, r2
     6fe:	d800      	bhi.n	702 <udc_process_setup+0xee>
     700:	e0d0      	b.n	8a4 <udc_process_setup+0x290>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     702:	4b7b      	ldr	r3, [pc, #492]	; (8f0 <udc_process_setup+0x2dc>)
     704:	819a      	strh	r2, [r3, #12]
     706:	e0cd      	b.n	8a4 <udc_process_setup+0x290>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     708:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
     70a:	4b7e      	ldr	r3, [pc, #504]	; (904 <udc_process_setup+0x2f0>)
     70c:	681b      	ldr	r3, [r3, #0]
     70e:	7c5b      	ldrb	r3, [r3, #17]
     710:	4293      	cmp	r3, r2
     712:	d800      	bhi.n	716 <udc_process_setup+0x102>
     714:	e793      	b.n	63e <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
     716:	4b7b      	ldr	r3, [pc, #492]	; (904 <udc_process_setup+0x2f0>)
     718:	685b      	ldr	r3, [r3, #4]
     71a:	00d2      	lsls	r2, r2, #3
     71c:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
     71e:	7883      	ldrb	r3, [r0, #2]
     720:	78c1      	ldrb	r1, [r0, #3]
     722:	0209      	lsls	r1, r1, #8
     724:	4319      	orrs	r1, r3
     726:	4b75      	ldr	r3, [pc, #468]	; (8fc <udc_process_setup+0x2e8>)
     728:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     72a:	4b71      	ldr	r3, [pc, #452]	; (8f0 <udc_process_setup+0x2dc>)
     72c:	689b      	ldr	r3, [r3, #8]
     72e:	2202      	movs	r2, #2
     730:	705a      	strb	r2, [r3, #1]
     732:	e7e0      	b.n	6f6 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     734:	23ff      	movs	r3, #255	; 0xff
     736:	401a      	ands	r2, r3
     738:	2a01      	cmp	r2, #1
     73a:	d01d      	beq.n	778 <udc_process_setup+0x164>
     73c:	2a00      	cmp	r2, #0
     73e:	d016      	beq.n	76e <udc_process_setup+0x15a>
     740:	2a02      	cmp	r2, #2
     742:	d000      	beq.n	746 <udc_process_setup+0x132>
     744:	e774      	b.n	630 <udc_process_setup+0x1c>
		str = udc_string_product_name;
     746:	4c70      	ldr	r4, [pc, #448]	; (908 <udc_process_setup+0x2f4>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     748:	2014      	movs	r0, #20
     74a:	4a70      	ldr	r2, [pc, #448]	; (90c <udc_process_setup+0x2f8>)
     74c:	3202      	adds	r2, #2
     74e:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     750:	5ce1      	ldrb	r1, [r4, r3]
     752:	8011      	strh	r1, [r2, #0]
     754:	3301      	adds	r3, #1
     756:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
     758:	b2d9      	uxtb	r1, r3
     75a:	4281      	cmp	r1, r0
     75c:	d3f8      	bcc.n	750 <udc_process_setup+0x13c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     75e:	0041      	lsls	r1, r0, #1
     760:	3102      	adds	r1, #2
     762:	486a      	ldr	r0, [pc, #424]	; (90c <udc_process_setup+0x2f8>)
     764:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     766:	b289      	uxth	r1, r1
     768:	4b64      	ldr	r3, [pc, #400]	; (8fc <udc_process_setup+0x2e8>)
     76a:	4798      	blx	r3
     76c:	e7c3      	b.n	6f6 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     76e:	2104      	movs	r1, #4
     770:	4867      	ldr	r0, [pc, #412]	; (910 <udc_process_setup+0x2fc>)
     772:	4b62      	ldr	r3, [pc, #392]	; (8fc <udc_process_setup+0x2e8>)
     774:	4798      	blx	r3
     776:	e7be      	b.n	6f6 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
     778:	4c66      	ldr	r4, [pc, #408]	; (914 <udc_process_setup+0x300>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     77a:	2019      	movs	r0, #25
     77c:	e7e5      	b.n	74a <udc_process_setup+0x136>
	if (udd_g_ctrlreq.req.wLength != 1) {
     77e:	2a01      	cmp	r2, #1
     780:	d000      	beq.n	784 <udc_process_setup+0x170>
     782:	e75c      	b.n	63e <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
     784:	2101      	movs	r1, #1
     786:	4864      	ldr	r0, [pc, #400]	; (918 <udc_process_setup+0x304>)
     788:	4b5c      	ldr	r3, [pc, #368]	; (8fc <udc_process_setup+0x2e8>)
     78a:	4798      	blx	r3
     78c:	e08a      	b.n	8a4 <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
     78e:	4958      	ldr	r1, [pc, #352]	; (8f0 <udc_process_setup+0x2dc>)
     790:	7849      	ldrb	r1, [r1, #1]
     792:	290a      	cmp	r1, #10
     794:	d000      	beq.n	798 <udc_process_setup+0x184>
     796:	e772      	b.n	67e <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
     798:	2a01      	cmp	r2, #1
     79a:	d000      	beq.n	79e <udc_process_setup+0x18a>
     79c:	e0de      	b.n	95c <udc_process_setup+0x348>
	if (!udc_num_configuration) {
     79e:	4b5e      	ldr	r3, [pc, #376]	; (918 <udc_process_setup+0x304>)
     7a0:	781b      	ldrb	r3, [r3, #0]
     7a2:	2b00      	cmp	r3, #0
     7a4:	d100      	bne.n	7a8 <udc_process_setup+0x194>
     7a6:	e0d9      	b.n	95c <udc_process_setup+0x348>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     7a8:	4b51      	ldr	r3, [pc, #324]	; (8f0 <udc_process_setup+0x2dc>)
     7aa:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     7ac:	4b5b      	ldr	r3, [pc, #364]	; (91c <udc_process_setup+0x308>)
     7ae:	681d      	ldr	r5, [r3, #0]
     7b0:	682b      	ldr	r3, [r5, #0]
     7b2:	791b      	ldrb	r3, [r3, #4]
     7b4:	42a3      	cmp	r3, r4
     7b6:	d800      	bhi.n	7ba <udc_process_setup+0x1a6>
     7b8:	e0d0      	b.n	95c <udc_process_setup+0x348>
	if (!udc_update_iface_desc(iface_num, 0)) {
     7ba:	2100      	movs	r1, #0
     7bc:	0020      	movs	r0, r4
     7be:	4b58      	ldr	r3, [pc, #352]	; (920 <udc_process_setup+0x30c>)
     7c0:	4798      	blx	r3
     7c2:	2800      	cmp	r0, #0
     7c4:	d100      	bne.n	7c8 <udc_process_setup+0x1b4>
     7c6:	e733      	b.n	630 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     7c8:	686b      	ldr	r3, [r5, #4]
     7ca:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
     7cc:	58e3      	ldr	r3, [r4, r3]
     7ce:	68db      	ldr	r3, [r3, #12]
     7d0:	4798      	blx	r3
     7d2:	4b54      	ldr	r3, [pc, #336]	; (924 <udc_process_setup+0x310>)
     7d4:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
     7d6:	2101      	movs	r1, #1
     7d8:	0018      	movs	r0, r3
     7da:	4b48      	ldr	r3, [pc, #288]	; (8fc <udc_process_setup+0x2e8>)
     7dc:	4798      	blx	r3
     7de:	e061      	b.n	8a4 <udc_process_setup+0x290>
     7e0:	221f      	movs	r2, #31
     7e2:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     7e4:	d172      	bne.n	8cc <udc_process_setup+0x2b8>
			switch (udd_g_ctrlreq.req.bRequest) {
     7e6:	4a42      	ldr	r2, [pc, #264]	; (8f0 <udc_process_setup+0x2dc>)
     7e8:	7852      	ldrb	r2, [r2, #1]
     7ea:	2a03      	cmp	r2, #3
     7ec:	d05c      	beq.n	8a8 <udc_process_setup+0x294>
     7ee:	b2d1      	uxtb	r1, r2
     7f0:	2903      	cmp	r1, #3
     7f2:	d93b      	bls.n	86c <udc_process_setup+0x258>
     7f4:	2a05      	cmp	r2, #5
     7f6:	d04d      	beq.n	894 <udc_process_setup+0x280>
     7f8:	2a09      	cmp	r2, #9
     7fa:	d167      	bne.n	8cc <udc_process_setup+0x2b8>
	if (udd_g_ctrlreq.req.wLength) {
     7fc:	4b3c      	ldr	r3, [pc, #240]	; (8f0 <udc_process_setup+0x2dc>)
     7fe:	88db      	ldrh	r3, [r3, #6]
     800:	2b00      	cmp	r3, #0
     802:	d000      	beq.n	806 <udc_process_setup+0x1f2>
     804:	e71b      	b.n	63e <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
     806:	4b48      	ldr	r3, [pc, #288]	; (928 <udc_process_setup+0x314>)
     808:	4798      	blx	r3
     80a:	2800      	cmp	r0, #0
     80c:	d100      	bne.n	810 <udc_process_setup+0x1fc>
     80e:	e70f      	b.n	630 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     810:	4b37      	ldr	r3, [pc, #220]	; (8f0 <udc_process_setup+0x2dc>)
     812:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     814:	4b3b      	ldr	r3, [pc, #236]	; (904 <udc_process_setup+0x2f0>)
     816:	681b      	ldr	r3, [r3, #0]
     818:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     81a:	429a      	cmp	r2, r3
     81c:	dd00      	ble.n	820 <udc_process_setup+0x20c>
     81e:	e707      	b.n	630 <udc_process_setup+0x1c>
	udc_reset();
     820:	4b42      	ldr	r3, [pc, #264]	; (92c <udc_process_setup+0x318>)
     822:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     824:	4b32      	ldr	r3, [pc, #200]	; (8f0 <udc_process_setup+0x2dc>)
     826:	789b      	ldrb	r3, [r3, #2]
     828:	4a3b      	ldr	r2, [pc, #236]	; (918 <udc_process_setup+0x304>)
     82a:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     82c:	2b00      	cmp	r3, #0
     82e:	d039      	beq.n	8a4 <udc_process_setup+0x290>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     830:	4a3f      	ldr	r2, [pc, #252]	; (930 <udc_process_setup+0x31c>)
     832:	4694      	mov	ip, r2
     834:	4463      	add	r3, ip
     836:	00db      	lsls	r3, r3, #3
     838:	4a32      	ldr	r2, [pc, #200]	; (904 <udc_process_setup+0x2f0>)
     83a:	6852      	ldr	r2, [r2, #4]
     83c:	18d3      	adds	r3, r2, r3
     83e:	4a37      	ldr	r2, [pc, #220]	; (91c <udc_process_setup+0x308>)
     840:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     842:	681b      	ldr	r3, [r3, #0]
     844:	791b      	ldrb	r3, [r3, #4]
     846:	2b00      	cmp	r3, #0
     848:	d02c      	beq.n	8a4 <udc_process_setup+0x290>
     84a:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
     84c:	4d39      	ldr	r5, [pc, #228]	; (934 <udc_process_setup+0x320>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     84e:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
     850:	2100      	movs	r1, #0
     852:	0020      	movs	r0, r4
     854:	47a8      	blx	r5
     856:	2800      	cmp	r0, #0
     858:	d100      	bne.n	85c <udc_process_setup+0x248>
     85a:	e6e9      	b.n	630 <udc_process_setup+0x1c>
			iface_num++) {
     85c:	3401      	adds	r4, #1
     85e:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     860:	6833      	ldr	r3, [r6, #0]
     862:	681b      	ldr	r3, [r3, #0]
     864:	791b      	ldrb	r3, [r3, #4]
     866:	42a3      	cmp	r3, r4
     868:	d8f2      	bhi.n	850 <udc_process_setup+0x23c>
     86a:	e01b      	b.n	8a4 <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
     86c:	2a01      	cmp	r2, #1
     86e:	d12d      	bne.n	8cc <udc_process_setup+0x2b8>
	if (udd_g_ctrlreq.req.wLength) {
     870:	4b1f      	ldr	r3, [pc, #124]	; (8f0 <udc_process_setup+0x2dc>)
     872:	88db      	ldrh	r3, [r3, #6]
     874:	2b00      	cmp	r3, #0
     876:	d000      	beq.n	87a <udc_process_setup+0x266>
     878:	e6e1      	b.n	63e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     87a:	4b1d      	ldr	r3, [pc, #116]	; (8f0 <udc_process_setup+0x2dc>)
     87c:	885b      	ldrh	r3, [r3, #2]
     87e:	2b01      	cmp	r3, #1
     880:	d000      	beq.n	884 <udc_process_setup+0x270>
     882:	e6dc      	b.n	63e <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     884:	4a1e      	ldr	r2, [pc, #120]	; (900 <udc_process_setup+0x2ec>)
     886:	8813      	ldrh	r3, [r2, #0]
     888:	2102      	movs	r1, #2
     88a:	438b      	bics	r3, r1
     88c:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_DISABLE();
     88e:	4b2a      	ldr	r3, [pc, #168]	; (938 <udc_process_setup+0x324>)
     890:	4798      	blx	r3
     892:	e007      	b.n	8a4 <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength) {
     894:	4b16      	ldr	r3, [pc, #88]	; (8f0 <udc_process_setup+0x2dc>)
     896:	88db      	ldrh	r3, [r3, #6]
     898:	2b00      	cmp	r3, #0
     89a:	d000      	beq.n	89e <udc_process_setup+0x28a>
     89c:	e6cf      	b.n	63e <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
     89e:	4a27      	ldr	r2, [pc, #156]	; (93c <udc_process_setup+0x328>)
     8a0:	4b13      	ldr	r3, [pc, #76]	; (8f0 <udc_process_setup+0x2dc>)
     8a2:	611a      	str	r2, [r3, #16]
			return true;
     8a4:	2001      	movs	r0, #1
     8a6:	e6d2      	b.n	64e <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
     8a8:	4b11      	ldr	r3, [pc, #68]	; (8f0 <udc_process_setup+0x2dc>)
     8aa:	88db      	ldrh	r3, [r3, #6]
     8ac:	2b00      	cmp	r3, #0
     8ae:	d000      	beq.n	8b2 <udc_process_setup+0x29e>
     8b0:	e6c5      	b.n	63e <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
     8b2:	4b0f      	ldr	r3, [pc, #60]	; (8f0 <udc_process_setup+0x2dc>)
     8b4:	885b      	ldrh	r3, [r3, #2]
	return false;
     8b6:	2000      	movs	r0, #0
	switch (udd_g_ctrlreq.req.wValue) {
     8b8:	2b01      	cmp	r3, #1
     8ba:	d114      	bne.n	8e6 <udc_process_setup+0x2d2>
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
     8bc:	4a10      	ldr	r2, [pc, #64]	; (900 <udc_process_setup+0x2ec>)
     8be:	8813      	ldrh	r3, [r2, #0]
     8c0:	2102      	movs	r1, #2
     8c2:	430b      	orrs	r3, r1
     8c4:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_ENABLE();
     8c6:	4b1e      	ldr	r3, [pc, #120]	; (940 <udc_process_setup+0x32c>)
     8c8:	4798      	blx	r3
     8ca:	e7eb      	b.n	8a4 <udc_process_setup+0x290>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     8cc:	2b01      	cmp	r3, #1
     8ce:	d039      	beq.n	944 <udc_process_setup+0x330>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     8d0:	2b02      	cmp	r3, #2
     8d2:	d000      	beq.n	8d6 <udc_process_setup+0x2c2>
     8d4:	e6ac      	b.n	630 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     8d6:	4b06      	ldr	r3, [pc, #24]	; (8f0 <udc_process_setup+0x2dc>)
     8d8:	785b      	ldrb	r3, [r3, #1]
     8da:	2b01      	cmp	r3, #1
     8dc:	d074      	beq.n	9c8 <udc_process_setup+0x3b4>
     8de:	2b03      	cmp	r3, #3
     8e0:	d100      	bne.n	8e4 <udc_process_setup+0x2d0>
     8e2:	e080      	b.n	9e6 <udc_process_setup+0x3d2>
	return false;
     8e4:	2000      	movs	r0, #0
		if (udc_reqstd()) {
     8e6:	2800      	cmp	r0, #0
     8e8:	d000      	beq.n	8ec <udc_process_setup+0x2d8>
     8ea:	e6b0      	b.n	64e <udc_process_setup+0x3a>
     8ec:	e6a0      	b.n	630 <udc_process_setup+0x1c>
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	200029d4 	.word	0x200029d4
     8f4:	0000210d 	.word	0x0000210d
     8f8:	20000546 	.word	0x20000546
     8fc:	0000248d 	.word	0x0000248d
     900:	20000544 	.word	0x20000544
     904:	2000004c 	.word	0x2000004c
     908:	200000f8 	.word	0x200000f8
     90c:	200000a4 	.word	0x200000a4
     910:	200000d8 	.word	0x200000d8
     914:	200000dc 	.word	0x200000dc
     918:	2000054c 	.word	0x2000054c
     91c:	20000550 	.word	0x20000550
     920:	00000421 	.word	0x00000421
     924:	20000548 	.word	0x20000548
     928:	0000247d 	.word	0x0000247d
     92c:	00000571 	.word	0x00000571
     930:	1fffffff 	.word	0x1fffffff
     934:	00000501 	.word	0x00000501
     938:	00003cb1 	.word	0x00003cb1
     93c:	00000409 	.word	0x00000409
     940:	00003cb3 	.word	0x00003cb3
			switch (udd_g_ctrlreq.req.bRequest) {
     944:	4a46      	ldr	r2, [pc, #280]	; (a60 <udc_process_setup+0x44c>)
     946:	7852      	ldrb	r2, [r2, #1]
     948:	2a0b      	cmp	r2, #11
     94a:	d1c1      	bne.n	8d0 <udc_process_setup+0x2bc>
	if (udd_g_ctrlreq.req.wLength) {
     94c:	4b44      	ldr	r3, [pc, #272]	; (a60 <udc_process_setup+0x44c>)
     94e:	88db      	ldrh	r3, [r3, #6]
     950:	2b00      	cmp	r3, #0
     952:	d103      	bne.n	95c <udc_process_setup+0x348>
	if (!udc_num_configuration) {
     954:	4b43      	ldr	r3, [pc, #268]	; (a64 <udc_process_setup+0x450>)
     956:	781b      	ldrb	r3, [r3, #0]
     958:	2b00      	cmp	r3, #0
     95a:	d127      	bne.n	9ac <udc_process_setup+0x398>
	if (0 == udc_num_configuration) {
     95c:	4b41      	ldr	r3, [pc, #260]	; (a64 <udc_process_setup+0x450>)
     95e:	781b      	ldrb	r3, [r3, #0]
	return false;
     960:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
     962:	2b00      	cmp	r3, #0
     964:	d100      	bne.n	968 <udc_process_setup+0x354>
     966:	e672      	b.n	64e <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     968:	4b3d      	ldr	r3, [pc, #244]	; (a60 <udc_process_setup+0x44c>)
     96a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     96c:	4b3e      	ldr	r3, [pc, #248]	; (a68 <udc_process_setup+0x454>)
     96e:	681d      	ldr	r5, [r3, #0]
     970:	682b      	ldr	r3, [r5, #0]
     972:	791b      	ldrb	r3, [r3, #4]
     974:	42a3      	cmp	r3, r4
     976:	d800      	bhi.n	97a <udc_process_setup+0x366>
     978:	e669      	b.n	64e <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
     97a:	2100      	movs	r1, #0
     97c:	0020      	movs	r0, r4
     97e:	4b3b      	ldr	r3, [pc, #236]	; (a6c <udc_process_setup+0x458>)
     980:	4798      	blx	r3
     982:	2800      	cmp	r0, #0
     984:	d100      	bne.n	988 <udc_process_setup+0x374>
     986:	e65a      	b.n	63e <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     988:	686b      	ldr	r3, [r5, #4]
     98a:	00a2      	lsls	r2, r4, #2
     98c:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     98e:	68eb      	ldr	r3, [r5, #12]
     990:	4798      	blx	r3
     992:	0001      	movs	r1, r0
     994:	0020      	movs	r0, r4
     996:	4b35      	ldr	r3, [pc, #212]	; (a6c <udc_process_setup+0x458>)
     998:	4798      	blx	r3
     99a:	2800      	cmp	r0, #0
     99c:	d100      	bne.n	9a0 <udc_process_setup+0x38c>
     99e:	e64e      	b.n	63e <udc_process_setup+0x2a>
	return udi_api->setup();
     9a0:	68ab      	ldr	r3, [r5, #8]
     9a2:	4798      	blx	r3
		if (udc_req_iface()) {
     9a4:	2800      	cmp	r0, #0
     9a6:	d000      	beq.n	9aa <udc_process_setup+0x396>
     9a8:	e651      	b.n	64e <udc_process_setup+0x3a>
     9aa:	e648      	b.n	63e <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     9ac:	4b2c      	ldr	r3, [pc, #176]	; (a60 <udc_process_setup+0x44c>)
     9ae:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     9b0:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
     9b2:	0028      	movs	r0, r5
     9b4:	4b2e      	ldr	r3, [pc, #184]	; (a70 <udc_process_setup+0x45c>)
     9b6:	4798      	blx	r3
     9b8:	2800      	cmp	r0, #0
     9ba:	d100      	bne.n	9be <udc_process_setup+0x3aa>
     9bc:	e638      	b.n	630 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
     9be:	b2e1      	uxtb	r1, r4
     9c0:	0028      	movs	r0, r5
     9c2:	4b2c      	ldr	r3, [pc, #176]	; (a74 <udc_process_setup+0x460>)
     9c4:	4798      	blx	r3
     9c6:	e78e      	b.n	8e6 <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength) {
     9c8:	4b25      	ldr	r3, [pc, #148]	; (a60 <udc_process_setup+0x44c>)
     9ca:	88db      	ldrh	r3, [r3, #6]
     9cc:	2b00      	cmp	r3, #0
     9ce:	d000      	beq.n	9d2 <udc_process_setup+0x3be>
     9d0:	e635      	b.n	63e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     9d2:	4b23      	ldr	r3, [pc, #140]	; (a60 <udc_process_setup+0x44c>)
     9d4:	885b      	ldrh	r3, [r3, #2]
     9d6:	2b00      	cmp	r3, #0
     9d8:	d000      	beq.n	9dc <udc_process_setup+0x3c8>
     9da:	e630      	b.n	63e <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     9dc:	4b20      	ldr	r3, [pc, #128]	; (a60 <udc_process_setup+0x44c>)
     9de:	7918      	ldrb	r0, [r3, #4]
     9e0:	4b25      	ldr	r3, [pc, #148]	; (a78 <udc_process_setup+0x464>)
     9e2:	4798      	blx	r3
     9e4:	e77f      	b.n	8e6 <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength) {
     9e6:	4b1e      	ldr	r3, [pc, #120]	; (a60 <udc_process_setup+0x44c>)
     9e8:	88db      	ldrh	r3, [r3, #6]
     9ea:	2b00      	cmp	r3, #0
     9ec:	d000      	beq.n	9f0 <udc_process_setup+0x3dc>
     9ee:	e626      	b.n	63e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     9f0:	4b1b      	ldr	r3, [pc, #108]	; (a60 <udc_process_setup+0x44c>)
     9f2:	885b      	ldrh	r3, [r3, #2]
     9f4:	2b00      	cmp	r3, #0
     9f6:	d000      	beq.n	9fa <udc_process_setup+0x3e6>
     9f8:	e621      	b.n	63e <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     9fa:	4c19      	ldr	r4, [pc, #100]	; (a60 <udc_process_setup+0x44c>)
     9fc:	7920      	ldrb	r0, [r4, #4]
     9fe:	4b1f      	ldr	r3, [pc, #124]	; (a7c <udc_process_setup+0x468>)
     a00:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     a02:	7920      	ldrb	r0, [r4, #4]
     a04:	4b1e      	ldr	r3, [pc, #120]	; (a80 <udc_process_setup+0x46c>)
     a06:	4798      	blx	r3
     a08:	e76d      	b.n	8e6 <udc_process_setup+0x2d2>
		return false;
     a0a:	2000      	movs	r0, #0
     a0c:	e76b      	b.n	8e6 <udc_process_setup+0x2d2>
	if (0 == udc_num_configuration) {
     a0e:	4b15      	ldr	r3, [pc, #84]	; (a64 <udc_process_setup+0x450>)
     a10:	781b      	ldrb	r3, [r3, #0]
     a12:	2b00      	cmp	r3, #0
     a14:	d100      	bne.n	a18 <udc_process_setup+0x404>
     a16:	e61a      	b.n	64e <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a18:	4b13      	ldr	r3, [pc, #76]	; (a68 <udc_process_setup+0x454>)
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	681a      	ldr	r2, [r3, #0]
     a1e:	7912      	ldrb	r2, [r2, #4]
     a20:	2a00      	cmp	r2, #0
     a22:	d01a      	beq.n	a5a <udc_process_setup+0x446>
     a24:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     a26:	4e11      	ldr	r6, [pc, #68]	; (a6c <udc_process_setup+0x458>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a28:	4f0f      	ldr	r7, [pc, #60]	; (a68 <udc_process_setup+0x454>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     a2a:	685b      	ldr	r3, [r3, #4]
     a2c:	00aa      	lsls	r2, r5, #2
     a2e:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     a30:	68e3      	ldr	r3, [r4, #12]
     a32:	4798      	blx	r3
     a34:	0001      	movs	r1, r0
     a36:	0028      	movs	r0, r5
     a38:	47b0      	blx	r6
     a3a:	2800      	cmp	r0, #0
     a3c:	d100      	bne.n	a40 <udc_process_setup+0x42c>
     a3e:	e606      	b.n	64e <udc_process_setup+0x3a>
		if (udi_api->setup()) {
     a40:	68a3      	ldr	r3, [r4, #8]
     a42:	4798      	blx	r3
     a44:	2800      	cmp	r0, #0
     a46:	d000      	beq.n	a4a <udc_process_setup+0x436>
     a48:	e601      	b.n	64e <udc_process_setup+0x3a>
			iface_num++) {
     a4a:	3501      	adds	r5, #1
     a4c:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a4e:	683b      	ldr	r3, [r7, #0]
     a50:	681a      	ldr	r2, [r3, #0]
     a52:	7912      	ldrb	r2, [r2, #4]
     a54:	42aa      	cmp	r2, r5
     a56:	d8e8      	bhi.n	a2a <udc_process_setup+0x416>
     a58:	e5f9      	b.n	64e <udc_process_setup+0x3a>
	return false;
     a5a:	2000      	movs	r0, #0
     a5c:	e5f7      	b.n	64e <udc_process_setup+0x3a>
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	200029d4 	.word	0x200029d4
     a64:	2000054c 	.word	0x2000054c
     a68:	20000550 	.word	0x20000550
     a6c:	00000421 	.word	0x00000421
     a70:	00000495 	.word	0x00000495
     a74:	00000501 	.word	0x00000501
     a78:	00002251 	.word	0x00002251
     a7c:	00001f71 	.word	0x00001f71
     a80:	00002121 	.word	0x00002121

00000a84 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     a84:	4a06      	ldr	r2, [pc, #24]	; (aa0 <_extint_enable+0x1c>)
     a86:	7813      	ldrb	r3, [r2, #0]
     a88:	2102      	movs	r1, #2
     a8a:	430b      	orrs	r3, r1
     a8c:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     a8e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     a90:	6853      	ldr	r3, [r2, #4]
     a92:	4219      	tst	r1, r3
     a94:	d1fc      	bne.n	a90 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     a96:	6853      	ldr	r3, [r2, #4]
     a98:	4218      	tst	r0, r3
     a9a:	d1f9      	bne.n	a90 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     a9c:	4770      	bx	lr
     a9e:	46c0      	nop			; (mov r8, r8)
     aa0:	40002400 	.word	0x40002400

00000aa4 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     aa4:	4a06      	ldr	r2, [pc, #24]	; (ac0 <_extint_disable+0x1c>)
     aa6:	7813      	ldrb	r3, [r2, #0]
     aa8:	2102      	movs	r1, #2
     aaa:	438b      	bics	r3, r1
     aac:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     aae:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     ab0:	6853      	ldr	r3, [r2, #4]
     ab2:	4219      	tst	r1, r3
     ab4:	d1fc      	bne.n	ab0 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     ab6:	6853      	ldr	r3, [r2, #4]
     ab8:	4218      	tst	r0, r3
     aba:	d1f9      	bne.n	ab0 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     abc:	4770      	bx	lr
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	40002400 	.word	0x40002400

00000ac4 <_system_extint_init>:
{
     ac4:	b500      	push	{lr}
     ac6:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     ac8:	4a17      	ldr	r2, [pc, #92]	; (b28 <_system_extint_init+0x64>)
     aca:	6951      	ldr	r1, [r2, #20]
     acc:	2380      	movs	r3, #128	; 0x80
     ace:	009b      	lsls	r3, r3, #2
     ad0:	430b      	orrs	r3, r1
     ad2:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     ad4:	a901      	add	r1, sp, #4
     ad6:	2300      	movs	r3, #0
     ad8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     ada:	2003      	movs	r0, #3
     adc:	4b13      	ldr	r3, [pc, #76]	; (b2c <_system_extint_init+0x68>)
     ade:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     ae0:	2003      	movs	r0, #3
     ae2:	4b13      	ldr	r3, [pc, #76]	; (b30 <_system_extint_init+0x6c>)
     ae4:	4798      	blx	r3
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     ae6:	4a13      	ldr	r2, [pc, #76]	; (b34 <_system_extint_init+0x70>)
     ae8:	7813      	ldrb	r3, [r2, #0]
     aea:	2101      	movs	r1, #1
     aec:	430b      	orrs	r3, r1
     aee:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     af0:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     af2:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     af4:	6853      	ldr	r3, [r2, #4]
     af6:	4219      	tst	r1, r3
     af8:	d1fc      	bne.n	af4 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     afa:	6853      	ldr	r3, [r2, #4]
     afc:	4218      	tst	r0, r3
     afe:	d1f9      	bne.n	af4 <_system_extint_init+0x30>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     b00:	4a0c      	ldr	r2, [pc, #48]	; (b34 <_system_extint_init+0x70>)
     b02:	7813      	ldrb	r3, [r2, #0]
     b04:	2110      	movs	r1, #16
     b06:	438b      	bics	r3, r1
     b08:	7013      	strb	r3, [r2, #0]
     b0a:	4b0b      	ldr	r3, [pc, #44]	; (b38 <_system_extint_init+0x74>)
     b0c:	0019      	movs	r1, r3
     b0e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     b10:	2200      	movs	r2, #0
     b12:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     b14:	428b      	cmp	r3, r1
     b16:	d1fc      	bne.n	b12 <_system_extint_init+0x4e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     b18:	2208      	movs	r2, #8
     b1a:	4b08      	ldr	r3, [pc, #32]	; (b3c <_system_extint_init+0x78>)
     b1c:	601a      	str	r2, [r3, #0]
	_extint_enable();
     b1e:	4b08      	ldr	r3, [pc, #32]	; (b40 <_system_extint_init+0x7c>)
     b20:	4798      	blx	r3
}
     b22:	b003      	add	sp, #12
     b24:	bd00      	pop	{pc}
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	40000400 	.word	0x40000400
     b2c:	0000e17d 	.word	0x0000e17d
     b30:	0000e10d 	.word	0x0000e10d
     b34:	40002400 	.word	0x40002400
     b38:	2000279c 	.word	0x2000279c
     b3c:	e000e100 	.word	0xe000e100
     b40:	00000a85 	.word	0x00000a85

00000b44 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     b44:	2300      	movs	r3, #0
     b46:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     b48:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     b4a:	2201      	movs	r2, #1
     b4c:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     b4e:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     b50:	3201      	adds	r2, #1
     b52:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     b54:	7243      	strb	r3, [r0, #9]
}
     b56:	4770      	bx	lr

00000b58 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     b58:	b5f0      	push	{r4, r5, r6, r7, lr}
     b5a:	b083      	sub	sp, #12
     b5c:	0005      	movs	r5, r0
     b5e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     b60:	4b1c      	ldr	r3, [pc, #112]	; (bd4 <extint_chan_set_config+0x7c>)
     b62:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b64:	a901      	add	r1, sp, #4
     b66:	2300      	movs	r3, #0
     b68:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     b6a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     b6c:	7923      	ldrb	r3, [r4, #4]
     b6e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     b70:	7a23      	ldrb	r3, [r4, #8]
     b72:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     b74:	7820      	ldrb	r0, [r4, #0]
     b76:	4b18      	ldr	r3, [pc, #96]	; (bd8 <extint_chan_set_config+0x80>)
     b78:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     b7a:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     b7c:	2d1f      	cmp	r5, #31
     b7e:	d800      	bhi.n	b82 <extint_chan_set_config+0x2a>
		return eics[eic_index];
     b80:	4916      	ldr	r1, [pc, #88]	; (bdc <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     b82:	2207      	movs	r2, #7
     b84:	402a      	ands	r2, r5
     b86:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     b88:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     b8a:	7aa3      	ldrb	r3, [r4, #10]
     b8c:	2b00      	cmp	r3, #0
     b8e:	d001      	beq.n	b94 <extint_chan_set_config+0x3c>
     b90:	2308      	movs	r3, #8
     b92:	431f      	orrs	r7, r3
     b94:	08eb      	lsrs	r3, r5, #3
     b96:	009b      	lsls	r3, r3, #2
     b98:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     b9a:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     b9c:	260f      	movs	r6, #15
     b9e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     ba0:	43b0      	bics	r0, r6
			(new_config << config_pos);
     ba2:	4097      	lsls	r7, r2
     ba4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     ba6:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
     ba8:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     baa:	7a63      	ldrb	r3, [r4, #9]
     bac:	2b00      	cmp	r3, #0
     bae:	d10b      	bne.n	bc8 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
     bb0:	698a      	ldr	r2, [r1, #24]
     bb2:	2301      	movs	r3, #1
     bb4:	40ab      	lsls	r3, r5
     bb6:	43db      	mvns	r3, r3
     bb8:	041b      	lsls	r3, r3, #16
     bba:	0c1b      	lsrs	r3, r3, #16
     bbc:	4013      	ands	r3, r2
     bbe:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
     bc0:	4b07      	ldr	r3, [pc, #28]	; (be0 <extint_chan_set_config+0x88>)
     bc2:	4798      	blx	r3
}
     bc4:	b003      	add	sp, #12
     bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
     bc8:	698a      	ldr	r2, [r1, #24]
     bca:	2301      	movs	r3, #1
     bcc:	40ab      	lsls	r3, r5
     bce:	4313      	orrs	r3, r2
     bd0:	618b      	str	r3, [r1, #24]
     bd2:	e7f5      	b.n	bc0 <extint_chan_set_config+0x68>
     bd4:	00000aa5 	.word	0x00000aa5
     bd8:	0000e279 	.word	0x0000e279
     bdc:	40002400 	.word	0x40002400
     be0:	00000a85 	.word	0x00000a85

00000be4 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     be4:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
     be6:	6918      	ldr	r0, [r3, #16]
     be8:	1e43      	subs	r3, r0, #1
     bea:	4198      	sbcs	r0, r3
     bec:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
     bee:	4770      	bx	lr

00000bf0 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     bf0:	b570      	push	{r4, r5, r6, lr}
     bf2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     bf4:	6806      	ldr	r6, [r0, #0]
     bf6:	2204      	movs	r2, #4
     bf8:	4b08      	ldr	r3, [pc, #32]	; (c1c <rtc_count_enable+0x2c>)
     bfa:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     bfc:	4d08      	ldr	r5, [pc, #32]	; (c20 <rtc_count_enable+0x30>)
     bfe:	0020      	movs	r0, r4
     c00:	47a8      	blx	r5
     c02:	2800      	cmp	r0, #0
     c04:	d1fb      	bne.n	bfe <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
     c06:	8833      	ldrh	r3, [r6, #0]
     c08:	2202      	movs	r2, #2
     c0a:	4313      	orrs	r3, r2
     c0c:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     c0e:	4d04      	ldr	r5, [pc, #16]	; (c20 <rtc_count_enable+0x30>)
     c10:	0020      	movs	r0, r4
     c12:	47a8      	blx	r5
     c14:	2800      	cmp	r0, #0
     c16:	d1fb      	bne.n	c10 <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
     c18:	bd70      	pop	{r4, r5, r6, pc}
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	e000e100 	.word	0xe000e100
     c20:	00000be5 	.word	0x00000be5

00000c24 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     c24:	b570      	push	{r4, r5, r6, lr}
     c26:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     c28:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     c2a:	2104      	movs	r1, #4
     c2c:	2380      	movs	r3, #128	; 0x80
     c2e:	4a0a      	ldr	r2, [pc, #40]	; (c58 <rtc_count_disable+0x34>)
     c30:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     c32:	4d0a      	ldr	r5, [pc, #40]	; (c5c <rtc_count_disable+0x38>)
     c34:	0020      	movs	r0, r4
     c36:	47a8      	blx	r5
     c38:	2800      	cmp	r0, #0
     c3a:	d1fb      	bne.n	c34 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     c3c:	4b08      	ldr	r3, [pc, #32]	; (c60 <rtc_count_disable+0x3c>)
     c3e:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     c40:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
     c42:	8833      	ldrh	r3, [r6, #0]
     c44:	2202      	movs	r2, #2
     c46:	4393      	bics	r3, r2
     c48:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     c4a:	4d04      	ldr	r5, [pc, #16]	; (c5c <rtc_count_disable+0x38>)
     c4c:	0020      	movs	r0, r4
     c4e:	47a8      	blx	r5
     c50:	2800      	cmp	r0, #0
     c52:	d1fb      	bne.n	c4c <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
     c54:	bd70      	pop	{r4, r5, r6, pc}
     c56:	46c0      	nop			; (mov r8, r8)
     c58:	e000e100 	.word	0xe000e100
     c5c:	00000be5 	.word	0x00000be5
     c60:	ffff81ff 	.word	0xffff81ff

00000c64 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     c64:	b570      	push	{r4, r5, r6, lr}
     c66:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     c68:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     c6a:	4b0a      	ldr	r3, [pc, #40]	; (c94 <rtc_count_reset+0x30>)
     c6c:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     c6e:	2300      	movs	r3, #0
     c70:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
     c72:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
     c74:	4d08      	ldr	r5, [pc, #32]	; (c98 <rtc_count_reset+0x34>)
     c76:	0020      	movs	r0, r4
     c78:	47a8      	blx	r5
     c7a:	2800      	cmp	r0, #0
     c7c:	d1fb      	bne.n	c76 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
     c7e:	8833      	ldrh	r3, [r6, #0]
     c80:	2201      	movs	r2, #1
     c82:	4313      	orrs	r3, r2
     c84:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     c86:	4d04      	ldr	r5, [pc, #16]	; (c98 <rtc_count_reset+0x34>)
     c88:	0020      	movs	r0, r4
     c8a:	47a8      	blx	r5
     c8c:	2800      	cmp	r0, #0
     c8e:	d1fb      	bne.n	c88 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
     c90:	bd70      	pop	{r4, r5, r6, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	00000c25 	.word	0x00000c25
     c98:	00000be5 	.word	0x00000be5

00000c9c <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c9e:	0004      	movs	r4, r0
     ca0:	000e      	movs	r6, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     ca2:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     ca4:	4d0c      	ldr	r5, [pc, #48]	; (cd8 <rtc_count_set_count+0x3c>)
     ca6:	0020      	movs	r0, r4
     ca8:	47a8      	blx	r5
     caa:	2800      	cmp	r0, #0
     cac:	d1fb      	bne.n	ca6 <rtc_count_set_count+0xa>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     cae:	7923      	ldrb	r3, [r4, #4]
     cb0:	2b00      	cmp	r3, #0
     cb2:	d009      	beq.n	cc8 <rtc_count_set_count+0x2c>

			break;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     cb4:	2017      	movs	r0, #23
	switch(module->mode){
     cb6:	2b01      	cmp	r3, #1
     cb8:	d105      	bne.n	cc6 <rtc_count_set_count+0x2a>
			rtc_module->MODE0.COUNT.reg = count_value;
     cba:	61be      	str	r6, [r7, #24]
	}

	while (rtc_count_is_syncing(module)) {
     cbc:	4d06      	ldr	r5, [pc, #24]	; (cd8 <rtc_count_set_count+0x3c>)
     cbe:	0020      	movs	r0, r4
     cc0:	47a8      	blx	r5
     cc2:	2800      	cmp	r0, #0
     cc4:	d1fb      	bne.n	cbe <rtc_count_set_count+0x22>
		/* Wait for synchronization */
	}
	return STATUS_OK;
}
     cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(count_value > 0xffff){
     cc8:	4b04      	ldr	r3, [pc, #16]	; (cdc <rtc_count_set_count+0x40>)
				return STATUS_ERR_INVALID_ARG;
     cca:	2017      	movs	r0, #23
			if(count_value > 0xffff){
     ccc:	429e      	cmp	r6, r3
     cce:	d8fa      	bhi.n	cc6 <rtc_count_set_count+0x2a>
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     cd0:	b2b6      	uxth	r6, r6
     cd2:	833e      	strh	r6, [r7, #24]
			break;
     cd4:	e7f2      	b.n	cbc <rtc_count_set_count+0x20>
     cd6:	46c0      	nop			; (mov r8, r8)
     cd8:	00000be5 	.word	0x00000be5
     cdc:	0000ffff 	.word	0x0000ffff

00000ce0 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     ce0:	b570      	push	{r4, r5, r6, lr}
     ce2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     ce4:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
     ce6:	4d08      	ldr	r5, [pc, #32]	; (d08 <rtc_count_get_count+0x28>)
     ce8:	0020      	movs	r0, r4
     cea:	47a8      	blx	r5
     cec:	2800      	cmp	r0, #0
     cee:	d1fb      	bne.n	ce8 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
     cf0:	7923      	ldrb	r3, [r4, #4]
     cf2:	2b00      	cmp	r3, #0
     cf4:	d004      	beq.n	d00 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     cf6:	2000      	movs	r0, #0
	switch (module->mode) {
     cf8:	2b01      	cmp	r3, #1
     cfa:	d100      	bne.n	cfe <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
     cfc:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
     cfe:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     d00:	8b30      	ldrh	r0, [r6, #24]
     d02:	b280      	uxth	r0, r0
			break;
     d04:	e7fb      	b.n	cfe <rtc_count_get_count+0x1e>
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	00000be5 	.word	0x00000be5

00000d0c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d0e:	b083      	sub	sp, #12
     d10:	0004      	movs	r4, r0
     d12:	9101      	str	r1, [sp, #4]
     d14:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d16:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     d18:	4f13      	ldr	r7, [pc, #76]	; (d68 <rtc_count_set_compare+0x5c>)
     d1a:	0020      	movs	r0, r4
     d1c:	47b8      	blx	r7
     d1e:	2800      	cmp	r0, #0
     d20:	d1fb      	bne.n	d1a <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     d22:	7923      	ldrb	r3, [r4, #4]
     d24:	2b00      	cmp	r3, #0
     d26:	d00e      	beq.n	d46 <rtc_count_set_compare+0x3a>
     d28:	2b01      	cmp	r3, #1
     d2a:	d119      	bne.n	d60 <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
     d2c:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
     d2e:	2d01      	cmp	r5, #1
     d30:	d817      	bhi.n	d62 <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     d32:	3508      	adds	r5, #8
     d34:	00ad      	lsls	r5, r5, #2
     d36:	9b01      	ldr	r3, [sp, #4]
     d38:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
     d3a:	4d0b      	ldr	r5, [pc, #44]	; (d68 <rtc_count_set_compare+0x5c>)
     d3c:	0020      	movs	r0, r4
     d3e:	47a8      	blx	r5
     d40:	2800      	cmp	r0, #0
     d42:	d1fb      	bne.n	d3c <rtc_count_set_compare+0x30>
     d44:	e00d      	b.n	d62 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     d46:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     d48:	2d02      	cmp	r5, #2
     d4a:	d80a      	bhi.n	d62 <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
     d4c:	4b07      	ldr	r3, [pc, #28]	; (d6c <rtc_count_set_compare+0x60>)
     d4e:	9a01      	ldr	r2, [sp, #4]
     d50:	429a      	cmp	r2, r3
     d52:	d806      	bhi.n	d62 <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     d54:	466b      	mov	r3, sp
     d56:	889b      	ldrh	r3, [r3, #4]
     d58:	3510      	adds	r5, #16
     d5a:	006d      	lsls	r5, r5, #1
     d5c:	53ab      	strh	r3, [r5, r6]
			break;
     d5e:	e7ec      	b.n	d3a <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
     d60:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
     d62:	b003      	add	sp, #12
     d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	00000be5 	.word	0x00000be5
     d6c:	0000ffff 	.word	0x0000ffff

00000d70 <rtc_count_init>:
{
     d70:	b570      	push	{r4, r5, r6, lr}
     d72:	0004      	movs	r4, r0
     d74:	0015      	movs	r5, r2
	module->hw = hw;
     d76:	6001      	str	r1, [r0, #0]
     d78:	4a1f      	ldr	r2, [pc, #124]	; (df8 <rtc_count_init+0x88>)
     d7a:	6951      	ldr	r1, [r2, #20]
     d7c:	2380      	movs	r3, #128	; 0x80
     d7e:	005b      	lsls	r3, r3, #1
     d80:	430b      	orrs	r3, r1
     d82:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
     d84:	2200      	movs	r2, #0
     d86:	4b1d      	ldr	r3, [pc, #116]	; (dfc <rtc_count_init+0x8c>)
     d88:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
     d8a:	4b1d      	ldr	r3, [pc, #116]	; (e00 <rtc_count_init+0x90>)
     d8c:	4798      	blx	r3
	module->mode                = config->mode;
     d8e:	78ab      	ldrb	r3, [r5, #2]
     d90:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
     d92:	4b1c      	ldr	r3, [pc, #112]	; (e04 <rtc_count_init+0x94>)
     d94:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
     d96:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
     d98:	792b      	ldrb	r3, [r5, #4]
     d9a:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
     d9c:	8829      	ldrh	r1, [r5, #0]
     d9e:	430b      	orrs	r3, r1
     da0:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
     da2:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
     da4:	78ab      	ldrb	r3, [r5, #2]
     da6:	2b00      	cmp	r3, #0
     da8:	d013      	beq.n	dd2 <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
     daa:	2017      	movs	r0, #23
	switch (config->mode) {
     dac:	2b01      	cmp	r3, #1
     dae:	d10f      	bne.n	dd0 <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
     db0:	8813      	ldrh	r3, [r2, #0]
     db2:	b29b      	uxth	r3, r3
     db4:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
     db6:	78eb      	ldrb	r3, [r5, #3]
     db8:	2b00      	cmp	r3, #0
     dba:	d003      	beq.n	dc4 <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
     dbc:	8813      	ldrh	r3, [r2, #0]
     dbe:	2180      	movs	r1, #128	; 0x80
     dc0:	430b      	orrs	r3, r1
     dc2:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
     dc4:	68a9      	ldr	r1, [r5, #8]
     dc6:	2200      	movs	r2, #0
     dc8:	0020      	movs	r0, r4
     dca:	4b0f      	ldr	r3, [pc, #60]	; (e08 <rtc_count_init+0x98>)
     dcc:	4798      	blx	r3
	return STATUS_OK;
     dce:	2000      	movs	r0, #0
}
     dd0:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
     dd2:	8813      	ldrh	r3, [r2, #0]
     dd4:	2104      	movs	r1, #4
     dd6:	430b      	orrs	r3, r1
     dd8:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
     dda:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
     ddc:	2017      	movs	r0, #23
			if (config->clear_on_match) {
     dde:	2b00      	cmp	r3, #0
     de0:	d1f6      	bne.n	dd0 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
     de2:	2200      	movs	r2, #0
     de4:	68a9      	ldr	r1, [r5, #8]
     de6:	0020      	movs	r0, r4
     de8:	4e07      	ldr	r6, [pc, #28]	; (e08 <rtc_count_init+0x98>)
     dea:	47b0      	blx	r6
     dec:	68e9      	ldr	r1, [r5, #12]
     dee:	2201      	movs	r2, #1
     df0:	0020      	movs	r0, r4
     df2:	47b0      	blx	r6
	return STATUS_OK;
     df4:	2000      	movs	r0, #0
     df6:	e7eb      	b.n	dd0 <rtc_count_init+0x60>
     df8:	40000400 	.word	0x40000400
     dfc:	40001000 	.word	0x40001000
     e00:	00000c65 	.word	0x00000c65
     e04:	200027dc 	.word	0x200027dc
     e08:	00000d0d 	.word	0x00000d0d

00000e0c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e0e:	46de      	mov	lr, fp
     e10:	4657      	mov	r7, sl
     e12:	464e      	mov	r6, r9
     e14:	4645      	mov	r5, r8
     e16:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     e18:	4b2b      	ldr	r3, [pc, #172]	; (ec8 <RTC_Handler+0xbc>)
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
     e1e:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
     e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
     e22:	4652      	mov	r2, sl
     e24:	8e92      	ldrh	r2, [r2, #52]	; 0x34
     e26:	401a      	ands	r2, r3
     e28:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     e2a:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     e2c:	8973      	ldrh	r3, [r6, #10]
     e2e:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     e30:	b21a      	sxth	r2, r3
     e32:	2a00      	cmp	r2, #0
     e34:	db08      	blt.n	e48 <RTC_Handler+0x3c>
     e36:	27ff      	movs	r7, #255	; 0xff
     e38:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
     e3a:	d02a      	beq.n	e92 <RTC_Handler+0x86>
     e3c:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
     e3e:	2301      	movs	r3, #1
     e40:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
     e42:	33fe      	adds	r3, #254	; 0xfe
     e44:	469b      	mov	fp, r3
     e46:	e014      	b.n	e72 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     e48:	4643      	mov	r3, r8
     e4a:	055b      	lsls	r3, r3, #21
     e4c:	d407      	bmi.n	e5e <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     e4e:	4b1f      	ldr	r3, [pc, #124]	; (ecc <RTC_Handler+0xc0>)
     e50:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
     e52:	bc3c      	pop	{r2, r3, r4, r5}
     e54:	4690      	mov	r8, r2
     e56:	4699      	mov	r9, r3
     e58:	46a2      	mov	sl, r4
     e5a:	46ab      	mov	fp, r5
     e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     e5e:	4653      	mov	r3, sl
     e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     e62:	4798      	blx	r3
     e64:	e7f3      	b.n	e4e <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
     e66:	465b      	mov	r3, fp
     e68:	401d      	ands	r5, r3
     e6a:	81b5      	strh	r5, [r6, #12]
     e6c:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
     e6e:	2c08      	cmp	r4, #8
     e70:	d0ef      	beq.n	e52 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
     e72:	0023      	movs	r3, r4
     e74:	464d      	mov	r5, r9
     e76:	40a5      	lsls	r5, r4
     e78:	422f      	tst	r7, r5
     e7a:	d0f4      	beq.n	e66 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
     e7c:	4642      	mov	r2, r8
     e7e:	4122      	asrs	r2, r4
     e80:	4649      	mov	r1, r9
     e82:	4211      	tst	r1, r2
     e84:	d0ef      	beq.n	e66 <RTC_Handler+0x5a>
				module->callbacks[i]();
     e86:	3302      	adds	r3, #2
     e88:	009b      	lsls	r3, r3, #2
     e8a:	4652      	mov	r2, sl
     e8c:	589b      	ldr	r3, [r3, r2]
     e8e:	4798      	blx	r3
     e90:	e7e9      	b.n	e66 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     e92:	05da      	lsls	r2, r3, #23
     e94:	d50a      	bpl.n	eac <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     e96:	4643      	mov	r3, r8
     e98:	05db      	lsls	r3, r3, #23
     e9a:	d403      	bmi.n	ea4 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     e9c:	2380      	movs	r3, #128	; 0x80
     e9e:	005b      	lsls	r3, r3, #1
     ea0:	81b3      	strh	r3, [r6, #12]
     ea2:	e7d6      	b.n	e52 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     ea4:	4653      	mov	r3, sl
     ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ea8:	4798      	blx	r3
     eaa:	e7f7      	b.n	e9c <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     eac:	059b      	lsls	r3, r3, #22
     eae:	d5d0      	bpl.n	e52 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     eb0:	4643      	mov	r3, r8
     eb2:	059b      	lsls	r3, r3, #22
     eb4:	d403      	bmi.n	ebe <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     eb6:	2380      	movs	r3, #128	; 0x80
     eb8:	009b      	lsls	r3, r3, #2
     eba:	81b3      	strh	r3, [r6, #12]
}
     ebc:	e7c9      	b.n	e52 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     ebe:	4653      	mov	r3, sl
     ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     ec2:	4798      	blx	r3
     ec4:	e7f7      	b.n	eb6 <RTC_Handler+0xaa>
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	200027dc 	.word	0x200027dc
     ecc:	ffff8000 	.word	0xffff8000

00000ed0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     ed0:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     ed2:	2207      	movs	r2, #7
     ed4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     ed6:	421a      	tst	r2, r3
     ed8:	d1fc      	bne.n	ed4 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     eda:	4770      	bx	lr

00000edc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     edc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ede:	46d6      	mov	lr, sl
     ee0:	464f      	mov	r7, r9
     ee2:	4646      	mov	r6, r8
     ee4:	b5c0      	push	{r6, r7, lr}
     ee6:	b08a      	sub	sp, #40	; 0x28
     ee8:	0007      	movs	r7, r0
     eea:	000e      	movs	r6, r1
     eec:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     eee:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ef0:	0008      	movs	r0, r1
     ef2:	4b9c      	ldr	r3, [pc, #624]	; (1164 <i2c_master_init+0x288>)
     ef4:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
     ef6:	2805      	cmp	r0, #5
     ef8:	d100      	bne.n	efc <i2c_master_init+0x20>
     efa:	e12b      	b.n	1154 <i2c_master_init+0x278>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     efc:	0005      	movs	r5, r0
     efe:	3512      	adds	r5, #18
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     f00:	4a99      	ldr	r2, [pc, #612]	; (1168 <i2c_master_init+0x28c>)
     f02:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     f04:	2301      	movs	r3, #1
     f06:	4083      	lsls	r3, r0
     f08:	430b      	orrs	r3, r1
     f0a:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     f0c:	a909      	add	r1, sp, #36	; 0x24
     f0e:	7b23      	ldrb	r3, [r4, #12]
     f10:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f12:	b2ed      	uxtb	r5, r5
     f14:	0028      	movs	r0, r5
     f16:	4b95      	ldr	r3, [pc, #596]	; (116c <i2c_master_init+0x290>)
     f18:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     f1a:	0028      	movs	r0, r5
     f1c:	4b94      	ldr	r3, [pc, #592]	; (1170 <i2c_master_init+0x294>)
     f1e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     f20:	7b20      	ldrb	r0, [r4, #12]
     f22:	2100      	movs	r1, #0
     f24:	4b93      	ldr	r3, [pc, #588]	; (1174 <i2c_master_init+0x298>)
     f26:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     f28:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     f2a:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     f2c:	079b      	lsls	r3, r3, #30
     f2e:	d505      	bpl.n	f3c <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     f30:	b00a      	add	sp, #40	; 0x28
     f32:	bc1c      	pop	{r2, r3, r4}
     f34:	4690      	mov	r8, r2
     f36:	4699      	mov	r9, r3
     f38:	46a2      	mov	sl, r4
     f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     f3c:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
     f3e:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     f40:	07db      	lsls	r3, r3, #31
     f42:	d4f5      	bmi.n	f30 <i2c_master_init+0x54>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     f44:	2314      	movs	r3, #20
     f46:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f48:	683b      	ldr	r3, [r7, #0]
     f4a:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     f4c:	0018      	movs	r0, r3
     f4e:	4b85      	ldr	r3, [pc, #532]	; (1164 <i2c_master_init+0x288>)
     f50:	4798      	blx	r3
     f52:	0005      	movs	r5, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f54:	2380      	movs	r3, #128	; 0x80
     f56:	aa08      	add	r2, sp, #32
     f58:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f5a:	2300      	movs	r3, #0
     f5c:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     f5e:	2201      	movs	r2, #1
     f60:	a908      	add	r1, sp, #32
     f62:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     f64:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
     f66:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     f68:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     f6a:	2800      	cmp	r0, #0
     f6c:	d100      	bne.n	f70 <i2c_master_init+0x94>
     f6e:	e0ae      	b.n	10ce <i2c_master_init+0x1f2>
	pin_conf.mux_position = pad0 & 0xFFFF;
     f70:	ab08      	add	r3, sp, #32
     f72:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     f74:	2302      	movs	r3, #2
     f76:	aa08      	add	r2, sp, #32
     f78:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     f7a:	0c00      	lsrs	r0, r0, #16
     f7c:	b2c0      	uxtb	r0, r0
     f7e:	0011      	movs	r1, r2
     f80:	4b7d      	ldr	r3, [pc, #500]	; (1178 <i2c_master_init+0x29c>)
     f82:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     f84:	2e00      	cmp	r6, #0
     f86:	d100      	bne.n	f8a <i2c_master_init+0xae>
     f88:	e0a6      	b.n	10d8 <i2c_master_init+0x1fc>
	pin_conf.mux_position = pad1 & 0xFFFF;
     f8a:	ab08      	add	r3, sp, #32
     f8c:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     f8e:	2302      	movs	r3, #2
     f90:	aa08      	add	r2, sp, #32
     f92:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     f94:	0c36      	lsrs	r6, r6, #16
     f96:	b2f0      	uxtb	r0, r6
     f98:	0011      	movs	r1, r2
     f9a:	4b77      	ldr	r3, [pc, #476]	; (1178 <i2c_master_init+0x29c>)
     f9c:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     f9e:	8aa3      	ldrh	r3, [r4, #20]
     fa0:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     fa2:	8ae3      	ldrh	r3, [r4, #22]
     fa4:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     fa6:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     fa8:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     faa:	2b00      	cmp	r3, #0
     fac:	d104      	bne.n	fb8 <i2c_master_init+0xdc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     fae:	4b73      	ldr	r3, [pc, #460]	; (117c <i2c_master_init+0x2a0>)
     fb0:	789b      	ldrb	r3, [r3, #2]
     fb2:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     fb4:	0fdb      	lsrs	r3, r3, #31
     fb6:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     fb8:	68a1      	ldr	r1, [r4, #8]
     fba:	6923      	ldr	r3, [r4, #16]
     fbc:	430b      	orrs	r3, r1
     fbe:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     fc0:	2224      	movs	r2, #36	; 0x24
     fc2:	5ca2      	ldrb	r2, [r4, r2]
     fc4:	2a00      	cmp	r2, #0
     fc6:	d002      	beq.n	fce <i2c_master_init+0xf2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     fc8:	2280      	movs	r2, #128	; 0x80
     fca:	05d2      	lsls	r2, r2, #23
     fcc:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     fce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     fd0:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     fd2:	222c      	movs	r2, #44	; 0x2c
     fd4:	5ca2      	ldrb	r2, [r4, r2]
     fd6:	2a00      	cmp	r2, #0
     fd8:	d103      	bne.n	fe2 <i2c_master_init+0x106>
     fda:	2280      	movs	r2, #128	; 0x80
     fdc:	0492      	lsls	r2, r2, #18
     fde:	4291      	cmp	r1, r2
     fe0:	d102      	bne.n	fe8 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     fe2:	2280      	movs	r2, #128	; 0x80
     fe4:	0512      	lsls	r2, r2, #20
     fe6:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     fe8:	222d      	movs	r2, #45	; 0x2d
     fea:	5ca2      	ldrb	r2, [r4, r2]
     fec:	2a00      	cmp	r2, #0
     fee:	d002      	beq.n	ff6 <i2c_master_init+0x11a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     ff0:	2280      	movs	r2, #128	; 0x80
     ff2:	0412      	lsls	r2, r2, #16
     ff4:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     ff6:	222e      	movs	r2, #46	; 0x2e
     ff8:	5ca2      	ldrb	r2, [r4, r2]
     ffa:	2a00      	cmp	r2, #0
     ffc:	d002      	beq.n	1004 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     ffe:	2280      	movs	r2, #128	; 0x80
    1000:	03d2      	lsls	r2, r2, #15
    1002:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    1004:	4642      	mov	r2, r8
    1006:	6812      	ldr	r2, [r2, #0]
    1008:	4313      	orrs	r3, r2
    100a:	4642      	mov	r2, r8
    100c:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    100e:	2380      	movs	r3, #128	; 0x80
    1010:	005b      	lsls	r3, r3, #1
    1012:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1014:	3512      	adds	r5, #18
    1016:	b2e8      	uxtb	r0, r5
    1018:	4b59      	ldr	r3, [pc, #356]	; (1180 <i2c_master_init+0x2a4>)
    101a:	4798      	blx	r3
    101c:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    101e:	23fa      	movs	r3, #250	; 0xfa
    1020:	009b      	lsls	r3, r3, #2
    1022:	6822      	ldr	r2, [r4, #0]
    1024:	435a      	muls	r2, r3
    1026:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    1028:	6863      	ldr	r3, [r4, #4]
    102a:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    102c:	4d55      	ldr	r5, [pc, #340]	; (1184 <i2c_master_init+0x2a8>)
    102e:	47a8      	blx	r5
    1030:	9000      	str	r0, [sp, #0]
    1032:	9101      	str	r1, [sp, #4]
    1034:	464b      	mov	r3, r9
    1036:	0058      	lsls	r0, r3, #1
    1038:	47a8      	blx	r5
    103a:	9002      	str	r0, [sp, #8]
    103c:	9103      	str	r1, [sp, #12]
    103e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    1040:	47a8      	blx	r5
    1042:	9004      	str	r0, [sp, #16]
    1044:	9105      	str	r1, [sp, #20]
    1046:	4f50      	ldr	r7, [pc, #320]	; (1188 <i2c_master_init+0x2ac>)
    1048:	4a50      	ldr	r2, [pc, #320]	; (118c <i2c_master_init+0x2b0>)
    104a:	4b51      	ldr	r3, [pc, #324]	; (1190 <i2c_master_init+0x2b4>)
    104c:	9800      	ldr	r0, [sp, #0]
    104e:	9901      	ldr	r1, [sp, #4]
    1050:	47b8      	blx	r7
    1052:	0002      	movs	r2, r0
    1054:	000b      	movs	r3, r1
    1056:	9804      	ldr	r0, [sp, #16]
    1058:	9905      	ldr	r1, [sp, #20]
    105a:	47b8      	blx	r7
    105c:	4e4d      	ldr	r6, [pc, #308]	; (1194 <i2c_master_init+0x2b8>)
    105e:	2200      	movs	r2, #0
    1060:	4b4d      	ldr	r3, [pc, #308]	; (1198 <i2c_master_init+0x2bc>)
    1062:	47b0      	blx	r6
    1064:	9004      	str	r0, [sp, #16]
    1066:	9105      	str	r1, [sp, #20]
    1068:	4648      	mov	r0, r9
    106a:	47a8      	blx	r5
    106c:	0002      	movs	r2, r0
    106e:	000b      	movs	r3, r1
    1070:	9804      	ldr	r0, [sp, #16]
    1072:	9905      	ldr	r1, [sp, #20]
    1074:	47b8      	blx	r7
    1076:	0002      	movs	r2, r0
    1078:	000b      	movs	r3, r1
    107a:	4d48      	ldr	r5, [pc, #288]	; (119c <i2c_master_init+0x2c0>)
    107c:	9800      	ldr	r0, [sp, #0]
    107e:	9901      	ldr	r1, [sp, #4]
    1080:	47a8      	blx	r5
    1082:	9a02      	ldr	r2, [sp, #8]
    1084:	9b03      	ldr	r3, [sp, #12]
    1086:	47b0      	blx	r6
    1088:	2200      	movs	r2, #0
    108a:	4b45      	ldr	r3, [pc, #276]	; (11a0 <i2c_master_init+0x2c4>)
    108c:	47a8      	blx	r5
    108e:	9a02      	ldr	r2, [sp, #8]
    1090:	9b03      	ldr	r3, [sp, #12]
    1092:	4d44      	ldr	r5, [pc, #272]	; (11a4 <i2c_master_init+0x2c8>)
    1094:	47a8      	blx	r5
    1096:	4b44      	ldr	r3, [pc, #272]	; (11a8 <i2c_master_init+0x2cc>)
    1098:	4798      	blx	r3
    109a:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    109c:	2380      	movs	r3, #128	; 0x80
    109e:	049b      	lsls	r3, r3, #18
    10a0:	68a2      	ldr	r2, [r4, #8]
    10a2:	429a      	cmp	r2, r3
    10a4:	d01e      	beq.n	10e4 <i2c_master_init+0x208>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    10a6:	0003      	movs	r3, r0
    10a8:	2040      	movs	r0, #64	; 0x40
    10aa:	2dff      	cmp	r5, #255	; 0xff
    10ac:	d900      	bls.n	10b0 <i2c_master_init+0x1d4>
    10ae:	e73f      	b.n	f30 <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    10b0:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    10b2:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    10b4:	25ff      	movs	r5, #255	; 0xff
    10b6:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    10b8:	0624      	lsls	r4, r4, #24
    10ba:	4325      	orrs	r5, r4
    10bc:	0400      	lsls	r0, r0, #16
    10be:	23ff      	movs	r3, #255	; 0xff
    10c0:	041b      	lsls	r3, r3, #16
    10c2:	4018      	ands	r0, r3
    10c4:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    10c6:	4643      	mov	r3, r8
    10c8:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    10ca:	2000      	movs	r0, #0
    10cc:	e730      	b.n	f30 <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    10ce:	2100      	movs	r1, #0
    10d0:	4640      	mov	r0, r8
    10d2:	4b36      	ldr	r3, [pc, #216]	; (11ac <i2c_master_init+0x2d0>)
    10d4:	4798      	blx	r3
    10d6:	e74b      	b.n	f70 <i2c_master_init+0x94>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    10d8:	2101      	movs	r1, #1
    10da:	4640      	mov	r0, r8
    10dc:	4b33      	ldr	r3, [pc, #204]	; (11ac <i2c_master_init+0x2d0>)
    10de:	4798      	blx	r3
    10e0:	0006      	movs	r6, r0
    10e2:	e752      	b.n	f8a <i2c_master_init+0xae>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    10e4:	26fa      	movs	r6, #250	; 0xfa
    10e6:	00b6      	lsls	r6, r6, #2
    10e8:	4653      	mov	r3, sl
    10ea:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    10ec:	9800      	ldr	r0, [sp, #0]
    10ee:	9901      	ldr	r1, [sp, #4]
    10f0:	0002      	movs	r2, r0
    10f2:	000b      	movs	r3, r1
    10f4:	4c27      	ldr	r4, [pc, #156]	; (1194 <i2c_master_init+0x2b8>)
    10f6:	47a0      	blx	r4
    10f8:	9000      	str	r0, [sp, #0]
    10fa:	9101      	str	r1, [sp, #4]
    10fc:	0030      	movs	r0, r6
    10fe:	4b21      	ldr	r3, [pc, #132]	; (1184 <i2c_master_init+0x2a8>)
    1100:	4798      	blx	r3
    1102:	2200      	movs	r2, #0
    1104:	4b2a      	ldr	r3, [pc, #168]	; (11b0 <i2c_master_init+0x2d4>)
    1106:	47b8      	blx	r7
    1108:	0002      	movs	r2, r0
    110a:	000b      	movs	r3, r1
    110c:	9800      	ldr	r0, [sp, #0]
    110e:	9901      	ldr	r1, [sp, #4]
    1110:	4c24      	ldr	r4, [pc, #144]	; (11a4 <i2c_master_init+0x2c8>)
    1112:	47a0      	blx	r4
    1114:	2200      	movs	r2, #0
    1116:	4b22      	ldr	r3, [pc, #136]	; (11a0 <i2c_master_init+0x2c4>)
    1118:	4c20      	ldr	r4, [pc, #128]	; (119c <i2c_master_init+0x2c0>)
    111a:	47a0      	blx	r4
    111c:	4b22      	ldr	r3, [pc, #136]	; (11a8 <i2c_master_init+0x2cc>)
    111e:	4798      	blx	r3
    1120:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    1122:	d00c      	beq.n	113e <i2c_master_init+0x262>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1124:	0031      	movs	r1, r6
    1126:	9807      	ldr	r0, [sp, #28]
    1128:	4b22      	ldr	r3, [pc, #136]	; (11b4 <i2c_master_init+0x2d8>)
    112a:	4798      	blx	r3
    112c:	3802      	subs	r0, #2
    112e:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1130:	002b      	movs	r3, r5
    1132:	2dff      	cmp	r5, #255	; 0xff
    1134:	d80c      	bhi.n	1150 <i2c_master_init+0x274>
    1136:	28ff      	cmp	r0, #255	; 0xff
    1138:	d9bc      	bls.n	10b4 <i2c_master_init+0x1d8>
    113a:	2040      	movs	r0, #64	; 0x40
    113c:	e6f8      	b.n	f30 <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    113e:	0071      	lsls	r1, r6, #1
    1140:	1e48      	subs	r0, r1, #1
    1142:	9b07      	ldr	r3, [sp, #28]
    1144:	469c      	mov	ip, r3
    1146:	4460      	add	r0, ip
    1148:	4b1a      	ldr	r3, [pc, #104]	; (11b4 <i2c_master_init+0x2d8>)
    114a:	4798      	blx	r3
    114c:	3801      	subs	r0, #1
    114e:	e7ef      	b.n	1130 <i2c_master_init+0x254>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1150:	2040      	movs	r0, #64	; 0x40
    1152:	e6ed      	b.n	f30 <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    1154:	4a04      	ldr	r2, [pc, #16]	; (1168 <i2c_master_init+0x28c>)
    1156:	6a13      	ldr	r3, [r2, #32]
    1158:	2102      	movs	r1, #2
    115a:	430b      	orrs	r3, r1
    115c:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    115e:	2518      	movs	r5, #24
    1160:	e6d4      	b.n	f0c <i2c_master_init+0x30>
    1162:	46c0      	nop			; (mov r8, r8)
    1164:	000048fd 	.word	0x000048fd
    1168:	40000400 	.word	0x40000400
    116c:	0000e17d 	.word	0x0000e17d
    1170:	0000e10d 	.word	0x0000e10d
    1174:	0000473d 	.word	0x0000473d
    1178:	0000e279 	.word	0x0000e279
    117c:	41002000 	.word	0x41002000
    1180:	0000e1a1 	.word	0x0000e1a1
    1184:	00010479 	.word	0x00010479
    1188:	0000f861 	.word	0x0000f861
    118c:	e826d695 	.word	0xe826d695
    1190:	3e112e0b 	.word	0x3e112e0b
    1194:	0000e9d9 	.word	0x0000e9d9
    1198:	40240000 	.word	0x40240000
    119c:	0000fd61 	.word	0x0000fd61
    11a0:	3ff00000 	.word	0x3ff00000
    11a4:	0000eff9 	.word	0x0000eff9
    11a8:	0001038d 	.word	0x0001038d
    11ac:	00004789 	.word	0x00004789
    11b0:	40080000 	.word	0x40080000
    11b4:	0000e565 	.word	0x0000e565

000011b8 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    11b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ba:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11bc:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    11be:	4e08      	ldr	r6, [pc, #32]	; (11e0 <i2c_master_reset+0x28>)
    11c0:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11c2:	6825      	ldr	r5, [r4, #0]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    11c4:	0020      	movs	r0, r4
    11c6:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    11c8:	2383      	movs	r3, #131	; 0x83
    11ca:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    11cc:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    11ce:	682b      	ldr	r3, [r5, #0]
    11d0:	2202      	movs	r2, #2
    11d2:	4393      	bics	r3, r2
    11d4:	602b      	str	r3, [r5, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    11d6:	0020      	movs	r0, r4
    11d8:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    11da:	2301      	movs	r3, #1
    11dc:	603b      	str	r3, [r7, #0]
}
    11de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11e0:	00000ed1 	.word	0x00000ed1

000011e4 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11e4:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    11e6:	7e1a      	ldrb	r2, [r3, #24]
    11e8:	0792      	lsls	r2, r2, #30
    11ea:	d507      	bpl.n	11fc <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    11ec:	2202      	movs	r2, #2
    11ee:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    11f0:	8b5b      	ldrh	r3, [r3, #26]
    11f2:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    11f4:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    11f6:	17db      	asrs	r3, r3, #31
    11f8:	4018      	ands	r0, r3
}
    11fa:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    11fc:	8b5a      	ldrh	r2, [r3, #26]
    11fe:	0752      	lsls	r2, r2, #29
    1200:	d506      	bpl.n	1210 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1202:	6859      	ldr	r1, [r3, #4]
    1204:	22c0      	movs	r2, #192	; 0xc0
    1206:	0292      	lsls	r2, r2, #10
    1208:	430a      	orrs	r2, r1
    120a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    120c:	2018      	movs	r0, #24
    120e:	e7f4      	b.n	11fa <_i2c_master_address_response+0x16>
	return STATUS_OK;
    1210:	2000      	movs	r0, #0
    1212:	e7f2      	b.n	11fa <_i2c_master_address_response+0x16>

00001214 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1214:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1216:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1218:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    121a:	2401      	movs	r4, #1
    121c:	2502      	movs	r5, #2
    121e:	7e11      	ldrb	r1, [r2, #24]
    1220:	4221      	tst	r1, r4
    1222:	d10b      	bne.n	123c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1224:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1226:	4229      	tst	r1, r5
    1228:	d106      	bne.n	1238 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    122a:	3301      	adds	r3, #1
    122c:	b29b      	uxth	r3, r3
    122e:	8901      	ldrh	r1, [r0, #8]
    1230:	4299      	cmp	r1, r3
    1232:	d8f4      	bhi.n	121e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    1234:	2012      	movs	r0, #18
    1236:	e002      	b.n	123e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    1238:	2000      	movs	r0, #0
    123a:	e000      	b.n	123e <_i2c_master_wait_for_bus+0x2a>
    123c:	2000      	movs	r0, #0
}
    123e:	bd30      	pop	{r4, r5, pc}

00001240 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1240:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1242:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1244:	6862      	ldr	r2, [r4, #4]
    1246:	2380      	movs	r3, #128	; 0x80
    1248:	02db      	lsls	r3, r3, #11
    124a:	4313      	orrs	r3, r2
    124c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    124e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1250:	4b02      	ldr	r3, [pc, #8]	; (125c <_i2c_master_send_hs_master_code+0x1c>)
    1252:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1254:	2301      	movs	r3, #1
    1256:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    1258:	bd10      	pop	{r4, pc}
    125a:	46c0      	nop			; (mov r8, r8)
    125c:	00001215 	.word	0x00001215

00001260 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1260:	b5f0      	push	{r4, r5, r6, r7, lr}
    1262:	46de      	mov	lr, fp
    1264:	4657      	mov	r7, sl
    1266:	464e      	mov	r6, r9
    1268:	4645      	mov	r5, r8
    126a:	b5e0      	push	{r5, r6, r7, lr}
    126c:	b083      	sub	sp, #12
    126e:	0006      	movs	r6, r0
    1270:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1272:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1274:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1276:	682b      	ldr	r3, [r5, #0]
    1278:	011b      	lsls	r3, r3, #4
    127a:	0fdb      	lsrs	r3, r3, #31
    127c:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    127e:	7a4b      	ldrb	r3, [r1, #9]
    1280:	2b00      	cmp	r3, #0
    1282:	d12b      	bne.n	12dc <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1284:	686b      	ldr	r3, [r5, #4]
    1286:	4a58      	ldr	r2, [pc, #352]	; (13e8 <_i2c_master_read_packet+0x188>)
    1288:	4013      	ands	r3, r2
    128a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    128c:	464b      	mov	r3, r9
    128e:	7a1b      	ldrb	r3, [r3, #8]
    1290:	2b00      	cmp	r3, #0
    1292:	d127      	bne.n	12e4 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1294:	464b      	mov	r3, r9
    1296:	881b      	ldrh	r3, [r3, #0]
    1298:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    129a:	464a      	mov	r2, r9
    129c:	7a52      	ldrb	r2, [r2, #9]
    129e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    12a0:	4313      	orrs	r3, r2
    12a2:	2201      	movs	r2, #1
    12a4:	4313      	orrs	r3, r2
    12a6:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    12a8:	0030      	movs	r0, r6
    12aa:	4b50      	ldr	r3, [pc, #320]	; (13ec <_i2c_master_read_packet+0x18c>)
    12ac:	4798      	blx	r3
    12ae:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    12b0:	4653      	mov	r3, sl
    12b2:	2b00      	cmp	r3, #0
    12b4:	d003      	beq.n	12be <_i2c_master_read_packet+0x5e>
    12b6:	464b      	mov	r3, r9
    12b8:	885b      	ldrh	r3, [r3, #2]
    12ba:	2b01      	cmp	r3, #1
    12bc:	d03b      	beq.n	1336 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    12be:	686b      	ldr	r3, [r5, #4]
    12c0:	4a49      	ldr	r2, [pc, #292]	; (13e8 <_i2c_master_read_packet+0x188>)
    12c2:	4013      	ands	r3, r2
    12c4:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    12c6:	9b01      	ldr	r3, [sp, #4]
    12c8:	2b00      	cmp	r3, #0
    12ca:	d03a      	beq.n	1342 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    12cc:	9801      	ldr	r0, [sp, #4]
    12ce:	b003      	add	sp, #12
    12d0:	bc3c      	pop	{r2, r3, r4, r5}
    12d2:	4690      	mov	r8, r2
    12d4:	4699      	mov	r9, r3
    12d6:	46a2      	mov	sl, r4
    12d8:	46ab      	mov	fp, r5
    12da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    12dc:	7a89      	ldrb	r1, [r1, #10]
    12de:	4b44      	ldr	r3, [pc, #272]	; (13f0 <_i2c_master_read_packet+0x190>)
    12e0:	4798      	blx	r3
    12e2:	e7cf      	b.n	1284 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    12e4:	464b      	mov	r3, r9
    12e6:	881b      	ldrh	r3, [r3, #0]
    12e8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    12ea:	464a      	mov	r2, r9
    12ec:	7a52      	ldrb	r2, [r2, #9]
    12ee:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    12f0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    12f2:	2280      	movs	r2, #128	; 0x80
    12f4:	0212      	lsls	r2, r2, #8
    12f6:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    12f8:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    12fa:	0030      	movs	r0, r6
    12fc:	4b3b      	ldr	r3, [pc, #236]	; (13ec <_i2c_master_read_packet+0x18c>)
    12fe:	4798      	blx	r3
    1300:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1302:	686b      	ldr	r3, [r5, #4]
    1304:	4a38      	ldr	r2, [pc, #224]	; (13e8 <_i2c_master_read_packet+0x188>)
    1306:	4013      	ands	r3, r2
    1308:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    130a:	2800      	cmp	r0, #0
    130c:	d1de      	bne.n	12cc <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    130e:	0030      	movs	r0, r6
    1310:	4b38      	ldr	r3, [pc, #224]	; (13f4 <_i2c_master_read_packet+0x194>)
    1312:	4798      	blx	r3
    1314:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    1316:	2800      	cmp	r0, #0
    1318:	d1d8      	bne.n	12cc <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    131a:	464b      	mov	r3, r9
    131c:	881b      	ldrh	r3, [r3, #0]
    131e:	0a1b      	lsrs	r3, r3, #8
    1320:	2278      	movs	r2, #120	; 0x78
    1322:	4313      	orrs	r3, r2
    1324:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1326:	464a      	mov	r2, r9
    1328:	7a52      	ldrb	r2, [r2, #9]
    132a:	0392      	lsls	r2, r2, #14
    132c:	2101      	movs	r1, #1
    132e:	430a      	orrs	r2, r1
    1330:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1332:	626b      	str	r3, [r5, #36]	; 0x24
    1334:	e7b8      	b.n	12a8 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1336:	686a      	ldr	r2, [r5, #4]
    1338:	2380      	movs	r3, #128	; 0x80
    133a:	02db      	lsls	r3, r3, #11
    133c:	4313      	orrs	r3, r2
    133e:	606b      	str	r3, [r5, #4]
    1340:	e7c1      	b.n	12c6 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    1342:	0030      	movs	r0, r6
    1344:	4b2b      	ldr	r3, [pc, #172]	; (13f4 <_i2c_master_read_packet+0x194>)
    1346:	4798      	blx	r3
    1348:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    134a:	2800      	cmp	r0, #0
    134c:	d1be      	bne.n	12cc <_i2c_master_read_packet+0x6c>
    134e:	3c01      	subs	r4, #1
    1350:	b2a4      	uxth	r4, r4
    1352:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    1354:	4b28      	ldr	r3, [pc, #160]	; (13f8 <_i2c_master_read_packet+0x198>)
    1356:	469b      	mov	fp, r3
    1358:	e015      	b.n	1386 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    135a:	2c01      	cmp	r4, #1
    135c:	d020      	beq.n	13a0 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    135e:	0030      	movs	r0, r6
    1360:	4b26      	ldr	r3, [pc, #152]	; (13fc <_i2c_master_read_packet+0x19c>)
    1362:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    1364:	4643      	mov	r3, r8
    1366:	1c5f      	adds	r7, r3, #1
    1368:	b2bf      	uxth	r7, r7
    136a:	2328      	movs	r3, #40	; 0x28
    136c:	5ceb      	ldrb	r3, [r5, r3]
    136e:	464a      	mov	r2, r9
    1370:	6852      	ldr	r2, [r2, #4]
    1372:	4641      	mov	r1, r8
    1374:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    1376:	0030      	movs	r0, r6
    1378:	4b1c      	ldr	r3, [pc, #112]	; (13ec <_i2c_master_read_packet+0x18c>)
    137a:	4798      	blx	r3
    137c:	3c01      	subs	r4, #1
    137e:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    1380:	2800      	cmp	r0, #0
    1382:	d115      	bne.n	13b0 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    1384:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    1386:	455c      	cmp	r4, fp
    1388:	d014      	beq.n	13b4 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    138a:	8b6b      	ldrh	r3, [r5, #26]
    138c:	069b      	lsls	r3, r3, #26
    138e:	d527      	bpl.n	13e0 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    1390:	7af3      	ldrb	r3, [r6, #11]
    1392:	2b00      	cmp	r3, #0
    1394:	d0e3      	beq.n	135e <_i2c_master_read_packet+0xfe>
    1396:	4653      	mov	r3, sl
    1398:	2b00      	cmp	r3, #0
    139a:	d1de      	bne.n	135a <_i2c_master_read_packet+0xfa>
    139c:	2c00      	cmp	r4, #0
    139e:	d1de      	bne.n	135e <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    13a0:	686a      	ldr	r2, [r5, #4]
    13a2:	2380      	movs	r3, #128	; 0x80
    13a4:	02db      	lsls	r3, r3, #11
    13a6:	4313      	orrs	r3, r2
    13a8:	606b      	str	r3, [r5, #4]
    13aa:	3c01      	subs	r4, #1
    13ac:	b2a4      	uxth	r4, r4
    13ae:	e7ea      	b.n	1386 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    13b0:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    13b2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    13b4:	7ab3      	ldrb	r3, [r6, #10]
    13b6:	2b00      	cmp	r3, #0
    13b8:	d109      	bne.n	13ce <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    13ba:	0030      	movs	r0, r6
    13bc:	4b0f      	ldr	r3, [pc, #60]	; (13fc <_i2c_master_read_packet+0x19c>)
    13be:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    13c0:	2328      	movs	r3, #40	; 0x28
    13c2:	5cea      	ldrb	r2, [r5, r3]
    13c4:	464b      	mov	r3, r9
    13c6:	685b      	ldr	r3, [r3, #4]
    13c8:	4641      	mov	r1, r8
    13ca:	545a      	strb	r2, [r3, r1]
    13cc:	e77e      	b.n	12cc <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    13ce:	0030      	movs	r0, r6
    13d0:	4b0a      	ldr	r3, [pc, #40]	; (13fc <_i2c_master_read_packet+0x19c>)
    13d2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    13d4:	686a      	ldr	r2, [r5, #4]
    13d6:	23c0      	movs	r3, #192	; 0xc0
    13d8:	029b      	lsls	r3, r3, #10
    13da:	4313      	orrs	r3, r2
    13dc:	606b      	str	r3, [r5, #4]
    13de:	e7ec      	b.n	13ba <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    13e0:	2341      	movs	r3, #65	; 0x41
    13e2:	9301      	str	r3, [sp, #4]
    13e4:	e772      	b.n	12cc <_i2c_master_read_packet+0x6c>
    13e6:	46c0      	nop			; (mov r8, r8)
    13e8:	fffbffff 	.word	0xfffbffff
    13ec:	00001215 	.word	0x00001215
    13f0:	00001241 	.word	0x00001241
    13f4:	000011e5 	.word	0x000011e5
    13f8:	0000ffff 	.word	0x0000ffff
    13fc:	00000ed1 	.word	0x00000ed1

00001400 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1400:	b5f0      	push	{r4, r5, r6, r7, lr}
    1402:	46de      	mov	lr, fp
    1404:	4657      	mov	r7, sl
    1406:	464e      	mov	r6, r9
    1408:	4645      	mov	r5, r8
    140a:	b5e0      	push	{r5, r6, r7, lr}
    140c:	b083      	sub	sp, #12
    140e:	0006      	movs	r6, r0
    1410:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1412:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1414:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    1416:	4b32      	ldr	r3, [pc, #200]	; (14e0 <_i2c_master_write_packet+0xe0>)
    1418:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    141a:	7a7b      	ldrb	r3, [r7, #9]
    141c:	2b00      	cmp	r3, #0
    141e:	d11d      	bne.n	145c <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1420:	686b      	ldr	r3, [r5, #4]
    1422:	4a30      	ldr	r2, [pc, #192]	; (14e4 <_i2c_master_write_packet+0xe4>)
    1424:	4013      	ands	r3, r2
    1426:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1428:	7a3b      	ldrb	r3, [r7, #8]
    142a:	2b00      	cmp	r3, #0
    142c:	d01b      	beq.n	1466 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    142e:	883b      	ldrh	r3, [r7, #0]
    1430:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1432:	7a7a      	ldrb	r2, [r7, #9]
    1434:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1436:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1438:	2280      	movs	r2, #128	; 0x80
    143a:	0212      	lsls	r2, r2, #8
    143c:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    143e:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1440:	0030      	movs	r0, r6
    1442:	4b29      	ldr	r3, [pc, #164]	; (14e8 <_i2c_master_write_packet+0xe8>)
    1444:	4798      	blx	r3
    1446:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1448:	2800      	cmp	r0, #0
    144a:	d013      	beq.n	1474 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    144c:	9801      	ldr	r0, [sp, #4]
    144e:	b003      	add	sp, #12
    1450:	bc3c      	pop	{r2, r3, r4, r5}
    1452:	4690      	mov	r8, r2
    1454:	4699      	mov	r9, r3
    1456:	46a2      	mov	sl, r4
    1458:	46ab      	mov	fp, r5
    145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    145c:	7ab9      	ldrb	r1, [r7, #10]
    145e:	0030      	movs	r0, r6
    1460:	4b22      	ldr	r3, [pc, #136]	; (14ec <_i2c_master_write_packet+0xec>)
    1462:	4798      	blx	r3
    1464:	e7dc      	b.n	1420 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1466:	883b      	ldrh	r3, [r7, #0]
    1468:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    146a:	7a7a      	ldrb	r2, [r7, #9]
    146c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    146e:	4313      	orrs	r3, r2
    1470:	626b      	str	r3, [r5, #36]	; 0x24
    1472:	e7e5      	b.n	1440 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    1474:	0030      	movs	r0, r6
    1476:	4b1e      	ldr	r3, [pc, #120]	; (14f0 <_i2c_master_write_packet+0xf0>)
    1478:	4798      	blx	r3
    147a:	1e03      	subs	r3, r0, #0
    147c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    147e:	d1e5      	bne.n	144c <_i2c_master_write_packet+0x4c>
    1480:	46a0      	mov	r8, r4
    1482:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1484:	3320      	adds	r3, #32
    1486:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    1488:	4b15      	ldr	r3, [pc, #84]	; (14e0 <_i2c_master_write_packet+0xe0>)
    148a:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    148c:	4b16      	ldr	r3, [pc, #88]	; (14e8 <_i2c_master_write_packet+0xe8>)
    148e:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    1490:	4544      	cmp	r4, r8
    1492:	d015      	beq.n	14c0 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1494:	8b6b      	ldrh	r3, [r5, #26]
    1496:	464a      	mov	r2, r9
    1498:	4213      	tst	r3, r2
    149a:	d01d      	beq.n	14d8 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    149c:	0030      	movs	r0, r6
    149e:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    14a0:	687b      	ldr	r3, [r7, #4]
    14a2:	5d1a      	ldrb	r2, [r3, r4]
    14a4:	2328      	movs	r3, #40	; 0x28
    14a6:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    14a8:	0030      	movs	r0, r6
    14aa:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    14ac:	2800      	cmp	r0, #0
    14ae:	d106      	bne.n	14be <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    14b0:	8b6b      	ldrh	r3, [r5, #26]
    14b2:	3401      	adds	r4, #1
    14b4:	075b      	lsls	r3, r3, #29
    14b6:	d5eb      	bpl.n	1490 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    14b8:	231e      	movs	r3, #30
    14ba:	9301      	str	r3, [sp, #4]
    14bc:	e000      	b.n	14c0 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    14be:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    14c0:	7ab3      	ldrb	r3, [r6, #10]
    14c2:	2b00      	cmp	r3, #0
    14c4:	d0c2      	beq.n	144c <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    14c6:	0030      	movs	r0, r6
    14c8:	4b05      	ldr	r3, [pc, #20]	; (14e0 <_i2c_master_write_packet+0xe0>)
    14ca:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    14cc:	686a      	ldr	r2, [r5, #4]
    14ce:	23c0      	movs	r3, #192	; 0xc0
    14d0:	029b      	lsls	r3, r3, #10
    14d2:	4313      	orrs	r3, r2
    14d4:	606b      	str	r3, [r5, #4]
    14d6:	e7b9      	b.n	144c <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    14d8:	2341      	movs	r3, #65	; 0x41
    14da:	9301      	str	r3, [sp, #4]
    14dc:	e7b6      	b.n	144c <_i2c_master_write_packet+0x4c>
    14de:	46c0      	nop			; (mov r8, r8)
    14e0:	00000ed1 	.word	0x00000ed1
    14e4:	fffbffff 	.word	0xfffbffff
    14e8:	00001215 	.word	0x00001215
    14ec:	00001241 	.word	0x00001241
    14f0:	000011e5 	.word	0x000011e5

000014f4 <i2c_master_read_packet_wait>:
{
    14f4:	b510      	push	{r4, lr}
	module->send_stop = true;
    14f6:	2301      	movs	r3, #1
    14f8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    14fa:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    14fc:	4b01      	ldr	r3, [pc, #4]	; (1504 <i2c_master_read_packet_wait+0x10>)
    14fe:	4798      	blx	r3
}
    1500:	bd10      	pop	{r4, pc}
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	00001261 	.word	0x00001261

00001508 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1508:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    150a:	2301      	movs	r3, #1
    150c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    150e:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    1510:	4b01      	ldr	r3, [pc, #4]	; (1518 <i2c_master_write_packet_wait+0x10>)
    1512:	4798      	blx	r3
}
    1514:	bd10      	pop	{r4, pc}
    1516:	46c0      	nop			; (mov r8, r8)
    1518:	00001401 	.word	0x00001401

0000151c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    151c:	1c93      	adds	r3, r2, #2
    151e:	009b      	lsls	r3, r3, #2
    1520:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1522:	2a02      	cmp	r2, #2
    1524:	d009      	beq.n	153a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1526:	2a03      	cmp	r2, #3
    1528:	d00c      	beq.n	1544 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    152a:	2301      	movs	r3, #1
    152c:	4093      	lsls	r3, r2
    152e:	001a      	movs	r2, r3
    1530:	7e03      	ldrb	r3, [r0, #24]
    1532:	4313      	orrs	r3, r2
    1534:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1536:	2000      	movs	r0, #0
    1538:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    153a:	7e03      	ldrb	r3, [r0, #24]
    153c:	2210      	movs	r2, #16
    153e:	4313      	orrs	r3, r2
    1540:	7603      	strb	r3, [r0, #24]
    1542:	e7f8      	b.n	1536 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1544:	7e03      	ldrb	r3, [r0, #24]
    1546:	2220      	movs	r2, #32
    1548:	4313      	orrs	r3, r2
    154a:	7603      	strb	r3, [r0, #24]
    154c:	e7f3      	b.n	1536 <tc_register_callback+0x1a>
	...

00001550 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1550:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1552:	0080      	lsls	r0, r0, #2
    1554:	4b16      	ldr	r3, [pc, #88]	; (15b0 <_tc_interrupt_handler+0x60>)
    1556:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1558:	6823      	ldr	r3, [r4, #0]
    155a:	7a9d      	ldrb	r5, [r3, #10]
    155c:	7e22      	ldrb	r2, [r4, #24]
    155e:	7e63      	ldrb	r3, [r4, #25]
    1560:	4013      	ands	r3, r2
    1562:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1564:	07eb      	lsls	r3, r5, #31
    1566:	d406      	bmi.n	1576 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1568:	07ab      	lsls	r3, r5, #30
    156a:	d40b      	bmi.n	1584 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    156c:	06eb      	lsls	r3, r5, #27
    156e:	d410      	bmi.n	1592 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1570:	06ab      	lsls	r3, r5, #26
    1572:	d415      	bmi.n	15a0 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1574:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1576:	0020      	movs	r0, r4
    1578:	68a3      	ldr	r3, [r4, #8]
    157a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    157c:	2301      	movs	r3, #1
    157e:	6822      	ldr	r2, [r4, #0]
    1580:	7293      	strb	r3, [r2, #10]
    1582:	e7f1      	b.n	1568 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1584:	0020      	movs	r0, r4
    1586:	68e3      	ldr	r3, [r4, #12]
    1588:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    158a:	2302      	movs	r3, #2
    158c:	6822      	ldr	r2, [r4, #0]
    158e:	7293      	strb	r3, [r2, #10]
    1590:	e7ec      	b.n	156c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1592:	0020      	movs	r0, r4
    1594:	6923      	ldr	r3, [r4, #16]
    1596:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1598:	2310      	movs	r3, #16
    159a:	6822      	ldr	r2, [r4, #0]
    159c:	7293      	strb	r3, [r2, #10]
    159e:	e7e7      	b.n	1570 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    15a0:	0020      	movs	r0, r4
    15a2:	6963      	ldr	r3, [r4, #20]
    15a4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    15a6:	6823      	ldr	r3, [r4, #0]
    15a8:	2220      	movs	r2, #32
    15aa:	729a      	strb	r2, [r3, #10]
}
    15ac:	e7e2      	b.n	1574 <_tc_interrupt_handler+0x24>
    15ae:	46c0      	nop			; (mov r8, r8)
    15b0:	200027e0 	.word	0x200027e0

000015b4 <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    15b4:	b510      	push	{r4, lr}
    15b6:	2000      	movs	r0, #0
    15b8:	4b01      	ldr	r3, [pc, #4]	; (15c0 <TC0_Handler+0xc>)
    15ba:	4798      	blx	r3
    15bc:	bd10      	pop	{r4, pc}
    15be:	46c0      	nop			; (mov r8, r8)
    15c0:	00001551 	.word	0x00001551

000015c4 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    15c4:	b510      	push	{r4, lr}
    15c6:	2001      	movs	r0, #1
    15c8:	4b01      	ldr	r3, [pc, #4]	; (15d0 <TC1_Handler+0xc>)
    15ca:	4798      	blx	r3
    15cc:	bd10      	pop	{r4, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	00001551 	.word	0x00001551

000015d4 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    15d4:	b510      	push	{r4, lr}
    15d6:	2002      	movs	r0, #2
    15d8:	4b01      	ldr	r3, [pc, #4]	; (15e0 <TC4_Handler+0xc>)
    15da:	4798      	blx	r3
    15dc:	bd10      	pop	{r4, pc}
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	00001551 	.word	0x00001551

000015e4 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    15e4:	b530      	push	{r4, r5, lr}
    15e6:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    15e8:	aa01      	add	r2, sp, #4
    15ea:	4b0b      	ldr	r3, [pc, #44]	; (1618 <_tc_get_inst_index+0x34>)
    15ec:	cb32      	ldmia	r3!, {r1, r4, r5}
    15ee:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    15f0:	9b01      	ldr	r3, [sp, #4]
    15f2:	4298      	cmp	r0, r3
    15f4:	d00d      	beq.n	1612 <_tc_get_inst_index+0x2e>
    15f6:	9b02      	ldr	r3, [sp, #8]
    15f8:	4298      	cmp	r0, r3
    15fa:	d008      	beq.n	160e <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    15fc:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    15fe:	9a03      	ldr	r2, [sp, #12]
    1600:	4282      	cmp	r2, r0
    1602:	d002      	beq.n	160a <_tc_get_inst_index+0x26>
}
    1604:	0018      	movs	r0, r3
    1606:	b005      	add	sp, #20
    1608:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    160a:	3302      	adds	r3, #2
    160c:	e002      	b.n	1614 <_tc_get_inst_index+0x30>
    160e:	2301      	movs	r3, #1
    1610:	e000      	b.n	1614 <_tc_get_inst_index+0x30>
    1612:	2300      	movs	r3, #0
			return i;
    1614:	b2db      	uxtb	r3, r3
    1616:	e7f5      	b.n	1604 <_tc_get_inst_index+0x20>
    1618:	0001408c 	.word	0x0001408c

0000161c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    161c:	b5f0      	push	{r4, r5, r6, r7, lr}
    161e:	46c6      	mov	lr, r8
    1620:	b500      	push	{lr}
    1622:	b08a      	sub	sp, #40	; 0x28
    1624:	0004      	movs	r4, r0
    1626:	000d      	movs	r5, r1
    1628:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    162a:	0008      	movs	r0, r1
    162c:	4baa      	ldr	r3, [pc, #680]	; (18d8 <tc_init+0x2bc>)
    162e:	4798      	blx	r3
    1630:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
    1632:	ab09      	add	r3, sp, #36	; 0x24
    1634:	221b      	movs	r2, #27
    1636:	701a      	strb	r2, [r3, #0]
    1638:	705a      	strb	r2, [r3, #1]
    163a:	3202      	adds	r2, #2
    163c:	709a      	strb	r2, [r3, #2]
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    163e:	a903      	add	r1, sp, #12
    1640:	4ba6      	ldr	r3, [pc, #664]	; (18dc <tc_init+0x2c0>)
    1642:	330c      	adds	r3, #12
    1644:	000a      	movs	r2, r1
    1646:	cb83      	ldmia	r3!, {r0, r1, r7}
    1648:	c283      	stmia	r2!, {r0, r1, r7}
    164a:	cb83      	ldmia	r3!, {r0, r1, r7}
    164c:	c283      	stmia	r2!, {r0, r1, r7}
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    164e:	2300      	movs	r3, #0
    1650:	60a3      	str	r3, [r4, #8]
    1652:	60e3      	str	r3, [r4, #12]
    1654:	6123      	str	r3, [r4, #16]
    1656:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1658:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    165a:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    165c:	4643      	mov	r3, r8
    165e:	009a      	lsls	r2, r3, #2
    1660:	4b9f      	ldr	r3, [pc, #636]	; (18e0 <tc_init+0x2c4>)
    1662:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1664:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1666:	2334      	movs	r3, #52	; 0x34
    1668:	5cf3      	ldrb	r3, [r6, r3]
    166a:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    166c:	78f3      	ldrb	r3, [r6, #3]
    166e:	2b08      	cmp	r3, #8
    1670:	d008      	beq.n	1684 <tc_init+0x68>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1672:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1674:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1676:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1678:	07db      	lsls	r3, r3, #31
    167a:	d508      	bpl.n	168e <tc_init+0x72>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    167c:	b00a      	add	sp, #40	; 0x28
    167e:	bc04      	pop	{r2}
    1680:	4690      	mov	r8, r2
    1682:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1684:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1686:	4642      	mov	r2, r8
    1688:	07d2      	lsls	r2, r2, #31
    168a:	d4f7      	bmi.n	167c <tc_init+0x60>
    168c:	e7f1      	b.n	1672 <tc_init+0x56>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    168e:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    1690:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1692:	079b      	lsls	r3, r3, #30
    1694:	d4f2      	bmi.n	167c <tc_init+0x60>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1696:	682b      	ldr	r3, [r5, #0]
    1698:	079b      	lsls	r3, r3, #30
    169a:	d4ef      	bmi.n	167c <tc_init+0x60>
	if (config->pwm_channel[0].enabled) {
    169c:	7c33      	ldrb	r3, [r6, #16]
    169e:	2b00      	cmp	r3, #0
    16a0:	d112      	bne.n	16c8 <tc_init+0xac>
	if (config->pwm_channel[1].enabled) {
    16a2:	7f33      	ldrb	r3, [r6, #28]
    16a4:	2b00      	cmp	r3, #0
    16a6:	d11b      	bne.n	16e0 <tc_init+0xc4>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    16a8:	4643      	mov	r3, r8
    16aa:	005a      	lsls	r2, r3, #1
    16ac:	a903      	add	r1, sp, #12
    16ae:	1c53      	adds	r3, r2, #1
    16b0:	009b      	lsls	r3, r3, #2
    16b2:	5858      	ldr	r0, [r3, r1]
    16b4:	4643      	mov	r3, r8
    16b6:	00db      	lsls	r3, r3, #3
    16b8:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    16ba:	b2d9      	uxtb	r1, r3
    16bc:	2904      	cmp	r1, #4
    16be:	d823      	bhi.n	1708 <tc_init+0xec>
    16c0:	008b      	lsls	r3, r1, #2
    16c2:	4988      	ldr	r1, [pc, #544]	; (18e4 <tc_init+0x2c8>)
    16c4:	58cb      	ldr	r3, [r1, r3]
    16c6:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    16c8:	a902      	add	r1, sp, #8
    16ca:	2301      	movs	r3, #1
    16cc:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    16ce:	2200      	movs	r2, #0
    16d0:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    16d2:	7e32      	ldrb	r2, [r6, #24]
    16d4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    16d6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    16d8:	7d30      	ldrb	r0, [r6, #20]
    16da:	4b83      	ldr	r3, [pc, #524]	; (18e8 <tc_init+0x2cc>)
    16dc:	4798      	blx	r3
    16de:	e7e0      	b.n	16a2 <tc_init+0x86>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    16e0:	a902      	add	r1, sp, #8
    16e2:	2301      	movs	r3, #1
    16e4:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    16e6:	2200      	movs	r2, #0
    16e8:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    16ea:	3224      	adds	r2, #36	; 0x24
    16ec:	18b2      	adds	r2, r6, r2
    16ee:	7812      	ldrb	r2, [r2, #0]
    16f0:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    16f2:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    16f4:	331f      	adds	r3, #31
    16f6:	18f3      	adds	r3, r6, r3
    16f8:	7818      	ldrb	r0, [r3, #0]
    16fa:	4b7b      	ldr	r3, [pc, #492]	; (18e8 <tc_init+0x2cc>)
    16fc:	4798      	blx	r3
    16fe:	e7d3      	b.n	16a8 <tc_init+0x8c>
			MCLK->APBAMASK.reg |= mask;
    1700:	497a      	ldr	r1, [pc, #488]	; (18ec <tc_init+0x2d0>)
    1702:	694b      	ldr	r3, [r1, #20]
    1704:	4318      	orrs	r0, r3
    1706:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    1708:	78f3      	ldrb	r3, [r6, #3]
    170a:	2b08      	cmp	r3, #8
    170c:	d100      	bne.n	1710 <tc_init+0xf4>
    170e:	e085      	b.n	181c <tc_init+0x200>
	gclk_chan_config.source_generator = config->clock_source;
    1710:	a901      	add	r1, sp, #4
    1712:	7833      	ldrb	r3, [r6, #0]
    1714:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1716:	ab09      	add	r3, sp, #36	; 0x24
    1718:	4642      	mov	r2, r8
    171a:	5c9f      	ldrb	r7, [r3, r2]
    171c:	0038      	movs	r0, r7
    171e:	4b74      	ldr	r3, [pc, #464]	; (18f0 <tc_init+0x2d4>)
    1720:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1722:	0038      	movs	r0, r7
    1724:	4b73      	ldr	r3, [pc, #460]	; (18f4 <tc_init+0x2d8>)
    1726:	4798      	blx	r3
			(uint32_t)config->counter_size |
    1728:	78f3      	ldrb	r3, [r6, #3]
    172a:	79f2      	ldrb	r2, [r6, #7]
    172c:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    172e:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    1730:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    1732:	7a72      	ldrb	r2, [r6, #9]
    1734:	2a00      	cmp	r2, #0
    1736:	d002      	beq.n	173e <tc_init+0x122>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    1738:	2280      	movs	r2, #128	; 0x80
    173a:	0252      	lsls	r2, r2, #9
    173c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    173e:	7ab2      	ldrb	r2, [r6, #10]
    1740:	2a00      	cmp	r2, #0
    1742:	d002      	beq.n	174a <tc_init+0x12e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    1744:	2280      	movs	r2, #128	; 0x80
    1746:	0292      	lsls	r2, r2, #10
    1748:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    174a:	7af2      	ldrb	r2, [r6, #11]
    174c:	2a00      	cmp	r2, #0
    174e:	d002      	beq.n	1756 <tc_init+0x13a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    1750:	2280      	movs	r2, #128	; 0x80
    1752:	0352      	lsls	r2, r2, #13
    1754:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    1756:	7b32      	ldrb	r2, [r6, #12]
    1758:	2a00      	cmp	r2, #0
    175a:	d002      	beq.n	1762 <tc_init+0x146>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    175c:	2280      	movs	r2, #128	; 0x80
    175e:	0392      	lsls	r2, r2, #14
    1760:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    1762:	7871      	ldrb	r1, [r6, #1]
    1764:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    1766:	78b2      	ldrb	r2, [r6, #2]
    1768:	01d2      	lsls	r2, r2, #7
    176a:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    176c:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    176e:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    1770:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    1772:	2b00      	cmp	r3, #0
    1774:	d1fc      	bne.n	1770 <tc_init+0x154>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1776:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1778:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    177a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    177c:	2b00      	cmp	r3, #0
    177e:	d1fc      	bne.n	177a <tc_init+0x15e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    1780:	79b3      	ldrb	r3, [r6, #6]
    1782:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    1784:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1786:	1e4b      	subs	r3, r1, #1
    1788:	4199      	sbcs	r1, r3
    178a:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    178c:	7bb3      	ldrb	r3, [r6, #14]
    178e:	2b00      	cmp	r3, #0
    1790:	d001      	beq.n	1796 <tc_init+0x17a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1792:	2301      	movs	r3, #1
    1794:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1796:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1798:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    179a:	2b00      	cmp	r3, #0
    179c:	d1fc      	bne.n	1798 <tc_init+0x17c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    179e:	33ff      	adds	r3, #255	; 0xff
    17a0:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    17a2:	2900      	cmp	r1, #0
    17a4:	d004      	beq.n	17b0 <tc_init+0x194>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17a6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    17a8:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    17aa:	2b00      	cmp	r3, #0
    17ac:	d1fc      	bne.n	17a8 <tc_init+0x18c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    17ae:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    17b0:	7a33      	ldrb	r3, [r6, #8]
    17b2:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17b4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    17b6:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    17b8:	2b00      	cmp	r3, #0
    17ba:	d1fc      	bne.n	17b6 <tc_init+0x19a>
	switch (module_inst->counter_size) {
    17bc:	7923      	ldrb	r3, [r4, #4]
    17be:	2b04      	cmp	r3, #4
    17c0:	d059      	beq.n	1876 <tc_init+0x25a>
    17c2:	2b08      	cmp	r3, #8
    17c4:	d074      	beq.n	18b0 <tc_init+0x294>
	return STATUS_ERR_INVALID_ARG;
    17c6:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    17c8:	2b00      	cmp	r3, #0
    17ca:	d000      	beq.n	17ce <tc_init+0x1b2>
    17cc:	e756      	b.n	167c <tc_init+0x60>
    17ce:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    17d0:	2b00      	cmp	r3, #0
    17d2:	d1fc      	bne.n	17ce <tc_init+0x1b2>
				= config->counter_16_bit.value;
    17d4:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    17d6:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17d8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    17da:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    17dc:	2b00      	cmp	r3, #0
    17de:	d1fc      	bne.n	17da <tc_init+0x1be>
					config->counter_16_bit.compare_capture_channel[0];
    17e0:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    17e2:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17e4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    17e6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    17e8:	2b00      	cmp	r3, #0
    17ea:	d1fc      	bne.n	17e6 <tc_init+0x1ca>
					config->counter_16_bit.compare_capture_channel[1];
    17ec:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    17ee:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    17f0:	2000      	movs	r0, #0
    17f2:	e743      	b.n	167c <tc_init+0x60>
			MCLK->APBBMASK.reg |= mask;
    17f4:	493d      	ldr	r1, [pc, #244]	; (18ec <tc_init+0x2d0>)
    17f6:	698b      	ldr	r3, [r1, #24]
    17f8:	4318      	orrs	r0, r3
    17fa:	6188      	str	r0, [r1, #24]
    17fc:	e784      	b.n	1708 <tc_init+0xec>
			MCLK->APBCMASK.reg |= mask;
    17fe:	493b      	ldr	r1, [pc, #236]	; (18ec <tc_init+0x2d0>)
    1800:	69cb      	ldr	r3, [r1, #28]
    1802:	4318      	orrs	r0, r3
    1804:	61c8      	str	r0, [r1, #28]
    1806:	e77f      	b.n	1708 <tc_init+0xec>
			MCLK->APBDMASK.reg |= mask;
    1808:	4938      	ldr	r1, [pc, #224]	; (18ec <tc_init+0x2d0>)
    180a:	6a0b      	ldr	r3, [r1, #32]
    180c:	4318      	orrs	r0, r3
    180e:	6208      	str	r0, [r1, #32]
    1810:	e77a      	b.n	1708 <tc_init+0xec>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    1812:	4b36      	ldr	r3, [pc, #216]	; (18ec <tc_init+0x2d0>)
    1814:	6a59      	ldr	r1, [r3, #36]	; 0x24
    1816:	4308      	orrs	r0, r1
    1818:	6258      	str	r0, [r3, #36]	; 0x24
    181a:	e775      	b.n	1708 <tc_init+0xec>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    181c:	4643      	mov	r3, r8
    181e:	3301      	adds	r3, #1
    1820:	2b02      	cmp	r3, #2
    1822:	dd00      	ble.n	1826 <tc_init+0x20a>
    1824:	e774      	b.n	1710 <tc_init+0xf4>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    1826:	ab03      	add	r3, sp, #12
    1828:	1cd1      	adds	r1, r2, #3
    182a:	0089      	lsls	r1, r1, #2
    182c:	58c9      	ldr	r1, [r1, r3]
    182e:	3202      	adds	r2, #2
    1830:	0092      	lsls	r2, r2, #2
    1832:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    1834:	b2da      	uxtb	r2, r3
    1836:	2a04      	cmp	r2, #4
    1838:	d900      	bls.n	183c <tc_init+0x220>
    183a:	e769      	b.n	1710 <tc_init+0xf4>
    183c:	0093      	lsls	r3, r2, #2
    183e:	4a2e      	ldr	r2, [pc, #184]	; (18f8 <tc_init+0x2dc>)
    1840:	58d3      	ldr	r3, [r2, r3]
    1842:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    1844:	4a29      	ldr	r2, [pc, #164]	; (18ec <tc_init+0x2d0>)
    1846:	6953      	ldr	r3, [r2, #20]
    1848:	4319      	orrs	r1, r3
    184a:	6151      	str	r1, [r2, #20]
    184c:	e760      	b.n	1710 <tc_init+0xf4>
			MCLK->APBBMASK.reg |= mask;
    184e:	4a27      	ldr	r2, [pc, #156]	; (18ec <tc_init+0x2d0>)
    1850:	6993      	ldr	r3, [r2, #24]
    1852:	4319      	orrs	r1, r3
    1854:	6191      	str	r1, [r2, #24]
    1856:	e75b      	b.n	1710 <tc_init+0xf4>
			MCLK->APBCMASK.reg |= mask;
    1858:	4a24      	ldr	r2, [pc, #144]	; (18ec <tc_init+0x2d0>)
    185a:	69d3      	ldr	r3, [r2, #28]
    185c:	4319      	orrs	r1, r3
    185e:	61d1      	str	r1, [r2, #28]
    1860:	e756      	b.n	1710 <tc_init+0xf4>
			MCLK->APBDMASK.reg |= mask;
    1862:	4a22      	ldr	r2, [pc, #136]	; (18ec <tc_init+0x2d0>)
    1864:	6a13      	ldr	r3, [r2, #32]
    1866:	4319      	orrs	r1, r3
    1868:	6211      	str	r1, [r2, #32]
    186a:	e751      	b.n	1710 <tc_init+0xf4>
			MCLK->APBEMASK.reg |= mask;
    186c:	4b1f      	ldr	r3, [pc, #124]	; (18ec <tc_init+0x2d0>)
    186e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1870:	4311      	orrs	r1, r2
    1872:	6259      	str	r1, [r3, #36]	; 0x24
    1874:	e74c      	b.n	1710 <tc_init+0xf4>
    1876:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    1878:	2b00      	cmp	r3, #0
    187a:	d1fc      	bne.n	1876 <tc_init+0x25a>
					config->counter_8_bit.value;
    187c:	3328      	adds	r3, #40	; 0x28
    187e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1880:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1882:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1884:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    1886:	2b00      	cmp	r3, #0
    1888:	d1fc      	bne.n	1884 <tc_init+0x268>
					config->counter_8_bit.period;
    188a:	3329      	adds	r3, #41	; 0x29
    188c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    188e:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1890:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1892:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    1894:	2b00      	cmp	r3, #0
    1896:	d1fc      	bne.n	1892 <tc_init+0x276>
					config->counter_8_bit.compare_capture_channel[0];
    1898:	332a      	adds	r3, #42	; 0x2a
    189a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    189c:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    189e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    18a0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    18a2:	2b00      	cmp	r3, #0
    18a4:	d1fc      	bne.n	18a0 <tc_init+0x284>
					config->counter_8_bit.compare_capture_channel[1];
    18a6:	332b      	adds	r3, #43	; 0x2b
    18a8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    18aa:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    18ac:	2000      	movs	r0, #0
    18ae:	e6e5      	b.n	167c <tc_init+0x60>
    18b0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    18b2:	2b00      	cmp	r3, #0
    18b4:	d1fc      	bne.n	18b0 <tc_init+0x294>
				= config->counter_32_bit.value;
    18b6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    18b8:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18ba:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    18bc:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    18be:	2b00      	cmp	r3, #0
    18c0:	d1fc      	bne.n	18bc <tc_init+0x2a0>
			hw->COUNT32.CC[0].reg =
    18c2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    18c4:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18c6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    18c8:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    18ca:	2b00      	cmp	r3, #0
    18cc:	d1fc      	bne.n	18c8 <tc_init+0x2ac>
					config->counter_32_bit.compare_capture_channel[1];
    18ce:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    18d0:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    18d2:	2000      	movs	r0, #0
    18d4:	e6d2      	b.n	167c <tc_init+0x60>
    18d6:	46c0      	nop			; (mov r8, r8)
    18d8:	000015e5 	.word	0x000015e5
    18dc:	0001408c 	.word	0x0001408c
    18e0:	200027e0 	.word	0x200027e0
    18e4:	00014064 	.word	0x00014064
    18e8:	0000e279 	.word	0x0000e279
    18ec:	40000400 	.word	0x40000400
    18f0:	0000e17d 	.word	0x0000e17d
    18f4:	0000e10d 	.word	0x0000e10d
    18f8:	00014078 	.word	0x00014078

000018fc <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    18fc:	b510      	push	{r4, lr}
    18fe:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    1900:	ab03      	add	r3, sp, #12
    1902:	2200      	movs	r2, #0
    1904:	701a      	strb	r2, [r3, #0]
    1906:	3201      	adds	r2, #1
    1908:	705a      	strb	r2, [r3, #1]
    190a:	709a      	strb	r2, [r3, #2]
    190c:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    190e:	4b27      	ldr	r3, [pc, #156]	; (19ac <udd_sleep_mode+0xb0>)
    1910:	781b      	ldrb	r3, [r3, #0]
    1912:	4283      	cmp	r3, r0
    1914:	d007      	beq.n	1926 <udd_sleep_mode+0x2a>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    1916:	2800      	cmp	r0, #0
    1918:	d107      	bne.n	192a <udd_sleep_mode+0x2e>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    191a:	4b24      	ldr	r3, [pc, #144]	; (19ac <udd_sleep_mode+0xb0>)
    191c:	781b      	ldrb	r3, [r3, #0]
    191e:	2b00      	cmp	r3, #0
    1920:	d123      	bne.n	196a <udd_sleep_mode+0x6e>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    1922:	4b22      	ldr	r3, [pc, #136]	; (19ac <udd_sleep_mode+0xb0>)
    1924:	7018      	strb	r0, [r3, #0]
}
    1926:	b004      	add	sp, #16
    1928:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    192a:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    192c:	5c1b      	ldrb	r3, [r3, r0]
    192e:	4a20      	ldr	r2, [pc, #128]	; (19b0 <udd_sleep_mode+0xb4>)
    1930:	5cd2      	ldrb	r2, [r2, r3]
    1932:	2aff      	cmp	r2, #255	; 0xff
    1934:	d100      	bne.n	1938 <udd_sleep_mode+0x3c>
    1936:	e7fe      	b.n	1936 <udd_sleep_mode+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1938:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    193c:	4251      	negs	r1, r2
    193e:	414a      	adcs	r2, r1
    1940:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1942:	b672      	cpsid	i
    1944:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1948:	2100      	movs	r1, #0
    194a:	4a1a      	ldr	r2, [pc, #104]	; (19b4 <udd_sleep_mode+0xb8>)
    194c:	7011      	strb	r1, [r2, #0]
	return flags;
    194e:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1950:	4917      	ldr	r1, [pc, #92]	; (19b0 <udd_sleep_mode+0xb4>)
    1952:	5cca      	ldrb	r2, [r1, r3]
    1954:	3201      	adds	r2, #1
    1956:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    1958:	2c00      	cmp	r4, #0
    195a:	d0de      	beq.n	191a <udd_sleep_mode+0x1e>
		cpu_irq_enable();
    195c:	2201      	movs	r2, #1
    195e:	4b15      	ldr	r3, [pc, #84]	; (19b4 <udd_sleep_mode+0xb8>)
    1960:	701a      	strb	r2, [r3, #0]
    1962:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1966:	b662      	cpsie	i
    1968:	e7d7      	b.n	191a <udd_sleep_mode+0x1e>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    196a:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    196c:	5cd3      	ldrb	r3, [r2, r3]
    196e:	4a10      	ldr	r2, [pc, #64]	; (19b0 <udd_sleep_mode+0xb4>)
    1970:	5cd2      	ldrb	r2, [r2, r3]
    1972:	2a00      	cmp	r2, #0
    1974:	d100      	bne.n	1978 <udd_sleep_mode+0x7c>
    1976:	e7fe      	b.n	1976 <udd_sleep_mode+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1978:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    197c:	4251      	negs	r1, r2
    197e:	414a      	adcs	r2, r1
    1980:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    1982:	b672      	cpsid	i
    1984:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1988:	2100      	movs	r1, #0
    198a:	4a0a      	ldr	r2, [pc, #40]	; (19b4 <udd_sleep_mode+0xb8>)
    198c:	7011      	strb	r1, [r2, #0]
	return flags;
    198e:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    1990:	4907      	ldr	r1, [pc, #28]	; (19b0 <udd_sleep_mode+0xb4>)
    1992:	5cca      	ldrb	r2, [r1, r3]
    1994:	3a01      	subs	r2, #1
    1996:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    1998:	2c00      	cmp	r4, #0
    199a:	d0c2      	beq.n	1922 <udd_sleep_mode+0x26>
		cpu_irq_enable();
    199c:	2201      	movs	r2, #1
    199e:	4b05      	ldr	r3, [pc, #20]	; (19b4 <udd_sleep_mode+0xb8>)
    19a0:	701a      	strb	r2, [r3, #0]
    19a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    19a6:	b662      	cpsie	i
    19a8:	e7bb      	b.n	1922 <udd_sleep_mode+0x26>
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	200005b0 	.word	0x200005b0
    19b0:	20002794 	.word	0x20002794
    19b4:	200002c6 	.word	0x200002c6

000019b8 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    19b8:	0643      	lsls	r3, r0, #25
    19ba:	d00b      	beq.n	19d4 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    19bc:	230f      	movs	r3, #15
    19be:	4003      	ands	r3, r0
    19c0:	005b      	lsls	r3, r3, #1
    19c2:	09c0      	lsrs	r0, r0, #7
    19c4:	1818      	adds	r0, r3, r0
    19c6:	3802      	subs	r0, #2
    19c8:	0083      	lsls	r3, r0, #2
    19ca:	1818      	adds	r0, r3, r0
    19cc:	0080      	lsls	r0, r0, #2
    19ce:	4b02      	ldr	r3, [pc, #8]	; (19d8 <udd_ep_get_job+0x20>)
    19d0:	1818      	adds	r0, r3, r0
	}
}
    19d2:	4770      	bx	lr
		return NULL;
    19d4:	2000      	movs	r0, #0
    19d6:	e7fc      	b.n	19d2 <udd_ep_get_job+0x1a>
    19d8:	20000560 	.word	0x20000560

000019dc <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    19dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    19de:	46d6      	mov	lr, sl
    19e0:	464f      	mov	r7, r9
    19e2:	4646      	mov	r6, r8
    19e4:	b5c0      	push	{r6, r7, lr}
    19e6:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    19e8:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    19ea:	b26b      	sxtb	r3, r5
    19ec:	2b00      	cmp	r3, #0
    19ee:	db26      	blt.n	1a3e <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    19f0:	0028      	movs	r0, r5
    19f2:	4b5e      	ldr	r3, [pc, #376]	; (1b6c <udd_ep_transfer_process+0x190>)
    19f4:	4798      	blx	r3
    19f6:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    19f8:	270f      	movs	r7, #15
    19fa:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    19fc:	8a03      	ldrh	r3, [r0, #16]
    19fe:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    1a00:	464b      	mov	r3, r9
    1a02:	881b      	ldrh	r3, [r3, #0]
    1a04:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    1a06:	7c83      	ldrb	r3, [r0, #18]
    1a08:	075b      	lsls	r3, r3, #29
    1a0a:	d46a      	bmi.n	1ae2 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    1a0c:	68e3      	ldr	r3, [r4, #12]
    1a0e:	4453      	add	r3, sl
    1a10:	001e      	movs	r6, r3
    1a12:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    1a14:	68a3      	ldr	r3, [r4, #8]
    1a16:	429e      	cmp	r6, r3
    1a18:	d800      	bhi.n	1a1c <udd_ep_transfer_process+0x40>
    1a1a:	e074      	b.n	1b06 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    1a1c:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    1a1e:	7ca3      	ldrb	r3, [r4, #18]
    1a20:	2201      	movs	r2, #1
    1a22:	4393      	bics	r3, r2
    1a24:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    1a26:	6823      	ldr	r3, [r4, #0]
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d003      	beq.n	1a34 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1a2c:	68e1      	ldr	r1, [r4, #12]
    1a2e:	002a      	movs	r2, r5
    1a30:	2000      	movs	r0, #0
    1a32:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    1a34:	bc1c      	pop	{r2, r3, r4}
    1a36:	4690      	mov	r8, r2
    1a38:	4699      	mov	r9, r3
    1a3a:	46a2      	mov	sl, r4
    1a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    1a3e:	0028      	movs	r0, r5
    1a40:	4b4a      	ldr	r3, [pc, #296]	; (1b6c <udd_ep_transfer_process+0x190>)
    1a42:	4798      	blx	r3
    1a44:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    1a46:	270f      	movs	r7, #15
    1a48:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    1a4a:	8a03      	ldrh	r3, [r0, #16]
    1a4c:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    1a4e:	464b      	mov	r3, r9
    1a50:	885e      	ldrh	r6, [r3, #2]
    1a52:	68c3      	ldr	r3, [r0, #12]
    1a54:	469c      	mov	ip, r3
    1a56:	4466      	add	r6, ip
    1a58:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    1a5a:	6881      	ldr	r1, [r0, #8]
    1a5c:	428e      	cmp	r6, r1
    1a5e:	d025      	beq.n	1aac <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1a60:	1b8d      	subs	r5, r1, r6
    1a62:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1a64:	4b42      	ldr	r3, [pc, #264]	; (1b70 <udd_ep_transfer_process+0x194>)
    1a66:	429d      	cmp	r5, r3
    1a68:	d906      	bls.n	1a78 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    1a6a:	001d      	movs	r5, r3
    1a6c:	4641      	mov	r1, r8
    1a6e:	0018      	movs	r0, r3
    1a70:	4b40      	ldr	r3, [pc, #256]	; (1b74 <udd_ep_transfer_process+0x198>)
    1a72:	4798      	blx	r3
    1a74:	1a6d      	subs	r5, r5, r1
    1a76:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    1a78:	7ca2      	ldrb	r2, [r4, #18]
    1a7a:	2300      	movs	r3, #0
    1a7c:	0792      	lsls	r2, r2, #30
    1a7e:	d507      	bpl.n	1a90 <udd_ep_transfer_process+0xb4>
    1a80:	4641      	mov	r1, r8
    1a82:	0028      	movs	r0, r5
    1a84:	4b3c      	ldr	r3, [pc, #240]	; (1b78 <udd_ep_transfer_process+0x19c>)
    1a86:	4798      	blx	r3
    1a88:	b289      	uxth	r1, r1
    1a8a:	424b      	negs	r3, r1
    1a8c:	414b      	adcs	r3, r1
    1a8e:	b2db      	uxtb	r3, r3
    1a90:	005b      	lsls	r3, r3, #1
    1a92:	7ca2      	ldrb	r2, [r4, #18]
    1a94:	2102      	movs	r1, #2
    1a96:	438a      	bics	r2, r1
    1a98:	4313      	orrs	r3, r2
    1a9a:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1a9c:	6862      	ldr	r2, [r4, #4]
    1a9e:	1992      	adds	r2, r2, r6
    1aa0:	002b      	movs	r3, r5
    1aa2:	0039      	movs	r1, r7
    1aa4:	4835      	ldr	r0, [pc, #212]	; (1b7c <udd_ep_transfer_process+0x1a0>)
    1aa6:	4c36      	ldr	r4, [pc, #216]	; (1b80 <udd_ep_transfer_process+0x1a4>)
    1aa8:	47a0      	blx	r4
    1aaa:	e7c3      	b.n	1a34 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    1aac:	7c83      	ldrb	r3, [r0, #18]
    1aae:	079b      	lsls	r3, r3, #30
    1ab0:	d40b      	bmi.n	1aca <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    1ab2:	7c83      	ldrb	r3, [r0, #18]
    1ab4:	2201      	movs	r2, #1
    1ab6:	4393      	bics	r3, r2
    1ab8:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    1aba:	6803      	ldr	r3, [r0, #0]
    1abc:	2b00      	cmp	r3, #0
    1abe:	d0b9      	beq.n	1a34 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1ac0:	002a      	movs	r2, r5
    1ac2:	0031      	movs	r1, r6
    1ac4:	2000      	movs	r0, #0
    1ac6:	4798      	blx	r3
    1ac8:	e7b4      	b.n	1a34 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    1aca:	7c83      	ldrb	r3, [r0, #18]
    1acc:	2202      	movs	r2, #2
    1ace:	4393      	bics	r3, r2
    1ad0:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    1ad2:	6842      	ldr	r2, [r0, #4]
    1ad4:	1992      	adds	r2, r2, r6
    1ad6:	2300      	movs	r3, #0
    1ad8:	0039      	movs	r1, r7
    1ada:	4828      	ldr	r0, [pc, #160]	; (1b7c <udd_ep_transfer_process+0x1a0>)
    1adc:	4c28      	ldr	r4, [pc, #160]	; (1b80 <udd_ep_transfer_process+0x1a4>)
    1ade:	47a0      	blx	r4
    1ae0:	e7a8      	b.n	1a34 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    1ae2:	6843      	ldr	r3, [r0, #4]
    1ae4:	68c2      	ldr	r2, [r0, #12]
    1ae6:	4694      	mov	ip, r2
    1ae8:	4463      	add	r3, ip
    1aea:	001e      	movs	r6, r3
    1aec:	4641      	mov	r1, r8
    1aee:	6880      	ldr	r0, [r0, #8]
    1af0:	4b21      	ldr	r3, [pc, #132]	; (1b78 <udd_ep_transfer_process+0x19c>)
    1af2:	4798      	blx	r3
    1af4:	000a      	movs	r2, r1
    1af6:	1e7b      	subs	r3, r7, #1
    1af8:	019b      	lsls	r3, r3, #6
    1afa:	4922      	ldr	r1, [pc, #136]	; (1b84 <udd_ep_transfer_process+0x1a8>)
    1afc:	1859      	adds	r1, r3, r1
    1afe:	0030      	movs	r0, r6
    1b00:	4b21      	ldr	r3, [pc, #132]	; (1b88 <udd_ep_transfer_process+0x1ac>)
    1b02:	4798      	blx	r3
    1b04:	e782      	b.n	1a0c <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    1b06:	464a      	mov	r2, r9
    1b08:	8892      	ldrh	r2, [r2, #4]
    1b0a:	4552      	cmp	r2, sl
    1b0c:	d000      	beq.n	1b10 <udd_ep_transfer_process+0x134>
    1b0e:	e786      	b.n	1a1e <udd_ep_transfer_process+0x42>
    1b10:	429e      	cmp	r6, r3
    1b12:	d100      	bne.n	1b16 <udd_ep_transfer_process+0x13a>
    1b14:	e783      	b.n	1a1e <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1b16:	1b9b      	subs	r3, r3, r6
    1b18:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1b1a:	4b15      	ldr	r3, [pc, #84]	; (1b70 <udd_ep_transfer_process+0x194>)
    1b1c:	429d      	cmp	r5, r3
    1b1e:	d916      	bls.n	1b4e <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    1b20:	001d      	movs	r5, r3
    1b22:	4641      	mov	r1, r8
    1b24:	0018      	movs	r0, r3
    1b26:	4b13      	ldr	r3, [pc, #76]	; (1b74 <udd_ep_transfer_process+0x198>)
    1b28:	4798      	blx	r3
    1b2a:	1a6b      	subs	r3, r5, r1
    1b2c:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    1b2e:	4598      	cmp	r8, r3
    1b30:	d914      	bls.n	1b5c <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    1b32:	7ca3      	ldrb	r3, [r4, #18]
    1b34:	2204      	movs	r2, #4
    1b36:	4313      	orrs	r3, r2
    1b38:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    1b3a:	1e7a      	subs	r2, r7, #1
    1b3c:	0192      	lsls	r2, r2, #6
    1b3e:	4b11      	ldr	r3, [pc, #68]	; (1b84 <udd_ep_transfer_process+0x1a8>)
    1b40:	18d2      	adds	r2, r2, r3
    1b42:	4643      	mov	r3, r8
    1b44:	0039      	movs	r1, r7
    1b46:	480d      	ldr	r0, [pc, #52]	; (1b7c <udd_ep_transfer_process+0x1a0>)
    1b48:	4c10      	ldr	r4, [pc, #64]	; (1b8c <udd_ep_transfer_process+0x1b0>)
    1b4a:	47a0      	blx	r4
    1b4c:	e772      	b.n	1a34 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    1b4e:	4641      	mov	r1, r8
    1b50:	0028      	movs	r0, r5
    1b52:	4b09      	ldr	r3, [pc, #36]	; (1b78 <udd_ep_transfer_process+0x19c>)
    1b54:	4798      	blx	r3
    1b56:	1a6b      	subs	r3, r5, r1
    1b58:	b29b      	uxth	r3, r3
    1b5a:	e7e8      	b.n	1b2e <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1b5c:	6862      	ldr	r2, [r4, #4]
    1b5e:	1992      	adds	r2, r2, r6
    1b60:	0039      	movs	r1, r7
    1b62:	4806      	ldr	r0, [pc, #24]	; (1b7c <udd_ep_transfer_process+0x1a0>)
    1b64:	4c09      	ldr	r4, [pc, #36]	; (1b8c <udd_ep_transfer_process+0x1b0>)
    1b66:	47a0      	blx	r4
    1b68:	e764      	b.n	1a34 <udd_ep_transfer_process+0x58>
    1b6a:	46c0      	nop			; (mov r8, r8)
    1b6c:	000019b9 	.word	0x000019b9
    1b70:	00001fff 	.word	0x00001fff
    1b74:	0000e845 	.word	0x0000e845
    1b78:	0000e671 	.word	0x0000e671
    1b7c:	2000286c 	.word	0x2000286c
    1b80:	00002b6d 	.word	0x00002b6d
    1b84:	200027ec 	.word	0x200027ec
    1b88:	000109c9 	.word	0x000109c9
    1b8c:	00002bc1 	.word	0x00002bc1

00001b90 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    1b90:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1b92:	2205      	movs	r2, #5
    1b94:	4b05      	ldr	r3, [pc, #20]	; (1bac <udd_ctrl_stall_data+0x1c>)
    1b96:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    1b98:	4c05      	ldr	r4, [pc, #20]	; (1bb0 <udd_ctrl_stall_data+0x20>)
    1b9a:	2180      	movs	r1, #128	; 0x80
    1b9c:	0020      	movs	r0, r4
    1b9e:	4b05      	ldr	r3, [pc, #20]	; (1bb4 <udd_ctrl_stall_data+0x24>)
    1ba0:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    1ba2:	2100      	movs	r1, #0
    1ba4:	0020      	movs	r0, r4
    1ba6:	4b04      	ldr	r3, [pc, #16]	; (1bb8 <udd_ctrl_stall_data+0x28>)
    1ba8:	4798      	blx	r3
}
    1baa:	bd10      	pop	{r4, pc}
    1bac:	2000055e 	.word	0x2000055e
    1bb0:	2000286c 	.word	0x2000286c
    1bb4:	00002ac1 	.word	0x00002ac1
    1bb8:	00002ae7 	.word	0x00002ae7

00001bbc <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    1bbc:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1bbe:	4c08      	ldr	r4, [pc, #32]	; (1be0 <_usb_device_lpm_suspend+0x24>)
    1bc0:	2106      	movs	r1, #6
    1bc2:	0020      	movs	r0, r4
    1bc4:	4d07      	ldr	r5, [pc, #28]	; (1be4 <_usb_device_lpm_suspend+0x28>)
    1bc6:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1bc8:	2104      	movs	r1, #4
    1bca:	0020      	movs	r0, r4
    1bcc:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1bce:	2102      	movs	r1, #2
    1bd0:	0020      	movs	r0, r4
    1bd2:	4b05      	ldr	r3, [pc, #20]	; (1be8 <_usb_device_lpm_suspend+0x2c>)
    1bd4:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    1bd6:	2002      	movs	r0, #2
    1bd8:	4b04      	ldr	r3, [pc, #16]	; (1bec <_usb_device_lpm_suspend+0x30>)
    1bda:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    1bdc:	bd70      	pop	{r4, r5, r6, pc}
    1bde:	46c0      	nop			; (mov r8, r8)
    1be0:	2000286c 	.word	0x2000286c
    1be4:	00002601 	.word	0x00002601
    1be8:	000025e1 	.word	0x000025e1
    1bec:	000018fd 	.word	0x000018fd

00001bf0 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    1bf0:	b570      	push	{r4, r5, r6, lr}
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    1bf2:	4b14      	ldr	r3, [pc, #80]	; (1c44 <_usb_on_wakeup+0x54>)
    1bf4:	8b1b      	ldrh	r3, [r3, #24]
    1bf6:	069b      	lsls	r3, r3, #26
    1bf8:	d41d      	bmi.n	1c36 <_usb_on_wakeup+0x46>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1bfa:	4912      	ldr	r1, [pc, #72]	; (1c44 <_usb_on_wakeup+0x54>)
    1bfc:	22d0      	movs	r2, #208	; 0xd0
    1bfe:	0112      	lsls	r2, r2, #4
    1c00:	68cb      	ldr	r3, [r1, #12]
    1c02:	4013      	ands	r3, r2
    1c04:	4293      	cmp	r3, r2
    1c06:	d1fb      	bne.n	1c00 <_usb_on_wakeup+0x10>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1c08:	4c0f      	ldr	r4, [pc, #60]	; (1c48 <_usb_on_wakeup+0x58>)
    1c0a:	2102      	movs	r1, #2
    1c0c:	0020      	movs	r0, r4
    1c0e:	4b0f      	ldr	r3, [pc, #60]	; (1c4c <_usb_on_wakeup+0x5c>)
    1c10:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1c12:	2104      	movs	r1, #4
    1c14:	0020      	movs	r0, r4
    1c16:	4d0e      	ldr	r5, [pc, #56]	; (1c50 <_usb_on_wakeup+0x60>)
    1c18:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    1c1a:	4a0e      	ldr	r2, [pc, #56]	; (1c54 <_usb_on_wakeup+0x64>)
    1c1c:	2106      	movs	r1, #6
    1c1e:	0020      	movs	r0, r4
    1c20:	4b0d      	ldr	r3, [pc, #52]	; (1c58 <_usb_on_wakeup+0x68>)
    1c22:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1c24:	2106      	movs	r1, #6
    1c26:	0020      	movs	r0, r4
    1c28:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    1c2a:	2003      	movs	r0, #3
    1c2c:	4b0b      	ldr	r3, [pc, #44]	; (1c5c <_usb_on_wakeup+0x6c>)
    1c2e:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    1c30:	4b0b      	ldr	r3, [pc, #44]	; (1c60 <_usb_on_wakeup+0x70>)
    1c32:	4798      	blx	r3
#endif
}
    1c34:	bd70      	pop	{r4, r5, r6, pc}
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    1c36:	4903      	ldr	r1, [pc, #12]	; (1c44 <_usb_on_wakeup+0x54>)
    1c38:	2280      	movs	r2, #128	; 0x80
    1c3a:	0052      	lsls	r2, r2, #1
    1c3c:	68cb      	ldr	r3, [r1, #12]
    1c3e:	4213      	tst	r3, r2
    1c40:	d0fc      	beq.n	1c3c <_usb_on_wakeup+0x4c>
    1c42:	e7e1      	b.n	1c08 <_usb_on_wakeup+0x18>
    1c44:	40000c00 	.word	0x40000c00
    1c48:	2000286c 	.word	0x2000286c
    1c4c:	00002601 	.word	0x00002601
    1c50:	000025e1 	.word	0x000025e1
    1c54:	00001bbd 	.word	0x00001bbd
    1c58:	000025bd 	.word	0x000025bd
    1c5c:	000018fd 	.word	0x000018fd
    1c60:	00003cb3 	.word	0x00003cb3

00001c64 <_usb_on_bus_reset>:
{
    1c64:	b570      	push	{r4, r5, r6, lr}
    1c66:	b082      	sub	sp, #8
    1c68:	0004      	movs	r4, r0
	udc_reset();
    1c6a:	4b1e      	ldr	r3, [pc, #120]	; (1ce4 <_usb_on_bus_reset+0x80>)
    1c6c:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1c6e:	2380      	movs	r3, #128	; 0x80
    1c70:	6822      	ldr	r2, [r4, #0]
    1c72:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    1c74:	ad01      	add	r5, sp, #4
    1c76:	0028      	movs	r0, r5
    1c78:	4b1b      	ldr	r3, [pc, #108]	; (1ce8 <_usb_on_bus_reset+0x84>)
    1c7a:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    1c7c:	2600      	movs	r6, #0
    1c7e:	706e      	strb	r6, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    1c80:	0029      	movs	r1, r5
    1c82:	0020      	movs	r0, r4
    1c84:	4b19      	ldr	r3, [pc, #100]	; (1cec <_usb_on_bus_reset+0x88>)
    1c86:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    1c88:	4919      	ldr	r1, [pc, #100]	; (1cf0 <_usb_on_bus_reset+0x8c>)
    1c8a:	0020      	movs	r0, r4
    1c8c:	4b19      	ldr	r3, [pc, #100]	; (1cf4 <_usb_on_bus_reset+0x90>)
    1c8e:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    1c90:	4b19      	ldr	r3, [pc, #100]	; (1cf8 <_usb_on_bus_reset+0x94>)
    1c92:	2202      	movs	r2, #2
    1c94:	2100      	movs	r1, #0
    1c96:	0020      	movs	r0, r4
    1c98:	4d18      	ldr	r5, [pc, #96]	; (1cfc <_usb_on_bus_reset+0x98>)
    1c9a:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    1c9c:	4b18      	ldr	r3, [pc, #96]	; (1d00 <_usb_on_bus_reset+0x9c>)
    1c9e:	2200      	movs	r2, #0
    1ca0:	2100      	movs	r1, #0
    1ca2:	0020      	movs	r0, r4
    1ca4:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    1ca6:	4b17      	ldr	r3, [pc, #92]	; (1d04 <_usb_on_bus_reset+0xa0>)
    1ca8:	2201      	movs	r2, #1
    1caa:	2100      	movs	r1, #0
    1cac:	0020      	movs	r0, r4
    1cae:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    1cb0:	2202      	movs	r2, #2
    1cb2:	2100      	movs	r1, #0
    1cb4:	0020      	movs	r0, r4
    1cb6:	4d14      	ldr	r5, [pc, #80]	; (1d08 <_usb_on_bus_reset+0xa4>)
    1cb8:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1cba:	2200      	movs	r2, #0
    1cbc:	2100      	movs	r1, #0
    1cbe:	0020      	movs	r0, r4
    1cc0:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    1cc2:	2201      	movs	r2, #1
    1cc4:	2100      	movs	r1, #0
    1cc6:	0020      	movs	r0, r4
    1cc8:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    1cca:	6821      	ldr	r1, [r4, #0]
    1ccc:	890b      	ldrh	r3, [r1, #8]
    1cce:	4a0f      	ldr	r2, [pc, #60]	; (1d0c <_usb_on_bus_reset+0xa8>)
    1cd0:	401a      	ands	r2, r3
    1cd2:	2380      	movs	r3, #128	; 0x80
    1cd4:	00db      	lsls	r3, r3, #3
    1cd6:	4313      	orrs	r3, r2
    1cd8:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    1cda:	4b0d      	ldr	r3, [pc, #52]	; (1d10 <_usb_on_bus_reset+0xac>)
    1cdc:	701e      	strb	r6, [r3, #0]
}
    1cde:	b002      	add	sp, #8
    1ce0:	bd70      	pop	{r4, r5, r6, pc}
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	00000571 	.word	0x00000571
    1ce8:	0000280d 	.word	0x0000280d
    1cec:	0000281d 	.word	0x0000281d
    1cf0:	200029ec 	.word	0x200029ec
    1cf4:	00002c11 	.word	0x00002c11
    1cf8:	00001e4d 	.word	0x00001e4d
    1cfc:	0000261d 	.word	0x0000261d
    1d00:	00002151 	.word	0x00002151
    1d04:	00001d51 	.word	0x00001d51
    1d08:	0000266d 	.word	0x0000266d
    1d0c:	fffff3ff 	.word	0xfffff3ff
    1d10:	2000055e 	.word	0x2000055e

00001d14 <udd_ctrl_send_zlp_in>:
{
    1d14:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    1d16:	2203      	movs	r2, #3
    1d18:	4b07      	ldr	r3, [pc, #28]	; (1d38 <udd_ctrl_send_zlp_in+0x24>)
    1d1a:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1d1c:	4c07      	ldr	r4, [pc, #28]	; (1d3c <udd_ctrl_send_zlp_in+0x28>)
    1d1e:	4908      	ldr	r1, [pc, #32]	; (1d40 <udd_ctrl_send_zlp_in+0x2c>)
    1d20:	0020      	movs	r0, r4
    1d22:	4b08      	ldr	r3, [pc, #32]	; (1d44 <udd_ctrl_send_zlp_in+0x30>)
    1d24:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    1d26:	4b08      	ldr	r3, [pc, #32]	; (1d48 <udd_ctrl_send_zlp_in+0x34>)
    1d28:	689a      	ldr	r2, [r3, #8]
    1d2a:	2300      	movs	r3, #0
    1d2c:	2100      	movs	r1, #0
    1d2e:	0020      	movs	r0, r4
    1d30:	4c06      	ldr	r4, [pc, #24]	; (1d4c <udd_ctrl_send_zlp_in+0x38>)
    1d32:	47a0      	blx	r4
}
    1d34:	bd10      	pop	{r4, pc}
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	2000055e 	.word	0x2000055e
    1d3c:	2000286c 	.word	0x2000286c
    1d40:	200029ec 	.word	0x200029ec
    1d44:	00002c11 	.word	0x00002c11
    1d48:	200029d4 	.word	0x200029d4
    1d4c:	00002b6d 	.word	0x00002b6d

00001d50 <_usb_ep0_on_tansfer_fail>:
{
    1d50:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    1d52:	7989      	ldrb	r1, [r1, #6]
    1d54:	b24b      	sxtb	r3, r1
    1d56:	2b00      	cmp	r3, #0
    1d58:	db06      	blt.n	1d68 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1d5a:	4b0e      	ldr	r3, [pc, #56]	; (1d94 <_usb_ep0_on_tansfer_fail+0x44>)
    1d5c:	781b      	ldrb	r3, [r3, #0]
    1d5e:	2b02      	cmp	r3, #2
    1d60:	d00f      	beq.n	1d82 <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1d62:	2b03      	cmp	r3, #3
    1d64:	d011      	beq.n	1d8a <_usb_ep0_on_tansfer_fail+0x3a>
}
    1d66:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1d68:	4b0a      	ldr	r3, [pc, #40]	; (1d94 <_usb_ep0_on_tansfer_fail+0x44>)
    1d6a:	781b      	ldrb	r3, [r3, #0]
    1d6c:	2b01      	cmp	r3, #1
    1d6e:	d005      	beq.n	1d7c <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1d70:	2b04      	cmp	r3, #4
    1d72:	d1f8      	bne.n	1d66 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1d74:	4808      	ldr	r0, [pc, #32]	; (1d98 <_usb_ep0_on_tansfer_fail+0x48>)
    1d76:	4b09      	ldr	r3, [pc, #36]	; (1d9c <_usb_ep0_on_tansfer_fail+0x4c>)
    1d78:	4798      	blx	r3
    1d7a:	e7f4      	b.n	1d66 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    1d7c:	4b08      	ldr	r3, [pc, #32]	; (1da0 <_usb_ep0_on_tansfer_fail+0x50>)
    1d7e:	4798      	blx	r3
    1d80:	e7f1      	b.n	1d66 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1d82:	2204      	movs	r2, #4
    1d84:	4b03      	ldr	r3, [pc, #12]	; (1d94 <_usb_ep0_on_tansfer_fail+0x44>)
    1d86:	701a      	strb	r2, [r3, #0]
    1d88:	e7ed      	b.n	1d66 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1d8a:	4803      	ldr	r0, [pc, #12]	; (1d98 <_usb_ep0_on_tansfer_fail+0x48>)
    1d8c:	4b03      	ldr	r3, [pc, #12]	; (1d9c <_usb_ep0_on_tansfer_fail+0x4c>)
    1d8e:	4798      	blx	r3
}
    1d90:	e7e9      	b.n	1d66 <_usb_ep0_on_tansfer_fail+0x16>
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	2000055e 	.word	0x2000055e
    1d98:	2000286c 	.word	0x2000286c
    1d9c:	00002ac1 	.word	0x00002ac1
    1da0:	00001d15 	.word	0x00001d15

00001da4 <udd_ctrl_in_sent>:
{
    1da4:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1da6:	4b20      	ldr	r3, [pc, #128]	; (1e28 <udd_ctrl_in_sent+0x84>)
    1da8:	881b      	ldrh	r3, [r3, #0]
    1daa:	4a20      	ldr	r2, [pc, #128]	; (1e2c <udd_ctrl_in_sent+0x88>)
    1dac:	8994      	ldrh	r4, [r2, #12]
    1dae:	1ae4      	subs	r4, r4, r3
    1db0:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    1db2:	2c00      	cmp	r4, #0
    1db4:	d118      	bne.n	1de8 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1db6:	4a1e      	ldr	r2, [pc, #120]	; (1e30 <udd_ctrl_in_sent+0x8c>)
    1db8:	8811      	ldrh	r1, [r2, #0]
    1dba:	185b      	adds	r3, r3, r1
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    1dc0:	4a1a      	ldr	r2, [pc, #104]	; (1e2c <udd_ctrl_in_sent+0x88>)
    1dc2:	88d2      	ldrh	r2, [r2, #6]
    1dc4:	429a      	cmp	r2, r3
    1dc6:	d023      	beq.n	1e10 <udd_ctrl_in_sent+0x6c>
    1dc8:	4b1a      	ldr	r3, [pc, #104]	; (1e34 <udd_ctrl_in_sent+0x90>)
    1dca:	781b      	ldrb	r3, [r3, #0]
    1dcc:	2b00      	cmp	r3, #0
    1dce:	d11f      	bne.n	1e10 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    1dd0:	4b16      	ldr	r3, [pc, #88]	; (1e2c <udd_ctrl_in_sent+0x88>)
    1dd2:	695b      	ldr	r3, [r3, #20]
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	d023      	beq.n	1e20 <udd_ctrl_in_sent+0x7c>
    1dd8:	4798      	blx	r3
    1dda:	2800      	cmp	r0, #0
    1ddc:	d020      	beq.n	1e20 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    1dde:	2200      	movs	r2, #0
    1de0:	4b11      	ldr	r3, [pc, #68]	; (1e28 <udd_ctrl_in_sent+0x84>)
    1de2:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    1de4:	4b11      	ldr	r3, [pc, #68]	; (1e2c <udd_ctrl_in_sent+0x88>)
    1de6:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    1de8:	2c07      	cmp	r4, #7
    1dea:	d919      	bls.n	1e20 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    1dec:	2200      	movs	r2, #0
    1dee:	4b11      	ldr	r3, [pc, #68]	; (1e34 <udd_ctrl_in_sent+0x90>)
    1df0:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    1df2:	2408      	movs	r4, #8
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    1df4:	4d0c      	ldr	r5, [pc, #48]	; (1e28 <udd_ctrl_in_sent+0x84>)
    1df6:	882b      	ldrh	r3, [r5, #0]
    1df8:	4a0c      	ldr	r2, [pc, #48]	; (1e2c <udd_ctrl_in_sent+0x88>)
    1dfa:	6892      	ldr	r2, [r2, #8]
    1dfc:	18d2      	adds	r2, r2, r3
    1dfe:	0023      	movs	r3, r4
    1e00:	2100      	movs	r1, #0
    1e02:	480d      	ldr	r0, [pc, #52]	; (1e38 <udd_ctrl_in_sent+0x94>)
    1e04:	4e0d      	ldr	r6, [pc, #52]	; (1e3c <udd_ctrl_in_sent+0x98>)
    1e06:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    1e08:	882b      	ldrh	r3, [r5, #0]
    1e0a:	18e4      	adds	r4, r4, r3
    1e0c:	802c      	strh	r4, [r5, #0]
}
    1e0e:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1e10:	2204      	movs	r2, #4
    1e12:	4b0b      	ldr	r3, [pc, #44]	; (1e40 <udd_ctrl_in_sent+0x9c>)
    1e14:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1e16:	490b      	ldr	r1, [pc, #44]	; (1e44 <udd_ctrl_in_sent+0xa0>)
    1e18:	4807      	ldr	r0, [pc, #28]	; (1e38 <udd_ctrl_in_sent+0x94>)
    1e1a:	4b0b      	ldr	r3, [pc, #44]	; (1e48 <udd_ctrl_in_sent+0xa4>)
    1e1c:	4798      	blx	r3
			return;
    1e1e:	e7f6      	b.n	1e0e <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    1e20:	2201      	movs	r2, #1
    1e22:	4b04      	ldr	r3, [pc, #16]	; (1e34 <udd_ctrl_in_sent+0x90>)
    1e24:	701a      	strb	r2, [r3, #0]
    1e26:	e7e5      	b.n	1df4 <udd_ctrl_in_sent+0x50>
    1e28:	2000055a 	.word	0x2000055a
    1e2c:	200029d4 	.word	0x200029d4
    1e30:	2000055c 	.word	0x2000055c
    1e34:	20000558 	.word	0x20000558
    1e38:	2000286c 	.word	0x2000286c
    1e3c:	00002b6d 	.word	0x00002b6d
    1e40:	2000055e 	.word	0x2000055e
    1e44:	200029ec 	.word	0x200029ec
    1e48:	00002c11 	.word	0x00002c11

00001e4c <_usb_ep0_on_setup>:
{
    1e4c:	b510      	push	{r4, lr}
    1e4e:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    1e50:	4b2c      	ldr	r3, [pc, #176]	; (1f04 <_usb_ep0_on_setup+0xb8>)
    1e52:	781b      	ldrb	r3, [r3, #0]
    1e54:	2b00      	cmp	r3, #0
    1e56:	d007      	beq.n	1e68 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    1e58:	4b2b      	ldr	r3, [pc, #172]	; (1f08 <_usb_ep0_on_setup+0xbc>)
    1e5a:	691b      	ldr	r3, [r3, #16]
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d000      	beq.n	1e62 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    1e60:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    1e62:	2200      	movs	r2, #0
    1e64:	4b27      	ldr	r3, [pc, #156]	; (1f04 <_usb_ep0_on_setup+0xb8>)
    1e66:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    1e68:	8823      	ldrh	r3, [r4, #0]
    1e6a:	2b08      	cmp	r3, #8
    1e6c:	d002      	beq.n	1e74 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    1e6e:	4b27      	ldr	r3, [pc, #156]	; (1f0c <_usb_ep0_on_setup+0xc0>)
    1e70:	4798      	blx	r3
}
    1e72:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    1e74:	4a24      	ldr	r2, [pc, #144]	; (1f08 <_usb_ep0_on_setup+0xbc>)
    1e76:	4b26      	ldr	r3, [pc, #152]	; (1f10 <_usb_ep0_on_setup+0xc4>)
    1e78:	7819      	ldrb	r1, [r3, #0]
    1e7a:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    1e7c:	7859      	ldrb	r1, [r3, #1]
    1e7e:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    1e80:	78d8      	ldrb	r0, [r3, #3]
    1e82:	0200      	lsls	r0, r0, #8
    1e84:	7899      	ldrb	r1, [r3, #2]
    1e86:	1809      	adds	r1, r1, r0
    1e88:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    1e8a:	7958      	ldrb	r0, [r3, #5]
    1e8c:	0200      	lsls	r0, r0, #8
    1e8e:	7919      	ldrb	r1, [r3, #4]
    1e90:	1809      	adds	r1, r1, r0
    1e92:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    1e94:	79d9      	ldrb	r1, [r3, #7]
    1e96:	0209      	lsls	r1, r1, #8
    1e98:	799b      	ldrb	r3, [r3, #6]
    1e9a:	185b      	adds	r3, r3, r1
    1e9c:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    1e9e:	4b1d      	ldr	r3, [pc, #116]	; (1f14 <_usb_ep0_on_setup+0xc8>)
    1ea0:	4798      	blx	r3
    1ea2:	2800      	cmp	r0, #0
    1ea4:	d016      	beq.n	1ed4 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    1ea6:	4b18      	ldr	r3, [pc, #96]	; (1f08 <_usb_ep0_on_setup+0xbc>)
    1ea8:	781b      	ldrb	r3, [r3, #0]
    1eaa:	2b7f      	cmp	r3, #127	; 0x7f
    1eac:	d815      	bhi.n	1eda <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    1eae:	4b16      	ldr	r3, [pc, #88]	; (1f08 <_usb_ep0_on_setup+0xbc>)
    1eb0:	88db      	ldrh	r3, [r3, #6]
    1eb2:	2b00      	cmp	r3, #0
    1eb4:	d022      	beq.n	1efc <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    1eb6:	2300      	movs	r3, #0
    1eb8:	4a17      	ldr	r2, [pc, #92]	; (1f18 <_usb_ep0_on_setup+0xcc>)
    1eba:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    1ebc:	4a17      	ldr	r2, [pc, #92]	; (1f1c <_usb_ep0_on_setup+0xd0>)
    1ebe:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    1ec0:	2201      	movs	r2, #1
    1ec2:	4b10      	ldr	r3, [pc, #64]	; (1f04 <_usb_ep0_on_setup+0xb8>)
    1ec4:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1ec6:	2308      	movs	r3, #8
    1ec8:	4a11      	ldr	r2, [pc, #68]	; (1f10 <_usb_ep0_on_setup+0xc4>)
    1eca:	2100      	movs	r1, #0
    1ecc:	4814      	ldr	r0, [pc, #80]	; (1f20 <_usb_ep0_on_setup+0xd4>)
    1ece:	4c15      	ldr	r4, [pc, #84]	; (1f24 <_usb_ep0_on_setup+0xd8>)
    1ed0:	47a0      	blx	r4
    1ed2:	e7ce      	b.n	1e72 <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    1ed4:	4b0d      	ldr	r3, [pc, #52]	; (1f0c <_usb_ep0_on_setup+0xc0>)
    1ed6:	4798      	blx	r3
			return;
    1ed8:	e7cb      	b.n	1e72 <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    1eda:	2300      	movs	r3, #0
    1edc:	4a0e      	ldr	r2, [pc, #56]	; (1f18 <_usb_ep0_on_setup+0xcc>)
    1ede:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    1ee0:	4a0e      	ldr	r2, [pc, #56]	; (1f1c <_usb_ep0_on_setup+0xd0>)
    1ee2:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    1ee4:	2202      	movs	r2, #2
    1ee6:	4b07      	ldr	r3, [pc, #28]	; (1f04 <_usb_ep0_on_setup+0xb8>)
    1ee8:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1eea:	2308      	movs	r3, #8
    1eec:	4a08      	ldr	r2, [pc, #32]	; (1f10 <_usb_ep0_on_setup+0xc4>)
    1eee:	2100      	movs	r1, #0
    1ef0:	480b      	ldr	r0, [pc, #44]	; (1f20 <_usb_ep0_on_setup+0xd4>)
    1ef2:	4c0c      	ldr	r4, [pc, #48]	; (1f24 <_usb_ep0_on_setup+0xd8>)
    1ef4:	47a0      	blx	r4
			udd_ctrl_in_sent();
    1ef6:	4b0c      	ldr	r3, [pc, #48]	; (1f28 <_usb_ep0_on_setup+0xdc>)
    1ef8:	4798      	blx	r3
    1efa:	e7ba      	b.n	1e72 <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    1efc:	4b0b      	ldr	r3, [pc, #44]	; (1f2c <_usb_ep0_on_setup+0xe0>)
    1efe:	4798      	blx	r3
				return;
    1f00:	e7b7      	b.n	1e72 <_usb_ep0_on_setup+0x26>
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	2000055e 	.word	0x2000055e
    1f08:	200029d4 	.word	0x200029d4
    1f0c:	00001b91 	.word	0x00001b91
    1f10:	200029ec 	.word	0x200029ec
    1f14:	00000615 	.word	0x00000615
    1f18:	2000055c 	.word	0x2000055c
    1f1c:	2000055a 	.word	0x2000055a
    1f20:	2000286c 	.word	0x2000286c
    1f24:	00002bc1 	.word	0x00002bc1
    1f28:	00001da5 	.word	0x00001da5
    1f2c:	00001d15 	.word	0x00001d15

00001f30 <_usb_on_sof_notify>:
{
    1f30:	b510      	push	{r4, lr}
	udc_sof_notify();
    1f32:	4b01      	ldr	r3, [pc, #4]	; (1f38 <_usb_on_sof_notify+0x8>)
    1f34:	4798      	blx	r3
}
    1f36:	bd10      	pop	{r4, pc}
    1f38:	000005d1 	.word	0x000005d1

00001f3c <_usb_on_suspend>:
{
    1f3c:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1f3e:	4c07      	ldr	r4, [pc, #28]	; (1f5c <_usb_on_suspend+0x20>)
    1f40:	2104      	movs	r1, #4
    1f42:	0020      	movs	r0, r4
    1f44:	4b06      	ldr	r3, [pc, #24]	; (1f60 <_usb_on_suspend+0x24>)
    1f46:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1f48:	2102      	movs	r1, #2
    1f4a:	0020      	movs	r0, r4
    1f4c:	4b05      	ldr	r3, [pc, #20]	; (1f64 <_usb_on_suspend+0x28>)
    1f4e:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    1f50:	2001      	movs	r0, #1
    1f52:	4b05      	ldr	r3, [pc, #20]	; (1f68 <_usb_on_suspend+0x2c>)
    1f54:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    1f56:	4b05      	ldr	r3, [pc, #20]	; (1f6c <_usb_on_suspend+0x30>)
    1f58:	4798      	blx	r3
}
    1f5a:	bd10      	pop	{r4, pc}
    1f5c:	2000286c 	.word	0x2000286c
    1f60:	00002601 	.word	0x00002601
    1f64:	000025e1 	.word	0x000025e1
    1f68:	000018fd 	.word	0x000018fd
    1f6c:	00003cb1 	.word	0x00003cb1

00001f70 <udd_ep_abort>:
{
    1f70:	b510      	push	{r4, lr}
    1f72:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    1f74:	0001      	movs	r1, r0
    1f76:	480a      	ldr	r0, [pc, #40]	; (1fa0 <udd_ep_abort+0x30>)
    1f78:	4b0a      	ldr	r3, [pc, #40]	; (1fa4 <udd_ep_abort+0x34>)
    1f7a:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    1f7c:	0020      	movs	r0, r4
    1f7e:	4b0a      	ldr	r3, [pc, #40]	; (1fa8 <udd_ep_abort+0x38>)
    1f80:	4798      	blx	r3
	if (!ptr_job->busy) {
    1f82:	7c83      	ldrb	r3, [r0, #18]
    1f84:	07db      	lsls	r3, r3, #31
    1f86:	d50a      	bpl.n	1f9e <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    1f88:	7c83      	ldrb	r3, [r0, #18]
    1f8a:	2201      	movs	r2, #1
    1f8c:	4393      	bics	r3, r2
    1f8e:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    1f90:	6803      	ldr	r3, [r0, #0]
    1f92:	2b00      	cmp	r3, #0
    1f94:	d003      	beq.n	1f9e <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    1f96:	68c1      	ldr	r1, [r0, #12]
    1f98:	0022      	movs	r2, r4
    1f9a:	2001      	movs	r0, #1
    1f9c:	4798      	blx	r3
}
    1f9e:	bd10      	pop	{r4, pc}
    1fa0:	2000286c 	.word	0x2000286c
    1fa4:	00002a61 	.word	0x00002a61
    1fa8:	000019b9 	.word	0x000019b9

00001fac <udd_ep_free>:
{
    1fac:	b570      	push	{r4, r5, r6, lr}
    1fae:	b082      	sub	sp, #8
    1fb0:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    1fb2:	ad01      	add	r5, sp, #4
    1fb4:	0028      	movs	r0, r5
    1fb6:	4b0d      	ldr	r3, [pc, #52]	; (1fec <udd_ep_free+0x40>)
    1fb8:	4798      	blx	r3
	udd_ep_abort(ep);
    1fba:	0020      	movs	r0, r4
    1fbc:	4b0c      	ldr	r3, [pc, #48]	; (1ff0 <udd_ep_free+0x44>)
    1fbe:	4798      	blx	r3
	config_ep.ep_address = ep;
    1fc0:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    1fc2:	2300      	movs	r3, #0
    1fc4:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    1fc6:	4e0b      	ldr	r6, [pc, #44]	; (1ff4 <udd_ep_free+0x48>)
    1fc8:	0029      	movs	r1, r5
    1fca:	0030      	movs	r0, r6
    1fcc:	4b0a      	ldr	r3, [pc, #40]	; (1ff8 <udd_ep_free+0x4c>)
    1fce:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1fd0:	210f      	movs	r1, #15
    1fd2:	4021      	ands	r1, r4
    1fd4:	2200      	movs	r2, #0
    1fd6:	0030      	movs	r0, r6
    1fd8:	4b08      	ldr	r3, [pc, #32]	; (1ffc <udd_ep_free+0x50>)
    1fda:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1fdc:	2200      	movs	r2, #0
    1fde:	0021      	movs	r1, r4
    1fe0:	0030      	movs	r0, r6
    1fe2:	4b07      	ldr	r3, [pc, #28]	; (2000 <STACK_SIZE>)
    1fe4:	4798      	blx	r3
}
    1fe6:	b002      	add	sp, #8
    1fe8:	bd70      	pop	{r4, r5, r6, pc}
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	0000280d 	.word	0x0000280d
    1ff0:	00001f71 	.word	0x00001f71
    1ff4:	2000286c 	.word	0x2000286c
    1ff8:	0000281d 	.word	0x0000281d
    1ffc:	00002645 	.word	0x00002645
    2000:	0000273d 	.word	0x0000273d

00002004 <udd_ep_alloc>:
{
    2004:	b5f0      	push	{r4, r5, r6, r7, lr}
    2006:	b083      	sub	sp, #12
    2008:	0005      	movs	r5, r0
    200a:	000f      	movs	r7, r1
    200c:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    200e:	ae01      	add	r6, sp, #4
    2010:	0030      	movs	r0, r6
    2012:	4b36      	ldr	r3, [pc, #216]	; (20ec <udd_ep_alloc+0xe8>)
    2014:	4798      	blx	r3
	config_ep.ep_address = ep;
    2016:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    2018:	2c08      	cmp	r4, #8
    201a:	d813      	bhi.n	2044 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    201c:	2200      	movs	r2, #0
    201e:	ab01      	add	r3, sp, #4
    2020:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    2022:	0028      	movs	r0, r5
    2024:	4b32      	ldr	r3, [pc, #200]	; (20f0 <udd_ep_alloc+0xec>)
    2026:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    2028:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    202a:	2103      	movs	r1, #3
    202c:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    202e:	2901      	cmp	r1, #1
    2030:	d038      	beq.n	20a4 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    2032:	2902      	cmp	r1, #2
    2034:	d043      	beq.n	20be <udd_ep_alloc+0xba>
		return false;
    2036:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    2038:	2903      	cmp	r1, #3
    203a:	d13d      	bne.n	20b8 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    203c:	2204      	movs	r2, #4
    203e:	ab01      	add	r3, sp, #4
    2040:	70da      	strb	r2, [r3, #3]
    2042:	e032      	b.n	20aa <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    2044:	2c10      	cmp	r4, #16
    2046:	d803      	bhi.n	2050 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    2048:	2201      	movs	r2, #1
    204a:	ab01      	add	r3, sp, #4
    204c:	705a      	strb	r2, [r3, #1]
    204e:	e7e8      	b.n	2022 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    2050:	2c20      	cmp	r4, #32
    2052:	d803      	bhi.n	205c <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    2054:	2202      	movs	r2, #2
    2056:	ab01      	add	r3, sp, #4
    2058:	705a      	strb	r2, [r3, #1]
    205a:	e7e2      	b.n	2022 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    205c:	2c40      	cmp	r4, #64	; 0x40
    205e:	d803      	bhi.n	2068 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2060:	2203      	movs	r2, #3
    2062:	ab01      	add	r3, sp, #4
    2064:	705a      	strb	r2, [r3, #1]
    2066:	e7dc      	b.n	2022 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    2068:	2c80      	cmp	r4, #128	; 0x80
    206a:	d803      	bhi.n	2074 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    206c:	2204      	movs	r2, #4
    206e:	ab01      	add	r3, sp, #4
    2070:	705a      	strb	r2, [r3, #1]
    2072:	e7d6      	b.n	2022 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    2074:	2380      	movs	r3, #128	; 0x80
    2076:	005b      	lsls	r3, r3, #1
    2078:	429c      	cmp	r4, r3
    207a:	d803      	bhi.n	2084 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    207c:	2205      	movs	r2, #5
    207e:	ab01      	add	r3, sp, #4
    2080:	705a      	strb	r2, [r3, #1]
    2082:	e7ce      	b.n	2022 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    2084:	2380      	movs	r3, #128	; 0x80
    2086:	009b      	lsls	r3, r3, #2
    2088:	429c      	cmp	r4, r3
    208a:	d803      	bhi.n	2094 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    208c:	2206      	movs	r2, #6
    208e:	ab01      	add	r3, sp, #4
    2090:	705a      	strb	r2, [r3, #1]
    2092:	e7c6      	b.n	2022 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    2094:	4a17      	ldr	r2, [pc, #92]	; (20f4 <udd_ep_alloc+0xf0>)
		return false;
    2096:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    2098:	4294      	cmp	r4, r2
    209a:	d80d      	bhi.n	20b8 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    209c:	2207      	movs	r2, #7
    209e:	ab01      	add	r3, sp, #4
    20a0:	705a      	strb	r2, [r3, #1]
    20a2:	e7be      	b.n	2022 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    20a4:	2202      	movs	r2, #2
    20a6:	ab01      	add	r3, sp, #4
    20a8:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    20aa:	a901      	add	r1, sp, #4
    20ac:	4812      	ldr	r0, [pc, #72]	; (20f8 <udd_ep_alloc+0xf4>)
    20ae:	4b13      	ldr	r3, [pc, #76]	; (20fc <udd_ep_alloc+0xf8>)
    20b0:	4798      	blx	r3
		return false;
    20b2:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    20b4:	2800      	cmp	r0, #0
    20b6:	d006      	beq.n	20c6 <udd_ep_alloc+0xc2>
}
    20b8:	0018      	movs	r0, r3
    20ba:	b003      	add	sp, #12
    20bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    20be:	2203      	movs	r2, #3
    20c0:	ab01      	add	r3, sp, #4
    20c2:	70da      	strb	r2, [r3, #3]
    20c4:	e7f1      	b.n	20aa <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    20c6:	210f      	movs	r1, #15
    20c8:	4029      	ands	r1, r5
    20ca:	4c0b      	ldr	r4, [pc, #44]	; (20f8 <udd_ep_alloc+0xf4>)
    20cc:	4b0c      	ldr	r3, [pc, #48]	; (2100 <udd_ep_alloc+0xfc>)
    20ce:	2200      	movs	r2, #0
    20d0:	0020      	movs	r0, r4
    20d2:	4e0c      	ldr	r6, [pc, #48]	; (2104 <udd_ep_alloc+0x100>)
    20d4:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    20d6:	2200      	movs	r2, #0
    20d8:	0029      	movs	r1, r5
    20da:	0020      	movs	r0, r4
    20dc:	4e0a      	ldr	r6, [pc, #40]	; (2108 <udd_ep_alloc+0x104>)
    20de:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    20e0:	2201      	movs	r2, #1
    20e2:	0029      	movs	r1, r5
    20e4:	0020      	movs	r0, r4
    20e6:	47b0      	blx	r6
	return true;
    20e8:	2301      	movs	r3, #1
    20ea:	e7e5      	b.n	20b8 <udd_ep_alloc+0xb4>
    20ec:	0000280d 	.word	0x0000280d
    20f0:	000019b9 	.word	0x000019b9
    20f4:	000003ff 	.word	0x000003ff
    20f8:	2000286c 	.word	0x2000286c
    20fc:	0000281d 	.word	0x0000281d
    2100:	000019dd 	.word	0x000019dd
    2104:	0000261d 	.word	0x0000261d
    2108:	0000266d 	.word	0x0000266d

0000210c <udd_ep_is_halted>:
{
    210c:	b510      	push	{r4, lr}
    210e:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    2110:	4801      	ldr	r0, [pc, #4]	; (2118 <udd_ep_is_halted+0xc>)
    2112:	4b02      	ldr	r3, [pc, #8]	; (211c <udd_ep_is_halted+0x10>)
    2114:	4798      	blx	r3
}
    2116:	bd10      	pop	{r4, pc}
    2118:	2000286c 	.word	0x2000286c
    211c:	00002a97 	.word	0x00002a97

00002120 <udd_ep_set_halt>:
{
    2120:	b510      	push	{r4, lr}
    2122:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2124:	230f      	movs	r3, #15
    2126:	4003      	ands	r3, r0
		return false;
    2128:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    212a:	2b02      	cmp	r3, #2
    212c:	d900      	bls.n	2130 <udd_ep_set_halt+0x10>
}
    212e:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    2130:	0021      	movs	r1, r4
    2132:	4804      	ldr	r0, [pc, #16]	; (2144 <udd_ep_set_halt+0x24>)
    2134:	4b04      	ldr	r3, [pc, #16]	; (2148 <udd_ep_set_halt+0x28>)
    2136:	4798      	blx	r3
	udd_ep_abort(ep);
    2138:	0020      	movs	r0, r4
    213a:	4b04      	ldr	r3, [pc, #16]	; (214c <udd_ep_set_halt+0x2c>)
    213c:	4798      	blx	r3
	return true;
    213e:	2001      	movs	r0, #1
    2140:	e7f5      	b.n	212e <udd_ep_set_halt+0xe>
    2142:	46c0      	nop			; (mov r8, r8)
    2144:	2000286c 	.word	0x2000286c
    2148:	00002ac1 	.word	0x00002ac1
    214c:	00001f71 	.word	0x00001f71

00002150 <_usb_ep0_on_tansfer_ok>:
{
    2150:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    2152:	4b34      	ldr	r3, [pc, #208]	; (2224 <_usb_ep0_on_tansfer_ok+0xd4>)
    2154:	781b      	ldrb	r3, [r3, #0]
    2156:	2b01      	cmp	r3, #1
    2158:	d00a      	beq.n	2170 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    215a:	2b02      	cmp	r3, #2
    215c:	d05f      	beq.n	221e <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    215e:	4b32      	ldr	r3, [pc, #200]	; (2228 <_usb_ep0_on_tansfer_ok+0xd8>)
    2160:	691b      	ldr	r3, [r3, #16]
    2162:	2b00      	cmp	r3, #0
    2164:	d000      	beq.n	2168 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    2166:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    2168:	2200      	movs	r2, #0
    216a:	4b2e      	ldr	r3, [pc, #184]	; (2224 <_usb_ep0_on_tansfer_ok+0xd4>)
    216c:	701a      	strb	r2, [r3, #0]
}
    216e:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    2170:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2172:	4b2d      	ldr	r3, [pc, #180]	; (2228 <_usb_ep0_on_tansfer_ok+0xd8>)
    2174:	899b      	ldrh	r3, [r3, #12]
    2176:	4a2d      	ldr	r2, [pc, #180]	; (222c <_usb_ep0_on_tansfer_ok+0xdc>)
    2178:	8814      	ldrh	r4, [r2, #0]
    217a:	1962      	adds	r2, r4, r5
    217c:	4293      	cmp	r3, r2
    217e:	da01      	bge.n	2184 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2180:	1b1d      	subs	r5, r3, r4
    2182:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    2184:	4b28      	ldr	r3, [pc, #160]	; (2228 <_usb_ep0_on_tansfer_ok+0xd8>)
    2186:	6898      	ldr	r0, [r3, #8]
    2188:	1900      	adds	r0, r0, r4
    218a:	002a      	movs	r2, r5
    218c:	4928      	ldr	r1, [pc, #160]	; (2230 <_usb_ep0_on_tansfer_ok+0xe0>)
    218e:	4b29      	ldr	r3, [pc, #164]	; (2234 <_usb_ep0_on_tansfer_ok+0xe4>)
    2190:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    2192:	1964      	adds	r4, r4, r5
    2194:	b2a4      	uxth	r4, r4
    2196:	4b25      	ldr	r3, [pc, #148]	; (222c <_usb_ep0_on_tansfer_ok+0xdc>)
    2198:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    219a:	2d08      	cmp	r5, #8
    219c:	d00a      	beq.n	21b4 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    219e:	4b22      	ldr	r3, [pc, #136]	; (2228 <_usb_ep0_on_tansfer_ok+0xd8>)
    21a0:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    21a2:	695b      	ldr	r3, [r3, #20]
    21a4:	2b00      	cmp	r3, #0
    21a6:	d002      	beq.n	21ae <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    21a8:	4798      	blx	r3
    21aa:	2800      	cmp	r0, #0
    21ac:	d014      	beq.n	21d8 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    21ae:	4b22      	ldr	r3, [pc, #136]	; (2238 <_usb_ep0_on_tansfer_ok+0xe8>)
    21b0:	4798      	blx	r3
    21b2:	e7dc      	b.n	216e <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    21b4:	4b1c      	ldr	r3, [pc, #112]	; (2228 <_usb_ep0_on_tansfer_ok+0xd8>)
    21b6:	88da      	ldrh	r2, [r3, #6]
    21b8:	4b20      	ldr	r3, [pc, #128]	; (223c <_usb_ep0_on_tansfer_ok+0xec>)
    21ba:	881b      	ldrh	r3, [r3, #0]
    21bc:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    21be:	429a      	cmp	r2, r3
    21c0:	dded      	ble.n	219e <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    21c2:	4b19      	ldr	r3, [pc, #100]	; (2228 <_usb_ep0_on_tansfer_ok+0xd8>)
    21c4:	899b      	ldrh	r3, [r3, #12]
    21c6:	42a3      	cmp	r3, r4
    21c8:	d00c      	beq.n	21e4 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    21ca:	2308      	movs	r3, #8
    21cc:	4a18      	ldr	r2, [pc, #96]	; (2230 <_usb_ep0_on_tansfer_ok+0xe0>)
    21ce:	2100      	movs	r1, #0
    21d0:	481b      	ldr	r0, [pc, #108]	; (2240 <_usb_ep0_on_tansfer_ok+0xf0>)
    21d2:	4c1c      	ldr	r4, [pc, #112]	; (2244 <_usb_ep0_on_tansfer_ok+0xf4>)
    21d4:	47a0      	blx	r4
    21d6:	e7ca      	b.n	216e <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    21d8:	2205      	movs	r2, #5
    21da:	4b12      	ldr	r3, [pc, #72]	; (2224 <_usb_ep0_on_tansfer_ok+0xd4>)
    21dc:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    21de:	4b1a      	ldr	r3, [pc, #104]	; (2248 <_usb_ep0_on_tansfer_ok+0xf8>)
    21e0:	4798      	blx	r3
    21e2:	e7c4      	b.n	216e <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    21e4:	4b10      	ldr	r3, [pc, #64]	; (2228 <_usb_ep0_on_tansfer_ok+0xd8>)
    21e6:	695b      	ldr	r3, [r3, #20]
    21e8:	2b00      	cmp	r3, #0
    21ea:	d00b      	beq.n	2204 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    21ec:	4798      	blx	r3
    21ee:	2800      	cmp	r0, #0
    21f0:	d00f      	beq.n	2212 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    21f2:	4912      	ldr	r1, [pc, #72]	; (223c <_usb_ep0_on_tansfer_ok+0xec>)
    21f4:	4a0d      	ldr	r2, [pc, #52]	; (222c <_usb_ep0_on_tansfer_ok+0xdc>)
    21f6:	880b      	ldrh	r3, [r1, #0]
    21f8:	8810      	ldrh	r0, [r2, #0]
    21fa:	181b      	adds	r3, r3, r0
    21fc:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    21fe:	2300      	movs	r3, #0
    2200:	8013      	strh	r3, [r2, #0]
    2202:	e7e2      	b.n	21ca <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2204:	2205      	movs	r2, #5
    2206:	4b07      	ldr	r3, [pc, #28]	; (2224 <_usb_ep0_on_tansfer_ok+0xd4>)
    2208:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    220a:	2000      	movs	r0, #0
    220c:	4b0e      	ldr	r3, [pc, #56]	; (2248 <_usb_ep0_on_tansfer_ok+0xf8>)
    220e:	4798      	blx	r3
    2210:	e7ad      	b.n	216e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2212:	2205      	movs	r2, #5
    2214:	4b03      	ldr	r3, [pc, #12]	; (2224 <_usb_ep0_on_tansfer_ok+0xd4>)
    2216:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2218:	4b0b      	ldr	r3, [pc, #44]	; (2248 <_usb_ep0_on_tansfer_ok+0xf8>)
    221a:	4798      	blx	r3
    221c:	e7a7      	b.n	216e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    221e:	4b0b      	ldr	r3, [pc, #44]	; (224c <_usb_ep0_on_tansfer_ok+0xfc>)
    2220:	4798      	blx	r3
    2222:	e7a4      	b.n	216e <_usb_ep0_on_tansfer_ok+0x1e>
    2224:	2000055e 	.word	0x2000055e
    2228:	200029d4 	.word	0x200029d4
    222c:	2000055a 	.word	0x2000055a
    2230:	200029ec 	.word	0x200029ec
    2234:	000109c9 	.word	0x000109c9
    2238:	00001d15 	.word	0x00001d15
    223c:	2000055c 	.word	0x2000055c
    2240:	2000286c 	.word	0x2000286c
    2244:	00002bc1 	.word	0x00002bc1
    2248:	00002121 	.word	0x00002121
    224c:	00001da5 	.word	0x00001da5

00002250 <udd_ep_clear_halt>:
{
    2250:	b570      	push	{r4, r5, r6, lr}
    2252:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2254:	230f      	movs	r3, #15
    2256:	4003      	ands	r3, r0
		return false;
    2258:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    225a:	2b02      	cmp	r3, #2
    225c:	d900      	bls.n	2260 <udd_ep_clear_halt+0x10>
}
    225e:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    2260:	0020      	movs	r0, r4
    2262:	4b09      	ldr	r3, [pc, #36]	; (2288 <udd_ep_clear_halt+0x38>)
    2264:	4798      	blx	r3
    2266:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    2268:	0021      	movs	r1, r4
    226a:	4808      	ldr	r0, [pc, #32]	; (228c <udd_ep_clear_halt+0x3c>)
    226c:	4b08      	ldr	r3, [pc, #32]	; (2290 <udd_ep_clear_halt+0x40>)
    226e:	4798      	blx	r3
	if (ptr_job->busy == true) {
    2270:	7cab      	ldrb	r3, [r5, #18]
	return true;
    2272:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    2274:	07db      	lsls	r3, r3, #31
    2276:	d5f2      	bpl.n	225e <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    2278:	7cab      	ldrb	r3, [r5, #18]
    227a:	2201      	movs	r2, #1
    227c:	4393      	bics	r3, r2
    227e:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    2280:	682b      	ldr	r3, [r5, #0]
    2282:	4798      	blx	r3
	return true;
    2284:	2001      	movs	r0, #1
    2286:	e7ea      	b.n	225e <udd_ep_clear_halt+0xe>
    2288:	000019b9 	.word	0x000019b9
    228c:	2000286c 	.word	0x2000286c
    2290:	00002ae7 	.word	0x00002ae7

00002294 <udd_ep_run>:
{
    2294:	b5f0      	push	{r4, r5, r6, r7, lr}
    2296:	b087      	sub	sp, #28
    2298:	0005      	movs	r5, r0
    229a:	9103      	str	r1, [sp, #12]
    229c:	9202      	str	r2, [sp, #8]
    229e:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    22a0:	260f      	movs	r6, #15
    22a2:	4006      	ands	r6, r0
		return false;
    22a4:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    22a6:	2e02      	cmp	r6, #2
    22a8:	d902      	bls.n	22b0 <udd_ep_run+0x1c>
}
    22aa:	0020      	movs	r0, r4
    22ac:	b007      	add	sp, #28
    22ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    22b0:	4b64      	ldr	r3, [pc, #400]	; (2444 <udd_ep_run+0x1b0>)
    22b2:	4798      	blx	r3
    22b4:	1e04      	subs	r4, r0, #0
    22b6:	d000      	beq.n	22ba <udd_ep_run+0x26>
    22b8:	e0bd      	b.n	2436 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    22ba:	0028      	movs	r0, r5
    22bc:	4b62      	ldr	r3, [pc, #392]	; (2448 <udd_ep_run+0x1b4>)
    22be:	4798      	blx	r3
    22c0:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    22c2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    22c6:	425a      	negs	r2, r3
    22c8:	4153      	adcs	r3, r2
    22ca:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    22cc:	b672      	cpsid	i
    22ce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    22d2:	2200      	movs	r2, #0
    22d4:	4b5d      	ldr	r3, [pc, #372]	; (244c <udd_ep_run+0x1b8>)
    22d6:	701a      	strb	r2, [r3, #0]
	return flags;
    22d8:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    22da:	7c83      	ldrb	r3, [r0, #18]
    22dc:	07db      	lsls	r3, r3, #31
    22de:	d508      	bpl.n	22f2 <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    22e0:	2a00      	cmp	r2, #0
    22e2:	d0e2      	beq.n	22aa <udd_ep_run+0x16>
		cpu_irq_enable();
    22e4:	2201      	movs	r2, #1
    22e6:	4b59      	ldr	r3, [pc, #356]	; (244c <udd_ep_run+0x1b8>)
    22e8:	701a      	strb	r2, [r3, #0]
    22ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    22ee:	b662      	cpsie	i
    22f0:	e7db      	b.n	22aa <udd_ep_run+0x16>
	ptr_job->busy = true;
    22f2:	7c83      	ldrb	r3, [r0, #18]
    22f4:	2101      	movs	r1, #1
    22f6:	430b      	orrs	r3, r1
    22f8:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    22fa:	2a00      	cmp	r2, #0
    22fc:	d005      	beq.n	230a <udd_ep_run+0x76>
		cpu_irq_enable();
    22fe:	2201      	movs	r2, #1
    2300:	4b52      	ldr	r3, [pc, #328]	; (244c <udd_ep_run+0x1b8>)
    2302:	701a      	strb	r2, [r3, #0]
    2304:	f3bf 8f5f 	dmb	sy
    2308:	b662      	cpsie	i
	ptr_job->buf = buf;
    230a:	9b02      	ldr	r3, [sp, #8]
    230c:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    230e:	9b01      	ldr	r3, [sp, #4]
    2310:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    2312:	2300      	movs	r3, #0
    2314:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    2316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2318:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    231a:	2301      	movs	r3, #1
    231c:	9a03      	ldr	r2, [sp, #12]
    231e:	4013      	ands	r3, r2
    2320:	005a      	lsls	r2, r3, #1
    2322:	7cbb      	ldrb	r3, [r7, #18]
    2324:	2102      	movs	r1, #2
    2326:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    2328:	4313      	orrs	r3, r2
    232a:	2204      	movs	r2, #4
    232c:	4393      	bics	r3, r2
    232e:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    2330:	b26b      	sxtb	r3, r5
    2332:	2b00      	cmp	r3, #0
    2334:	db20      	blt.n	2378 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    2336:	9b01      	ldr	r3, [sp, #4]
    2338:	2b00      	cmp	r3, #0
    233a:	d06f      	beq.n	241c <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    233c:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    233e:	4b44      	ldr	r3, [pc, #272]	; (2450 <udd_ep_run+0x1bc>)
    2340:	429c      	cmp	r4, r3
    2342:	d95a      	bls.n	23fa <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2344:	8a39      	ldrh	r1, [r7, #16]
    2346:	001c      	movs	r4, r3
    2348:	0018      	movs	r0, r3
    234a:	4b42      	ldr	r3, [pc, #264]	; (2454 <udd_ep_run+0x1c0>)
    234c:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    234e:	1a63      	subs	r3, r4, r1
    2350:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    2352:	8a3b      	ldrh	r3, [r7, #16]
    2354:	429a      	cmp	r2, r3
    2356:	d257      	bcs.n	2408 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    2358:	7cba      	ldrb	r2, [r7, #18]
    235a:	2104      	movs	r1, #4
    235c:	430a      	orrs	r2, r1
    235e:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    2360:	1e72      	subs	r2, r6, #1
    2362:	0192      	lsls	r2, r2, #6
    2364:	493c      	ldr	r1, [pc, #240]	; (2458 <udd_ep_run+0x1c4>)
    2366:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2368:	0031      	movs	r1, r6
    236a:	483c      	ldr	r0, [pc, #240]	; (245c <udd_ep_run+0x1c8>)
    236c:	4c3c      	ldr	r4, [pc, #240]	; (2460 <udd_ep_run+0x1cc>)
    236e:	47a0      	blx	r4
				return (STATUS_OK ==
    2370:	4244      	negs	r4, r0
    2372:	4144      	adcs	r4, r0
    2374:	b2e4      	uxtb	r4, r4
    2376:	e798      	b.n	22aa <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    2378:	9b01      	ldr	r3, [sp, #4]
    237a:	2b00      	cmp	r3, #0
    237c:	d027      	beq.n	23ce <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    237e:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2380:	4b33      	ldr	r3, [pc, #204]	; (2450 <udd_ep_run+0x1bc>)
    2382:	429d      	cmp	r5, r3
    2384:	d906      	bls.n	2394 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2386:	8a39      	ldrh	r1, [r7, #16]
    2388:	001d      	movs	r5, r3
    238a:	0018      	movs	r0, r3
    238c:	4b31      	ldr	r3, [pc, #196]	; (2454 <udd_ep_run+0x1c0>)
    238e:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    2390:	1a6b      	subs	r3, r5, r1
    2392:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    2394:	7cbb      	ldrb	r3, [r7, #18]
    2396:	079b      	lsls	r3, r3, #30
    2398:	d507      	bpl.n	23aa <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    239a:	8a39      	ldrh	r1, [r7, #16]
    239c:	0028      	movs	r0, r5
    239e:	4b31      	ldr	r3, [pc, #196]	; (2464 <udd_ep_run+0x1d0>)
    23a0:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    23a2:	b289      	uxth	r1, r1
    23a4:	424c      	negs	r4, r1
    23a6:	414c      	adcs	r4, r1
    23a8:	b2e4      	uxtb	r4, r4
    23aa:	2001      	movs	r0, #1
    23ac:	4020      	ands	r0, r4
    23ae:	0040      	lsls	r0, r0, #1
    23b0:	7cbc      	ldrb	r4, [r7, #18]
    23b2:	2302      	movs	r3, #2
    23b4:	439c      	bics	r4, r3
    23b6:	4304      	orrs	r4, r0
    23b8:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    23ba:	002b      	movs	r3, r5
    23bc:	9a02      	ldr	r2, [sp, #8]
    23be:	0031      	movs	r1, r6
    23c0:	4826      	ldr	r0, [pc, #152]	; (245c <udd_ep_run+0x1c8>)
    23c2:	4c29      	ldr	r4, [pc, #164]	; (2468 <udd_ep_run+0x1d4>)
    23c4:	47a0      	blx	r4
		return (STATUS_OK ==
    23c6:	4244      	negs	r4, r0
    23c8:	4144      	adcs	r4, r0
    23ca:	b2e4      	uxtb	r4, r4
    23cc:	e76d      	b.n	22aa <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    23ce:	7cbb      	ldrb	r3, [r7, #18]
    23d0:	079b      	lsls	r3, r3, #30
    23d2:	d505      	bpl.n	23e0 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    23d4:	7cbb      	ldrb	r3, [r7, #18]
    23d6:	2202      	movs	r2, #2
    23d8:	4393      	bics	r3, r2
    23da:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    23dc:	2500      	movs	r5, #0
    23de:	e7ec      	b.n	23ba <udd_ep_run+0x126>
			ptr_job->busy = false;
    23e0:	7cbb      	ldrb	r3, [r7, #18]
    23e2:	2201      	movs	r2, #1
    23e4:	4393      	bics	r3, r2
    23e6:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    23e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    23ea:	2b00      	cmp	r3, #0
    23ec:	d025      	beq.n	243a <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    23ee:	002a      	movs	r2, r5
    23f0:	2100      	movs	r1, #0
    23f2:	2000      	movs	r0, #0
    23f4:	4798      	blx	r3
			return true;
    23f6:	2401      	movs	r4, #1
    23f8:	e757      	b.n	22aa <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    23fa:	8a39      	ldrh	r1, [r7, #16]
    23fc:	0020      	movs	r0, r4
    23fe:	4b19      	ldr	r3, [pc, #100]	; (2464 <udd_ep_run+0x1d0>)
    2400:	4798      	blx	r3
    2402:	1a63      	subs	r3, r4, r1
    2404:	b29a      	uxth	r2, r3
    2406:	e7a4      	b.n	2352 <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2408:	0013      	movs	r3, r2
    240a:	9a02      	ldr	r2, [sp, #8]
    240c:	0031      	movs	r1, r6
    240e:	4813      	ldr	r0, [pc, #76]	; (245c <udd_ep_run+0x1c8>)
    2410:	4c13      	ldr	r4, [pc, #76]	; (2460 <udd_ep_run+0x1cc>)
    2412:	47a0      	blx	r4
				return (STATUS_OK ==
    2414:	4244      	negs	r4, r0
    2416:	4144      	adcs	r4, r0
    2418:	b2e4      	uxtb	r4, r4
    241a:	e746      	b.n	22aa <udd_ep_run+0x16>
			ptr_job->busy = false;
    241c:	7cbb      	ldrb	r3, [r7, #18]
    241e:	2201      	movs	r2, #1
    2420:	4393      	bics	r3, r2
    2422:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    2424:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2426:	2b00      	cmp	r3, #0
    2428:	d009      	beq.n	243e <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    242a:	002a      	movs	r2, r5
    242c:	2100      	movs	r1, #0
    242e:	2000      	movs	r0, #0
    2430:	4798      	blx	r3
			return true;
    2432:	2401      	movs	r4, #1
    2434:	e739      	b.n	22aa <udd_ep_run+0x16>
		return false;
    2436:	2400      	movs	r4, #0
    2438:	e737      	b.n	22aa <udd_ep_run+0x16>
			return true;
    243a:	2401      	movs	r4, #1
    243c:	e735      	b.n	22aa <udd_ep_run+0x16>
			return true;
    243e:	2401      	movs	r4, #1
    2440:	e733      	b.n	22aa <udd_ep_run+0x16>
    2442:	46c0      	nop			; (mov r8, r8)
    2444:	0000210d 	.word	0x0000210d
    2448:	000019b9 	.word	0x000019b9
    244c:	200002c6 	.word	0x200002c6
    2450:	00001fff 	.word	0x00001fff
    2454:	0000e845 	.word	0x0000e845
    2458:	200027ec 	.word	0x200027ec
    245c:	2000286c 	.word	0x2000286c
    2460:	00002bc1 	.word	0x00002bc1
    2464:	0000e671 	.word	0x0000e671
    2468:	00002b6d 	.word	0x00002b6d

0000246c <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    246c:	4b02      	ldr	r3, [pc, #8]	; (2478 <udd_set_address+0xc>)
    246e:	681b      	ldr	r3, [r3, #0]
    2470:	2280      	movs	r2, #128	; 0x80
    2472:	4310      	orrs	r0, r2
    2474:	7298      	strb	r0, [r3, #10]
}
    2476:	4770      	bx	lr
    2478:	2000286c 	.word	0x2000286c

0000247c <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    247c:	4b02      	ldr	r3, [pc, #8]	; (2488 <udd_getaddress+0xc>)
    247e:	681b      	ldr	r3, [r3, #0]
    2480:	7a98      	ldrb	r0, [r3, #10]
    2482:	0640      	lsls	r0, r0, #25
    2484:	0e40      	lsrs	r0, r0, #25
}
    2486:	4770      	bx	lr
    2488:	2000286c 	.word	0x2000286c

0000248c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    248c:	4b01      	ldr	r3, [pc, #4]	; (2494 <udd_set_setup_payload+0x8>)
    248e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    2490:	8199      	strh	r1, [r3, #12]
}
    2492:	4770      	bx	lr
    2494:	200029d4 	.word	0x200029d4

00002498 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    2498:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    249a:	2003      	movs	r0, #3
    249c:	4b16      	ldr	r3, [pc, #88]	; (24f8 <udd_attach+0x60>)
    249e:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    24a0:	4c16      	ldr	r4, [pc, #88]	; (24fc <udd_attach+0x64>)
    24a2:	6822      	ldr	r2, [r4, #0]
    24a4:	8913      	ldrh	r3, [r2, #8]
    24a6:	2101      	movs	r1, #1
    24a8:	438b      	bics	r3, r1
    24aa:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    24ac:	4a14      	ldr	r2, [pc, #80]	; (2500 <udd_attach+0x68>)
    24ae:	3103      	adds	r1, #3
    24b0:	0020      	movs	r0, r4
    24b2:	4e14      	ldr	r6, [pc, #80]	; (2504 <udd_attach+0x6c>)
    24b4:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    24b6:	4a14      	ldr	r2, [pc, #80]	; (2508 <udd_attach+0x70>)
    24b8:	2100      	movs	r1, #0
    24ba:	0020      	movs	r0, r4
    24bc:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    24be:	4a13      	ldr	r2, [pc, #76]	; (250c <udd_attach+0x74>)
    24c0:	2101      	movs	r1, #1
    24c2:	0020      	movs	r0, r4
    24c4:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    24c6:	4a12      	ldr	r2, [pc, #72]	; (2510 <udd_attach+0x78>)
    24c8:	2102      	movs	r1, #2
    24ca:	0020      	movs	r0, r4
    24cc:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    24ce:	2104      	movs	r1, #4
    24d0:	0020      	movs	r0, r4
    24d2:	4d10      	ldr	r5, [pc, #64]	; (2514 <udd_attach+0x7c>)
    24d4:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    24d6:	2100      	movs	r1, #0
    24d8:	0020      	movs	r0, r4
    24da:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    24dc:	2101      	movs	r1, #1
    24de:	0020      	movs	r0, r4
    24e0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    24e2:	2102      	movs	r1, #2
    24e4:	0020      	movs	r0, r4
    24e6:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    24e8:	4a0b      	ldr	r2, [pc, #44]	; (2518 <udd_attach+0x80>)
    24ea:	2106      	movs	r1, #6
    24ec:	0020      	movs	r0, r4
    24ee:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    24f0:	2106      	movs	r1, #6
    24f2:	0020      	movs	r0, r4
    24f4:	47a8      	blx	r5
#endif
}
    24f6:	bd70      	pop	{r4, r5, r6, pc}
    24f8:	000018fd 	.word	0x000018fd
    24fc:	2000286c 	.word	0x2000286c
    2500:	00001f3d 	.word	0x00001f3d
    2504:	000025bd 	.word	0x000025bd
    2508:	00001f31 	.word	0x00001f31
    250c:	00001c65 	.word	0x00001c65
    2510:	00001bf1 	.word	0x00001bf1
    2514:	000025e1 	.word	0x000025e1
    2518:	00001bbd 	.word	0x00001bbd

0000251c <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    251c:	b570      	push	{r4, r5, r6, lr}
    251e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2520:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2524:	425a      	negs	r2, r3
    2526:	4153      	adcs	r3, r2
    2528:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    252a:	b672      	cpsid	i
    252c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2530:	2200      	movs	r2, #0
    2532:	4b1a      	ldr	r3, [pc, #104]	; (259c <udd_enable+0x80>)
    2534:	701a      	strb	r2, [r3, #0]
	return flags;
    2536:	9c00      	ldr	r4, [sp, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    2538:	ad01      	add	r5, sp, #4
    253a:	0028      	movs	r0, r5
    253c:	4b18      	ldr	r3, [pc, #96]	; (25a0 <udd_enable+0x84>)
    253e:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    2540:	2303      	movs	r3, #3
    2542:	70ab      	strb	r3, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    2544:	4e17      	ldr	r6, [pc, #92]	; (25a4 <udd_enable+0x88>)
    2546:	002a      	movs	r2, r5
    2548:	2182      	movs	r1, #130	; 0x82
    254a:	05c9      	lsls	r1, r1, #23
    254c:	0030      	movs	r0, r6
    254e:	4b16      	ldr	r3, [pc, #88]	; (25a8 <udd_enable+0x8c>)
    2550:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    2552:	0030      	movs	r0, r6
    2554:	4b15      	ldr	r3, [pc, #84]	; (25ac <udd_enable+0x90>)
    2556:	4798      	blx	r3
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    2558:	4b15      	ldr	r3, [pc, #84]	; (25b0 <udd_enable+0x94>)
    255a:	8b1b      	ldrh	r3, [r3, #24]
    255c:	069b      	lsls	r3, r3, #26
    255e:	d415      	bmi.n	258c <udd_enable+0x70>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    2560:	4913      	ldr	r1, [pc, #76]	; (25b0 <udd_enable+0x94>)
    2562:	22d0      	movs	r2, #208	; 0xd0
    2564:	0112      	lsls	r2, r2, #4
    2566:	68cb      	ldr	r3, [r1, #12]
    2568:	4013      	ands	r3, r2
    256a:	4293      	cmp	r3, r2
    256c:	d1fb      	bne.n	2566 <udd_enable+0x4a>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    256e:	2001      	movs	r0, #1
    2570:	4b10      	ldr	r3, [pc, #64]	; (25b4 <udd_enable+0x98>)
    2572:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    2574:	4b10      	ldr	r3, [pc, #64]	; (25b8 <udd_enable+0x9c>)
    2576:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    2578:	2c00      	cmp	r4, #0
    257a:	d005      	beq.n	2588 <udd_enable+0x6c>
		cpu_irq_enable();
    257c:	2201      	movs	r2, #1
    257e:	4b07      	ldr	r3, [pc, #28]	; (259c <udd_enable+0x80>)
    2580:	701a      	strb	r2, [r3, #0]
    2582:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2586:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    2588:	b002      	add	sp, #8
    258a:	bd70      	pop	{r4, r5, r6, pc}
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    258c:	4908      	ldr	r1, [pc, #32]	; (25b0 <udd_enable+0x94>)
    258e:	2280      	movs	r2, #128	; 0x80
    2590:	0052      	lsls	r2, r2, #1
    2592:	68cb      	ldr	r3, [r1, #12]
    2594:	4213      	tst	r3, r2
    2596:	d0fc      	beq.n	2592 <udd_enable+0x76>
    2598:	e7e9      	b.n	256e <udd_enable+0x52>
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	200002c6 	.word	0x200002c6
    25a0:	00003335 	.word	0x00003335
    25a4:	2000286c 	.word	0x2000286c
    25a8:	00003345 	.word	0x00003345
    25ac:	00002c41 	.word	0x00002c41
    25b0:	40000c00 	.word	0x40000c00
    25b4:	000018fd 	.word	0x000018fd
    25b8:	00002499 	.word	0x00002499

000025bc <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    25bc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    25be:	000b      	movs	r3, r1
    25c0:	332e      	adds	r3, #46	; 0x2e
    25c2:	009b      	lsls	r3, r3, #2
    25c4:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    25c6:	22aa      	movs	r2, #170	; 0xaa
    25c8:	0052      	lsls	r2, r2, #1
    25ca:	0049      	lsls	r1, r1, #1
    25cc:	5a83      	ldrh	r3, [r0, r2]
    25ce:	4c03      	ldr	r4, [pc, #12]	; (25dc <usb_device_register_callback+0x20>)
    25d0:	5b09      	ldrh	r1, [r1, r4]
    25d2:	430b      	orrs	r3, r1
    25d4:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    25d6:	2000      	movs	r0, #0
    25d8:	bd10      	pop	{r4, pc}
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	000140c4 	.word	0x000140c4

000025e0 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    25e0:	0049      	lsls	r1, r1, #1
    25e2:	4b06      	ldr	r3, [pc, #24]	; (25fc <usb_device_enable_callback+0x1c>)
    25e4:	5acb      	ldrh	r3, [r1, r3]
    25e6:	6802      	ldr	r2, [r0, #0]
    25e8:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    25ea:	21ab      	movs	r1, #171	; 0xab
    25ec:	0049      	lsls	r1, r1, #1
    25ee:	5a42      	ldrh	r2, [r0, r1]
    25f0:	431a      	orrs	r2, r3
    25f2:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    25f4:	6802      	ldr	r2, [r0, #0]
    25f6:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    25f8:	2000      	movs	r0, #0
    25fa:	4770      	bx	lr
    25fc:	000140c4 	.word	0x000140c4

00002600 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    2600:	0049      	lsls	r1, r1, #1
    2602:	4b05      	ldr	r3, [pc, #20]	; (2618 <usb_device_disable_callback+0x18>)
    2604:	5aca      	ldrh	r2, [r1, r3]
    2606:	21ab      	movs	r1, #171	; 0xab
    2608:	0049      	lsls	r1, r1, #1
    260a:	5a43      	ldrh	r3, [r0, r1]
    260c:	4393      	bics	r3, r2
    260e:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    2610:	6803      	ldr	r3, [r0, #0]
    2612:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    2614:	2000      	movs	r0, #0
    2616:	4770      	bx	lr
    2618:	000140c4 	.word	0x000140c4

0000261c <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    261c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    261e:	008c      	lsls	r4, r1, #2
    2620:	18a4      	adds	r4, r4, r2
    2622:	3434      	adds	r4, #52	; 0x34
    2624:	00a4      	lsls	r4, r4, #2
    2626:	1904      	adds	r4, r0, r4
    2628:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    262a:	1840      	adds	r0, r0, r1
    262c:	3059      	adds	r0, #89	; 0x59
    262e:	30ff      	adds	r0, #255	; 0xff
    2630:	7803      	ldrb	r3, [r0, #0]
    2632:	4903      	ldr	r1, [pc, #12]	; (2640 <usb_device_endpoint_register_callback+0x24>)
    2634:	5c8a      	ldrb	r2, [r1, r2]
    2636:	4313      	orrs	r3, r2
    2638:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    263a:	2000      	movs	r0, #0
    263c:	bd10      	pop	{r4, pc}
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	000140d4 	.word	0x000140d4

00002644 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    2644:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    2646:	008b      	lsls	r3, r1, #2
    2648:	189b      	adds	r3, r3, r2
    264a:	3334      	adds	r3, #52	; 0x34
    264c:	009b      	lsls	r3, r3, #2
    264e:	18c3      	adds	r3, r0, r3
    2650:	2400      	movs	r4, #0
    2652:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    2654:	1840      	adds	r0, r0, r1
    2656:	3059      	adds	r0, #89	; 0x59
    2658:	30ff      	adds	r0, #255	; 0xff
    265a:	4b03      	ldr	r3, [pc, #12]	; (2668 <usb_device_endpoint_unregister_callback+0x24>)
    265c:	5c9a      	ldrb	r2, [r3, r2]
    265e:	7803      	ldrb	r3, [r0, #0]
    2660:	4393      	bics	r3, r2
    2662:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    2664:	2000      	movs	r0, #0
    2666:	bd10      	pop	{r4, pc}
    2668:	000140d4 	.word	0x000140d4

0000266c <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    266c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    266e:	230f      	movs	r3, #15
    2670:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    2672:	18c4      	adds	r4, r0, r3
    2674:	3461      	adds	r4, #97	; 0x61
    2676:	34ff      	adds	r4, #255	; 0xff
    2678:	7825      	ldrb	r5, [r4, #0]
    267a:	4e2f      	ldr	r6, [pc, #188]	; (2738 <usb_device_endpoint_enable_callback+0xcc>)
    267c:	5cb6      	ldrb	r6, [r6, r2]
    267e:	4335      	orrs	r5, r6
    2680:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    2682:	2a00      	cmp	r2, #0
    2684:	d129      	bne.n	26da <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    2686:	2b00      	cmp	r3, #0
    2688:	d112      	bne.n	26b0 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    268a:	2503      	movs	r5, #3
    268c:	240a      	movs	r4, #10
    268e:	34ff      	adds	r4, #255	; 0xff
    2690:	6806      	ldr	r6, [r0, #0]
    2692:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2694:	2a03      	cmp	r2, #3
    2696:	d109      	bne.n	26ac <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    2698:	b249      	sxtb	r1, r1
    269a:	2900      	cmp	r1, #0
    269c:	db44      	blt.n	2728 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    269e:	6802      	ldr	r2, [r0, #0]
    26a0:	015b      	lsls	r3, r3, #5
    26a2:	18d3      	adds	r3, r2, r3
    26a4:	330a      	adds	r3, #10
    26a6:	33ff      	adds	r3, #255	; 0xff
    26a8:	2220      	movs	r2, #32
    26aa:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    26ac:	2000      	movs	r0, #0
    26ae:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    26b0:	b24c      	sxtb	r4, r1
    26b2:	2c00      	cmp	r4, #0
    26b4:	db08      	blt.n	26c8 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    26b6:	015c      	lsls	r4, r3, #5
    26b8:	6805      	ldr	r5, [r0, #0]
    26ba:	46ac      	mov	ip, r5
    26bc:	4464      	add	r4, ip
    26be:	340a      	adds	r4, #10
    26c0:	34ff      	adds	r4, #255	; 0xff
    26c2:	2501      	movs	r5, #1
    26c4:	7025      	strb	r5, [r4, #0]
    26c6:	e7e5      	b.n	2694 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    26c8:	015c      	lsls	r4, r3, #5
    26ca:	6805      	ldr	r5, [r0, #0]
    26cc:	46ac      	mov	ip, r5
    26ce:	4464      	add	r4, ip
    26d0:	340a      	adds	r4, #10
    26d2:	34ff      	adds	r4, #255	; 0xff
    26d4:	2502      	movs	r5, #2
    26d6:	7025      	strb	r5, [r4, #0]
    26d8:	e7dc      	b.n	2694 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    26da:	2a01      	cmp	r2, #1
    26dc:	d11a      	bne.n	2714 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    26de:	2b00      	cmp	r3, #0
    26e0:	d105      	bne.n	26ee <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    26e2:	6802      	ldr	r2, [r0, #0]
    26e4:	210c      	movs	r1, #12
    26e6:	230a      	movs	r3, #10
    26e8:	33ff      	adds	r3, #255	; 0xff
    26ea:	54d1      	strb	r1, [r2, r3]
    26ec:	e7de      	b.n	26ac <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    26ee:	b249      	sxtb	r1, r1
    26f0:	2900      	cmp	r1, #0
    26f2:	db07      	blt.n	2704 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    26f4:	6802      	ldr	r2, [r0, #0]
    26f6:	015b      	lsls	r3, r3, #5
    26f8:	18d3      	adds	r3, r2, r3
    26fa:	330a      	adds	r3, #10
    26fc:	33ff      	adds	r3, #255	; 0xff
    26fe:	2204      	movs	r2, #4
    2700:	701a      	strb	r2, [r3, #0]
    2702:	e7d3      	b.n	26ac <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    2704:	6802      	ldr	r2, [r0, #0]
    2706:	015b      	lsls	r3, r3, #5
    2708:	18d3      	adds	r3, r2, r3
    270a:	330a      	adds	r3, #10
    270c:	33ff      	adds	r3, #255	; 0xff
    270e:	2208      	movs	r2, #8
    2710:	701a      	strb	r2, [r3, #0]
    2712:	e7cb      	b.n	26ac <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    2714:	2a02      	cmp	r2, #2
    2716:	d1bd      	bne.n	2694 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2718:	6802      	ldr	r2, [r0, #0]
    271a:	015b      	lsls	r3, r3, #5
    271c:	18d3      	adds	r3, r2, r3
    271e:	330a      	adds	r3, #10
    2720:	33ff      	adds	r3, #255	; 0xff
    2722:	2210      	movs	r2, #16
    2724:	701a      	strb	r2, [r3, #0]
    2726:	e7c1      	b.n	26ac <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    2728:	6802      	ldr	r2, [r0, #0]
    272a:	015b      	lsls	r3, r3, #5
    272c:	18d3      	adds	r3, r2, r3
    272e:	330a      	adds	r3, #10
    2730:	33ff      	adds	r3, #255	; 0xff
    2732:	2240      	movs	r2, #64	; 0x40
    2734:	701a      	strb	r2, [r3, #0]
    2736:	e7b9      	b.n	26ac <usb_device_endpoint_enable_callback+0x40>
    2738:	000140d4 	.word	0x000140d4

0000273c <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    273c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    273e:	230f      	movs	r3, #15
    2740:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    2742:	18c4      	adds	r4, r0, r3
    2744:	3461      	adds	r4, #97	; 0x61
    2746:	34ff      	adds	r4, #255	; 0xff
    2748:	4d2f      	ldr	r5, [pc, #188]	; (2808 <usb_device_endpoint_disable_callback+0xcc>)
    274a:	5cae      	ldrb	r6, [r5, r2]
    274c:	7825      	ldrb	r5, [r4, #0]
    274e:	43b5      	bics	r5, r6
    2750:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    2752:	2a00      	cmp	r2, #0
    2754:	d129      	bne.n	27aa <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    2756:	2b00      	cmp	r3, #0
    2758:	d112      	bne.n	2780 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    275a:	2503      	movs	r5, #3
    275c:	2484      	movs	r4, #132	; 0x84
    275e:	0064      	lsls	r4, r4, #1
    2760:	6806      	ldr	r6, [r0, #0]
    2762:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2764:	2a03      	cmp	r2, #3
    2766:	d109      	bne.n	277c <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    2768:	b249      	sxtb	r1, r1
    276a:	2900      	cmp	r1, #0
    276c:	db44      	blt.n	27f8 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    276e:	6802      	ldr	r2, [r0, #0]
    2770:	015b      	lsls	r3, r3, #5
    2772:	18d3      	adds	r3, r2, r3
    2774:	3309      	adds	r3, #9
    2776:	33ff      	adds	r3, #255	; 0xff
    2778:	2220      	movs	r2, #32
    277a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    277c:	2000      	movs	r0, #0
    277e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    2780:	b24c      	sxtb	r4, r1
    2782:	2c00      	cmp	r4, #0
    2784:	db08      	blt.n	2798 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    2786:	015c      	lsls	r4, r3, #5
    2788:	6805      	ldr	r5, [r0, #0]
    278a:	46ac      	mov	ip, r5
    278c:	4464      	add	r4, ip
    278e:	3409      	adds	r4, #9
    2790:	34ff      	adds	r4, #255	; 0xff
    2792:	2501      	movs	r5, #1
    2794:	7025      	strb	r5, [r4, #0]
    2796:	e7e5      	b.n	2764 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    2798:	015c      	lsls	r4, r3, #5
    279a:	6805      	ldr	r5, [r0, #0]
    279c:	46ac      	mov	ip, r5
    279e:	4464      	add	r4, ip
    27a0:	3409      	adds	r4, #9
    27a2:	34ff      	adds	r4, #255	; 0xff
    27a4:	2502      	movs	r5, #2
    27a6:	7025      	strb	r5, [r4, #0]
    27a8:	e7dc      	b.n	2764 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    27aa:	2a01      	cmp	r2, #1
    27ac:	d11a      	bne.n	27e4 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    27ae:	2b00      	cmp	r3, #0
    27b0:	d105      	bne.n	27be <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    27b2:	6802      	ldr	r2, [r0, #0]
    27b4:	210c      	movs	r1, #12
    27b6:	3309      	adds	r3, #9
    27b8:	33ff      	adds	r3, #255	; 0xff
    27ba:	54d1      	strb	r1, [r2, r3]
    27bc:	e7de      	b.n	277c <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    27be:	b249      	sxtb	r1, r1
    27c0:	2900      	cmp	r1, #0
    27c2:	db07      	blt.n	27d4 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    27c4:	6802      	ldr	r2, [r0, #0]
    27c6:	015b      	lsls	r3, r3, #5
    27c8:	18d3      	adds	r3, r2, r3
    27ca:	3309      	adds	r3, #9
    27cc:	33ff      	adds	r3, #255	; 0xff
    27ce:	2204      	movs	r2, #4
    27d0:	701a      	strb	r2, [r3, #0]
    27d2:	e7d3      	b.n	277c <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    27d4:	6802      	ldr	r2, [r0, #0]
    27d6:	015b      	lsls	r3, r3, #5
    27d8:	18d3      	adds	r3, r2, r3
    27da:	3309      	adds	r3, #9
    27dc:	33ff      	adds	r3, #255	; 0xff
    27de:	2208      	movs	r2, #8
    27e0:	701a      	strb	r2, [r3, #0]
    27e2:	e7cb      	b.n	277c <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    27e4:	2a02      	cmp	r2, #2
    27e6:	d1bd      	bne.n	2764 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    27e8:	6802      	ldr	r2, [r0, #0]
    27ea:	015b      	lsls	r3, r3, #5
    27ec:	18d3      	adds	r3, r2, r3
    27ee:	3309      	adds	r3, #9
    27f0:	33ff      	adds	r3, #255	; 0xff
    27f2:	2210      	movs	r2, #16
    27f4:	701a      	strb	r2, [r3, #0]
    27f6:	e7c1      	b.n	277c <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    27f8:	6802      	ldr	r2, [r0, #0]
    27fa:	015b      	lsls	r3, r3, #5
    27fc:	18d3      	adds	r3, r2, r3
    27fe:	3309      	adds	r3, #9
    2800:	33ff      	adds	r3, #255	; 0xff
    2802:	2240      	movs	r2, #64	; 0x40
    2804:	701a      	strb	r2, [r3, #0]
    2806:	e7b9      	b.n	277c <usb_device_endpoint_disable_callback+0x40>
    2808:	000140d4 	.word	0x000140d4

0000280c <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    280c:	2300      	movs	r3, #0
    280e:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    2810:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    2812:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    2814:	3301      	adds	r3, #1
    2816:	70c3      	strb	r3, [r0, #3]
}
    2818:	4770      	bx	lr
	...

0000281c <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    281c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    281e:	780c      	ldrb	r4, [r1, #0]
    2820:	230f      	movs	r3, #15
    2822:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    2824:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    2826:	78ca      	ldrb	r2, [r1, #3]
    2828:	2a04      	cmp	r2, #4
    282a:	d870      	bhi.n	290e <usb_device_endpoint_set_config+0xf2>
    282c:	0092      	lsls	r2, r2, #2
    282e:	4d89      	ldr	r5, [pc, #548]	; (2a54 <usb_device_endpoint_set_config+0x238>)
    2830:	58aa      	ldr	r2, [r5, r2]
    2832:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    2834:	6802      	ldr	r2, [r0, #0]
    2836:	3308      	adds	r3, #8
    2838:	015b      	lsls	r3, r3, #5
    283a:	2100      	movs	r1, #0
    283c:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    283e:	2200      	movs	r2, #0
    2840:	e082      	b.n	2948 <usb_device_endpoint_set_config+0x12c>
    2842:	015c      	lsls	r4, r3, #5
    2844:	6802      	ldr	r2, [r0, #0]
    2846:	4694      	mov	ip, r2
    2848:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    284a:	2280      	movs	r2, #128	; 0x80
    284c:	0052      	lsls	r2, r2, #1
    284e:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    2850:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2852:	076d      	lsls	r5, r5, #29
    2854:	d178      	bne.n	2948 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    2856:	32e4      	adds	r2, #228	; 0xe4
    2858:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    285a:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    285c:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    285e:	422e      	tst	r6, r5
    2860:	d172      	bne.n	2948 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    2862:	3d5f      	subs	r5, #95	; 0x5f
    2864:	32e4      	adds	r2, #228	; 0xe4
    2866:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2868:	001a      	movs	r2, r3
    286a:	3208      	adds	r2, #8
    286c:	0152      	lsls	r2, r2, #5
    286e:	6804      	ldr	r4, [r0, #0]
    2870:	18a4      	adds	r4, r4, r2
    2872:	352f      	adds	r5, #47	; 0x2f
    2874:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2876:	6800      	ldr	r0, [r0, #0]
    2878:	1882      	adds	r2, r0, r2
    287a:	2080      	movs	r0, #128	; 0x80
    287c:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    287e:	788a      	ldrb	r2, [r1, #2]
    2880:	2a00      	cmp	r2, #0
    2882:	d01f      	beq.n	28c4 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2884:	0158      	lsls	r0, r3, #5
    2886:	4a74      	ldr	r2, [pc, #464]	; (2a58 <usb_device_endpoint_set_config+0x23c>)
    2888:	1812      	adds	r2, r2, r0
    288a:	6854      	ldr	r4, [r2, #4]
    288c:	2080      	movs	r0, #128	; 0x80
    288e:	0600      	lsls	r0, r0, #24
    2890:	4304      	orrs	r4, r0
    2892:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2894:	6954      	ldr	r4, [r2, #20]
    2896:	4320      	orrs	r0, r4
    2898:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    289a:	2507      	movs	r5, #7
    289c:	784c      	ldrb	r4, [r1, #1]
    289e:	015a      	lsls	r2, r3, #5
    28a0:	4b6d      	ldr	r3, [pc, #436]	; (2a58 <usb_device_endpoint_set_config+0x23c>)
    28a2:	189b      	adds	r3, r3, r2
    28a4:	6858      	ldr	r0, [r3, #4]
    28a6:	402c      	ands	r4, r5
    28a8:	0724      	lsls	r4, r4, #28
    28aa:	4e6c      	ldr	r6, [pc, #432]	; (2a5c <usb_device_endpoint_set_config+0x240>)
    28ac:	4030      	ands	r0, r6
    28ae:	4320      	orrs	r0, r4
    28b0:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    28b2:	7849      	ldrb	r1, [r1, #1]
    28b4:	695a      	ldr	r2, [r3, #20]
    28b6:	4029      	ands	r1, r5
    28b8:	0709      	lsls	r1, r1, #28
    28ba:	4032      	ands	r2, r6
    28bc:	430a      	orrs	r2, r1
    28be:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    28c0:	2200      	movs	r2, #0
    28c2:	e041      	b.n	2948 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    28c4:	0158      	lsls	r0, r3, #5
    28c6:	4a64      	ldr	r2, [pc, #400]	; (2a58 <usb_device_endpoint_set_config+0x23c>)
    28c8:	1812      	adds	r2, r2, r0
    28ca:	6850      	ldr	r0, [r2, #4]
    28cc:	0040      	lsls	r0, r0, #1
    28ce:	0840      	lsrs	r0, r0, #1
    28d0:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    28d2:	6950      	ldr	r0, [r2, #20]
    28d4:	0040      	lsls	r0, r0, #1
    28d6:	0840      	lsrs	r0, r0, #1
    28d8:	6150      	str	r0, [r2, #20]
    28da:	e7de      	b.n	289a <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    28dc:	2c00      	cmp	r4, #0
    28de:	db35      	blt.n	294c <usb_device_endpoint_set_config+0x130>
    28e0:	015d      	lsls	r5, r3, #5
    28e2:	6802      	ldr	r2, [r0, #0]
    28e4:	4694      	mov	ip, r2
    28e6:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    28e8:	2280      	movs	r2, #128	; 0x80
    28ea:	0052      	lsls	r2, r2, #1
    28ec:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    28ee:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    28f0:	0776      	lsls	r6, r6, #29
    28f2:	d129      	bne.n	2948 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    28f4:	2680      	movs	r6, #128	; 0x80
    28f6:	0076      	lsls	r6, r6, #1
    28f8:	5daa      	ldrb	r2, [r5, r6]
    28fa:	2702      	movs	r7, #2
    28fc:	433a      	orrs	r2, r7
    28fe:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2900:	6802      	ldr	r2, [r0, #0]
    2902:	0018      	movs	r0, r3
    2904:	3008      	adds	r0, #8
    2906:	0140      	lsls	r0, r0, #5
    2908:	1812      	adds	r2, r2, r0
    290a:	2040      	movs	r0, #64	; 0x40
    290c:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    290e:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2910:	784f      	ldrb	r7, [r1, #1]
    2912:	005d      	lsls	r5, r3, #1
    2914:	18ad      	adds	r5, r5, r2
    2916:	012d      	lsls	r5, r5, #4
    2918:	4e4f      	ldr	r6, [pc, #316]	; (2a58 <usb_device_endpoint_set_config+0x23c>)
    291a:	1975      	adds	r5, r6, r5
    291c:	6868      	ldr	r0, [r5, #4]
    291e:	2407      	movs	r4, #7
    2920:	403c      	ands	r4, r7
    2922:	0724      	lsls	r4, r4, #28
    2924:	4e4d      	ldr	r6, [pc, #308]	; (2a5c <usb_device_endpoint_set_config+0x240>)
    2926:	4030      	ands	r0, r6
    2928:	4320      	orrs	r0, r4
    292a:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    292c:	7889      	ldrb	r1, [r1, #2]
    292e:	2900      	cmp	r1, #0
    2930:	d000      	beq.n	2934 <usb_device_endpoint_set_config+0x118>
    2932:	e088      	b.n	2a46 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2934:	005b      	lsls	r3, r3, #1
    2936:	189b      	adds	r3, r3, r2
    2938:	011b      	lsls	r3, r3, #4
    293a:	4a47      	ldr	r2, [pc, #284]	; (2a58 <usb_device_endpoint_set_config+0x23c>)
    293c:	18d3      	adds	r3, r2, r3
    293e:	685a      	ldr	r2, [r3, #4]
    2940:	0052      	lsls	r2, r2, #1
    2942:	0852      	lsrs	r2, r2, #1
    2944:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    2946:	2200      	movs	r2, #0
}
    2948:	0010      	movs	r0, r2
    294a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    294c:	015d      	lsls	r5, r3, #5
    294e:	6802      	ldr	r2, [r0, #0]
    2950:	4694      	mov	ip, r2
    2952:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2954:	2280      	movs	r2, #128	; 0x80
    2956:	0052      	lsls	r2, r2, #1
    2958:	5caf      	ldrb	r7, [r5, r2]
    295a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    295c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    295e:	4237      	tst	r7, r6
    2960:	d1f2      	bne.n	2948 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    2962:	3690      	adds	r6, #144	; 0x90
    2964:	5daa      	ldrb	r2, [r5, r6]
    2966:	2720      	movs	r7, #32
    2968:	433a      	orrs	r2, r7
    296a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    296c:	6802      	ldr	r2, [r0, #0]
    296e:	0018      	movs	r0, r3
    2970:	3008      	adds	r0, #8
    2972:	0140      	lsls	r0, r0, #5
    2974:	1812      	adds	r2, r2, r0
    2976:	2080      	movs	r0, #128	; 0x80
    2978:	7110      	strb	r0, [r2, #4]
    297a:	e7c8      	b.n	290e <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    297c:	2c00      	cmp	r4, #0
    297e:	db17      	blt.n	29b0 <usb_device_endpoint_set_config+0x194>
    2980:	015d      	lsls	r5, r3, #5
    2982:	6802      	ldr	r2, [r0, #0]
    2984:	4694      	mov	ip, r2
    2986:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2988:	2280      	movs	r2, #128	; 0x80
    298a:	0052      	lsls	r2, r2, #1
    298c:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    298e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2990:	0776      	lsls	r6, r6, #29
    2992:	d1d9      	bne.n	2948 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    2994:	2680      	movs	r6, #128	; 0x80
    2996:	0076      	lsls	r6, r6, #1
    2998:	5daa      	ldrb	r2, [r5, r6]
    299a:	2703      	movs	r7, #3
    299c:	433a      	orrs	r2, r7
    299e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    29a0:	6802      	ldr	r2, [r0, #0]
    29a2:	0018      	movs	r0, r3
    29a4:	3008      	adds	r0, #8
    29a6:	0140      	lsls	r0, r0, #5
    29a8:	1812      	adds	r2, r2, r0
    29aa:	2040      	movs	r0, #64	; 0x40
    29ac:	7150      	strb	r0, [r2, #5]
    29ae:	e7ae      	b.n	290e <usb_device_endpoint_set_config+0xf2>
    29b0:	015d      	lsls	r5, r3, #5
    29b2:	6802      	ldr	r2, [r0, #0]
    29b4:	4694      	mov	ip, r2
    29b6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    29b8:	2280      	movs	r2, #128	; 0x80
    29ba:	0052      	lsls	r2, r2, #1
    29bc:	5caf      	ldrb	r7, [r5, r2]
    29be:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    29c0:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    29c2:	4237      	tst	r7, r6
    29c4:	d1c0      	bne.n	2948 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    29c6:	3690      	adds	r6, #144	; 0x90
    29c8:	5daa      	ldrb	r2, [r5, r6]
    29ca:	2730      	movs	r7, #48	; 0x30
    29cc:	433a      	orrs	r2, r7
    29ce:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    29d0:	6802      	ldr	r2, [r0, #0]
    29d2:	0018      	movs	r0, r3
    29d4:	3008      	adds	r0, #8
    29d6:	0140      	lsls	r0, r0, #5
    29d8:	1812      	adds	r2, r2, r0
    29da:	2080      	movs	r0, #128	; 0x80
    29dc:	7110      	strb	r0, [r2, #4]
    29de:	e796      	b.n	290e <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    29e0:	2c00      	cmp	r4, #0
    29e2:	db17      	blt.n	2a14 <usb_device_endpoint_set_config+0x1f8>
    29e4:	015d      	lsls	r5, r3, #5
    29e6:	6802      	ldr	r2, [r0, #0]
    29e8:	4694      	mov	ip, r2
    29ea:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    29ec:	2280      	movs	r2, #128	; 0x80
    29ee:	0052      	lsls	r2, r2, #1
    29f0:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    29f2:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    29f4:	0776      	lsls	r6, r6, #29
    29f6:	d1a7      	bne.n	2948 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    29f8:	2680      	movs	r6, #128	; 0x80
    29fa:	0076      	lsls	r6, r6, #1
    29fc:	5daa      	ldrb	r2, [r5, r6]
    29fe:	2704      	movs	r7, #4
    2a00:	433a      	orrs	r2, r7
    2a02:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2a04:	6802      	ldr	r2, [r0, #0]
    2a06:	0018      	movs	r0, r3
    2a08:	3008      	adds	r0, #8
    2a0a:	0140      	lsls	r0, r0, #5
    2a0c:	1812      	adds	r2, r2, r0
    2a0e:	2040      	movs	r0, #64	; 0x40
    2a10:	7150      	strb	r0, [r2, #5]
    2a12:	e77c      	b.n	290e <usb_device_endpoint_set_config+0xf2>
    2a14:	015d      	lsls	r5, r3, #5
    2a16:	6802      	ldr	r2, [r0, #0]
    2a18:	4694      	mov	ip, r2
    2a1a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2a1c:	2280      	movs	r2, #128	; 0x80
    2a1e:	0052      	lsls	r2, r2, #1
    2a20:	5caf      	ldrb	r7, [r5, r2]
    2a22:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    2a24:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2a26:	4237      	tst	r7, r6
    2a28:	d000      	beq.n	2a2c <usb_device_endpoint_set_config+0x210>
    2a2a:	e78d      	b.n	2948 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    2a2c:	3690      	adds	r6, #144	; 0x90
    2a2e:	5daa      	ldrb	r2, [r5, r6]
    2a30:	2740      	movs	r7, #64	; 0x40
    2a32:	433a      	orrs	r2, r7
    2a34:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2a36:	6802      	ldr	r2, [r0, #0]
    2a38:	0018      	movs	r0, r3
    2a3a:	3008      	adds	r0, #8
    2a3c:	0140      	lsls	r0, r0, #5
    2a3e:	1812      	adds	r2, r2, r0
    2a40:	2080      	movs	r0, #128	; 0x80
    2a42:	7110      	strb	r0, [r2, #4]
    2a44:	e763      	b.n	290e <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2a46:	6869      	ldr	r1, [r5, #4]
    2a48:	2380      	movs	r3, #128	; 0x80
    2a4a:	061b      	lsls	r3, r3, #24
    2a4c:	430b      	orrs	r3, r1
    2a4e:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    2a50:	2200      	movs	r2, #0
    2a52:	e779      	b.n	2948 <usb_device_endpoint_set_config+0x12c>
    2a54:	000140b0 	.word	0x000140b0
    2a58:	200029f4 	.word	0x200029f4
    2a5c:	8fffffff 	.word	0x8fffffff

00002a60 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    2a60:	230f      	movs	r3, #15
    2a62:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    2a64:	b249      	sxtb	r1, r1
    2a66:	2900      	cmp	r1, #0
    2a68:	db0a      	blt.n	2a80 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2a6a:	3308      	adds	r3, #8
    2a6c:	015b      	lsls	r3, r3, #5
    2a6e:	6802      	ldr	r2, [r0, #0]
    2a70:	18d2      	adds	r2, r2, r3
    2a72:	2140      	movs	r1, #64	; 0x40
    2a74:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2a76:	6802      	ldr	r2, [r0, #0]
    2a78:	18d3      	adds	r3, r2, r3
    2a7a:	2201      	movs	r2, #1
    2a7c:	71da      	strb	r2, [r3, #7]
	}
}
    2a7e:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2a80:	3308      	adds	r3, #8
    2a82:	015b      	lsls	r3, r3, #5
    2a84:	6802      	ldr	r2, [r0, #0]
    2a86:	18d2      	adds	r2, r2, r3
    2a88:	2180      	movs	r1, #128	; 0x80
    2a8a:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2a8c:	6802      	ldr	r2, [r0, #0]
    2a8e:	18d3      	adds	r3, r2, r3
    2a90:	2202      	movs	r2, #2
    2a92:	71da      	strb	r2, [r3, #7]
    2a94:	e7f3      	b.n	2a7e <usb_device_endpoint_abort_job+0x1e>

00002a96 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2a96:	230f      	movs	r3, #15
    2a98:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    2a9a:	b249      	sxtb	r1, r1
    2a9c:	2900      	cmp	r1, #0
    2a9e:	db07      	blt.n	2ab0 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    2aa0:	6802      	ldr	r2, [r0, #0]
    2aa2:	3308      	adds	r3, #8
    2aa4:	015b      	lsls	r3, r3, #5
    2aa6:	18d3      	adds	r3, r2, r3
    2aa8:	7998      	ldrb	r0, [r3, #6]
    2aaa:	06c0      	lsls	r0, r0, #27
    2aac:	0fc0      	lsrs	r0, r0, #31
	}
}
    2aae:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    2ab0:	6802      	ldr	r2, [r0, #0]
    2ab2:	3308      	adds	r3, #8
    2ab4:	015b      	lsls	r3, r3, #5
    2ab6:	18d3      	adds	r3, r2, r3
    2ab8:	7998      	ldrb	r0, [r3, #6]
    2aba:	0680      	lsls	r0, r0, #26
    2abc:	0fc0      	lsrs	r0, r0, #31
    2abe:	e7f6      	b.n	2aae <usb_device_endpoint_is_halted+0x18>

00002ac0 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2ac0:	230f      	movs	r3, #15
    2ac2:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    2ac4:	b249      	sxtb	r1, r1
    2ac6:	2900      	cmp	r1, #0
    2ac8:	db06      	blt.n	2ad8 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    2aca:	6802      	ldr	r2, [r0, #0]
    2acc:	3308      	adds	r3, #8
    2ace:	015b      	lsls	r3, r3, #5
    2ad0:	18d3      	adds	r3, r2, r3
    2ad2:	2210      	movs	r2, #16
    2ad4:	715a      	strb	r2, [r3, #5]
	}
}
    2ad6:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    2ad8:	6802      	ldr	r2, [r0, #0]
    2ada:	3308      	adds	r3, #8
    2adc:	015b      	lsls	r3, r3, #5
    2ade:	18d3      	adds	r3, r2, r3
    2ae0:	2220      	movs	r2, #32
    2ae2:	715a      	strb	r2, [r3, #5]
    2ae4:	e7f7      	b.n	2ad6 <usb_device_endpoint_set_halt+0x16>

00002ae6 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    2ae6:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2ae8:	230f      	movs	r3, #15
    2aea:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    2aec:	b249      	sxtb	r1, r1
    2aee:	2900      	cmp	r1, #0
    2af0:	db1d      	blt.n	2b2e <usb_device_endpoint_clear_halt+0x48>
    2af2:	0159      	lsls	r1, r3, #5
    2af4:	6802      	ldr	r2, [r0, #0]
    2af6:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    2af8:	2483      	movs	r4, #131	; 0x83
    2afa:	0064      	lsls	r4, r4, #1
    2afc:	5d14      	ldrb	r4, [r2, r4]
    2afe:	06e4      	lsls	r4, r4, #27
    2b00:	d514      	bpl.n	2b2c <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    2b02:	2510      	movs	r5, #16
    2b04:	2482      	movs	r4, #130	; 0x82
    2b06:	0064      	lsls	r4, r4, #1
    2b08:	5515      	strb	r5, [r2, r4]
    2b0a:	6802      	ldr	r2, [r0, #0]
    2b0c:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    2b0e:	2108      	movs	r1, #8
    2b10:	31ff      	adds	r1, #255	; 0xff
    2b12:	5c51      	ldrb	r1, [r2, r1]
    2b14:	0689      	lsls	r1, r1, #26
    2b16:	d509      	bpl.n	2b2c <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    2b18:	3ce4      	subs	r4, #228	; 0xe4
    2b1a:	2108      	movs	r1, #8
    2b1c:	31ff      	adds	r1, #255	; 0xff
    2b1e:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    2b20:	6802      	ldr	r2, [r0, #0]
    2b22:	3308      	adds	r3, #8
    2b24:	015b      	lsls	r3, r3, #5
    2b26:	18d3      	adds	r3, r2, r3
    2b28:	2201      	movs	r2, #1
    2b2a:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    2b2c:	bd30      	pop	{r4, r5, pc}
    2b2e:	0159      	lsls	r1, r3, #5
    2b30:	6802      	ldr	r2, [r0, #0]
    2b32:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    2b34:	2483      	movs	r4, #131	; 0x83
    2b36:	0064      	lsls	r4, r4, #1
    2b38:	5d14      	ldrb	r4, [r2, r4]
    2b3a:	06a4      	lsls	r4, r4, #26
    2b3c:	d5f6      	bpl.n	2b2c <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    2b3e:	2520      	movs	r5, #32
    2b40:	2482      	movs	r4, #130	; 0x82
    2b42:	0064      	lsls	r4, r4, #1
    2b44:	5515      	strb	r5, [r2, r4]
    2b46:	6802      	ldr	r2, [r0, #0]
    2b48:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    2b4a:	2108      	movs	r1, #8
    2b4c:	31ff      	adds	r1, #255	; 0xff
    2b4e:	5c51      	ldrb	r1, [r2, r1]
    2b50:	0649      	lsls	r1, r1, #25
    2b52:	d5eb      	bpl.n	2b2c <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    2b54:	3cc4      	subs	r4, #196	; 0xc4
    2b56:	2108      	movs	r1, #8
    2b58:	31ff      	adds	r1, #255	; 0xff
    2b5a:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    2b5c:	6802      	ldr	r2, [r0, #0]
    2b5e:	3308      	adds	r3, #8
    2b60:	015b      	lsls	r3, r3, #5
    2b62:	18d3      	adds	r3, r2, r3
    2b64:	2202      	movs	r2, #2
    2b66:	711a      	strb	r2, [r3, #4]
    2b68:	e7e0      	b.n	2b2c <usb_device_endpoint_clear_halt+0x46>
	...

00002b6c <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2b6c:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    2b6e:	000c      	movs	r4, r1
    2b70:	3408      	adds	r4, #8
    2b72:	0164      	lsls	r4, r4, #5
    2b74:	6805      	ldr	r5, [r0, #0]
    2b76:	5d64      	ldrb	r4, [r4, r5]
    2b78:	0664      	lsls	r4, r4, #25
    2b7a:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2b7c:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    2b7e:	2c00      	cmp	r4, #0
    2b80:	d101      	bne.n	2b86 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    2b82:	0028      	movs	r0, r5
    2b84:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    2b86:	014c      	lsls	r4, r1, #5
    2b88:	4d0b      	ldr	r5, [pc, #44]	; (2bb8 <usb_device_endpoint_write_buffer_job+0x4c>)
    2b8a:	192d      	adds	r5, r5, r4
    2b8c:	002c      	movs	r4, r5
    2b8e:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2b90:	696a      	ldr	r2, [r5, #20]
    2b92:	4d0a      	ldr	r5, [pc, #40]	; (2bbc <usb_device_endpoint_write_buffer_job+0x50>)
    2b94:	402a      	ands	r2, r5
    2b96:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    2b98:	6962      	ldr	r2, [r4, #20]
    2b9a:	049b      	lsls	r3, r3, #18
    2b9c:	0c9b      	lsrs	r3, r3, #18
    2b9e:	0b92      	lsrs	r2, r2, #14
    2ba0:	0392      	lsls	r2, r2, #14
    2ba2:	4313      	orrs	r3, r2
    2ba4:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    2ba6:	6803      	ldr	r3, [r0, #0]
    2ba8:	3108      	adds	r1, #8
    2baa:	0149      	lsls	r1, r1, #5
    2bac:	1859      	adds	r1, r3, r1
    2bae:	2380      	movs	r3, #128	; 0x80
    2bb0:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    2bb2:	2500      	movs	r5, #0
    2bb4:	e7e5      	b.n	2b82 <usb_device_endpoint_write_buffer_job+0x16>
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	200029f4 	.word	0x200029f4
    2bbc:	f0003fff 	.word	0xf0003fff

00002bc0 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2bc0:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    2bc2:	000c      	movs	r4, r1
    2bc4:	3408      	adds	r4, #8
    2bc6:	0164      	lsls	r4, r4, #5
    2bc8:	6805      	ldr	r5, [r0, #0]
    2bca:	5d64      	ldrb	r4, [r4, r5]
    2bcc:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2bce:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    2bd0:	2c00      	cmp	r4, #0
    2bd2:	d101      	bne.n	2bd8 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    2bd4:	0028      	movs	r0, r5
    2bd6:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    2bd8:	4c0b      	ldr	r4, [pc, #44]	; (2c08 <usb_device_endpoint_read_buffer_job+0x48>)
    2bda:	014d      	lsls	r5, r1, #5
    2bdc:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    2bde:	1962      	adds	r2, r4, r5
    2be0:	6854      	ldr	r4, [r2, #4]
    2be2:	049b      	lsls	r3, r3, #18
    2be4:	091b      	lsrs	r3, r3, #4
    2be6:	4d09      	ldr	r5, [pc, #36]	; (2c0c <usb_device_endpoint_read_buffer_job+0x4c>)
    2be8:	402c      	ands	r4, r5
    2bea:	4323      	orrs	r3, r4
    2bec:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2bee:	6853      	ldr	r3, [r2, #4]
    2bf0:	0b9b      	lsrs	r3, r3, #14
    2bf2:	039b      	lsls	r3, r3, #14
    2bf4:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    2bf6:	6803      	ldr	r3, [r0, #0]
    2bf8:	3108      	adds	r1, #8
    2bfa:	0149      	lsls	r1, r1, #5
    2bfc:	1859      	adds	r1, r3, r1
    2bfe:	2340      	movs	r3, #64	; 0x40
    2c00:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    2c02:	2500      	movs	r5, #0
    2c04:	e7e6      	b.n	2bd4 <usb_device_endpoint_read_buffer_job+0x14>
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	200029f4 	.word	0x200029f4
    2c0c:	f0003fff 	.word	0xf0003fff

00002c10 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    2c10:	4b09      	ldr	r3, [pc, #36]	; (2c38 <usb_device_endpoint_setup_buffer_job+0x28>)
    2c12:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    2c14:	685a      	ldr	r2, [r3, #4]
    2c16:	4909      	ldr	r1, [pc, #36]	; (2c3c <usb_device_endpoint_setup_buffer_job+0x2c>)
    2c18:	4011      	ands	r1, r2
    2c1a:	2280      	movs	r2, #128	; 0x80
    2c1c:	0292      	lsls	r2, r2, #10
    2c1e:	430a      	orrs	r2, r1
    2c20:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2c22:	685a      	ldr	r2, [r3, #4]
    2c24:	0b92      	lsrs	r2, r2, #14
    2c26:	0392      	lsls	r2, r2, #14
    2c28:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    2c2a:	6802      	ldr	r2, [r0, #0]
    2c2c:	2140      	movs	r1, #64	; 0x40
    2c2e:	2382      	movs	r3, #130	; 0x82
    2c30:	005b      	lsls	r3, r3, #1
    2c32:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    2c34:	2000      	movs	r0, #0
    2c36:	4770      	bx	lr
    2c38:	200029f4 	.word	0x200029f4
    2c3c:	f0003fff 	.word	0xf0003fff

00002c40 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    2c40:	6802      	ldr	r2, [r0, #0]
    2c42:	7813      	ldrb	r3, [r2, #0]
    2c44:	2102      	movs	r1, #2
    2c46:	430b      	orrs	r3, r1
    2c48:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    2c4a:	6802      	ldr	r2, [r0, #0]
    2c4c:	7893      	ldrb	r3, [r2, #2]
    2c4e:	2b02      	cmp	r3, #2
    2c50:	d0fc      	beq.n	2c4c <usb_enable+0xc>
}
    2c52:	4770      	bx	lr

00002c54 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    2c54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c56:	46de      	mov	lr, fp
    2c58:	4657      	mov	r7, sl
    2c5a:	464e      	mov	r6, r9
    2c5c:	4645      	mov	r5, r8
    2c5e:	b5e0      	push	{r5, r6, r7, lr}
    2c60:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    2c62:	4bc4      	ldr	r3, [pc, #784]	; (2f74 <USB_Handler+0x320>)
    2c64:	681f      	ldr	r7, [r3, #0]
    2c66:	683d      	ldr	r5, [r7, #0]
    2c68:	782b      	ldrb	r3, [r5, #0]
    2c6a:	09db      	lsrs	r3, r3, #7
    2c6c:	d114      	bne.n	2c98 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    2c6e:	8c2e      	ldrh	r6, [r5, #32]
    2c70:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    2c72:	2e00      	cmp	r6, #0
    2c74:	d000      	beq.n	2c78 <USB_Handler+0x24>
    2c76:	e22d      	b.n	30d4 <USB_Handler+0x480>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    2c78:	8bae      	ldrh	r6, [r5, #28]
    2c7a:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    2c7c:	23ab      	movs	r3, #171	; 0xab
    2c7e:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    2c80:	5afb      	ldrh	r3, [r7, r3]
    2c82:	22aa      	movs	r2, #170	; 0xaa
    2c84:	0052      	lsls	r2, r2, #1
    2c86:	5abd      	ldrh	r5, [r7, r2]
    2c88:	401d      	ands	r5, r3
    2c8a:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    2c8c:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    2c8e:	4fba      	ldr	r7, [pc, #744]	; (2f78 <USB_Handler+0x324>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    2c90:	4bb8      	ldr	r3, [pc, #736]	; (2f74 <USB_Handler+0x320>)
    2c92:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    2c94:	4698      	mov	r8, r3
    2c96:	e208      	b.n	30aa <USB_Handler+0x456>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    2c98:	8c2b      	ldrh	r3, [r5, #32]
    2c9a:	b29b      	uxth	r3, r3
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	d100      	bne.n	2ca2 <USB_Handler+0x4e>
    2ca0:	e13d      	b.n	2f1e <USB_Handler+0x2ca>
    2ca2:	8c28      	ldrh	r0, [r5, #32]
    2ca4:	b280      	uxth	r0, r0
    2ca6:	4bb5      	ldr	r3, [pc, #724]	; (2f7c <USB_Handler+0x328>)
    2ca8:	4798      	blx	r3
    2caa:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    2cac:	281f      	cmp	r0, #31
    2cae:	d900      	bls.n	2cb2 <USB_Handler+0x5e>
    2cb0:	e135      	b.n	2f1e <USB_Handler+0x2ca>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    2cb2:	0003      	movs	r3, r0
    2cb4:	3308      	adds	r3, #8
    2cb6:	015b      	lsls	r3, r3, #5
    2cb8:	18ed      	adds	r5, r5, r3
    2cba:	79ed      	ldrb	r5, [r5, #7]
    2cbc:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    2cbe:	07ab      	lsls	r3, r5, #30
    2cc0:	d041      	beq.n	2d46 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2cc2:	4aaf      	ldr	r2, [pc, #700]	; (2f80 <USB_Handler+0x32c>)
    2cc4:	2301      	movs	r3, #1
    2cc6:	4083      	lsls	r3, r0
    2cc8:	6811      	ldr	r1, [r2, #0]
    2cca:	4399      	bics	r1, r3
    2ccc:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2cce:	0003      	movs	r3, r0
    2cd0:	3308      	adds	r3, #8
    2cd2:	015b      	lsls	r3, r3, #5
    2cd4:	683a      	ldr	r2, [r7, #0]
    2cd6:	4694      	mov	ip, r2
    2cd8:	4463      	add	r3, ip
    2cda:	2203      	movs	r2, #3
    2cdc:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2cde:	183b      	adds	r3, r7, r0
    2ce0:	33ae      	adds	r3, #174	; 0xae
    2ce2:	781b      	ldrb	r3, [r3, #0]
    2ce4:	07db      	lsls	r3, r3, #31
    2ce6:	d52e      	bpl.n	2d46 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    2ce8:	4ba6      	ldr	r3, [pc, #664]	; (2f84 <USB_Handler+0x330>)
    2cea:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    2cec:	683a      	ldr	r2, [r7, #0]
    2cee:	0003      	movs	r3, r0
    2cf0:	3308      	adds	r3, #8
    2cf2:	015b      	lsls	r3, r3, #5
    2cf4:	5c9b      	ldrb	r3, [r3, r2]
    2cf6:	079b      	lsls	r3, r3, #30
    2cf8:	0f9b      	lsrs	r3, r3, #30
    2cfa:	2b01      	cmp	r3, #1
    2cfc:	d100      	bne.n	2d00 <USB_Handler+0xac>
    2cfe:	e094      	b.n	2e2a <USB_Handler+0x1d6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2d00:	0142      	lsls	r2, r0, #5
    2d02:	4ba1      	ldr	r3, [pc, #644]	; (2f88 <USB_Handler+0x334>)
    2d04:	189b      	adds	r3, r3, r2
    2d06:	685a      	ldr	r2, [r3, #4]
    2d08:	0112      	lsls	r2, r2, #4
    2d0a:	0c92      	lsrs	r2, r2, #18
    2d0c:	b290      	uxth	r0, r2
    2d0e:	499d      	ldr	r1, [pc, #628]	; (2f84 <USB_Handler+0x330>)
    2d10:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2d12:	685a      	ldr	r2, [r3, #4]
    2d14:	0492      	lsls	r2, r2, #18
    2d16:	0c92      	lsrs	r2, r2, #18
    2d18:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2d1a:	685a      	ldr	r2, [r3, #4]
    2d1c:	499b      	ldr	r1, [pc, #620]	; (2f8c <USB_Handler+0x338>)
    2d1e:	400a      	ands	r2, r1
    2d20:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    2d22:	2800      	cmp	r0, #0
    2d24:	d107      	bne.n	2d36 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2d26:	0162      	lsls	r2, r4, #5
    2d28:	4b97      	ldr	r3, [pc, #604]	; (2f88 <USB_Handler+0x334>)
    2d2a:	189b      	adds	r3, r3, r2
    2d2c:	685b      	ldr	r3, [r3, #4]
    2d2e:	049b      	lsls	r3, r3, #18
    2d30:	0c9b      	lsrs	r3, r3, #18
    2d32:	4a94      	ldr	r2, [pc, #592]	; (2f84 <USB_Handler+0x330>)
    2d34:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    2d36:	4b8f      	ldr	r3, [pc, #572]	; (2f74 <USB_Handler+0x320>)
    2d38:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    2d3a:	1ca3      	adds	r3, r4, #2
    2d3c:	011b      	lsls	r3, r3, #4
    2d3e:	18c3      	adds	r3, r0, r3
    2d40:	685b      	ldr	r3, [r3, #4]
    2d42:	4990      	ldr	r1, [pc, #576]	; (2f84 <USB_Handler+0x330>)
    2d44:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    2d46:	076b      	lsls	r3, r5, #29
    2d48:	d51f      	bpl.n	2d8a <USB_Handler+0x136>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    2d4a:	4b8a      	ldr	r3, [pc, #552]	; (2f74 <USB_Handler+0x320>)
    2d4c:	6818      	ldr	r0, [r3, #0]
    2d4e:	6802      	ldr	r2, [r0, #0]
    2d50:	0023      	movs	r3, r4
    2d52:	3308      	adds	r3, #8
    2d54:	015b      	lsls	r3, r3, #5
    2d56:	5c9b      	ldrb	r3, [r3, r2]
    2d58:	069b      	lsls	r3, r3, #26
    2d5a:	0f5b      	lsrs	r3, r3, #29
    2d5c:	2b02      	cmp	r3, #2
    2d5e:	d075      	beq.n	2e4c <USB_Handler+0x1f8>
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    2d60:	0023      	movs	r3, r4
    2d62:	3308      	adds	r3, #8
    2d64:	015b      	lsls	r3, r3, #5
    2d66:	5c9b      	ldrb	r3, [r3, r2]
    2d68:	069b      	lsls	r3, r3, #26
    2d6a:	0f5b      	lsrs	r3, r3, #29
    2d6c:	2b03      	cmp	r3, #3
    2d6e:	d100      	bne.n	2d72 <USB_Handler+0x11e>
    2d70:	e09e      	b.n	2eb0 <USB_Handler+0x25c>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    2d72:	0162      	lsls	r2, r4, #5
    2d74:	4b84      	ldr	r3, [pc, #528]	; (2f88 <USB_Handler+0x334>)
    2d76:	189b      	adds	r3, r3, r2
    2d78:	2200      	movs	r2, #0
    2d7a:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2d7c:	6803      	ldr	r3, [r0, #0]
    2d7e:	0022      	movs	r2, r4
    2d80:	3208      	adds	r2, #8
    2d82:	0152      	lsls	r2, r2, #5
    2d84:	189b      	adds	r3, r3, r2
    2d86:	2204      	movs	r2, #4
    2d88:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    2d8a:	072b      	lsls	r3, r5, #28
    2d8c:	d515      	bpl.n	2dba <USB_Handler+0x166>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2d8e:	4a7c      	ldr	r2, [pc, #496]	; (2f80 <USB_Handler+0x32c>)
    2d90:	2301      	movs	r3, #1
    2d92:	40a3      	lsls	r3, r4
    2d94:	6811      	ldr	r1, [r2, #0]
    2d96:	4399      	bics	r1, r3
    2d98:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2d9a:	4b76      	ldr	r3, [pc, #472]	; (2f74 <USB_Handler+0x320>)
    2d9c:	6818      	ldr	r0, [r3, #0]
    2d9e:	0023      	movs	r3, r4
    2da0:	3308      	adds	r3, #8
    2da2:	015b      	lsls	r3, r3, #5
    2da4:	6802      	ldr	r2, [r0, #0]
    2da6:	4694      	mov	ip, r2
    2da8:	4463      	add	r3, ip
    2daa:	2208      	movs	r2, #8
    2dac:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2dae:	1903      	adds	r3, r0, r4
    2db0:	33ae      	adds	r3, #174	; 0xae
    2db2:	781b      	ldrb	r3, [r3, #0]
    2db4:	079b      	lsls	r3, r3, #30
    2db6:	d500      	bpl.n	2dba <USB_Handler+0x166>
    2db8:	e094      	b.n	2ee4 <USB_Handler+0x290>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    2dba:	06eb      	lsls	r3, r5, #27
    2dbc:	d515      	bpl.n	2dea <USB_Handler+0x196>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2dbe:	4a70      	ldr	r2, [pc, #448]	; (2f80 <USB_Handler+0x32c>)
    2dc0:	2301      	movs	r3, #1
    2dc2:	40a3      	lsls	r3, r4
    2dc4:	6811      	ldr	r1, [r2, #0]
    2dc6:	4399      	bics	r1, r3
    2dc8:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2dca:	4b6a      	ldr	r3, [pc, #424]	; (2f74 <USB_Handler+0x320>)
    2dcc:	6818      	ldr	r0, [r3, #0]
    2dce:	0023      	movs	r3, r4
    2dd0:	3308      	adds	r3, #8
    2dd2:	015b      	lsls	r3, r3, #5
    2dd4:	6802      	ldr	r2, [r0, #0]
    2dd6:	4694      	mov	ip, r2
    2dd8:	4463      	add	r3, ip
    2dda:	2210      	movs	r2, #16
    2ddc:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2dde:	1903      	adds	r3, r0, r4
    2de0:	33ae      	adds	r3, #174	; 0xae
    2de2:	781b      	ldrb	r3, [r3, #0]
    2de4:	075b      	lsls	r3, r3, #29
    2de6:	d500      	bpl.n	2dea <USB_Handler+0x196>
    2de8:	e08a      	b.n	2f00 <USB_Handler+0x2ac>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    2dea:	06ab      	lsls	r3, r5, #26
    2dec:	d400      	bmi.n	2df0 <USB_Handler+0x19c>
    2dee:	e12f      	b.n	3050 <USB_Handler+0x3fc>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2df0:	4a63      	ldr	r2, [pc, #396]	; (2f80 <USB_Handler+0x32c>)
    2df2:	2301      	movs	r3, #1
    2df4:	40a3      	lsls	r3, r4
    2df6:	6811      	ldr	r1, [r2, #0]
    2df8:	4399      	bics	r1, r3
    2dfa:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2dfc:	4b5d      	ldr	r3, [pc, #372]	; (2f74 <USB_Handler+0x320>)
    2dfe:	6818      	ldr	r0, [r3, #0]
    2e00:	0023      	movs	r3, r4
    2e02:	3308      	adds	r3, #8
    2e04:	015b      	lsls	r3, r3, #5
    2e06:	6802      	ldr	r2, [r0, #0]
    2e08:	4694      	mov	ip, r2
    2e0a:	4463      	add	r3, ip
    2e0c:	2220      	movs	r2, #32
    2e0e:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2e10:	1903      	adds	r3, r0, r4
    2e12:	33ae      	adds	r3, #174	; 0xae
    2e14:	781b      	ldrb	r3, [r3, #0]
    2e16:	071b      	lsls	r3, r3, #28
    2e18:	d400      	bmi.n	2e1c <USB_Handler+0x1c8>
    2e1a:	e119      	b.n	3050 <USB_Handler+0x3fc>
				pipe_callback_para.pipe_num = pipe_int;
    2e1c:	4959      	ldr	r1, [pc, #356]	; (2f84 <USB_Handler+0x330>)
    2e1e:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    2e20:	0124      	lsls	r4, r4, #4
    2e22:	1904      	adds	r4, r0, r4
    2e24:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2e26:	4798      	blx	r3
    2e28:	e112      	b.n	3050 <USB_Handler+0x3fc>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2e2a:	0142      	lsls	r2, r0, #5
    2e2c:	4b56      	ldr	r3, [pc, #344]	; (2f88 <USB_Handler+0x334>)
    2e2e:	189b      	adds	r3, r3, r2
    2e30:	685a      	ldr	r2, [r3, #4]
    2e32:	0492      	lsls	r2, r2, #18
    2e34:	0c92      	lsrs	r2, r2, #18
    2e36:	4953      	ldr	r1, [pc, #332]	; (2f84 <USB_Handler+0x330>)
    2e38:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2e3a:	685a      	ldr	r2, [r3, #4]
    2e3c:	0112      	lsls	r2, r2, #4
    2e3e:	0c92      	lsrs	r2, r2, #18
    2e40:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2e42:	685a      	ldr	r2, [r3, #4]
    2e44:	0b92      	lsrs	r2, r2, #14
    2e46:	0392      	lsls	r2, r2, #14
    2e48:	605a      	str	r2, [r3, #4]
    2e4a:	e774      	b.n	2d36 <USB_Handler+0xe2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    2e4c:	0023      	movs	r3, r4
    2e4e:	3308      	adds	r3, #8
    2e50:	015b      	lsls	r3, r3, #5
    2e52:	5c9b      	ldrb	r3, [r3, r2]
    2e54:	079b      	lsls	r3, r3, #30
    2e56:	0f9b      	lsrs	r3, r3, #30
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    2e58:	2b01      	cmp	r3, #1
    2e5a:	d181      	bne.n	2d60 <USB_Handler+0x10c>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    2e5c:	0161      	lsls	r1, r4, #5
    2e5e:	4b4a      	ldr	r3, [pc, #296]	; (2f88 <USB_Handler+0x334>)
    2e60:	185b      	adds	r3, r3, r1
    2e62:	3308      	adds	r3, #8
    2e64:	789b      	ldrb	r3, [r3, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    2e66:	07db      	lsls	r3, r3, #31
    2e68:	d400      	bmi.n	2e6c <USB_Handler+0x218>
    2e6a:	e779      	b.n	2d60 <USB_Handler+0x10c>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    2e6c:	4a44      	ldr	r2, [pc, #272]	; (2f80 <USB_Handler+0x32c>)
    2e6e:	2301      	movs	r3, #1
    2e70:	40a3      	lsls	r3, r4
    2e72:	6811      	ldr	r1, [r2, #0]
    2e74:	4399      	bics	r1, r3
    2e76:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    2e78:	0162      	lsls	r2, r4, #5
    2e7a:	4b43      	ldr	r3, [pc, #268]	; (2f88 <USB_Handler+0x334>)
    2e7c:	189b      	adds	r3, r3, r2
    2e7e:	2200      	movs	r2, #0
    2e80:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2e82:	0023      	movs	r3, r4
    2e84:	3308      	adds	r3, #8
    2e86:	015b      	lsls	r3, r3, #5
    2e88:	6802      	ldr	r2, [r0, #0]
    2e8a:	4694      	mov	ip, r2
    2e8c:	4463      	add	r3, ip
    2e8e:	2204      	movs	r2, #4
    2e90:	71da      	strb	r2, [r3, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2e92:	1903      	adds	r3, r0, r4
    2e94:	33ae      	adds	r3, #174	; 0xae
    2e96:	781b      	ldrb	r3, [r3, #0]
    2e98:	079b      	lsls	r3, r3, #30
    2e9a:	d400      	bmi.n	2e9e <USB_Handler+0x24a>
    2e9c:	e775      	b.n	2d8a <USB_Handler+0x136>
					pipe_callback_para.pipe_num = pipe_int;
    2e9e:	4939      	ldr	r1, [pc, #228]	; (2f84 <USB_Handler+0x330>)
    2ea0:	700c      	strb	r4, [r1, #0]
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    2ea2:	2310      	movs	r3, #16
    2ea4:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    2ea6:	0123      	lsls	r3, r4, #4
    2ea8:	18c3      	adds	r3, r0, r3
    2eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2eac:	4798      	blx	r3
    2eae:	e76c      	b.n	2d8a <USB_Handler+0x136>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    2eb0:	0023      	movs	r3, r4
    2eb2:	3308      	adds	r3, #8
    2eb4:	015b      	lsls	r3, r3, #5
    2eb6:	5c9b      	ldrb	r3, [r3, r2]
    2eb8:	079b      	lsls	r3, r3, #30
    2eba:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    2ebc:	2b01      	cmp	r3, #1
    2ebe:	d000      	beq.n	2ec2 <USB_Handler+0x26e>
    2ec0:	e757      	b.n	2d72 <USB_Handler+0x11e>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    2ec2:	0162      	lsls	r2, r4, #5
    2ec4:	4b30      	ldr	r3, [pc, #192]	; (2f88 <USB_Handler+0x334>)
    2ec6:	189b      	adds	r3, r3, r2
    2ec8:	2200      	movs	r2, #0
    2eca:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2ecc:	0023      	movs	r3, r4
    2ece:	3308      	adds	r3, #8
    2ed0:	015b      	lsls	r3, r3, #5
    2ed2:	6802      	ldr	r2, [r0, #0]
    2ed4:	18d2      	adds	r2, r2, r3
    2ed6:	2104      	movs	r1, #4
    2ed8:	71d1      	strb	r1, [r2, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    2eda:	6802      	ldr	r2, [r0, #0]
    2edc:	18d3      	adds	r3, r2, r3
    2ede:	2210      	movs	r2, #16
    2ee0:	715a      	strb	r2, [r3, #5]
    2ee2:	e752      	b.n	2d8a <USB_Handler+0x136>
				pipe_callback_para.pipe_num = pipe_int;
    2ee4:	4927      	ldr	r1, [pc, #156]	; (2f84 <USB_Handler+0x330>)
    2ee6:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    2ee8:	0162      	lsls	r2, r4, #5
    2eea:	4b27      	ldr	r3, [pc, #156]	; (2f88 <USB_Handler+0x334>)
    2eec:	189b      	adds	r3, r3, r2
    2eee:	89db      	ldrh	r3, [r3, #14]
    2ef0:	221f      	movs	r2, #31
    2ef2:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    2ef4:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    2ef6:	0123      	lsls	r3, r4, #4
    2ef8:	18c3      	adds	r3, r0, r3
    2efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2efc:	4798      	blx	r3
    2efe:	e75c      	b.n	2dba <USB_Handler+0x166>
				pipe_callback_para.pipe_num = pipe_int;
    2f00:	4920      	ldr	r1, [pc, #128]	; (2f84 <USB_Handler+0x330>)
    2f02:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2f04:	0162      	lsls	r2, r4, #5
    2f06:	4b20      	ldr	r3, [pc, #128]	; (2f88 <USB_Handler+0x334>)
    2f08:	189b      	adds	r3, r3, r2
    2f0a:	685b      	ldr	r3, [r3, #4]
    2f0c:	011b      	lsls	r3, r3, #4
    2f0e:	0c9b      	lsrs	r3, r3, #18
    2f10:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    2f12:	0123      	lsls	r3, r4, #4
    2f14:	18c3      	adds	r3, r0, r3
    2f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2f18:	2100      	movs	r1, #0
    2f1a:	4798      	blx	r3
    2f1c:	e765      	b.n	2dea <USB_Handler+0x196>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    2f1e:	8bac      	ldrh	r4, [r5, #28]
    2f20:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    2f22:	0763      	lsls	r3, r4, #29
    2f24:	d538      	bpl.n	2f98 <USB_Handler+0x344>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    2f26:	2304      	movs	r3, #4
    2f28:	83ab      	strh	r3, [r5, #28]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    2f2a:	4b15      	ldr	r3, [pc, #84]	; (2f80 <USB_Handler+0x32c>)
    2f2c:	681d      	ldr	r5, [r3, #0]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    2f2e:	2301      	movs	r3, #1
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    2f30:	2001      	movs	r0, #1
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    2f32:	2610      	movs	r6, #16
    2f34:	e002      	b.n	2f3c <USB_Handler+0x2e8>
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    2f36:	3301      	adds	r3, #1
    2f38:	2b08      	cmp	r3, #8
    2f3a:	d029      	beq.n	2f90 <USB_Handler+0x33c>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    2f3c:	0002      	movs	r2, r0
    2f3e:	409a      	lsls	r2, r3
    2f40:	4215      	tst	r5, r2
    2f42:	d0f8      	beq.n	2f36 <USB_Handler+0x2e2>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    2f44:	6839      	ldr	r1, [r7, #0]
    2f46:	001a      	movs	r2, r3
    2f48:	3208      	adds	r2, #8
    2f4a:	0152      	lsls	r2, r2, #5
    2f4c:	5c52      	ldrb	r2, [r2, r1]
    2f4e:	0692      	lsls	r2, r2, #26
    2f50:	0f52      	lsrs	r2, r2, #29
    2f52:	2a03      	cmp	r2, #3
    2f54:	d1ef      	bne.n	2f36 <USB_Handler+0x2e2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    2f56:	001a      	movs	r2, r3
    2f58:	3208      	adds	r2, #8
    2f5a:	0152      	lsls	r2, r2, #5
    2f5c:	5c52      	ldrb	r2, [r2, r1]
    2f5e:	0792      	lsls	r2, r2, #30
    2f60:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    2f62:	2a01      	cmp	r2, #1
    2f64:	d1e7      	bne.n	2f36 <USB_Handler+0x2e2>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    2f66:	001a      	movs	r2, r3
    2f68:	3208      	adds	r2, #8
    2f6a:	0152      	lsls	r2, r2, #5
    2f6c:	1889      	adds	r1, r1, r2
    2f6e:	710e      	strb	r6, [r1, #4]
    2f70:	e7e1      	b.n	2f36 <USB_Handler+0x2e2>
    2f72:	46c0      	nop			; (mov r8, r8)
    2f74:	200005b4 	.word	0x200005b4
    2f78:	000140c4 	.word	0x000140c4
    2f7c:	0000e909 	.word	0x0000e909
    2f80:	200005c4 	.word	0x200005c4
    2f84:	200005c8 	.word	0x200005c8
    2f88:	200029f4 	.word	0x200029f4
    2f8c:	f0003fff 	.word	0xf0003fff
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    2f90:	339d      	adds	r3, #157	; 0x9d
    2f92:	5cfb      	ldrb	r3, [r7, r3]
    2f94:	07db      	lsls	r3, r3, #31
    2f96:	d462      	bmi.n	305e <USB_Handler+0x40a>
		if (flags & USB_HOST_INTFLAG_RST) {
    2f98:	0723      	lsls	r3, r4, #28
    2f9a:	d50b      	bpl.n	2fb4 <USB_Handler+0x360>
			host_pipe_job_busy_status = 0;
    2f9c:	2200      	movs	r2, #0
    2f9e:	4baf      	ldr	r3, [pc, #700]	; (325c <USB_Handler+0x608>)
    2fa0:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    2fa2:	4baf      	ldr	r3, [pc, #700]	; (3260 <USB_Handler+0x60c>)
    2fa4:	6818      	ldr	r0, [r3, #0]
    2fa6:	2308      	movs	r3, #8
    2fa8:	6802      	ldr	r2, [r0, #0]
    2faa:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    2fac:	339d      	adds	r3, #157	; 0x9d
    2fae:	5cc3      	ldrb	r3, [r0, r3]
    2fb0:	079b      	lsls	r3, r3, #30
    2fb2:	d458      	bmi.n	3066 <USB_Handler+0x412>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    2fb4:	0663      	lsls	r3, r4, #25
    2fb6:	d508      	bpl.n	2fca <USB_Handler+0x376>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    2fb8:	4ba9      	ldr	r3, [pc, #676]	; (3260 <USB_Handler+0x60c>)
    2fba:	6818      	ldr	r0, [r3, #0]
    2fbc:	2340      	movs	r3, #64	; 0x40
    2fbe:	6802      	ldr	r2, [r0, #0]
    2fc0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    2fc2:	3365      	adds	r3, #101	; 0x65
    2fc4:	5cc3      	ldrb	r3, [r0, r3]
    2fc6:	06db      	lsls	r3, r3, #27
    2fc8:	d450      	bmi.n	306c <USB_Handler+0x418>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    2fca:	06a3      	lsls	r3, r4, #26
    2fcc:	d508      	bpl.n	2fe0 <USB_Handler+0x38c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    2fce:	4ba4      	ldr	r3, [pc, #656]	; (3260 <USB_Handler+0x60c>)
    2fd0:	6818      	ldr	r0, [r3, #0]
    2fd2:	2320      	movs	r3, #32
    2fd4:	6802      	ldr	r2, [r0, #0]
    2fd6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    2fd8:	3385      	adds	r3, #133	; 0x85
    2fda:	5cc3      	ldrb	r3, [r0, r3]
    2fdc:	071b      	lsls	r3, r3, #28
    2fde:	d448      	bmi.n	3072 <USB_Handler+0x41e>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    2fe0:	06e3      	lsls	r3, r4, #27
    2fe2:	d508      	bpl.n	2ff6 <USB_Handler+0x3a2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    2fe4:	4b9e      	ldr	r3, [pc, #632]	; (3260 <USB_Handler+0x60c>)
    2fe6:	6818      	ldr	r0, [r3, #0]
    2fe8:	2310      	movs	r3, #16
    2fea:	6802      	ldr	r2, [r0, #0]
    2fec:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    2fee:	3395      	adds	r3, #149	; 0x95
    2ff0:	5cc3      	ldrb	r3, [r0, r3]
    2ff2:	075b      	lsls	r3, r3, #29
    2ff4:	d440      	bmi.n	3078 <USB_Handler+0x424>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    2ff6:	0623      	lsls	r3, r4, #24
    2ff8:	d50b      	bpl.n	3012 <USB_Handler+0x3be>
			host_pipe_job_busy_status = 0;
    2ffa:	2200      	movs	r2, #0
    2ffc:	4b97      	ldr	r3, [pc, #604]	; (325c <USB_Handler+0x608>)
    2ffe:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3000:	4b97      	ldr	r3, [pc, #604]	; (3260 <USB_Handler+0x60c>)
    3002:	6818      	ldr	r0, [r3, #0]
    3004:	2380      	movs	r3, #128	; 0x80
    3006:	6802      	ldr	r2, [r0, #0]
    3008:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    300a:	3325      	adds	r3, #37	; 0x25
    300c:	5cc3      	ldrb	r3, [r0, r3]
    300e:	069b      	lsls	r3, r3, #26
    3010:	d435      	bmi.n	307e <USB_Handler+0x42a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    3012:	05e3      	lsls	r3, r4, #23
    3014:	d50c      	bpl.n	3030 <USB_Handler+0x3dc>
			host_pipe_job_busy_status = 0;
    3016:	2200      	movs	r2, #0
    3018:	4b90      	ldr	r3, [pc, #576]	; (325c <USB_Handler+0x608>)
    301a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    301c:	4b90      	ldr	r3, [pc, #576]	; (3260 <USB_Handler+0x60c>)
    301e:	6818      	ldr	r0, [r3, #0]
    3020:	2380      	movs	r3, #128	; 0x80
    3022:	005b      	lsls	r3, r3, #1
    3024:	6802      	ldr	r2, [r0, #0]
    3026:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    3028:	3b5b      	subs	r3, #91	; 0x5b
    302a:	5cc3      	ldrb	r3, [r0, r3]
    302c:	065b      	lsls	r3, r3, #25
    302e:	d429      	bmi.n	3084 <USB_Handler+0x430>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    3030:	05a3      	lsls	r3, r4, #22
    3032:	d50d      	bpl.n	3050 <USB_Handler+0x3fc>
			host_pipe_job_busy_status = 0;
    3034:	2200      	movs	r2, #0
    3036:	4b89      	ldr	r3, [pc, #548]	; (325c <USB_Handler+0x608>)
    3038:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    303a:	4b89      	ldr	r3, [pc, #548]	; (3260 <USB_Handler+0x60c>)
    303c:	6818      	ldr	r0, [r3, #0]
    303e:	2380      	movs	r3, #128	; 0x80
    3040:	009b      	lsls	r3, r3, #2
    3042:	6802      	ldr	r2, [r0, #0]
    3044:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    3046:	3b5c      	subs	r3, #92	; 0x5c
    3048:	3bff      	subs	r3, #255	; 0xff
    304a:	5cc3      	ldrb	r3, [r0, r3]
    304c:	2b7f      	cmp	r3, #127	; 0x7f
    304e:	d81c      	bhi.n	308a <USB_Handler+0x436>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    3050:	b003      	add	sp, #12
    3052:	bc3c      	pop	{r2, r3, r4, r5}
    3054:	4690      	mov	r8, r2
    3056:	4699      	mov	r9, r3
    3058:	46a2      	mov	sl, r4
    305a:	46ab      	mov	fp, r5
    305c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    305e:	687b      	ldr	r3, [r7, #4]
    3060:	0038      	movs	r0, r7
    3062:	4798      	blx	r3
    3064:	e798      	b.n	2f98 <USB_Handler+0x344>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    3066:	6883      	ldr	r3, [r0, #8]
    3068:	4798      	blx	r3
    306a:	e7a3      	b.n	2fb4 <USB_Handler+0x360>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    306c:	6943      	ldr	r3, [r0, #20]
    306e:	4798      	blx	r3
    3070:	e7ab      	b.n	2fca <USB_Handler+0x376>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    3072:	6903      	ldr	r3, [r0, #16]
    3074:	4798      	blx	r3
    3076:	e7b3      	b.n	2fe0 <USB_Handler+0x38c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3078:	68c3      	ldr	r3, [r0, #12]
    307a:	4798      	blx	r3
    307c:	e7bb      	b.n	2ff6 <USB_Handler+0x3a2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    307e:	6983      	ldr	r3, [r0, #24]
    3080:	4798      	blx	r3
    3082:	e7c6      	b.n	3012 <USB_Handler+0x3be>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    3084:	69c3      	ldr	r3, [r0, #28]
    3086:	4798      	blx	r3
    3088:	e7d2      	b.n	3030 <USB_Handler+0x3dc>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    308a:	6a03      	ldr	r3, [r0, #32]
    308c:	4798      	blx	r3
    308e:	e7df      	b.n	3050 <USB_Handler+0x3fc>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3090:	0023      	movs	r3, r4
    3092:	332e      	adds	r3, #46	; 0x2e
    3094:	009b      	lsls	r3, r3, #2
    3096:	4642      	mov	r2, r8
    3098:	6812      	ldr	r2, [r2, #0]
    309a:	589b      	ldr	r3, [r3, r2]
    309c:	4971      	ldr	r1, [pc, #452]	; (3264 <USB_Handler+0x610>)
    309e:	4642      	mov	r2, r8
    30a0:	6810      	ldr	r0, [r2, #0]
    30a2:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    30a4:	3401      	adds	r4, #1
    30a6:	2c07      	cmp	r4, #7
    30a8:	d0d2      	beq.n	3050 <USB_Handler+0x3fc>
			if (flags & _usb_device_irq_bits[i]) {
    30aa:	0063      	lsls	r3, r4, #1
    30ac:	5bdb      	ldrh	r3, [r3, r7]
    30ae:	4233      	tst	r3, r6
    30b0:	d003      	beq.n	30ba <USB_Handler+0x466>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    30b2:	464a      	mov	r2, r9
    30b4:	6812      	ldr	r2, [r2, #0]
    30b6:	6812      	ldr	r2, [r2, #0]
    30b8:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    30ba:	422b      	tst	r3, r5
    30bc:	d0f2      	beq.n	30a4 <USB_Handler+0x450>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    30be:	2c06      	cmp	r4, #6
    30c0:	d1e6      	bne.n	3090 <USB_Handler+0x43c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    30c2:	4b69      	ldr	r3, [pc, #420]	; (3268 <USB_Handler+0x614>)
    30c4:	891b      	ldrh	r3, [r3, #8]
    30c6:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    30c8:	2280      	movs	r2, #128	; 0x80
    30ca:	0052      	lsls	r2, r2, #1
    30cc:	4013      	ands	r3, r2
    30ce:	4a65      	ldr	r2, [pc, #404]	; (3264 <USB_Handler+0x610>)
    30d0:	6013      	str	r3, [r2, #0]
    30d2:	e7dd      	b.n	3090 <USB_Handler+0x43c>
    30d4:	003c      	movs	r4, r7
    30d6:	3459      	adds	r4, #89	; 0x59
    30d8:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    30da:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    30dc:	2201      	movs	r2, #1
    30de:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    30e0:	325f      	adds	r2, #95	; 0x5f
    30e2:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    30e4:	3a50      	subs	r2, #80	; 0x50
    30e6:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    30e8:	3a0d      	subs	r2, #13
    30ea:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    30ec:	46b8      	mov	r8, r7
    30ee:	002f      	movs	r7, r5
    30f0:	e0c3      	b.n	327a <USB_Handler+0x626>
    30f2:	002a      	movs	r2, r5
    30f4:	003d      	movs	r5, r7
    30f6:	4647      	mov	r7, r8
    30f8:	4690      	mov	r8, r2
    30fa:	015b      	lsls	r3, r3, #5
    30fc:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    30fe:	2308      	movs	r3, #8
    3100:	33ff      	adds	r3, #255	; 0xff
    3102:	5ceb      	ldrb	r3, [r5, r3]
    3104:	065b      	lsls	r3, r3, #25
    3106:	d515      	bpl.n	3134 <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3108:	2240      	movs	r2, #64	; 0x40
    310a:	2308      	movs	r3, #8
    310c:	33ff      	adds	r3, #255	; 0xff
    310e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3110:	3b88      	subs	r3, #136	; 0x88
    3112:	3bff      	subs	r3, #255	; 0xff
    3114:	4642      	mov	r2, r8
    3116:	4313      	orrs	r3, r2
    3118:	4a54      	ldr	r2, [pc, #336]	; (326c <USB_Handler+0x618>)
    311a:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    311c:	2360      	movs	r3, #96	; 0x60
    311e:	420b      	tst	r3, r1
    3120:	d096      	beq.n	3050 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    3122:	9b01      	ldr	r3, [sp, #4]
    3124:	011b      	lsls	r3, r3, #4
    3126:	18fb      	adds	r3, r7, r3
    3128:	33e0      	adds	r3, #224	; 0xe0
    312a:	681b      	ldr	r3, [r3, #0]
    312c:	494f      	ldr	r1, [pc, #316]	; (326c <USB_Handler+0x618>)
    312e:	0038      	movs	r0, r7
    3130:	4798      	blx	r3
    3132:	e78d      	b.n	3050 <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3134:	2308      	movs	r3, #8
    3136:	33ff      	adds	r3, #255	; 0xff
    3138:	5ceb      	ldrb	r3, [r5, r3]
    313a:	069b      	lsls	r3, r3, #26
    313c:	d5ee      	bpl.n	311c <USB_Handler+0x4c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    313e:	2220      	movs	r2, #32
    3140:	2308      	movs	r3, #8
    3142:	33ff      	adds	r3, #255	; 0xff
    3144:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3146:	4b49      	ldr	r3, [pc, #292]	; (326c <USB_Handler+0x618>)
    3148:	4642      	mov	r2, r8
    314a:	719a      	strb	r2, [r3, #6]
    314c:	e7e6      	b.n	311c <USB_Handler+0x4c8>
    314e:	003d      	movs	r5, r7
    3150:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    3152:	9a01      	ldr	r2, [sp, #4]
    3154:	0013      	movs	r3, r2
    3156:	3308      	adds	r3, #8
    3158:	015b      	lsls	r3, r3, #5
    315a:	18ed      	adds	r5, r5, r3
    315c:	2310      	movs	r3, #16
    315e:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    3160:	18bb      	adds	r3, r7, r2
    3162:	3361      	adds	r3, #97	; 0x61
    3164:	33ff      	adds	r3, #255	; 0xff
    3166:	781b      	ldrb	r3, [r3, #0]
    3168:	06db      	lsls	r3, r3, #27
    316a:	d400      	bmi.n	316e <USB_Handler+0x51a>
    316c:	e770      	b.n	3050 <USB_Handler+0x3fc>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    316e:	0010      	movs	r0, r2
    3170:	0152      	lsls	r2, r2, #5
    3172:	4b3d      	ldr	r3, [pc, #244]	; (3268 <USB_Handler+0x614>)
    3174:	189b      	adds	r3, r3, r2
    3176:	685b      	ldr	r3, [r3, #4]
    3178:	049b      	lsls	r3, r3, #18
    317a:	0c9b      	lsrs	r3, r3, #18
    317c:	493b      	ldr	r1, [pc, #236]	; (326c <USB_Handler+0x618>)
    317e:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3180:	0103      	lsls	r3, r0, #4
    3182:	18fb      	adds	r3, r7, r3
    3184:	33dc      	adds	r3, #220	; 0xdc
    3186:	681b      	ldr	r3, [r3, #0]
    3188:	4640      	mov	r0, r8
    318a:	4798      	blx	r3
    318c:	e760      	b.n	3050 <USB_Handler+0x3fc>
    318e:	002a      	movs	r2, r5
    3190:	003d      	movs	r5, r7
    3192:	4647      	mov	r7, r8
    3194:	4690      	mov	r8, r2
    3196:	015b      	lsls	r3, r3, #5
    3198:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    319a:	2308      	movs	r3, #8
    319c:	33ff      	adds	r3, #255	; 0xff
    319e:	5ceb      	ldrb	r3, [r5, r3]
    31a0:	079b      	lsls	r3, r3, #30
    31a2:	d51e      	bpl.n	31e2 <USB_Handler+0x58e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    31a4:	2202      	movs	r2, #2
    31a6:	2308      	movs	r3, #8
    31a8:	33ff      	adds	r3, #255	; 0xff
    31aa:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    31ac:	482f      	ldr	r0, [pc, #188]	; (326c <USB_Handler+0x618>)
    31ae:	3b88      	subs	r3, #136	; 0x88
    31b0:	3bff      	subs	r3, #255	; 0xff
    31b2:	4642      	mov	r2, r8
    31b4:	4313      	orrs	r3, r2
    31b6:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    31b8:	9b01      	ldr	r3, [sp, #4]
    31ba:	015a      	lsls	r2, r3, #5
    31bc:	4b2a      	ldr	r3, [pc, #168]	; (3268 <USB_Handler+0x614>)
    31be:	189b      	adds	r3, r3, r2
    31c0:	3310      	adds	r3, #16
    31c2:	685b      	ldr	r3, [r3, #4]
    31c4:	049b      	lsls	r3, r3, #18
    31c6:	0c9b      	lsrs	r3, r3, #18
    31c8:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    31ca:	078b      	lsls	r3, r1, #30
    31cc:	d100      	bne.n	31d0 <USB_Handler+0x57c>
    31ce:	e73f      	b.n	3050 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    31d0:	9b01      	ldr	r3, [sp, #4]
    31d2:	330d      	adds	r3, #13
    31d4:	011b      	lsls	r3, r3, #4
    31d6:	18fb      	adds	r3, r7, r3
    31d8:	685b      	ldr	r3, [r3, #4]
    31da:	4924      	ldr	r1, [pc, #144]	; (326c <USB_Handler+0x618>)
    31dc:	0038      	movs	r0, r7
    31de:	4798      	blx	r3
    31e0:	e736      	b.n	3050 <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    31e2:	2308      	movs	r3, #8
    31e4:	33ff      	adds	r3, #255	; 0xff
    31e6:	5ceb      	ldrb	r3, [r5, r3]
    31e8:	07db      	lsls	r3, r3, #31
    31ea:	d5ee      	bpl.n	31ca <USB_Handler+0x576>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    31ec:	2201      	movs	r2, #1
    31ee:	2308      	movs	r3, #8
    31f0:	33ff      	adds	r3, #255	; 0xff
    31f2:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    31f4:	481d      	ldr	r0, [pc, #116]	; (326c <USB_Handler+0x618>)
    31f6:	4643      	mov	r3, r8
    31f8:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    31fa:	9b01      	ldr	r3, [sp, #4]
    31fc:	015b      	lsls	r3, r3, #5
    31fe:	4a1a      	ldr	r2, [pc, #104]	; (3268 <USB_Handler+0x614>)
    3200:	18d2      	adds	r2, r2, r3
    3202:	6853      	ldr	r3, [r2, #4]
    3204:	049b      	lsls	r3, r3, #18
    3206:	0c9b      	lsrs	r3, r3, #18
    3208:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    320a:	6853      	ldr	r3, [r2, #4]
    320c:	011b      	lsls	r3, r3, #4
    320e:	0c9b      	lsrs	r3, r3, #18
    3210:	8083      	strh	r3, [r0, #4]
    3212:	e7da      	b.n	31ca <USB_Handler+0x576>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3214:	2208      	movs	r2, #8
    3216:	32ff      	adds	r2, #255	; 0xff
    3218:	5c9a      	ldrb	r2, [r3, r2]
    321a:	0752      	lsls	r2, r2, #29
    321c:	d579      	bpl.n	3312 <USB_Handler+0x6be>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    321e:	2004      	movs	r0, #4
    3220:	2208      	movs	r2, #8
    3222:	32ff      	adds	r2, #255	; 0xff
    3224:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3226:	9801      	ldr	r0, [sp, #4]
    3228:	0142      	lsls	r2, r0, #5
    322a:	4b0f      	ldr	r3, [pc, #60]	; (3268 <USB_Handler+0x614>)
    322c:	189b      	adds	r3, r3, r2
    322e:	7a9b      	ldrb	r3, [r3, #10]
    3230:	079b      	lsls	r3, r3, #30
    3232:	d505      	bpl.n	3240 <USB_Handler+0x5ec>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3234:	4b0c      	ldr	r3, [pc, #48]	; (3268 <USB_Handler+0x614>)
    3236:	189b      	adds	r3, r3, r2
    3238:	7a9a      	ldrb	r2, [r3, #10]
    323a:	2002      	movs	r0, #2
    323c:	4382      	bics	r2, r0
    323e:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3240:	4b0a      	ldr	r3, [pc, #40]	; (326c <USB_Handler+0x618>)
    3242:	4642      	mov	r2, r8
    3244:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3246:	9b01      	ldr	r3, [sp, #4]
    3248:	3308      	adds	r3, #8
    324a:	015b      	lsls	r3, r3, #5
    324c:	683a      	ldr	r2, [r7, #0]
    324e:	4694      	mov	ip, r2
    3250:	4463      	add	r3, ip
    3252:	79db      	ldrb	r3, [r3, #7]
    3254:	07db      	lsls	r3, r3, #31
    3256:	d55c      	bpl.n	3312 <USB_Handler+0x6be>
    3258:	e6fa      	b.n	3050 <USB_Handler+0x3fc>
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	200005c4 	.word	0x200005c4
    3260:	200005b4 	.word	0x200005b4
    3264:	200005b8 	.word	0x200005b8
    3268:	200029f4 	.word	0x200029f4
    326c:	200005bc 	.word	0x200005bc
    3270:	3301      	adds	r3, #1
    3272:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    3274:	2b08      	cmp	r3, #8
    3276:	d100      	bne.n	327a <USB_Handler+0x626>
    3278:	e6ea      	b.n	3050 <USB_Handler+0x3fc>
    327a:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    327c:	9301      	str	r3, [sp, #4]
    327e:	0032      	movs	r2, r6
    3280:	411a      	asrs	r2, r3
    3282:	4661      	mov	r1, ip
    3284:	4211      	tst	r1, r2
    3286:	d0f3      	beq.n	3270 <USB_Handler+0x61c>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    3288:	001a      	movs	r2, r3
    328a:	3208      	adds	r2, #8
    328c:	0152      	lsls	r2, r2, #5
    328e:	18ba      	adds	r2, r7, r2
    3290:	79d2      	ldrb	r2, [r2, #7]
    3292:	b2d2      	uxtb	r2, r2
    3294:	7a21      	ldrb	r1, [r4, #8]
    3296:	4011      	ands	r1, r2
    3298:	7820      	ldrb	r0, [r4, #0]
    329a:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    329c:	4648      	mov	r0, r9
    329e:	4210      	tst	r0, r2
    32a0:	d000      	beq.n	32a4 <USB_Handler+0x650>
    32a2:	e726      	b.n	30f2 <USB_Handler+0x49e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    32a4:	4650      	mov	r0, sl
    32a6:	4210      	tst	r0, r2
    32a8:	d000      	beq.n	32ac <USB_Handler+0x658>
    32aa:	e750      	b.n	314e <USB_Handler+0x4fa>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    32ac:	4658      	mov	r0, fp
    32ae:	4210      	tst	r0, r2
    32b0:	d000      	beq.n	32b4 <USB_Handler+0x660>
    32b2:	e76c      	b.n	318e <USB_Handler+0x53a>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    32b4:	200c      	movs	r0, #12
    32b6:	4210      	tst	r0, r2
    32b8:	d0da      	beq.n	3270 <USB_Handler+0x61c>
    32ba:	002a      	movs	r2, r5
    32bc:	003d      	movs	r5, r7
    32be:	4647      	mov	r7, r8
    32c0:	4690      	mov	r8, r2
    32c2:	015b      	lsls	r3, r3, #5
    32c4:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    32c6:	2208      	movs	r2, #8
    32c8:	32ff      	adds	r2, #255	; 0xff
    32ca:	5c9a      	ldrb	r2, [r3, r2]
    32cc:	0712      	lsls	r2, r2, #28
    32ce:	d5a1      	bpl.n	3214 <USB_Handler+0x5c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    32d0:	3804      	subs	r0, #4
    32d2:	2208      	movs	r2, #8
    32d4:	32ff      	adds	r2, #255	; 0xff
    32d6:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    32d8:	9801      	ldr	r0, [sp, #4]
    32da:	0142      	lsls	r2, r0, #5
    32dc:	4b13      	ldr	r3, [pc, #76]	; (332c <USB_Handler+0x6d8>)
    32de:	189b      	adds	r3, r3, r2
    32e0:	7e9b      	ldrb	r3, [r3, #26]
    32e2:	079b      	lsls	r3, r3, #30
    32e4:	d505      	bpl.n	32f2 <USB_Handler+0x69e>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    32e6:	4b11      	ldr	r3, [pc, #68]	; (332c <USB_Handler+0x6d8>)
    32e8:	189b      	adds	r3, r3, r2
    32ea:	7e9a      	ldrb	r2, [r3, #26]
    32ec:	2002      	movs	r0, #2
    32ee:	4382      	bics	r2, r0
    32f0:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    32f2:	2380      	movs	r3, #128	; 0x80
    32f4:	425b      	negs	r3, r3
    32f6:	4642      	mov	r2, r8
    32f8:	4313      	orrs	r3, r2
    32fa:	4a0d      	ldr	r2, [pc, #52]	; (3330 <USB_Handler+0x6dc>)
    32fc:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    32fe:	9b01      	ldr	r3, [sp, #4]
    3300:	3308      	adds	r3, #8
    3302:	015b      	lsls	r3, r3, #5
    3304:	683a      	ldr	r2, [r7, #0]
    3306:	4694      	mov	ip, r2
    3308:	4463      	add	r3, ip
    330a:	79db      	ldrb	r3, [r3, #7]
    330c:	079b      	lsls	r3, r3, #30
    330e:	d500      	bpl.n	3312 <USB_Handler+0x6be>
    3310:	e69e      	b.n	3050 <USB_Handler+0x3fc>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3312:	230c      	movs	r3, #12
    3314:	420b      	tst	r3, r1
    3316:	d100      	bne.n	331a <USB_Handler+0x6c6>
    3318:	e69a      	b.n	3050 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    331a:	9b01      	ldr	r3, [sp, #4]
    331c:	011b      	lsls	r3, r3, #4
    331e:	18fb      	adds	r3, r7, r3
    3320:	33d8      	adds	r3, #216	; 0xd8
    3322:	681b      	ldr	r3, [r3, #0]
    3324:	4902      	ldr	r1, [pc, #8]	; (3330 <USB_Handler+0x6dc>)
    3326:	0038      	movs	r0, r7
    3328:	4798      	blx	r3
    332a:	e691      	b.n	3050 <USB_Handler+0x3fc>
    332c:	200029f4 	.word	0x200029f4
    3330:	200005bc 	.word	0x200005bc

00003334 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    3334:	2300      	movs	r3, #0
    3336:	7003      	strb	r3, [r0, #0]
	module_config->run_in_standby = 1;
    3338:	3301      	adds	r3, #1
    333a:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_3;
    333c:	2203      	movs	r2, #3
    333e:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    3340:	70c3      	strb	r3, [r0, #3]
}
    3342:	4770      	bx	lr

00003344 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    3344:	b5f0      	push	{r4, r5, r6, r7, lr}
    3346:	46ce      	mov	lr, r9
    3348:	4647      	mov	r7, r8
    334a:	b580      	push	{r7, lr}
    334c:	b083      	sub	sp, #12
    334e:	0004      	movs	r4, r0
    3350:	000d      	movs	r5, r1
    3352:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAML22
	host_pipe_job_busy_status = 0;
    3354:	2300      	movs	r3, #0
    3356:	4a67      	ldr	r2, [pc, #412]	; (34f4 <usb_init+0x1b0>)
    3358:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    335a:	4a67      	ldr	r2, [pc, #412]	; (34f8 <usb_init+0x1b4>)
    335c:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    335e:	6021      	str	r1, [r4, #0]
			MCLK->APBBMASK.reg |= mask;
    3360:	4866      	ldr	r0, [pc, #408]	; (34fc <usb_init+0x1b8>)
    3362:	6982      	ldr	r2, [r0, #24]
    3364:	2101      	movs	r1, #1
    3366:	430a      	orrs	r2, r1
    3368:	6182      	str	r2, [r0, #24]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    336a:	af01      	add	r7, sp, #4
    336c:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    336e:	70b9      	strb	r1, [r7, #2]
	config->powersave    = false;
    3370:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    3372:	3306      	adds	r3, #6
    3374:	4699      	mov	r9, r3
    3376:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    3378:	0039      	movs	r1, r7
    337a:	2018      	movs	r0, #24
    337c:	4b60      	ldr	r3, [pc, #384]	; (3500 <usb_init+0x1bc>)
    337e:	4698      	mov	r8, r3
    3380:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    3382:	464b      	mov	r3, r9
    3384:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    3386:	0039      	movs	r1, r7
    3388:	2019      	movs	r0, #25
    338a:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    338c:	78b3      	ldrb	r3, [r6, #2]
    338e:	466a      	mov	r2, sp
    3390:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    3392:	4669      	mov	r1, sp
    3394:	2004      	movs	r0, #4
    3396:	4b5b      	ldr	r3, [pc, #364]	; (3504 <usb_init+0x1c0>)
    3398:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    339a:	2004      	movs	r0, #4
    339c:	4b5a      	ldr	r3, [pc, #360]	; (3508 <usb_init+0x1c4>)
    339e:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    33a0:	782b      	ldrb	r3, [r5, #0]
    33a2:	2201      	movs	r2, #1
    33a4:	4313      	orrs	r3, r2
    33a6:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    33a8:	78ab      	ldrb	r3, [r5, #2]
    33aa:	07db      	lsls	r3, r3, #31
    33ac:	d4fc      	bmi.n	33a8 <usb_init+0x64>
		/* Sync wait */
	}

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    33ae:	4b57      	ldr	r3, [pc, #348]	; (350c <usb_init+0x1c8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    33b0:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    33b2:	039b      	lsls	r3, r3, #14
    33b4:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    33b6:	2b1f      	cmp	r3, #31
    33b8:	d100      	bne.n	33bc <usb_init+0x78>
    33ba:	e08f      	b.n	34dc <usb_init+0x198>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    33bc:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    33be:	019b      	lsls	r3, r3, #6
    33c0:	4953      	ldr	r1, [pc, #332]	; (3510 <usb_init+0x1cc>)
    33c2:	400a      	ands	r2, r1
    33c4:	4313      	orrs	r3, r2
    33c6:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    33c8:	4b50      	ldr	r3, [pc, #320]	; (350c <usb_init+0x1c8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    33ca:	681b      	ldr	r3, [r3, #0]
    33cc:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    33ce:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    33d0:	2b1f      	cmp	r3, #31
    33d2:	d100      	bne.n	33d6 <usb_init+0x92>
    33d4:	e084      	b.n	34e0 <usb_init+0x19c>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    33d6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    33d8:	211f      	movs	r1, #31
    33da:	438a      	bics	r2, r1
    33dc:	4313      	orrs	r3, r2
    33de:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    33e0:	4b4a      	ldr	r3, [pc, #296]	; (350c <usb_init+0x1c8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    33e2:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    33e4:	019b      	lsls	r3, r3, #6
    33e6:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    33e8:	2b07      	cmp	r3, #7
    33ea:	d100      	bne.n	33ee <usb_init+0xaa>
    33ec:	e07a      	b.n	34e4 <usb_init+0x1a0>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    33ee:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    33f0:	031b      	lsls	r3, r3, #12
    33f2:	4948      	ldr	r1, [pc, #288]	; (3514 <usb_init+0x1d0>)
    33f4:	400a      	ands	r2, r1
    33f6:	4313      	orrs	r3, r2
    33f8:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    33fa:	7832      	ldrb	r2, [r6, #0]
    33fc:	7829      	ldrb	r1, [r5, #0]
    33fe:	01d2      	lsls	r2, r2, #7
    3400:	237f      	movs	r3, #127	; 0x7f
    3402:	400b      	ands	r3, r1
    3404:	4313      	orrs	r3, r2
    3406:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    3408:	7871      	ldrb	r1, [r6, #1]
    340a:	782b      	ldrb	r3, [r5, #0]
    340c:	2201      	movs	r2, #1
    340e:	400a      	ands	r2, r1
    3410:	0092      	lsls	r2, r2, #2
    3412:	2104      	movs	r1, #4
    3414:	438b      	bics	r3, r1
    3416:	4313      	orrs	r3, r2
    3418:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    341a:	4b3f      	ldr	r3, [pc, #252]	; (3518 <usb_init+0x1d4>)
    341c:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    341e:	78f3      	ldrb	r3, [r6, #3]
    3420:	2b01      	cmp	r3, #1
    3422:	d061      	beq.n	34e8 <usb_init+0x1a4>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    3424:	2b00      	cmp	r3, #0
    3426:	d106      	bne.n	3436 <usb_init+0xf2>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    3428:	6822      	ldr	r2, [r4, #0]
    342a:	8913      	ldrh	r3, [r2, #8]
    342c:	210c      	movs	r1, #12
    342e:	438b      	bics	r3, r1
    3430:	2104      	movs	r1, #4
    3432:	430b      	orrs	r3, r1
    3434:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    3436:	2280      	movs	r2, #128	; 0x80
    3438:	0052      	lsls	r2, r2, #1
    343a:	2100      	movs	r1, #0
    343c:	4836      	ldr	r0, [pc, #216]	; (3518 <usb_init+0x1d4>)
    343e:	4b37      	ldr	r3, [pc, #220]	; (351c <usb_init+0x1d8>)
    3440:	4798      	blx	r3
    3442:	1d23      	adds	r3, r4, #4
    3444:	0021      	movs	r1, r4
    3446:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAML22
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    3448:	2200      	movs	r2, #0
    344a:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    344c:	428b      	cmp	r3, r1
    344e:	d1fc      	bne.n	344a <usb_init+0x106>
    3450:	0021      	movs	r1, r4
    3452:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    3454:	2200      	movs	r2, #0
    3456:	601a      	str	r2, [r3, #0]
    3458:	605a      	str	r2, [r3, #4]
    345a:	609a      	str	r2, [r3, #8]
    345c:	60da      	str	r2, [r3, #12]
    345e:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    3460:	428b      	cmp	r3, r1
    3462:	d1f8      	bne.n	3456 <usb_init+0x112>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    3464:	2300      	movs	r3, #0
    3466:	22a4      	movs	r2, #164	; 0xa4
    3468:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    346a:	3201      	adds	r2, #1
    346c:	54a3      	strb	r3, [r4, r2]
    346e:	0023      	movs	r3, r4
    3470:	33a6      	adds	r3, #166	; 0xa6
    3472:	0021      	movs	r1, r4
    3474:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    3476:	2200      	movs	r2, #0
    3478:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    347a:	721a      	strb	r2, [r3, #8]
    347c:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    347e:	4299      	cmp	r1, r3
    3480:	d1fa      	bne.n	3478 <usb_init+0x134>
    3482:	0023      	movs	r3, r4
    3484:	33b8      	adds	r3, #184	; 0xb8
    3486:	0021      	movs	r1, r4
    3488:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    348a:	2200      	movs	r2, #0
    348c:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    348e:	428b      	cmp	r3, r1
    3490:	d1fc      	bne.n	348c <usb_init+0x148>
    3492:	0021      	movs	r1, r4
    3494:	3155      	adds	r1, #85	; 0x55
    3496:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    3498:	2200      	movs	r2, #0
    349a:	601a      	str	r2, [r3, #0]
    349c:	605a      	str	r2, [r3, #4]
    349e:	609a      	str	r2, [r3, #8]
    34a0:	60da      	str	r2, [r3, #12]
    34a2:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    34a4:	428b      	cmp	r3, r1
    34a6:	d1f8      	bne.n	349a <usb_init+0x156>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    34a8:	2300      	movs	r3, #0
    34aa:	22aa      	movs	r2, #170	; 0xaa
    34ac:	0052      	lsls	r2, r2, #1
    34ae:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    34b0:	3202      	adds	r2, #2
    34b2:	52a3      	strh	r3, [r4, r2]
    34b4:	0023      	movs	r3, r4
    34b6:	3359      	adds	r3, #89	; 0x59
    34b8:	33ff      	adds	r3, #255	; 0xff
    34ba:	3461      	adds	r4, #97	; 0x61
    34bc:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    34be:	2200      	movs	r2, #0
    34c0:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    34c2:	721a      	strb	r2, [r3, #8]
    34c4:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    34c6:	42a3      	cmp	r3, r4
    34c8:	d1fa      	bne.n	34c0 <usb_init+0x17c>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    34ca:	2240      	movs	r2, #64	; 0x40
    34cc:	4b14      	ldr	r3, [pc, #80]	; (3520 <usb_init+0x1dc>)
    34ce:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    34d0:	2000      	movs	r0, #0
    34d2:	b003      	add	sp, #12
    34d4:	bc0c      	pop	{r2, r3}
    34d6:	4690      	mov	r8, r2
    34d8:	4699      	mov	r9, r3
    34da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    34dc:	3b1a      	subs	r3, #26
    34de:	e76d      	b.n	33bc <usb_init+0x78>
		pad_transp = 29;
    34e0:	3b02      	subs	r3, #2
    34e2:	e778      	b.n	33d6 <usb_init+0x92>
		pad_trim = 3;
    34e4:	3b04      	subs	r3, #4
    34e6:	e782      	b.n	33ee <usb_init+0xaa>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    34e8:	6822      	ldr	r2, [r4, #0]
    34ea:	8913      	ldrh	r3, [r2, #8]
    34ec:	3108      	adds	r1, #8
    34ee:	438b      	bics	r3, r1
    34f0:	8113      	strh	r3, [r2, #8]
    34f2:	e7a0      	b.n	3436 <usb_init+0xf2>
    34f4:	200005c4 	.word	0x200005c4
    34f8:	200005b4 	.word	0x200005b4
    34fc:	40000400 	.word	0x40000400
    3500:	0000e279 	.word	0x0000e279
    3504:	0000e17d 	.word	0x0000e17d
    3508:	0000e10d 	.word	0x0000e10d
    350c:	0080601c 	.word	0x0080601c
    3510:	fffff83f 	.word	0xfffff83f
    3514:	ffff8fff 	.word	0xffff8fff
    3518:	200029f4 	.word	0x200029f4
    351c:	000109ff 	.word	0x000109ff
    3520:	e000e100 	.word	0xe000e100

00003524 <initialise_button>:
#include "string.h"
#include "button.h"
#include "conf_board.h"

void initialise_button(void)
{
    3524:	b530      	push	{r4, r5, lr}
    3526:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3528:	ac01      	add	r4, sp, #4
    352a:	2300      	movs	r3, #0
    352c:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
    352e:	70a3      	strb	r3, [r4, #2]
	/* Set buttons as inputs */
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    3530:	3302      	adds	r3, #2
    3532:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(SW1_PIN, &config_port_pin);
    3534:	0021      	movs	r1, r4
    3536:	200b      	movs	r0, #11
    3538:	4d04      	ldr	r5, [pc, #16]	; (354c <initialise_button+0x28>)
    353a:	47a8      	blx	r5
	port_pin_set_config(SW2_PIN, &config_port_pin);
    353c:	0021      	movs	r1, r4
    353e:	202a      	movs	r0, #42	; 0x2a
    3540:	47a8      	blx	r5
	port_pin_set_config(SW3_PIN, &config_port_pin);
    3542:	0021      	movs	r1, r4
    3544:	202b      	movs	r0, #43	; 0x2b
    3546:	47a8      	blx	r5

}
    3548:	b003      	add	sp, #12
    354a:	bd30      	pop	{r4, r5, pc}
    354c:	0000d979 	.word	0x0000d979

00003550 <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return Returns ATCA_SUCCESS .
 */
ATCA_STATUS atcab_release(void)
{
    3550:	b510      	push	{r4, lr}
    deleteATCADevice(&_gDevice);
    3552:	4802      	ldr	r0, [pc, #8]	; (355c <atcab_release+0xc>)
    3554:	4b02      	ldr	r3, [pc, #8]	; (3560 <atcab_release+0x10>)
    3556:	4798      	blx	r3
    return ATCA_SUCCESS;
}
    3558:	2000      	movs	r0, #0
    355a:	bd10      	pop	{r4, pc}
    355c:	200005d0 	.word	0x200005d0
    3560:	00005fd1 	.word	0x00005fd1

00003564 <atcab_init>:
{
    3564:	b510      	push	{r4, lr}
    3566:	b082      	sub	sp, #8
    3568:	0004      	movs	r4, r0
    if (_gDevice)       // if there's already a device created, release it
    356a:	4b18      	ldr	r3, [pc, #96]	; (35cc <atcab_init+0x68>)
    356c:	681b      	ldr	r3, [r3, #0]
    356e:	2b00      	cmp	r3, #0
    3570:	d001      	beq.n	3576 <atcab_init+0x12>
        atcab_release();
    3572:	4b17      	ldr	r3, [pc, #92]	; (35d0 <atcab_init+0x6c>)
    3574:	4798      	blx	r3
    _gDevice = newATCADevice(cfg);
    3576:	0020      	movs	r0, r4
    3578:	4b16      	ldr	r3, [pc, #88]	; (35d4 <atcab_init+0x70>)
    357a:	4798      	blx	r3
    357c:	4b13      	ldr	r3, [pc, #76]	; (35cc <atcab_init+0x68>)
    357e:	6018      	str	r0, [r3, #0]
    if ((_gDevice == NULL) || (_gDevice->mIface == NULL) || (_gDevice->mCommands == NULL))
    3580:	2800      	cmp	r0, #0
    3582:	d01c      	beq.n	35be <atcab_init+0x5a>
    3584:	6843      	ldr	r3, [r0, #4]
    3586:	2b00      	cmp	r3, #0
    3588:	d01b      	beq.n	35c2 <atcab_init+0x5e>
    358a:	6803      	ldr	r3, [r0, #0]
    358c:	2b00      	cmp	r3, #0
    358e:	d01a      	beq.n	35c6 <atcab_init+0x62>
    if (cfg->devtype == ATECC608A)
    3590:	7862      	ldrb	r2, [r4, #1]
    return ATCA_SUCCESS;
    3592:	2000      	movs	r0, #0
    if (cfg->devtype == ATECC608A)
    3594:	2a03      	cmp	r2, #3
    3596:	d001      	beq.n	359c <atcab_init+0x38>
}
    3598:	b002      	add	sp, #8
    359a:	bd10      	pop	{r4, pc}
        if ((status = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, ATCA_CHIPMODE_OFFSET, &_gDevice->mCommands->clock_divider, 1)) != ATCA_SUCCESS)
    359c:	3301      	adds	r3, #1
    359e:	3a02      	subs	r2, #2
    35a0:	9200      	str	r2, [sp, #0]
    35a2:	3212      	adds	r2, #18
    35a4:	2100      	movs	r1, #0
    35a6:	4c0c      	ldr	r4, [pc, #48]	; (35d8 <atcab_init+0x74>)
    35a8:	47a0      	blx	r4
    35aa:	2800      	cmp	r0, #0
    35ac:	d1f4      	bne.n	3598 <atcab_init+0x34>
        _gDevice->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
    35ae:	4b07      	ldr	r3, [pc, #28]	; (35cc <atcab_init+0x68>)
    35b0:	681b      	ldr	r3, [r3, #0]
    35b2:	681a      	ldr	r2, [r3, #0]
    35b4:	7853      	ldrb	r3, [r2, #1]
    35b6:	2107      	movs	r1, #7
    35b8:	438b      	bics	r3, r1
    35ba:	7053      	strb	r3, [r2, #1]
    35bc:	e7ec      	b.n	3598 <atcab_init+0x34>
        return ATCA_GEN_FAIL;  // Device creation failed
    35be:	20e1      	movs	r0, #225	; 0xe1
    35c0:	e7ea      	b.n	3598 <atcab_init+0x34>
    35c2:	20e1      	movs	r0, #225	; 0xe1
    35c4:	e7e8      	b.n	3598 <atcab_init+0x34>
    35c6:	20e1      	movs	r0, #225	; 0xe1
    35c8:	e7e6      	b.n	3598 <atcab_init+0x34>
    35ca:	46c0      	nop			; (mov r8, r8)
    35cc:	200005d0 	.word	0x200005d0
    35d0:	00003551 	.word	0x00003551
    35d4:	00005f7d 	.word	0x00005f7d
    35d8:	000063d9 	.word	0x000063d9

000035dc <atcab_get_device>:
/** \brief Get the global device object.
 *  \return instance of global ATCADevice
 */
ATCADevice atcab_get_device(void)
{
    return _gDevice;
    35dc:	4b01      	ldr	r3, [pc, #4]	; (35e4 <atcab_get_device+0x8>)
    35de:	6818      	ldr	r0, [r3, #0]
}
    35e0:	4770      	bx	lr
    35e2:	46c0      	nop			; (mov r8, r8)
    35e4:	200005d0 	.word	0x200005d0

000035e8 <atcab_wakeup>:

/** \brief wakeup the CryptoAuth device
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_wakeup(void)
{
    35e8:	b510      	push	{r4, lr}
    if (_gDevice == NULL)
    35ea:	4b04      	ldr	r3, [pc, #16]	; (35fc <atcab_wakeup+0x14>)
    35ec:	681b      	ldr	r3, [r3, #0]
    {
        return ATCA_GEN_FAIL;
    35ee:	20e1      	movs	r0, #225	; 0xe1
    if (_gDevice == NULL)
    35f0:	2b00      	cmp	r3, #0
    35f2:	d002      	beq.n	35fa <atcab_wakeup+0x12>
    }

    return atwake(_gDevice->mIface);
    35f4:	6858      	ldr	r0, [r3, #4]
    35f6:	4b02      	ldr	r3, [pc, #8]	; (3600 <atcab_wakeup+0x18>)
    35f8:	4798      	blx	r3
}
    35fa:	bd10      	pop	{r4, pc}
    35fc:	200005d0 	.word	0x200005d0
    3600:	00006011 	.word	0x00006011

00003604 <atcab_idle>:

/** \brief idle the CryptoAuth device
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_idle(void)
{
    3604:	b510      	push	{r4, lr}
    if (_gDevice == NULL)
    3606:	4b04      	ldr	r3, [pc, #16]	; (3618 <atcab_idle+0x14>)
    3608:	681b      	ldr	r3, [r3, #0]
    {
        return ATCA_GEN_FAIL;
    360a:	20e1      	movs	r0, #225	; 0xe1
    if (_gDevice == NULL)
    360c:	2b00      	cmp	r3, #0
    360e:	d002      	beq.n	3616 <atcab_idle+0x12>
    }

    return atidle(_gDevice->mIface);
    3610:	6858      	ldr	r0, [r3, #4]
    3612:	4b02      	ldr	r3, [pc, #8]	; (361c <atcab_idle+0x18>)
    3614:	4798      	blx	r3
}
    3616:	bd10      	pop	{r4, pc}
    3618:	200005d0 	.word	0x200005d0
    361c:	00006019 	.word	0x00006019

00003620 <atcab_sleep>:

/** \brief invoke sleep on the CryptoAuth device
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sleep(void)
{
    3620:	b510      	push	{r4, lr}
    if (_gDevice == NULL)
    3622:	4b04      	ldr	r3, [pc, #16]	; (3634 <atcab_sleep+0x14>)
    3624:	681b      	ldr	r3, [r3, #0]
    {
        return ATCA_GEN_FAIL;
    3626:	20e1      	movs	r0, #225	; 0xe1
    if (_gDevice == NULL)
    3628:	2b00      	cmp	r3, #0
    362a:	d002      	beq.n	3632 <atcab_sleep+0x12>
    }

    return atsleep(_gDevice->mIface);
    362c:	6858      	ldr	r0, [r3, #4]
    362e:	4b02      	ldr	r3, [pc, #8]	; (3638 <atcab_sleep+0x18>)
    3630:	4798      	blx	r3
}
    3632:	bd10      	pop	{r4, pc}
    3634:	200005d0 	.word	0x200005d0
    3638:	00006031 	.word	0x00006031

0000363c <_atcab_exit>:

/** \brief common cleanup code which idles the device after any operation
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS _atcab_exit(void)
{
    363c:	b510      	push	{r4, lr}
    return atcab_idle();
    363e:	4b01      	ldr	r3, [pc, #4]	; (3644 <_atcab_exit+0x8>)
    3640:	4798      	blx	r3
}
    3642:	bd10      	pop	{r4, pc}
    3644:	00003605 	.word	0x00003605

00003648 <atcab_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
    3648:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;

    if (addr == NULL)
    364a:	9c02      	ldr	r4, [sp, #8]
    364c:	2c00      	cmp	r4, #0
    364e:	d008      	beq.n	3662 <atcab_get_addr+0x1a>
    uint8_t mem_zone = zone & 0x03;
    3650:	2403      	movs	r4, #3
    3652:	4020      	ands	r0, r4
    {
        return ATCA_BAD_PARAM;
    }
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
    3654:	d007      	beq.n	3666 <atcab_get_addr+0x1e>
    3656:	2802      	cmp	r0, #2
    3658:	d00d      	beq.n	3676 <atcab_get_addr+0x2e>
    365a:	2801      	cmp	r0, #1
    365c:	d003      	beq.n	3666 <atcab_get_addr+0x1e>
    {
        return ATCA_BAD_PARAM;
    365e:	20e2      	movs	r0, #226	; 0xe2
    3660:	e012      	b.n	3688 <atcab_get_addr+0x40>
        return ATCA_BAD_PARAM;
    3662:	20e2      	movs	r0, #226	; 0xe2
    3664:	e010      	b.n	3688 <atcab_get_addr+0x40>
        *addr = 0;
        // Mask the offset
        offset = offset & (uint8_t)0x07;
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
        {
            *addr = block << 3;
    3666:	00d2      	lsls	r2, r2, #3
            *addr |= offset;
    3668:	2007      	movs	r0, #7
    366a:	4003      	ands	r3, r0
    366c:	431a      	orrs	r2, r3
    366e:	9b02      	ldr	r3, [sp, #8]
    3670:	801a      	strh	r2, [r3, #0]
            *addr |= block << 8;
        }
    }
    while (0);

    return status;
    3672:	2000      	movs	r0, #0
    3674:	e008      	b.n	3688 <atcab_get_addr+0x40>
            *addr = slot << 3;
    3676:	00c9      	lsls	r1, r1, #3
            *addr  |= offset;
    3678:	2007      	movs	r0, #7
    367a:	4003      	ands	r3, r0
    367c:	430b      	orrs	r3, r1
            *addr |= block << 8;
    367e:	0212      	lsls	r2, r2, #8
    3680:	431a      	orrs	r2, r3
    3682:	9b02      	ldr	r3, [sp, #8]
    3684:	801a      	strh	r2, [r3, #0]
    return status;
    3686:	2000      	movs	r0, #0
}
    3688:	bd10      	pop	{r4, pc}
	...

0000368c <atcab_get_zone_size>:
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
    ATCA_STATUS status = ATCA_SUCCESS;

    if (size == NULL)
    368c:	2a00      	cmp	r2, #0
    368e:	d03e      	beq.n	370e <atcab_get_zone_size+0x82>
    {
        return ATCA_BAD_PARAM;
    }

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
    3690:	4b20      	ldr	r3, [pc, #128]	; (3714 <atcab_get_zone_size+0x88>)
    3692:	681b      	ldr	r3, [r3, #0]
    3694:	685b      	ldr	r3, [r3, #4]
    3696:	685b      	ldr	r3, [r3, #4]
    3698:	785b      	ldrb	r3, [r3, #1]
    369a:	2b00      	cmp	r3, #0
    369c:	d113      	bne.n	36c6 <atcab_get_zone_size+0x3a>
    {
        switch (zone)
    369e:	2801      	cmp	r0, #1
    36a0:	d009      	beq.n	36b6 <atcab_get_zone_size+0x2a>
    36a2:	2800      	cmp	r0, #0
    36a4:	d003      	beq.n	36ae <atcab_get_zone_size+0x22>
    36a6:	2802      	cmp	r0, #2
    36a8:	d009      	beq.n	36be <atcab_get_zone_size+0x32>
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
        case ATCA_ZONE_OTP:    *size = 64; break;
        case ATCA_ZONE_DATA:   *size = 32; break;
        default: status = ATCA_BAD_PARAM; break;
    36aa:	20e2      	movs	r0, #226	; 0xe2
    36ac:	e030      	b.n	3710 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_CONFIG: *size = 88; break;
    36ae:	2358      	movs	r3, #88	; 0x58
    36b0:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    36b2:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 88; break;
    36b4:	e02c      	b.n	3710 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_OTP:    *size = 64; break;
    36b6:	2340      	movs	r3, #64	; 0x40
    36b8:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    36ba:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
    36bc:	e028      	b.n	3710 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_DATA:   *size = 32; break;
    36be:	2320      	movs	r3, #32
    36c0:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    36c2:	2000      	movs	r0, #0
        case ATCA_ZONE_DATA:   *size = 32; break;
    36c4:	e024      	b.n	3710 <atcab_get_zone_size+0x84>
        }
    }
    else
    {
        switch (zone)
    36c6:	2801      	cmp	r0, #1
    36c8:	d009      	beq.n	36de <atcab_get_zone_size+0x52>
    36ca:	2800      	cmp	r0, #0
    36cc:	d003      	beq.n	36d6 <atcab_get_zone_size+0x4a>
    36ce:	2802      	cmp	r0, #2
    36d0:	d009      	beq.n	36e6 <atcab_get_zone_size+0x5a>
            else
            {
                status = ATCA_BAD_PARAM;
            }
            break;
        default: status = ATCA_BAD_PARAM; break;
    36d2:	20e2      	movs	r0, #226	; 0xe2
    36d4:	e01c      	b.n	3710 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_CONFIG: *size = 128; break;
    36d6:	2380      	movs	r3, #128	; 0x80
    36d8:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    36da:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 128; break;
    36dc:	e018      	b.n	3710 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_OTP:    *size = 64; break;
    36de:	2340      	movs	r3, #64	; 0x40
    36e0:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    36e2:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
    36e4:	e014      	b.n	3710 <atcab_get_zone_size+0x84>
            if (slot < 8)
    36e6:	2907      	cmp	r1, #7
    36e8:	d908      	bls.n	36fc <atcab_get_zone_size+0x70>
            else if (slot == 8)
    36ea:	2908      	cmp	r1, #8
    36ec:	d00a      	beq.n	3704 <atcab_get_zone_size+0x78>
                status = ATCA_BAD_PARAM;
    36ee:	20e2      	movs	r0, #226	; 0xe2
            else if (slot < 16)
    36f0:	290f      	cmp	r1, #15
    36f2:	d80d      	bhi.n	3710 <atcab_get_zone_size+0x84>
                *size = 72;
    36f4:	2348      	movs	r3, #72	; 0x48
    36f6:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    36f8:	2000      	movs	r0, #0
    36fa:	e009      	b.n	3710 <atcab_get_zone_size+0x84>
                *size = 36;
    36fc:	2324      	movs	r3, #36	; 0x24
    36fe:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    3700:	2000      	movs	r0, #0
    3702:	e005      	b.n	3710 <atcab_get_zone_size+0x84>
                *size = 416;
    3704:	23d0      	movs	r3, #208	; 0xd0
    3706:	005b      	lsls	r3, r3, #1
    3708:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    370a:	2000      	movs	r0, #0
    370c:	e000      	b.n	3710 <atcab_get_zone_size+0x84>
        return ATCA_BAD_PARAM;
    370e:	20e2      	movs	r0, #226	; 0xe2
        }
    }

    return status;
}
    3710:	4770      	bx	lr
    3712:	46c0      	nop			; (mov r8, r8)
    3714:	200005d0 	.word	0x200005d0

00003718 <atcab_execute_command>:
 *
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_execute_command(ATCAPacket* packet)
{
    3718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    371a:	0006      	movs	r6, r0
    ATCA_STATUS status;
    ATCACommand ca_cmd = _gDevice->mCommands;
    371c:	4b1c      	ldr	r3, [pc, #112]	; (3790 <atcab_execute_command+0x78>)
    371e:	681b      	ldr	r3, [r3, #0]
    3720:	681d      	ldr	r5, [r3, #0]
    ATCAIface ca_iface = _gDevice->mIface;
    3722:	685f      	ldr	r7, [r3, #4]

    if ((status = atGetExecTime(packet->opcode, ca_cmd)) != ATCA_SUCCESS)
    3724:	7880      	ldrb	r0, [r0, #2]
    3726:	0029      	movs	r1, r5
    3728:	4b1a      	ldr	r3, [pc, #104]	; (3794 <atcab_execute_command+0x7c>)
    372a:	4798      	blx	r3
    372c:	1e04      	subs	r4, r0, #0
    372e:	d001      	beq.n	3734 <atcab_execute_command+0x1c>
    }
    while (0);

    _atcab_exit();
    return status;
    3730:	0020      	movs	r0, r4
    3732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((status = atcab_wakeup()) != ATCA_SUCCESS)
    3734:	4b18      	ldr	r3, [pc, #96]	; (3798 <atcab_execute_command+0x80>)
    3736:	4798      	blx	r3
    3738:	1e04      	subs	r4, r0, #0
    373a:	d002      	beq.n	3742 <atcab_execute_command+0x2a>
    _atcab_exit();
    373c:	4b17      	ldr	r3, [pc, #92]	; (379c <atcab_execute_command+0x84>)
    373e:	4798      	blx	r3
    return status;
    3740:	e7f6      	b.n	3730 <atcab_execute_command+0x18>
        if ((status = atsend(ca_iface, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
    3742:	7872      	ldrb	r2, [r6, #1]
    3744:	0031      	movs	r1, r6
    3746:	0038      	movs	r0, r7
    3748:	4b15      	ldr	r3, [pc, #84]	; (37a0 <atcab_execute_command+0x88>)
    374a:	4798      	blx	r3
    374c:	1e04      	subs	r4, r0, #0
    374e:	d1f5      	bne.n	373c <atcab_execute_command+0x24>
        atca_delay_ms(ca_cmd->execution_time_msec);
    3750:	8868      	ldrh	r0, [r5, #2]
    3752:	4b14      	ldr	r3, [pc, #80]	; (37a4 <atcab_execute_command+0x8c>)
    3754:	4798      	blx	r3
        if ((status = atreceive(ca_iface, packet->data, &(packet->rxsize))) != ATCA_SUCCESS)
    3756:	1db5      	adds	r5, r6, #6
    3758:	0032      	movs	r2, r6
    375a:	328a      	adds	r2, #138	; 0x8a
    375c:	0029      	movs	r1, r5
    375e:	0038      	movs	r0, r7
    3760:	4b11      	ldr	r3, [pc, #68]	; (37a8 <atcab_execute_command+0x90>)
    3762:	4798      	blx	r3
    3764:	1e04      	subs	r4, r0, #0
    3766:	d1e9      	bne.n	373c <atcab_execute_command+0x24>
        if (packet->rxsize < 4)
    3768:	238a      	movs	r3, #138	; 0x8a
    376a:	5af4      	ldrh	r4, [r6, r3]
    376c:	2c03      	cmp	r4, #3
    376e:	d804      	bhi.n	377a <atcab_execute_command+0x62>
                status = ATCA_RX_NO_RESPONSE;
    3770:	4260      	negs	r0, r4
    3772:	4160      	adcs	r0, r4
    3774:	30e6      	adds	r0, #230	; 0xe6
    3776:	0004      	movs	r4, r0
    3778:	e7e0      	b.n	373c <atcab_execute_command+0x24>
        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
    377a:	0028      	movs	r0, r5
    377c:	4b0b      	ldr	r3, [pc, #44]	; (37ac <atcab_execute_command+0x94>)
    377e:	4798      	blx	r3
    3780:	1e04      	subs	r4, r0, #0
    3782:	d1db      	bne.n	373c <atcab_execute_command+0x24>
        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
    3784:	0028      	movs	r0, r5
    3786:	4b0a      	ldr	r3, [pc, #40]	; (37b0 <atcab_execute_command+0x98>)
    3788:	4798      	blx	r3
    378a:	0004      	movs	r4, r0
    378c:	e7d6      	b.n	373c <atcab_execute_command+0x24>
    378e:	46c0      	nop			; (mov r8, r8)
    3790:	200005d0 	.word	0x200005d0
    3794:	00005ca5 	.word	0x00005ca5
    3798:	000035e9 	.word	0x000035e9
    379c:	0000363d 	.word	0x0000363d
    37a0:	00006001 	.word	0x00006001
    37a4:	00006e95 	.word	0x00006e95
    37a8:	00006009 	.word	0x00006009
    37ac:	00005ed1 	.word	0x00005ed1
    37b0:	00005f0d 	.word	0x00005f0d

000037b4 <base64Char>:
 * \param[in] rules  base64 ruleset to use
 * \return the base 64 character of the given index
 */
char base64Char(char id, const uint8_t * rules)
{
    if (id >= 0 && (id < 26))
    37b4:	2819      	cmp	r0, #25
    37b6:	d910      	bls.n	37da <base64Char+0x26>
    {
        return (char)('A' + id);
    }
    if ((id >= 26) && (id < 52))
    37b8:	0003      	movs	r3, r0
    37ba:	3b1a      	subs	r3, #26
    37bc:	2b19      	cmp	r3, #25
    37be:	d910      	bls.n	37e2 <base64Char+0x2e>
    {
        return (char)('a' + id - 26);
    }
    if ((id >= 52) && (id < 62))
    37c0:	0003      	movs	r3, r0
    37c2:	3b34      	subs	r3, #52	; 0x34
    37c4:	2b09      	cmp	r3, #9
    37c6:	d90f      	bls.n	37e8 <base64Char+0x34>
    {
        return (char)('0' + id - 52);
    }
    if (id == 62)
    37c8:	283e      	cmp	r0, #62	; 0x3e
    37ca:	d010      	beq.n	37ee <base64Char+0x3a>
    {
        return rules[0];
    }
    if (id == 63)
    37cc:	283f      	cmp	r0, #63	; 0x3f
    37ce:	d010      	beq.n	37f2 <base64Char+0x3e>

    if (id == IS_EQUAL)
    {
        return rules[2];
    }
    return IS_INVALID;
    37d0:	23ff      	movs	r3, #255	; 0xff
    if (id == IS_EQUAL)
    37d2:	2840      	cmp	r0, #64	; 0x40
    37d4:	d103      	bne.n	37de <base64Char+0x2a>
        return rules[2];
    37d6:	788b      	ldrb	r3, [r1, #2]
    37d8:	e001      	b.n	37de <base64Char+0x2a>
        return (char)('A' + id);
    37da:	3041      	adds	r0, #65	; 0x41
    37dc:	b2c3      	uxtb	r3, r0
}
    37de:	0018      	movs	r0, r3
    37e0:	4770      	bx	lr
        return (char)('a' + id - 26);
    37e2:	3047      	adds	r0, #71	; 0x47
    37e4:	b2c3      	uxtb	r3, r0
    37e6:	e7fa      	b.n	37de <base64Char+0x2a>
        return (char)('0' + id - 52);
    37e8:	3804      	subs	r0, #4
    37ea:	b2c3      	uxtb	r3, r0
    37ec:	e7f7      	b.n	37de <base64Char+0x2a>
        return rules[0];
    37ee:	780b      	ldrb	r3, [r1, #0]
    37f0:	e7f5      	b.n	37de <base64Char+0x2a>
        return rules[1];
    37f2:	784b      	ldrb	r3, [r1, #1]
    37f4:	e7f3      	b.n	37de <base64Char+0x2a>
	...

000037f8 <atcab_base64encode_>:
    size_t          array_len,   /**< [in] The length of the byte array */
    char*           encoded,     /**< [in] The output converted to base 64 encoded characters. */
    size_t*         encoded_len, /**< [inout] Input: The size of the encoded buffer, Output: The length of the encoded base 64 character string */
    const uint8_t * rules        /**< [in] ruleset to use during encoding */
    )
{
    37f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    37fa:	46de      	mov	lr, fp
    37fc:	4657      	mov	r7, sl
    37fe:	464e      	mov	r6, r9
    3800:	4645      	mov	r5, r8
    3802:	b5e0      	push	{r5, r6, r7, lr}
    3804:	b085      	sub	sp, #20
    3806:	0005      	movs	r5, r0
    3808:	468a      	mov	sl, r1
    380a:	1e16      	subs	r6, r2, #0
    380c:	9302      	str	r3, [sp, #8]
    size_t b64_len = ((array_len * 4) / 3) + r3;

    do
    {
        // Check the input parameters
        if (encoded == NULL || byte_array == NULL || encoded_len == NULL || !rules)
    380e:	d02d      	beq.n	386c <atcab_base64encode_+0x74>
    3810:	2800      	cmp	r0, #0
    3812:	d02b      	beq.n	386c <atcab_base64encode_+0x74>
    3814:	2b00      	cmp	r3, #0
    3816:	d029      	beq.n	386c <atcab_base64encode_+0x74>
    3818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    381a:	2b00      	cmp	r3, #0
    381c:	d026      	beq.n	386c <atcab_base64encode_+0x74>
    size_t b64_len = ((array_len * 4) / 3) + r3;
    381e:	0088      	lsls	r0, r1, #2
    3820:	2103      	movs	r1, #3
    3822:	4b69      	ldr	r3, [pc, #420]	; (39c8 <atcab_base64encode_+0x1d0>)
    3824:	4798      	blx	r3
    3826:	0004      	movs	r4, r0
    size_t r3 = (array_len % 3);
    3828:	2103      	movs	r1, #3
    382a:	4650      	mov	r0, sl
    382c:	4b67      	ldr	r3, [pc, #412]	; (39cc <atcab_base64encode_+0x1d4>)
    382e:	4798      	blx	r3
    size_t b64_len = ((array_len * 4) / 3) + r3;
    3830:	1864      	adds	r4, r4, r1
            BREAK(status, "Null input parameter");
        }

        // Set the output length.  Add the \r\n every n characters
        out_len = b64_len;
        if (rules[3])
    3832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3834:	78d9      	ldrb	r1, [r3, #3]
    3836:	2900      	cmp	r1, #0
    3838:	d004      	beq.n	3844 <atcab_base64encode_+0x4c>
        {
            out_len += (b64_len / rules[3]) * 2;
    383a:	0020      	movs	r0, r4
    383c:	4b62      	ldr	r3, [pc, #392]	; (39c8 <atcab_base64encode_+0x1d0>)
    383e:	4798      	blx	r3
    3840:	0040      	lsls	r0, r0, #1
    3842:	1824      	adds	r4, r4, r0
        }

        if (*encoded_len < out_len)
    3844:	9b02      	ldr	r3, [sp, #8]
    3846:	681b      	ldr	r3, [r3, #0]
    3848:	9301      	str	r3, [sp, #4]
    384a:	429c      	cmp	r4, r3
    384c:	d81a      	bhi.n	3884 <atcab_base64encode_+0x8c>
        {
            status = ATCA_BAD_PARAM;
            BREAK(status, "Length of encoded buffer too small");
        }
        // Initialize the return length to 0
        *encoded_len = 0;
    384e:	2300      	movs	r3, #0
    3850:	9a02      	ldr	r2, [sp, #8]
    3852:	6013      	str	r3, [r2, #0]

        // Loop through the byte array by 3 then map to 4 base 64 encoded characters
        for (i = 0; i < array_len; i += 3)
    3854:	4653      	mov	r3, sl
    3856:	2b00      	cmp	r3, #0
    3858:	d100      	bne.n	385c <atcab_base64encode_+0x64>
    385a:	e0a0      	b.n	399e <atcab_base64encode_+0x1a6>
    385c:	2300      	movs	r3, #0
    385e:	9303      	str	r3, [sp, #12]
    3860:	2400      	movs	r4, #0
    3862:	4698      	mov	r8, r3
                encoded[j++] = base64Char(id, rules);
                encoded[j++] = base64Char(IS_EQUAL, rules);
                encoded[j++] = base64Char(IS_EQUAL, rules);
            }
            // Add \r\n every n bytes if specified
            if (rules[3] && ((j - offset) % rules[3] == 0) && encoded[j - 1])
    3864:	0033      	movs	r3, r6
    3866:	4646      	mov	r6, r8
    3868:	4698      	mov	r8, r3
    386a:	e03f      	b.n	38ec <atcab_base64encode_+0xf4>
            BREAK(status, "Null input parameter");
    386c:	21e2      	movs	r1, #226	; 0xe2
    386e:	4858      	ldr	r0, [pc, #352]	; (39d0 <atcab_base64encode_+0x1d8>)
    3870:	4b58      	ldr	r3, [pc, #352]	; (39d4 <atcab_base64encode_+0x1dc>)
    3872:	4798      	blx	r3
            status = ATCA_BAD_PARAM;
    3874:	20e2      	movs	r0, #226	; 0xe2
        // Set the final encoded length
        *encoded_len = j;
    }
    while (false);
    return status;
}
    3876:	b005      	add	sp, #20
    3878:	bc3c      	pop	{r2, r3, r4, r5}
    387a:	4690      	mov	r8, r2
    387c:	4699      	mov	r9, r3
    387e:	46a2      	mov	sl, r4
    3880:	46ab      	mov	fp, r5
    3882:	bdf0      	pop	{r4, r5, r6, r7, pc}
            BREAK(status, "Length of encoded buffer too small");
    3884:	21e2      	movs	r1, #226	; 0xe2
    3886:	4854      	ldr	r0, [pc, #336]	; (39d8 <atcab_base64encode_+0x1e0>)
    3888:	4b52      	ldr	r3, [pc, #328]	; (39d4 <atcab_base64encode_+0x1dc>)
    388a:	4798      	blx	r3
            status = ATCA_BAD_PARAM;
    388c:	20e2      	movs	r0, #226	; 0xe2
            BREAK(status, "Length of encoded buffer too small");
    388e:	e7f2      	b.n	3876 <atcab_base64encode_+0x7e>
                    encoded[j++] = base64Char(id, rules);
    3890:	1ce7      	adds	r7, r4, #3
    3892:	44c1      	add	r9, r8
    3894:	46cb      	mov	fp, r9
    3896:	b2c0      	uxtb	r0, r0
    3898:	990e      	ldr	r1, [sp, #56]	; 0x38
    389a:	4b50      	ldr	r3, [pc, #320]	; (39dc <atcab_base64encode_+0x1e4>)
    389c:	4699      	mov	r9, r3
    389e:	4798      	blx	r3
    38a0:	465b      	mov	r3, fp
    38a2:	7018      	strb	r0, [r3, #0]
                    encoded[j++] = base64Char(IS_EQUAL, rules);
    38a4:	4447      	add	r7, r8
    38a6:	3404      	adds	r4, #4
    38a8:	990e      	ldr	r1, [sp, #56]	; 0x38
    38aa:	2040      	movs	r0, #64	; 0x40
    38ac:	47c8      	blx	r9
    38ae:	7038      	strb	r0, [r7, #0]
    38b0:	e055      	b.n	395e <atcab_base64encode_+0x166>
                encoded[j++] = base64Char(id, rules);
    38b2:	465f      	mov	r7, fp
    38b4:	4447      	add	r7, r8
    38b6:	b2c0      	uxtb	r0, r0
    38b8:	990e      	ldr	r1, [sp, #56]	; 0x38
    38ba:	4b48      	ldr	r3, [pc, #288]	; (39dc <atcab_base64encode_+0x1e4>)
    38bc:	4798      	blx	r3
    38be:	7038      	strb	r0, [r7, #0]
                encoded[j++] = base64Char(IS_EQUAL, rules);
    38c0:	1ce7      	adds	r7, r4, #3
                encoded[j++] = base64Char(id, rules);
    38c2:	1ca3      	adds	r3, r4, #2
                encoded[j++] = base64Char(IS_EQUAL, rules);
    38c4:	4443      	add	r3, r8
    38c6:	4699      	mov	r9, r3
    38c8:	990e      	ldr	r1, [sp, #56]	; 0x38
    38ca:	2040      	movs	r0, #64	; 0x40
    38cc:	4b43      	ldr	r3, [pc, #268]	; (39dc <atcab_base64encode_+0x1e4>)
    38ce:	4798      	blx	r3
    38d0:	464b      	mov	r3, r9
    38d2:	7018      	strb	r0, [r3, #0]
                encoded[j++] = base64Char(IS_EQUAL, rules);
    38d4:	4447      	add	r7, r8
    38d6:	3404      	adds	r4, #4
    38d8:	990e      	ldr	r1, [sp, #56]	; 0x38
    38da:	2040      	movs	r0, #64	; 0x40
    38dc:	4b3f      	ldr	r3, [pc, #252]	; (39dc <atcab_base64encode_+0x1e4>)
    38de:	4798      	blx	r3
    38e0:	7038      	strb	r0, [r7, #0]
    38e2:	e03c      	b.n	395e <atcab_base64encode_+0x166>
        for (i = 0; i < array_len; i += 3)
    38e4:	3603      	adds	r6, #3
    38e6:	3503      	adds	r5, #3
    38e8:	45b2      	cmp	sl, r6
    38ea:	d953      	bls.n	3994 <atcab_base64encode_+0x19c>
    38ec:	9501      	str	r5, [sp, #4]
            encoded[j++] = base64Char(id, rules);
    38ee:	1c62      	adds	r2, r4, #1
    38f0:	4693      	mov	fp, r2
    38f2:	4642      	mov	r2, r8
    38f4:	1917      	adds	r7, r2, r4
            id = (byte_array[i] & 0xFC) >> 2;
    38f6:	7828      	ldrb	r0, [r5, #0]
            encoded[j++] = base64Char(id, rules);
    38f8:	0880      	lsrs	r0, r0, #2
    38fa:	990e      	ldr	r1, [sp, #56]	; 0x38
    38fc:	4a37      	ldr	r2, [pc, #220]	; (39dc <atcab_base64encode_+0x1e4>)
    38fe:	4790      	blx	r2
    3900:	7038      	strb	r0, [r7, #0]
            id = (byte_array[i] & 0x03) << 4;
    3902:	7828      	ldrb	r0, [r5, #0]
    3904:	0100      	lsls	r0, r0, #4
    3906:	2230      	movs	r2, #48	; 0x30
    3908:	4010      	ands	r0, r2
            if (i + 1 < array_len)
    390a:	1c73      	adds	r3, r6, #1
    390c:	459a      	cmp	sl, r3
    390e:	d9d0      	bls.n	38b2 <atcab_base64encode_+0xba>
                encoded[j++] = base64Char(id, rules);
    3910:	1ca2      	adds	r2, r4, #2
    3912:	4691      	mov	r9, r2
    3914:	465f      	mov	r7, fp
    3916:	4447      	add	r7, r8
                id |= (byte_array[i + 1] & 0xF0) >> 4;
    3918:	786b      	ldrb	r3, [r5, #1]
    391a:	091b      	lsrs	r3, r3, #4
                encoded[j++] = base64Char(id, rules);
    391c:	4318      	orrs	r0, r3
    391e:	990e      	ldr	r1, [sp, #56]	; 0x38
    3920:	4a2e      	ldr	r2, [pc, #184]	; (39dc <atcab_base64encode_+0x1e4>)
    3922:	4790      	blx	r2
    3924:	7038      	strb	r0, [r7, #0]
                id = (byte_array[i + 1] & 0x0F) << 2;
    3926:	7868      	ldrb	r0, [r5, #1]
    3928:	0080      	lsls	r0, r0, #2
    392a:	223c      	movs	r2, #60	; 0x3c
    392c:	4010      	ands	r0, r2
                if (i + 2 < array_len)
    392e:	1cb3      	adds	r3, r6, #2
    3930:	459a      	cmp	sl, r3
    3932:	d9ad      	bls.n	3890 <atcab_base64encode_+0x98>
                    encoded[j++] = base64Char(id, rules);
    3934:	1ce7      	adds	r7, r4, #3
    3936:	44c1      	add	r9, r8
                    id |= (byte_array[i + 2] & 0xC0) >> 6;
    3938:	9b01      	ldr	r3, [sp, #4]
    393a:	789b      	ldrb	r3, [r3, #2]
    393c:	099b      	lsrs	r3, r3, #6
                    encoded[j++] = base64Char(id, rules);
    393e:	4318      	orrs	r0, r3
    3940:	990e      	ldr	r1, [sp, #56]	; 0x38
    3942:	4a26      	ldr	r2, [pc, #152]	; (39dc <atcab_base64encode_+0x1e4>)
    3944:	4790      	blx	r2
    3946:	464a      	mov	r2, r9
    3948:	7010      	strb	r0, [r2, #0]
                    encoded[j++] = base64Char(id, rules);
    394a:	4447      	add	r7, r8
    394c:	3404      	adds	r4, #4
    394e:	9b01      	ldr	r3, [sp, #4]
    3950:	789b      	ldrb	r3, [r3, #2]
    3952:	203f      	movs	r0, #63	; 0x3f
    3954:	4018      	ands	r0, r3
    3956:	990e      	ldr	r1, [sp, #56]	; 0x38
    3958:	4b20      	ldr	r3, [pc, #128]	; (39dc <atcab_base64encode_+0x1e4>)
    395a:	4798      	blx	r3
    395c:	7038      	strb	r0, [r7, #0]
            if (rules[3] && ((j - offset) % rules[3] == 0) && encoded[j - 1])
    395e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3960:	78d9      	ldrb	r1, [r3, #3]
    3962:	2900      	cmp	r1, #0
    3964:	d0be      	beq.n	38e4 <atcab_base64encode_+0xec>
    3966:	9f03      	ldr	r7, [sp, #12]
    3968:	1be0      	subs	r0, r4, r7
    396a:	4b18      	ldr	r3, [pc, #96]	; (39cc <atcab_base64encode_+0x1d4>)
    396c:	4798      	blx	r3
    396e:	2900      	cmp	r1, #0
    3970:	d1b8      	bne.n	38e4 <atcab_base64encode_+0xec>
    3972:	4643      	mov	r3, r8
    3974:	191b      	adds	r3, r3, r4
    3976:	3b01      	subs	r3, #1
    3978:	781b      	ldrb	r3, [r3, #0]
    397a:	2b00      	cmp	r3, #0
    397c:	d0b2      	beq.n	38e4 <atcab_base64encode_+0xec>
                encoded[j++] = '\r';
    397e:	1c63      	adds	r3, r4, #1
    3980:	220d      	movs	r2, #13
    3982:	4641      	mov	r1, r8
    3984:	550a      	strb	r2, [r1, r4]
                encoded[j++] = '\n';
    3986:	3a03      	subs	r2, #3
    3988:	54ca      	strb	r2, [r1, r3]
    398a:	3402      	adds	r4, #2
                offset += 2;
    398c:	003b      	movs	r3, r7
    398e:	3302      	adds	r3, #2
    3990:	9303      	str	r3, [sp, #12]
    3992:	e7a7      	b.n	38e4 <atcab_base64encode_+0xec>
    3994:	4646      	mov	r6, r8
        for (j -= 1; j; j--)
    3996:	3c01      	subs	r4, #1
            if (encoded[j])
    3998:	4911      	ldr	r1, [pc, #68]	; (39e0 <atcab_base64encode_+0x1e8>)
    399a:	2201      	movs	r2, #1
    399c:	e009      	b.n	39b2 <atcab_base64encode_+0x1ba>
        for (j -= 1; j; j--)
    399e:	2401      	movs	r4, #1
    39a0:	4264      	negs	r4, r4
    39a2:	e7f9      	b.n	3998 <atcab_base64encode_+0x1a0>
            if (encoded[j])
    39a4:	0008      	movs	r0, r1
    39a6:	40d8      	lsrs	r0, r3
    39a8:	4202      	tst	r2, r0
    39aa:	d005      	beq.n	39b8 <atcab_base64encode_+0x1c0>
        for (j -= 1; j; j--)
    39ac:	3c01      	subs	r4, #1
    39ae:	2c00      	cmp	r4, #0
    39b0:	d002      	beq.n	39b8 <atcab_base64encode_+0x1c0>
            if (encoded[j])
    39b2:	5d33      	ldrb	r3, [r6, r4]
    39b4:	2b0d      	cmp	r3, #13
    39b6:	d9f5      	bls.n	39a4 <atcab_base64encode_+0x1ac>
        encoded[++j] = 0;
    39b8:	3401      	adds	r4, #1
    39ba:	2300      	movs	r3, #0
    39bc:	5533      	strb	r3, [r6, r4]
        *encoded_len = j;
    39be:	9b02      	ldr	r3, [sp, #8]
    39c0:	601c      	str	r4, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    39c2:	2000      	movs	r0, #0
    39c4:	e757      	b.n	3876 <atcab_base64encode_+0x7e>
    39c6:	46c0      	nop			; (mov r8, r8)
    39c8:	0000e565 	.word	0x0000e565
    39cc:	0000e671 	.word	0x0000e671
    39d0:	00014110 	.word	0x00014110
    39d4:	00010b61 	.word	0x00010b61
    39d8:	000140d8 	.word	0x000140d8
    39dc:	000037b5 	.word	0x000037b5
    39e0:	00002401 	.word	0x00002401

000039e4 <atcab_base64encode>:
 *                            character string.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_base64encode(const uint8_t* byte_array, size_t array_len, char* encoded, size_t* encoded_len)
{
    39e4:	b510      	push	{r4, lr}
    39e6:	b082      	sub	sp, #8
    return atcab_base64encode_(byte_array, array_len, encoded, encoded_len, atcab_b64rules_default);
    39e8:	4c02      	ldr	r4, [pc, #8]	; (39f4 <atcab_base64encode+0x10>)
    39ea:	9400      	str	r4, [sp, #0]
    39ec:	4c02      	ldr	r4, [pc, #8]	; (39f8 <atcab_base64encode+0x14>)
    39ee:	47a0      	blx	r4
}
    39f0:	b002      	add	sp, #8
    39f2:	bd10      	pop	{r4, pc}
    39f4:	20000110 	.word	0x20000110
    39f8:	000037f9 	.word	0x000037f9

000039fc <update_settings_from_json>:
    return target;
}

#ifdef CONFIG_USE_JSON_LIB
bool update_settings_from_json(JSON_Array * json_map)
{
    39fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    39fe:	46de      	mov	lr, fp
    3a00:	4657      	mov	r7, sl
    3a02:	464e      	mov	r6, r9
    3a04:	4645      	mov	r5, r8
    3a06:	b5e0      	push	{r5, r6, r7, lr}
    3a08:	b083      	sub	sp, #12
    3a0a:	9000      	str	r0, [sp, #0]
    JSON_Array * json_array_element = NULL;
    uint8_t i;

    for(i=0; i< json_array_get_count(json_map); i++)
    3a0c:	2400      	movs	r4, #0
    3a0e:	4b1b      	ldr	r3, [pc, #108]	; (3a7c <update_settings_from_json+0x80>)
    3a10:	469b      	mov	fp, r3
    {
        json_array_element = json_array_get_array(json_map,i);
    3a12:	4b1b      	ldr	r3, [pc, #108]	; (3a80 <update_settings_from_json+0x84>)
    3a14:	4699      	mov	r9, r3
        g_temp_speed_map[i*2] = json_array_get_number(json_array_element, 0);
    3a16:	4f1b      	ldr	r7, [pc, #108]	; (3a84 <update_settings_from_json+0x88>)
    for(i=0; i< json_array_get_count(json_map); i++)
    3a18:	e017      	b.n	3a4a <update_settings_from_json+0x4e>
        json_array_element = json_array_get_array(json_map,i);
    3a1a:	0021      	movs	r1, r4
    3a1c:	9800      	ldr	r0, [sp, #0]
    3a1e:	47c8      	blx	r9
        g_temp_speed_map[i*2] = json_array_get_number(json_array_element, 0);
    3a20:	0065      	lsls	r5, r4, #1
    3a22:	2100      	movs	r1, #0
    3a24:	9001      	str	r0, [sp, #4]
    3a26:	47b8      	blx	r7
    3a28:	4e17      	ldr	r6, [pc, #92]	; (3a88 <update_settings_from_json+0x8c>)
    3a2a:	00a3      	lsls	r3, r4, #2
    3a2c:	469a      	mov	sl, r3
    3a2e:	4b17      	ldr	r3, [pc, #92]	; (3a8c <update_settings_from_json+0x90>)
    3a30:	4698      	mov	r8, r3
    3a32:	4798      	blx	r3
    3a34:	4653      	mov	r3, sl
    3a36:	5398      	strh	r0, [r3, r6]
        g_temp_speed_map[i*2+1] = json_array_get_number(json_array_element, 1);
    3a38:	2101      	movs	r1, #1
    3a3a:	9801      	ldr	r0, [sp, #4]
    3a3c:	47b8      	blx	r7
    3a3e:	3501      	adds	r5, #1
    3a40:	006d      	lsls	r5, r5, #1
    3a42:	47c0      	blx	r8
    3a44:	53a8      	strh	r0, [r5, r6]
    for(i=0; i< json_array_get_count(json_map); i++)
    3a46:	3401      	adds	r4, #1
    3a48:	b2e4      	uxtb	r4, r4
    3a4a:	9800      	ldr	r0, [sp, #0]
    3a4c:	47d8      	blx	fp
    3a4e:	4284      	cmp	r4, r0
    3a50:	d3e3      	bcc.n	3a1a <update_settings_from_json+0x1e>
    }
    for(i=i*2;i < sizeof(g_temp_speed_map)/2; i+= 2)
    3a52:	0064      	lsls	r4, r4, #1
    3a54:	b2e4      	uxtb	r4, r4
    3a56:	2c0d      	cmp	r4, #13
    3a58:	d808      	bhi.n	3a6c <update_settings_from_json+0x70>
    {
        g_temp_speed_map[i] = UINT16_MAX;
    3a5a:	490b      	ldr	r1, [pc, #44]	; (3a88 <update_settings_from_json+0x8c>)
    3a5c:	2201      	movs	r2, #1
    3a5e:	4252      	negs	r2, r2
    3a60:	0063      	lsls	r3, r4, #1
    3a62:	525a      	strh	r2, [r3, r1]
    for(i=i*2;i < sizeof(g_temp_speed_map)/2; i+= 2)
    3a64:	3402      	adds	r4, #2
    3a66:	b2e4      	uxtb	r4, r4
    3a68:	2c0d      	cmp	r4, #13
    3a6a:	d9f9      	bls.n	3a60 <update_settings_from_json+0x64>
    }
}
    3a6c:	b003      	add	sp, #12
    3a6e:	bc3c      	pop	{r2, r3, r4, r5}
    3a70:	4690      	mov	r8, r2
    3a72:	4699      	mov	r9, r3
    3a74:	46a2      	mov	sl, r4
    3a76:	46ab      	mov	fp, r5
    3a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a7a:	46c0      	nop			; (mov r8, r8)
    3a7c:	00008b61 	.word	0x00008b61
    3a80:	00008bc5 	.word	0x00008bc5
    3a84:	00008c09 	.word	0x00008c09
    3a88:	20000118 	.word	0x20000118
    3a8c:	0000e99d 	.word	0x0000e99d

00003a90 <override_from_json>:

bool override_from_json(JSON_Object * json_override_object)
{
    3a90:	b570      	push	{r4, r5, r6, lr}
    3a92:	0005      	movs	r5, r0

    override_speed = json_object_get_number(json_override_object, "fan-speed");
    3a94:	4904      	ldr	r1, [pc, #16]	; (3aa8 <override_from_json+0x18>)
    3a96:	4c05      	ldr	r4, [pc, #20]	; (3aac <override_from_json+0x1c>)
    3a98:	47a0      	blx	r4
    override_end = time_utils_get_utc() + json_object_get_number(json_override_object, "duration");
    3a9a:	4b05      	ldr	r3, [pc, #20]	; (3ab0 <override_from_json+0x20>)
    3a9c:	4798      	blx	r3
    3a9e:	4905      	ldr	r1, [pc, #20]	; (3ab4 <override_from_json+0x24>)
    3aa0:	0028      	movs	r0, r5
    3aa2:	47a0      	blx	r4
}
    3aa4:	bd70      	pop	{r4, r5, r6, pc}
    3aa6:	46c0      	nop			; (mov r8, r8)
    3aa8:	0001413c 	.word	0x0001413c
    3aac:	00008bf5 	.word	0x00008bf5
    3ab0:	00003ba1 	.word	0x00003ba1
    3ab4:	00014148 	.word	0x00014148

00003ab8 <sensor_get_temperature>:
}

uint32_t sensor_get_temperature(void)
{
#ifdef CONFIG_SENSOR_SIMULATOR
	if (24000 > g_temp_buffer[0] || 30000 < g_temp_buffer[0])
    3ab8:	4b0a      	ldr	r3, [pc, #40]	; (3ae4 <sensor_get_temperature+0x2c>)
    3aba:	881a      	ldrh	r2, [r3, #0]
    3abc:	4b0a      	ldr	r3, [pc, #40]	; (3ae8 <sensor_get_temperature+0x30>)
    3abe:	18d3      	adds	r3, r2, r3
    3ac0:	490a      	ldr	r1, [pc, #40]	; (3aec <sensor_get_temperature+0x34>)
    3ac2:	b29b      	uxth	r3, r3
    3ac4:	428b      	cmp	r3, r1
    3ac6:	d808      	bhi.n	3ada <sensor_get_temperature+0x22>
	{
		g_temp_buffer[0] = 24000;
	}
	else
	{
		g_temp_buffer[0] += 1000;
    3ac8:	23fa      	movs	r3, #250	; 0xfa
    3aca:	009b      	lsls	r3, r3, #2
    3acc:	469c      	mov	ip, r3
    3ace:	4462      	add	r2, ip
    3ad0:	4b04      	ldr	r3, [pc, #16]	; (3ae4 <sensor_get_temperature+0x2c>)
    3ad2:	801a      	strh	r2, [r3, #0]
	}
	return g_temp_buffer[0];
    3ad4:	4b03      	ldr	r3, [pc, #12]	; (3ae4 <sensor_get_temperature+0x2c>)
    3ad6:	8818      	ldrh	r0, [r3, #0]
#else
	return th5_read_sensor(0);
#endif
}
    3ad8:	4770      	bx	lr
		g_temp_buffer[0] = 24000;
    3ada:	4a05      	ldr	r2, [pc, #20]	; (3af0 <sensor_get_temperature+0x38>)
    3adc:	4b01      	ldr	r3, [pc, #4]	; (3ae4 <sensor_get_temperature+0x2c>)
    3ade:	801a      	strh	r2, [r3, #0]
    3ae0:	e7f8      	b.n	3ad4 <sensor_get_temperature+0x1c>
    3ae2:	46c0      	nop			; (mov r8, r8)
    3ae4:	200005d4 	.word	0x200005d4
    3ae8:	ffffa240 	.word	0xffffa240
    3aec:	00001770 	.word	0x00001770
    3af0:	00005dc0 	.word	0x00005dc0

00003af4 <sensor_get_fan_speed>:

uint16_t sensor_get_fan_speed(void)
{
    3af4:	b510      	push	{r4, lr}
#ifdef CONFIG_SENSOR_SIMULATOR
	return get_speed_from_map(g_temp_buffer[0]);
    3af6:	4b07      	ldr	r3, [pc, #28]	; (3b14 <sensor_get_fan_speed+0x20>)
    3af8:	881c      	ldrh	r4, [r3, #0]
    3afa:	4b07      	ldr	r3, [pc, #28]	; (3b18 <sensor_get_fan_speed+0x24>)
    3afc:	0019      	movs	r1, r3
    3afe:	311c      	adds	r1, #28
    3b00:	e002      	b.n	3b08 <sensor_get_fan_speed+0x14>
    3b02:	3304      	adds	r3, #4
    for(i=0; i < sizeof(g_temp_speed_map)/sizeof(g_temp_speed_map[0]); i += 2 )
    3b04:	428b      	cmp	r3, r1
    3b06:	d004      	beq.n	3b12 <sensor_get_fan_speed+0x1e>
        if(temp > g_temp_speed_map[i])
    3b08:	881a      	ldrh	r2, [r3, #0]
    3b0a:	42a2      	cmp	r2, r4
    3b0c:	d2f9      	bcs.n	3b02 <sensor_get_fan_speed+0xe>
            target = g_temp_speed_map[i+1];
    3b0e:	8858      	ldrh	r0, [r3, #2]
    3b10:	e7f7      	b.n	3b02 <sensor_get_fan_speed+0xe>
#else
	return fan_click_get_tach();
#endif
}
    3b12:	bd10      	pop	{r4, pc}
    3b14:	200005d4 	.word	0x200005d4
    3b18:	20000118 	.word	0x20000118

00003b1c <sensor_task>:
    }

    /* Set new target */
    fan_click_set_target_tach(speed);
#endif
    3b1c:	4770      	bx	lr
	...

00003b20 <time_utils_convert>:
#if SAM0
extern struct rtc_module    rtc_instance;
#endif

uint32_t time_utils_convert(uint32_t year, uint32_t month, uint32_t day, uint32_t hour, uint32_t minute, uint32_t second)
{
    3b20:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b22:	46c6      	mov	lr, r8
    3b24:	b500      	push	{lr}
    3b26:	0006      	movs	r6, r0
    3b28:	000f      	movs	r7, r1
    3b2a:	4698      	mov	r8, r3
    uint32_t ret = 0;

    //January and February are counted as months 13 and 14 of the previous year
    if(month <= 2)
    3b2c:	2902      	cmp	r1, #2
    3b2e:	d801      	bhi.n	3b34 <time_utils_convert+0x14>
    {
        month += 12;
    3b30:	370c      	adds	r7, #12
        year -= 1;
    3b32:	3e01      	subs	r6, #1
    }
     
    //Convert years to days
    ret = (365 * year) + (year / 4) - (year / 100) + (year / 400);
    3b34:	246e      	movs	r4, #110	; 0x6e
    3b36:	34ff      	adds	r4, #255	; 0xff
    3b38:	4374      	muls	r4, r6
    //Convert months to days
    ret += (30 * month) + (3 * (month + 1) / 5) + day;
    //Unix time starts on January 1st, 1970
    ret -= 719561;
    3b3a:	4b16      	ldr	r3, [pc, #88]	; (3b94 <time_utils_convert+0x74>)
    3b3c:	469c      	mov	ip, r3
    3b3e:	4462      	add	r2, ip
    3b40:	18a4      	adds	r4, r4, r2
    ret = (365 * year) + (year / 4) - (year / 100) + (year / 400);
    3b42:	08b0      	lsrs	r0, r6, #2
    ret -= 719561;
    3b44:	1824      	adds	r4, r4, r0
    ret = (365 * year) + (year / 4) - (year / 100) + (year / 400);
    3b46:	4d14      	ldr	r5, [pc, #80]	; (3b98 <time_utils_convert+0x78>)
    3b48:	21c8      	movs	r1, #200	; 0xc8
    3b4a:	0049      	lsls	r1, r1, #1
    3b4c:	0030      	movs	r0, r6
    3b4e:	47a8      	blx	r5
    ret -= 719561;
    3b50:	1824      	adds	r4, r4, r0
    ret += (30 * month) + (3 * (month + 1) / 5) + day;
    3b52:	0138      	lsls	r0, r7, #4
    3b54:	1bc0      	subs	r0, r0, r7
    3b56:	0040      	lsls	r0, r0, #1
    ret -= 719561;
    3b58:	1824      	adds	r4, r4, r0
    ret = (365 * year) + (year / 4) - (year / 100) + (year / 400);
    3b5a:	2164      	movs	r1, #100	; 0x64
    3b5c:	0030      	movs	r0, r6
    3b5e:	47a8      	blx	r5
    ret -= 719561;
    3b60:	1a24      	subs	r4, r4, r0
    ret += (30 * month) + (3 * (month + 1) / 5) + day;
    3b62:	3701      	adds	r7, #1
    3b64:	0078      	lsls	r0, r7, #1
    3b66:	19c0      	adds	r0, r0, r7
    3b68:	2105      	movs	r1, #5
    3b6a:	47a8      	blx	r5
    ret -= 719561;
    3b6c:	1824      	adds	r4, r4, r0
    //Convert days to seconds
    ret *= 86400;
    3b6e:	480b      	ldr	r0, [pc, #44]	; (3b9c <time_utils_convert+0x7c>)
    3b70:	4344      	muls	r4, r0
    //Add hours, minutes and seconds
    ret += (3600 * hour) + (60 * minute) + second;
    3b72:	9b06      	ldr	r3, [sp, #24]
    3b74:	0118      	lsls	r0, r3, #4
    3b76:	1ac0      	subs	r0, r0, r3
    3b78:	0080      	lsls	r0, r0, #2
    3b7a:	9b07      	ldr	r3, [sp, #28]
    3b7c:	469c      	mov	ip, r3
    3b7e:	4460      	add	r0, ip
    3b80:	23e1      	movs	r3, #225	; 0xe1
    3b82:	011b      	lsls	r3, r3, #4
    3b84:	4646      	mov	r6, r8
    3b86:	435e      	muls	r6, r3
    3b88:	1980      	adds	r0, r0, r6
    3b8a:	1900      	adds	r0, r0, r4
     
    return ret;
}
    3b8c:	bc04      	pop	{r2}
    3b8e:	4690      	mov	r8, r2
    3b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b92:	46c0      	nop			; (mov r8, r8)
    3b94:	fff50537 	.word	0xfff50537
    3b98:	0000e565 	.word	0x0000e565
    3b9c:	00015180 	.word	0x00015180

00003ba0 <time_utils_get_utc>:

uint32_t time_utils_get_utc(void)
{
    3ba0:	b510      	push	{r4, lr}
    if(g_time_set)
    3ba2:	4b05      	ldr	r3, [pc, #20]	; (3bb8 <time_utils_get_utc+0x18>)
    3ba4:	781b      	ldrb	r3, [r3, #0]
        return time_utils_convert(year, month, day, hour, minute, second);
#endif
    }
    else
    {
        return 0;
    3ba6:	2000      	movs	r0, #0
    if(g_time_set)
    3ba8:	2b00      	cmp	r3, #0
    3baa:	d100      	bne.n	3bae <time_utils_get_utc+0xe>
    }
}
    3bac:	bd10      	pop	{r4, pc}
        return rtc_count_get_count(&rtc_instance);
    3bae:	4803      	ldr	r0, [pc, #12]	; (3bbc <time_utils_get_utc+0x1c>)
    3bb0:	4b03      	ldr	r3, [pc, #12]	; (3bc0 <time_utils_get_utc+0x20>)
    3bb2:	4798      	blx	r3
    3bb4:	e7fa      	b.n	3bac <time_utils_get_utc+0xc>
    3bb6:	46c0      	nop			; (mov r8, r8)
    3bb8:	200005dc 	.word	0x200005dc
    3bbc:	20002c74 	.word	0x20002c74
    3bc0:	00000ce1 	.word	0x00000ce1

00003bc4 <time_utils_set>:

void time_utils_set(uint32_t year, uint32_t month, uint32_t day, uint32_t hour, uint32_t minute, uint32_t second)
{
    3bc4:	b510      	push	{r4, lr}
    3bc6:	b082      	sub	sp, #8
#if SAM0
    uint32_t ts = time_utils_convert(year, month, day, hour, minute, second);
    3bc8:	9c05      	ldr	r4, [sp, #20]
    3bca:	9401      	str	r4, [sp, #4]
    3bcc:	9c04      	ldr	r4, [sp, #16]
    3bce:	9400      	str	r4, [sp, #0]
    3bd0:	4c05      	ldr	r4, [pc, #20]	; (3be8 <time_utils_set+0x24>)
    3bd2:	47a0      	blx	r4
    3bd4:	0001      	movs	r1, r0
    rtc_count_set_count(&rtc_instance, ts);
    3bd6:	4805      	ldr	r0, [pc, #20]	; (3bec <time_utils_set+0x28>)
    3bd8:	4b05      	ldr	r3, [pc, #20]	; (3bf0 <time_utils_set+0x2c>)
    3bda:	4798      	blx	r3
#elif SAM
    rtc_set_date(RTC, year, month, day, 1);
    rtc_set_time(RTC, hour, minute, second);
#endif

    g_time_set = true;
    3bdc:	2201      	movs	r2, #1
    3bde:	4b05      	ldr	r3, [pc, #20]	; (3bf4 <time_utils_set+0x30>)
    3be0:	701a      	strb	r2, [r3, #0]
}
    3be2:	b002      	add	sp, #8
    3be4:	bd10      	pop	{r4, pc}
    3be6:	46c0      	nop			; (mov r8, r8)
    3be8:	00003b21 	.word	0x00003b21
    3bec:	20002c74 	.word	0x20002c74
    3bf0:	00000c9d 	.word	0x00000c9d
    3bf4:	200005dc 	.word	0x200005dc

00003bf8 <usb_hid_init>:

/**
 * \brief Initializes the USB HID interface.
 */
void usb_hid_init(void)
{
    3bf8:	b510      	push	{r4, lr}
    // Start the USB device stack
    udc_start();
    3bfa:	4b01      	ldr	r3, [pc, #4]	; (3c00 <usb_hid_init+0x8>)
    3bfc:	4798      	blx	r3
}
    3bfe:	bd10      	pop	{r4, pc}
    3c00:	00000565 	.word	0x00000565

00003c04 <usb_send_response_message>:

bool usb_send_response_message(uint8_t *response, uint16_t response_length)
{
    3c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c06:	46de      	mov	lr, fp
    3c08:	4657      	mov	r7, sl
    3c0a:	464e      	mov	r6, r9
    3c0c:	4645      	mov	r5, r8
    3c0e:	b5e0      	push	{r5, r6, r7, lr}
    3c10:	b093      	sub	sp, #76	; 0x4c
    3c12:	9001      	str	r0, [sp, #4]
    3c14:	000e      	movs	r6, r1
    uint16_t current_response_location = 0;
    uint8_t usb_report[UDI_HID_REPORT_OUT_SIZE];
    uint8_t usb_report_length = 0;
    uint8_t send_retries = 5;
    
    if (response == NULL)
    3c16:	2800      	cmp	r0, #0
    3c18:	d034      	beq.n	3c84 <usb_send_response_message+0x80>
    {
        return false;
    }

    // Send the USB response message
    while (response_length > 0)
    3c1a:	2900      	cmp	r1, #0
    3c1c:	d03b      	beq.n	3c96 <usb_send_response_message+0x92>
    3c1e:	2705      	movs	r7, #5
    3c20:	2300      	movs	r3, #0
    3c22:	4698      	mov	r8, r3
    {
        // Create the USB report
        usb_report_length = min(UDI_HID_REPORT_OUT_SIZE, response_length);
        
        memset(&usb_report[0], 0, sizeof(usb_report));
    3c24:	4b1d      	ldr	r3, [pc, #116]	; (3c9c <usb_send_response_message+0x98>)
    3c26:	469b      	mov	fp, r3
        memcpy(&usb_report[0], &response[current_response_location], 
    3c28:	4b1d      	ldr	r3, [pc, #116]	; (3ca0 <usb_send_response_message+0x9c>)
    3c2a:	469a      	mov	sl, r3
               usb_report_length);
        
        usb_report_sent = udi_hid_generic_send_report_in(usb_report);
    3c2c:	4b1d      	ldr	r3, [pc, #116]	; (3ca4 <usb_send_response_message+0xa0>)
    3c2e:	4699      	mov	r9, r3
    3c30:	e017      	b.n	3c62 <usb_send_response_message+0x5e>
    3c32:	b2a4      	uxth	r4, r4
        memset(&usb_report[0], 0, sizeof(usb_report));
    3c34:	2240      	movs	r2, #64	; 0x40
    3c36:	2100      	movs	r1, #0
    3c38:	a802      	add	r0, sp, #8
    3c3a:	47d8      	blx	fp
        memcpy(&usb_report[0], &response[current_response_location], 
    3c3c:	b2e2      	uxtb	r2, r4
    3c3e:	9b01      	ldr	r3, [sp, #4]
    3c40:	4443      	add	r3, r8
    3c42:	0019      	movs	r1, r3
    3c44:	a802      	add	r0, sp, #8
    3c46:	47d0      	blx	sl
        usb_report_sent = udi_hid_generic_send_report_in(usb_report);
    3c48:	a802      	add	r0, sp, #8
    3c4a:	47c8      	blx	r9
    3c4c:	1e05      	subs	r5, r0, #0
        if (usb_report_sent == true)
    3c4e:	d10d      	bne.n	3c6c <usb_send_response_message+0x68>
            // Delay for 50ms
            delay_ms(USB_DELAY);
        }
        else
        {
            if (send_retries > 0)
    3c50:	2f00      	cmp	r7, #0
    3c52:	d018      	beq.n	3c86 <usb_send_response_message+0x82>
            {
                // Delay for 50ms
                delay_ms(USB_DELAY);
    3c54:	2032      	movs	r0, #50	; 0x32
    3c56:	4b14      	ldr	r3, [pc, #80]	; (3ca8 <usb_send_response_message+0xa4>)
    3c58:	4798      	blx	r3
                
                // Decrement the send retries
                send_retries--; 
    3c5a:	3f01      	subs	r7, #1
    3c5c:	b2ff      	uxtb	r7, r7
    while (response_length > 0)
    3c5e:	2e00      	cmp	r6, #0
    3c60:	d011      	beq.n	3c86 <usb_send_response_message+0x82>
    3c62:	1c34      	adds	r4, r6, #0
    3c64:	2e40      	cmp	r6, #64	; 0x40
    3c66:	d9e4      	bls.n	3c32 <usb_send_response_message+0x2e>
    3c68:	2440      	movs	r4, #64	; 0x40
    3c6a:	e7e2      	b.n	3c32 <usb_send_response_message+0x2e>
    3c6c:	23ff      	movs	r3, #255	; 0xff
    3c6e:	401c      	ands	r4, r3
            current_response_location += usb_report_length;
    3c70:	4643      	mov	r3, r8
    3c72:	18e3      	adds	r3, r4, r3
    3c74:	b29b      	uxth	r3, r3
    3c76:	4698      	mov	r8, r3
            response_length -= usb_report_length;            
    3c78:	1b36      	subs	r6, r6, r4
    3c7a:	b2b6      	uxth	r6, r6
            delay_ms(USB_DELAY);
    3c7c:	2032      	movs	r0, #50	; 0x32
    3c7e:	4b0a      	ldr	r3, [pc, #40]	; (3ca8 <usb_send_response_message+0xa4>)
    3c80:	4798      	blx	r3
    3c82:	e7ec      	b.n	3c5e <usb_send_response_message+0x5a>
        return false;
    3c84:	2500      	movs	r5, #0
            }
        }  
    }
    
    return usb_report_sent;
}
    3c86:	0028      	movs	r0, r5
    3c88:	b013      	add	sp, #76	; 0x4c
    3c8a:	bc3c      	pop	{r2, r3, r4, r5}
    3c8c:	4690      	mov	r8, r2
    3c8e:	4699      	mov	r9, r3
    3c90:	46a2      	mov	sl, r4
    3c92:	46ab      	mov	fp, r5
    3c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while (response_length > 0)
    3c96:	2500      	movs	r5, #0
    3c98:	e7f5      	b.n	3c86 <usb_send_response_message+0x82>
    3c9a:	46c0      	nop			; (mov r8, r8)
    3c9c:	000109ff 	.word	0x000109ff
    3ca0:	000109c9 	.word	0x000109c9
    3ca4:	00000231 	.word	0x00000231
    3ca8:	0000a015 	.word	0x0000a015

00003cac <usb_hid_enable_callback>:
 *                FALSE - The USB interface should not be enabled
 */
bool usb_hid_enable_callback(void)
{
    return true;
}
    3cac:	2001      	movs	r0, #1
    3cae:	4770      	bx	lr

00003cb0 <usb_hid_disable_callback>:
/**
 * \brief Callback called when the USB host disables the USB interface.
 */
void usb_hid_disable_callback(void)
{
}
    3cb0:	4770      	bx	lr

00003cb2 <usb_hid_wakeup_callback>:
/**
 * \brief Callback called when the USB endpoint wakeup event occurs.
 */
void usb_hid_wakeup_callback(void)
{
}
    3cb2:	4770      	bx	lr

00003cb4 <usb_hid_report_out_callback>:
 * \brief Handles the incoming USB report.
 *
 * \param[in] report                The incoming USB report
 */
void usb_hid_report_out_callback(uint8_t *report)
{
    3cb4:	b570      	push	{r4, r5, r6, lr}
    3cb6:	0005      	movs	r5, r0
    // Handle incoming USB report
    uint8_t * pRxBuf = atca_kit_get_rx_buffer();
    3cb8:	4b12      	ldr	r3, [pc, #72]	; (3d04 <usb_hid_report_out_callback+0x50>)
    3cba:	4798      	blx	r3

    for (uint32_t index = 0; index < UDI_HID_REPORT_OUT_SIZE; index++)
    {
        // Save the incoming USB packet
        pRxBuf[g_usb_buffer_length] = report[index];
    3cbc:	7829      	ldrb	r1, [r5, #0]
    3cbe:	4a12      	ldr	r2, [pc, #72]	; (3d08 <usb_hid_report_out_callback+0x54>)
    3cc0:	8813      	ldrh	r3, [r2, #0]
    3cc2:	54c1      	strb	r1, [r0, r3]
        g_usb_buffer_length++;
    3cc4:	8813      	ldrh	r3, [r2, #0]
    3cc6:	3301      	adds	r3, #1
    3cc8:	b29b      	uxth	r3, r3
    3cca:	8013      	strh	r3, [r2, #0]

        // Check if the USB message was received
        if (report[index] == USB_MESSAGE_DELIMITER)
    3ccc:	782a      	ldrb	r2, [r5, #0]
    3cce:	2a0a      	cmp	r2, #10
    3cd0:	d010      	beq.n	3cf4 <usb_hid_report_out_callback+0x40>
    3cd2:	1c6a      	adds	r2, r5, #1
    3cd4:	3540      	adds	r5, #64	; 0x40
        pRxBuf[g_usb_buffer_length] = report[index];
    3cd6:	490c      	ldr	r1, [pc, #48]	; (3d08 <usb_hid_report_out_callback+0x54>)
    3cd8:	7814      	ldrb	r4, [r2, #0]
    3cda:	880b      	ldrh	r3, [r1, #0]
    3cdc:	54c4      	strb	r4, [r0, r3]
        g_usb_buffer_length++;
    3cde:	880b      	ldrh	r3, [r1, #0]
    3ce0:	3301      	adds	r3, #1
    3ce2:	b29b      	uxth	r3, r3
    3ce4:	800b      	strh	r3, [r1, #0]
        if (report[index] == USB_MESSAGE_DELIMITER)
    3ce6:	7814      	ldrb	r4, [r2, #0]
    3ce8:	2c0a      	cmp	r4, #10
    3cea:	d003      	beq.n	3cf4 <usb_hid_report_out_callback+0x40>
    3cec:	3201      	adds	r2, #1
    for (uint32_t index = 0; index < UDI_HID_REPORT_OUT_SIZE; index++)
    3cee:	42aa      	cmp	r2, r5
    3cf0:	d1f2      	bne.n	3cd8 <usb_hid_report_out_callback+0x24>
    3cf2:	e005      	b.n	3d00 <usb_hid_report_out_callback+0x4c>
        {
            pRxBuf[g_usb_buffer_length] = 0;
    3cf4:	2200      	movs	r2, #0
    3cf6:	54c2      	strb	r2, [r0, r3]
            g_usb_message_received++;
    3cf8:	4a04      	ldr	r2, [pc, #16]	; (3d0c <usb_hid_report_out_callback+0x58>)
    3cfa:	6813      	ldr	r3, [r2, #0]
    3cfc:	3301      	adds	r3, #1
    3cfe:	6013      	str	r3, [r2, #0]
            break;
        }
    }
}
    3d00:	bd70      	pop	{r4, r5, r6, pc}
    3d02:	46c0      	nop			; (mov r8, r8)
    3d04:	000049c9 	.word	0x000049c9
    3d08:	200005de 	.word	0x200005de
    3d0c:	20002af4 	.word	0x20002af4

00003d10 <usb_hid_set_feature_callback>:
 * \param[in] report                The incoming USB report
 */
void usb_hid_set_feature_callback(uint8_t *report)
{
    // Do nothing with the incoming feature request
}
    3d10:	4770      	bx	lr

00003d12 <wifi_tls_handler_cb>:
}

static void wifi_tls_handler_cb(uint8 u8MsgType, void * pvMsg)
{

}
    3d12:	4770      	bx	lr

00003d14 <wifi_app_cb>:

/* WIFI's main callback function handler, for handling the M2M_WIFI events
received on the WIFI interface. Such notifications are received in response
to WIFI/P2P operations */
static void wifi_app_cb(uint8 u8MsgType, void * pvMsg)
{
    3d14:	b510      	push	{r4, lr}
	uint8_t i;
	for(i=0; i<sizeof(wifi_app_cb_list)/sizeof(wifi_app_cb_list[0]); i++)
	{
		if(u8MsgType == wifi_app_cb_list[i]._id)
    3d16:	282c      	cmp	r0, #44	; 0x2c
    3d18:	d00f      	beq.n	3d3a <wifi_app_cb+0x26>
    3d1a:	2832      	cmp	r0, #50	; 0x32
    3d1c:	d007      	beq.n	3d2e <wifi_app_cb+0x1a>
    3d1e:	2809      	cmp	r0, #9
    3d20:	d007      	beq.n	3d32 <wifi_app_cb+0x1e>
    3d22:	282a      	cmp	r0, #42	; 0x2a
    3d24:	d007      	beq.n	3d36 <wifi_app_cb+0x22>
    3d26:	2304      	movs	r3, #4
    3d28:	281b      	cmp	r0, #27
    3d2a:	d007      	beq.n	3d3c <wifi_app_cb+0x28>
				wifi_app_cb_list[i]._func(pvMsg);
			}
			break;
		}
	}
}
    3d2c:	bd10      	pop	{r4, pc}
		if(u8MsgType == wifi_app_cb_list[i]._id)
    3d2e:	2301      	movs	r3, #1
    3d30:	e004      	b.n	3d3c <wifi_app_cb+0x28>
    3d32:	2302      	movs	r3, #2
    3d34:	e002      	b.n	3d3c <wifi_app_cb+0x28>
    3d36:	2303      	movs	r3, #3
    3d38:	e000      	b.n	3d3c <wifi_app_cb+0x28>
    3d3a:	2300      	movs	r3, #0
			if(wifi_app_cb_list[i]._func)
    3d3c:	00db      	lsls	r3, r3, #3
    3d3e:	4a04      	ldr	r2, [pc, #16]	; (3d50 <wifi_app_cb+0x3c>)
    3d40:	18d3      	adds	r3, r2, r3
    3d42:	685b      	ldr	r3, [r3, #4]
    3d44:	2b00      	cmp	r3, #0
    3d46:	d0f1      	beq.n	3d2c <wifi_app_cb+0x18>
				wifi_app_cb_list[i]._func(pvMsg);
    3d48:	0008      	movs	r0, r1
    3d4a:	4798      	blx	r3
}
    3d4c:	e7ee      	b.n	3d2c <wifi_app_cb+0x18>
    3d4e:	46c0      	nop			; (mov r8, r8)
    3d50:	000141d8 	.word	0x000141d8

00003d54 <wifi_state_ready>:

/* Idle state - Run when no commands are pending  */
static void wifi_state_ready(void * ctx)
{
	/* Do Nothing */
}
    3d54:	4770      	bx	lr

00003d56 <wifi_state_timeout>:

/* Last command timed out */
static void wifi_state_timeout(void * ctx)
{
	/* Do Nothing */
}
    3d56:	4770      	bx	lr

00003d58 <set_dev_name_to_mac>:
{
    3d58:	b570      	push	{r4, r5, r6, lr}
    3d5a:	0004      	movs	r4, r0
    3d5c:	000d      	movs	r5, r1
	len = m2m_strlen(name);
    3d5e:	4b19      	ldr	r3, [pc, #100]	; (3dc4 <set_dev_name_to_mac+0x6c>)
    3d60:	4798      	blx	r3
	if (len >= 5) {
    3d62:	2804      	cmp	r0, #4
    3d64:	d92d      	bls.n	3dc2 <set_dev_name_to_mac+0x6a>
		name[len - 1] = HEX2ASCII((mac_addr[5] >> 0) & 0x0f);
    3d66:	1e42      	subs	r2, r0, #1
    3d68:	18a2      	adds	r2, r4, r2
    3d6a:	7969      	ldrb	r1, [r5, #5]
    3d6c:	230f      	movs	r3, #15
    3d6e:	400b      	ands	r3, r1
    3d70:	0019      	movs	r1, r3
    3d72:	3130      	adds	r1, #48	; 0x30
    3d74:	2b09      	cmp	r3, #9
    3d76:	dd01      	ble.n	3d7c <set_dev_name_to_mac+0x24>
    3d78:	3337      	adds	r3, #55	; 0x37
    3d7a:	0019      	movs	r1, r3
    3d7c:	7011      	strb	r1, [r2, #0]
		name[len - 2] = HEX2ASCII((mac_addr[5] >> 4) & 0x0f);
    3d7e:	1e82      	subs	r2, r0, #2
    3d80:	18a2      	adds	r2, r4, r2
    3d82:	796b      	ldrb	r3, [r5, #5]
    3d84:	091b      	lsrs	r3, r3, #4
    3d86:	0019      	movs	r1, r3
    3d88:	3130      	adds	r1, #48	; 0x30
    3d8a:	2b09      	cmp	r3, #9
    3d8c:	dd01      	ble.n	3d92 <set_dev_name_to_mac+0x3a>
    3d8e:	3337      	adds	r3, #55	; 0x37
    3d90:	0019      	movs	r1, r3
    3d92:	7011      	strb	r1, [r2, #0]
		name[len - 4] = HEX2ASCII((mac_addr[4] >> 0) & 0x0f);
    3d94:	1f02      	subs	r2, r0, #4
    3d96:	18a2      	adds	r2, r4, r2
    3d98:	7929      	ldrb	r1, [r5, #4]
    3d9a:	230f      	movs	r3, #15
    3d9c:	400b      	ands	r3, r1
    3d9e:	0019      	movs	r1, r3
    3da0:	3130      	adds	r1, #48	; 0x30
    3da2:	2b09      	cmp	r3, #9
    3da4:	dd01      	ble.n	3daa <set_dev_name_to_mac+0x52>
    3da6:	3337      	adds	r3, #55	; 0x37
    3da8:	0019      	movs	r1, r3
    3daa:	7011      	strb	r1, [r2, #0]
		name[len - 5] = HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
    3dac:	3805      	subs	r0, #5
    3dae:	1824      	adds	r4, r4, r0
    3db0:	792b      	ldrb	r3, [r5, #4]
    3db2:	091b      	lsrs	r3, r3, #4
    3db4:	001a      	movs	r2, r3
    3db6:	3230      	adds	r2, #48	; 0x30
    3db8:	2b09      	cmp	r3, #9
    3dba:	dd01      	ble.n	3dc0 <set_dev_name_to_mac+0x68>
    3dbc:	3337      	adds	r3, #55	; 0x37
    3dbe:	001a      	movs	r2, r3
    3dc0:	7022      	strb	r2, [r4, #0]
}
    3dc2:	bd70      	pop	{r4, r5, r6, pc}
    3dc4:	0000a489 	.word	0x0000a489

00003dc8 <wifi_app_cb_process_provInfo>:
{
    3dc8:	b510      	push	{r4, lr}
    3dca:	b082      	sub	sp, #8
    3dcc:	0004      	movs	r4, r0
	printf("wifi_cb: M2M_WIFI_RESP_PROVISION_INFO.\r\n");
    3dce:	480d      	ldr	r0, [pc, #52]	; (3e04 <wifi_app_cb_process_provInfo+0x3c>)
    3dd0:	4b0d      	ldr	r3, [pc, #52]	; (3e08 <wifi_app_cb_process_provInfo+0x40>)
    3dd2:	4798      	blx	r3
	if (pstrProvInfo->u8Status == M2M_SUCCESS) {
    3dd4:	2363      	movs	r3, #99	; 0x63
    3dd6:	5ce3      	ldrb	r3, [r4, r3]
    3dd8:	2b00      	cmp	r3, #0
    3dda:	d004      	beq.n	3de6 <wifi_app_cb_process_provInfo+0x1e>
		printf("wifi_cb: Provision failed.\r\n");
    3ddc:	480b      	ldr	r0, [pc, #44]	; (3e0c <wifi_app_cb_process_provInfo+0x44>)
    3dde:	4b0a      	ldr	r3, [pc, #40]	; (3e08 <wifi_app_cb_process_provInfo+0x40>)
    3de0:	4798      	blx	r3
}
    3de2:	b002      	add	sp, #8
    3de4:	bd10      	pop	{r4, pc}
		m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    3de6:	0020      	movs	r0, r4
    3de8:	4b09      	ldr	r3, [pc, #36]	; (3e10 <wifi_app_cb_process_provInfo+0x48>)
    3dea:	4798      	blx	r3
		pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
    3dec:	0023      	movs	r3, r4
    3dee:	3321      	adds	r3, #33	; 0x21
		m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    3df0:	2262      	movs	r2, #98	; 0x62
    3df2:	5ca2      	ldrb	r2, [r4, r2]
    3df4:	b2c1      	uxtb	r1, r0
    3df6:	20ff      	movs	r0, #255	; 0xff
    3df8:	9000      	str	r0, [sp, #0]
    3dfa:	0020      	movs	r0, r4
    3dfc:	4c05      	ldr	r4, [pc, #20]	; (3e14 <wifi_app_cb_process_provInfo+0x4c>)
    3dfe:	47a0      	blx	r4
    3e00:	e7ef      	b.n	3de2 <wifi_app_cb_process_provInfo+0x1a>
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	000142cc 	.word	0x000142cc
    3e08:	00010c7d 	.word	0x00010c7d
    3e0c:	000142f4 	.word	0x000142f4
    3e10:	00010fa7 	.word	0x00010fa7
    3e14:	0000b6e1 	.word	0x0000b6e1

00003e18 <wifi_socket_handler_cb>:
	switch (u8Msg)
    3e18:	2906      	cmp	r1, #6
    3e1a:	d01a      	beq.n	3e52 <wifi_socket_handler_cb+0x3a>
    3e1c:	d904      	bls.n	3e28 <wifi_socket_handler_cb+0x10>
    3e1e:	2907      	cmp	r1, #7
    3e20:	d035      	beq.n	3e8e <wifi_socket_handler_cb+0x76>
    3e22:	2909      	cmp	r1, #9
    3e24:	d015      	beq.n	3e52 <wifi_socket_handler_cb+0x3a>
}
    3e26:	4770      	bx	lr
	switch (u8Msg)
    3e28:	2905      	cmp	r1, #5
    3e2a:	d1fc      	bne.n	3e26 <wifi_socket_handler_cb+0xe>
		if (socket_connect_message != NULL)
    3e2c:	2a00      	cmp	r2, #0
    3e2e:	d0fa      	beq.n	3e26 <wifi_socket_handler_cb+0xe>
			if (socket_connect_message->s8Error != SOCK_ERR_NO_ERROR)
    3e30:	2301      	movs	r3, #1
    3e32:	56d3      	ldrsb	r3, [r2, r3]
    3e34:	2b00      	cmp	r3, #0
    3e36:	d006      	beq.n	3e46 <wifi_socket_handler_cb+0x2e>
}

/* Update the next state */
static void inline tiny_state_update(void* context, uint32_t next)
{
    ((tiny_state_ctx*)context)->state = next;
    3e38:	4b21      	ldr	r3, [pc, #132]	; (3ec0 <wifi_socket_handler_cb+0xa8>)
    3e3a:	2206      	movs	r2, #6
    3e3c:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    3e3e:	3227      	adds	r2, #39	; 0x27
    3e40:	32ff      	adds	r2, #255	; 0xff
    3e42:	609a      	str	r2, [r3, #8]
    3e44:	e7ef      	b.n	3e26 <wifi_socket_handler_cb+0xe>
    3e46:	4b1e      	ldr	r3, [pc, #120]	; (3ec0 <wifi_socket_handler_cb+0xa8>)
    3e48:	2204      	movs	r2, #4
    3e4a:	801a      	strh	r2, [r3, #0]
    3e4c:	2200      	movs	r2, #0
    3e4e:	609a      	str	r2, [r3, #8]
    3e50:	e7e9      	b.n	3e26 <wifi_socket_handler_cb+0xe>
		if (socket_receive_message != NULL)
    3e52:	2a00      	cmp	r2, #0
    3e54:	d0e7      	beq.n	3e26 <wifi_socket_handler_cb+0xe>
			if (socket_receive_message->s16BufferSize >= 0)
    3e56:	2104      	movs	r1, #4
    3e58:	5e53      	ldrsh	r3, [r2, r1]
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	db08      	blt.n	3e70 <wifi_socket_handler_cb+0x58>
				if (socket_receive_message->u16RemainingSize == 0)
    3e5e:	88d3      	ldrh	r3, [r2, #6]
    3e60:	2b00      	cmp	r3, #0
    3e62:	d1e0      	bne.n	3e26 <wifi_socket_handler_cb+0xe>
    3e64:	4b16      	ldr	r3, [pc, #88]	; (3ec0 <wifi_socket_handler_cb+0xa8>)
    3e66:	2204      	movs	r2, #4
    3e68:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    3e6a:	2200      	movs	r2, #0
    3e6c:	609a      	str	r2, [r3, #8]
    3e6e:	e7da      	b.n	3e26 <wifi_socket_handler_cb+0xe>
				if (socket_receive_message->s16BufferSize == SOCK_ERR_TIMEOUT)
    3e70:	330d      	adds	r3, #13
    3e72:	d006      	beq.n	3e82 <wifi_socket_handler_cb+0x6a>
    3e74:	4b12      	ldr	r3, [pc, #72]	; (3ec0 <wifi_socket_handler_cb+0xa8>)
    3e76:	2206      	movs	r2, #6
    3e78:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    3e7a:	3227      	adds	r2, #39	; 0x27
    3e7c:	32ff      	adds	r2, #255	; 0xff
    3e7e:	609a      	str	r2, [r3, #8]
    3e80:	e7d1      	b.n	3e26 <wifi_socket_handler_cb+0xe>
    3e82:	4b0f      	ldr	r3, [pc, #60]	; (3ec0 <wifi_socket_handler_cb+0xa8>)
    3e84:	2205      	movs	r2, #5
    3e86:	801a      	strh	r2, [r3, #0]
    3e88:	2200      	movs	r2, #0
    3e8a:	609a      	str	r2, [r3, #8]
    3e8c:	e7cb      	b.n	3e26 <wifi_socket_handler_cb+0xe>
		if (*bytes_sent <= 0 || *bytes_sent > (int32_t)g_wifi_context.txlen)
    3e8e:	2300      	movs	r3, #0
    3e90:	5ed3      	ldrsh	r3, [r2, r3]
    3e92:	2b00      	cmp	r3, #0
    3e94:	dd0c      	ble.n	3eb0 <wifi_socket_handler_cb+0x98>
    3e96:	4a0b      	ldr	r2, [pc, #44]	; (3ec4 <wifi_socket_handler_cb+0xac>)
    3e98:	4909      	ldr	r1, [pc, #36]	; (3ec0 <wifi_socket_handler_cb+0xa8>)
    3e9a:	588a      	ldr	r2, [r1, r2]
    3e9c:	4293      	cmp	r3, r2
    3e9e:	dc07      	bgt.n	3eb0 <wifi_socket_handler_cb+0x98>
		else if (*bytes_sent == g_wifi_context.txlen)
    3ea0:	429a      	cmp	r2, r3
    3ea2:	d1c0      	bne.n	3e26 <wifi_socket_handler_cb+0xe>
    3ea4:	4b06      	ldr	r3, [pc, #24]	; (3ec0 <wifi_socket_handler_cb+0xa8>)
    3ea6:	2204      	movs	r2, #4
    3ea8:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    3eaa:	2200      	movs	r2, #0
    3eac:	609a      	str	r2, [r3, #8]
}
    3eae:	e7ba      	b.n	3e26 <wifi_socket_handler_cb+0xe>
    3eb0:	4b03      	ldr	r3, [pc, #12]	; (3ec0 <wifi_socket_handler_cb+0xa8>)
    3eb2:	2206      	movs	r2, #6
    3eb4:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    3eb6:	3227      	adds	r2, #39	; 0x27
    3eb8:	32ff      	adds	r2, #255	; 0xff
    3eba:	609a      	str	r2, [r3, #8]
    3ebc:	e7b3      	b.n	3e26 <wifi_socket_handler_cb+0xe>
    3ebe:	46c0      	nop			; (mov r8, r8)
    3ec0:	200005e0 	.word	0x200005e0
    3ec4:	000005f4 	.word	0x000005f4

00003ec8 <wifi_resolve_handler_cb>:
	if (u32ServerIP != 0)
    3ec8:	2900      	cmp	r1, #0
    3eca:	d106      	bne.n	3eda <wifi_resolve_handler_cb+0x12>
    3ecc:	4b06      	ldr	r3, [pc, #24]	; (3ee8 <wifi_resolve_handler_cb+0x20>)
    3ece:	2206      	movs	r2, #6
    3ed0:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    3ed2:	3227      	adds	r2, #39	; 0x27
    3ed4:	32ff      	adds	r2, #255	; 0xff
    3ed6:	609a      	str	r2, [r3, #8]
}
    3ed8:	4770      	bx	lr
		g_wifi_context.host = u32ServerIP;
    3eda:	4b03      	ldr	r3, [pc, #12]	; (3ee8 <wifi_resolve_handler_cb+0x20>)
    3edc:	60d9      	str	r1, [r3, #12]
    3ede:	2204      	movs	r2, #4
    3ee0:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    3ee2:	2200      	movs	r2, #0
    3ee4:	609a      	str	r2, [r3, #8]
    3ee6:	e7f7      	b.n	3ed8 <wifi_resolve_handler_cb+0x10>
    3ee8:	200005e0 	.word	0x200005e0

00003eec <wifi_state_wait>:
	return (0 == g_wifi_context.holdoff);
    3eec:	4b05      	ldr	r3, [pc, #20]	; (3f04 <wifi_state_wait+0x18>)
	if(wifi_counter_finished())
    3eee:	689b      	ldr	r3, [r3, #8]
    3ef0:	2b00      	cmp	r3, #0
    3ef2:	d000      	beq.n	3ef6 <wifi_state_wait+0xa>
}
    3ef4:	4770      	bx	lr
    3ef6:	3306      	adds	r3, #6
    3ef8:	8003      	strh	r3, [r0, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    3efa:	2296      	movs	r2, #150	; 0x96
    3efc:	0052      	lsls	r2, r2, #1
    3efe:	4b01      	ldr	r3, [pc, #4]	; (3f04 <wifi_state_wait+0x18>)
    3f00:	609a      	str	r2, [r3, #8]
}
    3f02:	e7f7      	b.n	3ef4 <wifi_state_wait+0x8>
    3f04:	200005e0 	.word	0x200005e0

00003f08 <wifi_state_error>:

/* Handle the generic error state */
static void wifi_state_error(void * ctx)
{
    3f08:	b510      	push	{r4, lr}
    3f0a:	0004      	movs	r4, r0
	return (0 == g_wifi_context.holdoff);
    3f0c:	4b06      	ldr	r3, [pc, #24]	; (3f28 <wifi_state_error+0x20>)
	if(wifi_counter_finished())
    3f0e:	689b      	ldr	r3, [r3, #8]
    3f10:	2b00      	cmp	r3, #0
    3f12:	d000      	beq.n	3f16 <wifi_state_error+0xe>
	{
		WIFI_PRINTF("Retrying Connection\r\n");
		wifi_state_update(ctx, WIFI_STATE_CONNECT, WIFI_COUNTER_NO_WAIT);
	}
}
    3f14:	bd10      	pop	{r4, pc}
		WIFI_PRINTF("Retrying Connection\r\n");
    3f16:	4805      	ldr	r0, [pc, #20]	; (3f2c <wifi_state_error+0x24>)
    3f18:	4b05      	ldr	r3, [pc, #20]	; (3f30 <wifi_state_error+0x28>)
    3f1a:	4798      	blx	r3
    3f1c:	2302      	movs	r3, #2
    3f1e:	8023      	strh	r3, [r4, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    3f20:	2200      	movs	r2, #0
    3f22:	4b01      	ldr	r3, [pc, #4]	; (3f28 <wifi_state_error+0x20>)
    3f24:	609a      	str	r2, [r3, #8]
}
    3f26:	e7f5      	b.n	3f14 <wifi_state_error+0xc>
    3f28:	200005e0 	.word	0x200005e0
    3f2c:	00014354 	.word	0x00014354
    3f30:	00010c7d 	.word	0x00010c7d

00003f34 <wifi_state_connect>:
{
    3f34:	b510      	push	{r4, lr}
    3f36:	0004      	movs	r4, r0
		status=m2m_wifi_default_connect();
    3f38:	4b08      	ldr	r3, [pc, #32]	; (3f5c <wifi_state_connect+0x28>)
    3f3a:	4798      	blx	r3
	if (M2M_SUCCESS == status)
    3f3c:	2800      	cmp	r0, #0
    3f3e:	d006      	beq.n	3f4e <wifi_state_connect+0x1a>
    3f40:	2306      	movs	r3, #6
    3f42:	8023      	strh	r3, [r4, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    3f44:	2296      	movs	r2, #150	; 0x96
    3f46:	0052      	lsls	r2, r2, #1
    3f48:	4b05      	ldr	r3, [pc, #20]	; (3f60 <wifi_state_connect+0x2c>)
    3f4a:	609a      	str	r2, [r3, #8]
}
    3f4c:	bd10      	pop	{r4, pc}
    3f4e:	2303      	movs	r3, #3
    3f50:	8023      	strh	r3, [r4, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    3f52:	2264      	movs	r2, #100	; 0x64
    3f54:	4b02      	ldr	r3, [pc, #8]	; (3f60 <wifi_state_connect+0x2c>)
    3f56:	609a      	str	r2, [r3, #8]
    3f58:	e7f8      	b.n	3f4c <wifi_state_connect+0x18>
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	0000b431 	.word	0x0000b431
    3f60:	200005e0 	.word	0x200005e0

00003f64 <wifi_state_tls_init>:
{
    3f64:	b510      	push	{r4, lr}
    3f66:	0004      	movs	r4, r0
	if(M2M_SUCCESS != m2m_ssl_init(wifi_tls_handler_cb))
    3f68:	480b      	ldr	r0, [pc, #44]	; (3f98 <wifi_state_tls_init+0x34>)
    3f6a:	4b0c      	ldr	r3, [pc, #48]	; (3f9c <wifi_state_tls_init+0x38>)
    3f6c:	4798      	blx	r3
    3f6e:	2800      	cmp	r0, #0
    3f70:	d10a      	bne.n	3f88 <wifi_state_tls_init+0x24>
	if(M2M_SUCCESS != m2m_ssl_set_active_ciphersuites(SSL_ENABLE_ALL_SUITES))
    3f72:	203f      	movs	r0, #63	; 0x3f
    3f74:	4b0a      	ldr	r3, [pc, #40]	; (3fa0 <wifi_state_tls_init+0x3c>)
    3f76:	4798      	blx	r3
    3f78:	2800      	cmp	r0, #0
    3f7a:	d109      	bne.n	3f90 <wifi_state_tls_init+0x2c>
    3f7c:	2302      	movs	r3, #2
    3f7e:	8023      	strh	r3, [r4, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    3f80:	2200      	movs	r2, #0
    3f82:	4b08      	ldr	r3, [pc, #32]	; (3fa4 <wifi_state_tls_init+0x40>)
    3f84:	609a      	str	r2, [r3, #8]
    3f86:	e002      	b.n	3f8e <wifi_state_tls_init+0x2a>
		WIFI_PRINTF("m2m_ssl_init failed\r\n");
    3f88:	4807      	ldr	r0, [pc, #28]	; (3fa8 <wifi_state_tls_init+0x44>)
    3f8a:	4b08      	ldr	r3, [pc, #32]	; (3fac <wifi_state_tls_init+0x48>)
    3f8c:	4798      	blx	r3
}
    3f8e:	bd10      	pop	{r4, pc}
		WIFI_PRINTF("m2m_ssl_set_active_ciphersuites failed\r\n");
    3f90:	4807      	ldr	r0, [pc, #28]	; (3fb0 <wifi_state_tls_init+0x4c>)
    3f92:	4b06      	ldr	r3, [pc, #24]	; (3fac <wifi_state_tls_init+0x48>)
    3f94:	4798      	blx	r3
		return;
    3f96:	e7fa      	b.n	3f8e <wifi_state_tls_init+0x2a>
    3f98:	00003d13 	.word	0x00003d13
    3f9c:	0000ae09 	.word	0x0000ae09
    3fa0:	0000ade5 	.word	0x0000ade5
    3fa4:	200005e0 	.word	0x200005e0
    3fa8:	000144e4 	.word	0x000144e4
    3fac:	00010c7d 	.word	0x00010c7d
    3fb0:	000144fc 	.word	0x000144fc

00003fb4 <wifi_app_cb_process_dhcp>:
{
    3fb4:	b510      	push	{r4, lr}
    3fb6:	b082      	sub	sp, #8
	WIFI_PRINTF("WINC1500 WIFI: Device IP Address: %u.%u.%u.%u\r\n",
    3fb8:	78c3      	ldrb	r3, [r0, #3]
    3fba:	7842      	ldrb	r2, [r0, #1]
    3fbc:	7801      	ldrb	r1, [r0, #0]
    3fbe:	7900      	ldrb	r0, [r0, #4]
    3fc0:	9000      	str	r0, [sp, #0]
    3fc2:	4805      	ldr	r0, [pc, #20]	; (3fd8 <wifi_app_cb_process_dhcp+0x24>)
    3fc4:	4c05      	ldr	r4, [pc, #20]	; (3fdc <wifi_app_cb_process_dhcp+0x28>)
    3fc6:	47a0      	blx	r4
    3fc8:	4b05      	ldr	r3, [pc, #20]	; (3fe0 <wifi_app_cb_process_dhcp+0x2c>)
    3fca:	2204      	movs	r2, #4
    3fcc:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    3fce:	2200      	movs	r2, #0
    3fd0:	609a      	str	r2, [r3, #8]
}
    3fd2:	b002      	add	sp, #8
    3fd4:	bd10      	pop	{r4, pc}
    3fd6:	46c0      	nop			; (mov r8, r8)
    3fd8:	0001429c 	.word	0x0001429c
    3fdc:	00010b61 	.word	0x00010b61
    3fe0:	200005e0 	.word	0x200005e0

00003fe4 <wifi_app_cb_process_time>:
{
    3fe4:	b530      	push	{r4, r5, lr}
    3fe6:	b085      	sub	sp, #20
    3fe8:	0004      	movs	r4, r0
	WIFI_PRINTF("WINC1500 WIFI: Device Time:       %02d/%02d/%02d %02d:%02d:%02d\r\n",
    3fea:	78c3      	ldrb	r3, [r0, #3]
    3fec:	7882      	ldrb	r2, [r0, #2]
    3fee:	8801      	ldrh	r1, [r0, #0]
    3ff0:	7980      	ldrb	r0, [r0, #6]
    3ff2:	9002      	str	r0, [sp, #8]
    3ff4:	7960      	ldrb	r0, [r4, #5]
    3ff6:	9001      	str	r0, [sp, #4]
    3ff8:	7920      	ldrb	r0, [r4, #4]
    3ffa:	9000      	str	r0, [sp, #0]
    3ffc:	4810      	ldr	r0, [pc, #64]	; (4040 <wifi_app_cb_process_time+0x5c>)
    3ffe:	4d11      	ldr	r5, [pc, #68]	; (4044 <wifi_app_cb_process_time+0x60>)
    4000:	47a8      	blx	r5
	if(msg->u16Year && msg->u8Month && msg->u8Day)
    4002:	8823      	ldrh	r3, [r4, #0]
    4004:	2b00      	cmp	r3, #0
    4006:	d005      	beq.n	4014 <wifi_app_cb_process_time+0x30>
    4008:	78a3      	ldrb	r3, [r4, #2]
    400a:	2b00      	cmp	r3, #0
    400c:	d002      	beq.n	4014 <wifi_app_cb_process_time+0x30>
    400e:	78e3      	ldrb	r3, [r4, #3]
    4010:	2b00      	cmp	r3, #0
    4012:	d106      	bne.n	4022 <wifi_app_cb_process_time+0x3e>
    4014:	4b0c      	ldr	r3, [pc, #48]	; (4048 <wifi_app_cb_process_time+0x64>)
    4016:	2204      	movs	r2, #4
    4018:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    401a:	2200      	movs	r2, #0
    401c:	609a      	str	r2, [r3, #8]
}
    401e:	b005      	add	sp, #20
    4020:	bd30      	pop	{r4, r5, pc}
		if(!time_utils_get_utc())
    4022:	4b0a      	ldr	r3, [pc, #40]	; (404c <wifi_app_cb_process_time+0x68>)
    4024:	4798      	blx	r3
    4026:	2800      	cmp	r0, #0
    4028:	d1f4      	bne.n	4014 <wifi_app_cb_process_time+0x30>
			time_utils_set(msg->u16Year, msg->u8Month, msg->u8Day,
    402a:	7923      	ldrb	r3, [r4, #4]
    402c:	78e2      	ldrb	r2, [r4, #3]
    402e:	78a1      	ldrb	r1, [r4, #2]
    4030:	8820      	ldrh	r0, [r4, #0]
    4032:	79a5      	ldrb	r5, [r4, #6]
    4034:	9501      	str	r5, [sp, #4]
    4036:	7964      	ldrb	r4, [r4, #5]
    4038:	9400      	str	r4, [sp, #0]
    403a:	4c05      	ldr	r4, [pc, #20]	; (4050 <wifi_app_cb_process_time+0x6c>)
    403c:	47a0      	blx	r4
    403e:	e7e9      	b.n	4014 <wifi_app_cb_process_time+0x30>
    4040:	00014310 	.word	0x00014310
    4044:	00010b61 	.word	0x00010b61
    4048:	200005e0 	.word	0x200005e0
    404c:	00003ba1 	.word	0x00003ba1
    4050:	00003bc5 	.word	0x00003bc5

00004054 <wifi_app_cb_process_connection>:
{
    4054:	b510      	push	{r4, lr}
	if(M2M_WIFI_CONNECTED == msg->u8CurrState)
    4056:	7803      	ldrb	r3, [r0, #0]
    4058:	2b01      	cmp	r3, #1
    405a:	d00d      	beq.n	4078 <wifi_app_cb_process_connection+0x24>
	else if(M2M_WIFI_DISCONNECTED == msg->u8CurrState)
    405c:	2b00      	cmp	r3, #0
    405e:	d019      	beq.n	4094 <wifi_app_cb_process_connection+0x40>
		WIFI_PRINTF("WINC1500 WIFI: Unknown connection status: %d\r\n", msg->u8ErrCode);
    4060:	7841      	ldrb	r1, [r0, #1]
    4062:	4815      	ldr	r0, [pc, #84]	; (40b8 <wifi_app_cb_process_connection+0x64>)
    4064:	4b15      	ldr	r3, [pc, #84]	; (40bc <wifi_app_cb_process_connection+0x68>)
    4066:	4798      	blx	r3
		led_ctrl_set_color(LED_COLOR_RED,LED_MODE_NONE);
    4068:	2100      	movs	r1, #0
    406a:	2002      	movs	r0, #2
    406c:	4b14      	ldr	r3, [pc, #80]	; (40c0 <wifi_app_cb_process_connection+0x6c>)
    406e:	4798      	blx	r3
		led_ctrl_set_mode(LED_MODE_TURN_ON);
    4070:	2002      	movs	r0, #2
    4072:	4b14      	ldr	r3, [pc, #80]	; (40c4 <wifi_app_cb_process_connection+0x70>)
    4074:	4798      	blx	r3
}
    4076:	bd10      	pop	{r4, pc}
		m2m_wifi_enable_sntp(1);
    4078:	2001      	movs	r0, #1
    407a:	4b13      	ldr	r3, [pc, #76]	; (40c8 <wifi_app_cb_process_connection+0x74>)
    407c:	4798      	blx	r3
		WIFI_PRINTF("WINC1500 WIFI: Connected to the WIFI access point\r\n");
    407e:	4813      	ldr	r0, [pc, #76]	; (40cc <wifi_app_cb_process_connection+0x78>)
    4080:	4b13      	ldr	r3, [pc, #76]	; (40d0 <wifi_app_cb_process_connection+0x7c>)
    4082:	4798      	blx	r3
		led_ctrl_set_color(LED_COLOR_YELLOW,LED_MODE_NONE);
    4084:	2100      	movs	r1, #0
    4086:	2003      	movs	r0, #3
    4088:	4b0d      	ldr	r3, [pc, #52]	; (40c0 <wifi_app_cb_process_connection+0x6c>)
    408a:	4798      	blx	r3
		led_ctrl_set_mode(LED_MODE_TURN_ON);
    408c:	2002      	movs	r0, #2
    408e:	4b0d      	ldr	r3, [pc, #52]	; (40c4 <wifi_app_cb_process_connection+0x70>)
    4090:	4798      	blx	r3
    4092:	e7f0      	b.n	4076 <wifi_app_cb_process_connection+0x22>
		WIFI_PRINTF("WINC1500 WIFI: Disconnected from the WIFI access point\r\n");
    4094:	480f      	ldr	r0, [pc, #60]	; (40d4 <wifi_app_cb_process_connection+0x80>)
    4096:	4b0e      	ldr	r3, [pc, #56]	; (40d0 <wifi_app_cb_process_connection+0x7c>)
    4098:	4798      	blx	r3
		led_ctrl_set_color(LED_COLOR_RED,LED_MODE_NONE);
    409a:	2100      	movs	r1, #0
    409c:	2002      	movs	r0, #2
    409e:	4b08      	ldr	r3, [pc, #32]	; (40c0 <wifi_app_cb_process_connection+0x6c>)
    40a0:	4798      	blx	r3
		led_ctrl_set_mode(LED_MODE_TURN_ON);
    40a2:	2002      	movs	r0, #2
    40a4:	4b07      	ldr	r3, [pc, #28]	; (40c4 <wifi_app_cb_process_connection+0x70>)
    40a6:	4798      	blx	r3
    40a8:	4b0b      	ldr	r3, [pc, #44]	; (40d8 <wifi_app_cb_process_connection+0x84>)
    40aa:	2206      	movs	r2, #6
    40ac:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    40ae:	3227      	adds	r2, #39	; 0x27
    40b0:	32ff      	adds	r2, #255	; 0xff
    40b2:	609a      	str	r2, [r3, #8]
    40b4:	e7df      	b.n	4076 <wifi_app_cb_process_connection+0x22>
    40b6:	46c0      	nop			; (mov r8, r8)
    40b8:	0001426c 	.word	0x0001426c
    40bc:	00010b61 	.word	0x00010b61
    40c0:	00007239 	.word	0x00007239
    40c4:	00007369 	.word	0x00007369
    40c8:	0000b8c1 	.word	0x0000b8c1
    40cc:	00014200 	.word	0x00014200
    40d0:	00010c7d 	.word	0x00010c7d
    40d4:	00014234 	.word	0x00014234
    40d8:	200005e0 	.word	0x200005e0

000040dc <wifi_state_init>:
{
    40dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    40de:	b095      	sub	sp, #84	; 0x54
    40e0:	0004      	movs	r4, r0
	led_ctrl_set_color(LED_COLOR_YELLOW,LED_MODE_NONE);
    40e2:	2100      	movs	r1, #0
    40e4:	2003      	movs	r0, #3
    40e6:	4b4d      	ldr	r3, [pc, #308]	; (421c <wifi_state_init+0x140>)
    40e8:	4798      	blx	r3
	led_ctrl_set_mode(LED_MODE_TURN_ON);
    40ea:	2002      	movs	r0, #2
    40ec:	4b4c      	ldr	r3, [pc, #304]	; (4220 <wifi_state_init+0x144>)
    40ee:	4798      	blx	r3
	if(!config_ready() || !wifi_counter_finished())
    40f0:	4b4c      	ldr	r3, [pc, #304]	; (4224 <wifi_state_init+0x148>)
    40f2:	4798      	blx	r3
    40f4:	2800      	cmp	r0, #0
    40f6:	d003      	beq.n	4100 <wifi_state_init+0x24>
	return (0 == g_wifi_context.holdoff);
    40f8:	4b4b      	ldr	r3, [pc, #300]	; (4228 <wifi_state_init+0x14c>)
	if(!config_ready() || !wifi_counter_finished())
    40fa:	689b      	ldr	r3, [r3, #8]
    40fc:	2b00      	cmp	r3, #0
    40fe:	d001      	beq.n	4104 <wifi_state_init+0x28>
}
    4100:	b015      	add	sp, #84	; 0x54
    4102:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nm_bsp_init();
    4104:	4b49      	ldr	r3, [pc, #292]	; (422c <wifi_state_init+0x150>)
    4106:	4798      	blx	r3
	m2m_memset((uint8*)&wifi_paramaters, 0, sizeof(wifi_paramaters));
    4108:	2218      	movs	r2, #24
    410a:	2100      	movs	r1, #0
    410c:	a80e      	add	r0, sp, #56	; 0x38
    410e:	4b48      	ldr	r3, [pc, #288]	; (4230 <wifi_state_init+0x154>)
    4110:	4798      	blx	r3
	wifi_paramaters.pfAppWifiCb = wifi_app_cb;
    4112:	4b48      	ldr	r3, [pc, #288]	; (4234 <wifi_state_init+0x158>)
    4114:	930e      	str	r3, [sp, #56]	; 0x38
	if(M2M_SUCCESS != m2m_wifi_init(&wifi_paramaters))
    4116:	a80e      	add	r0, sp, #56	; 0x38
    4118:	4b47      	ldr	r3, [pc, #284]	; (4238 <wifi_state_init+0x15c>)
    411a:	4798      	blx	r3
    411c:	2800      	cmp	r0, #0
    411e:	d006      	beq.n	412e <wifi_state_init+0x52>
		WIFI_PRINTF("m2m_wifi_init failed\r\n");
    4120:	4846      	ldr	r0, [pc, #280]	; (423c <wifi_state_init+0x160>)
    4122:	4b47      	ldr	r3, [pc, #284]	; (4240 <wifi_state_init+0x164>)
    4124:	4798      	blx	r3
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    4126:	2264      	movs	r2, #100	; 0x64
    4128:	4b3f      	ldr	r3, [pc, #252]	; (4228 <wifi_state_init+0x14c>)
    412a:	609a      	str	r2, [r3, #8]
    412c:	e7e8      	b.n	4100 <wifi_state_init+0x24>
	m2m_wifi_get_otp_mac_address(mac_addr, &u8IsMacAddrValid);
    412e:	252f      	movs	r5, #47	; 0x2f
    4130:	446d      	add	r5, sp
    4132:	0029      	movs	r1, r5
    4134:	a80c      	add	r0, sp, #48	; 0x30
    4136:	4b43      	ldr	r3, [pc, #268]	; (4244 <wifi_state_init+0x168>)
    4138:	4798      	blx	r3
	if (!u8IsMacAddrValid) {
    413a:	782b      	ldrb	r3, [r5, #0]
    413c:	2b00      	cmp	r3, #0
    413e:	d01f      	beq.n	4180 <wifi_state_init+0xa4>
	m2m_wifi_get_mac_address(gau8MacAddr);
    4140:	4e41      	ldr	r6, [pc, #260]	; (4248 <wifi_state_init+0x16c>)
    4142:	0030      	movs	r0, r6
    4144:	4b41      	ldr	r3, [pc, #260]	; (424c <wifi_state_init+0x170>)
    4146:	4798      	blx	r3
	set_dev_name_to_mac((uint8_t *)config_gcp_thing_id, gau8MacAddr);
    4148:	4d41      	ldr	r5, [pc, #260]	; (4250 <wifi_state_init+0x174>)
    414a:	0031      	movs	r1, r6
    414c:	0028      	movs	r0, r5
    414e:	4b41      	ldr	r3, [pc, #260]	; (4254 <wifi_state_init+0x178>)
    4150:	4798      	blx	r3
	printf("Device ID set to : %s\r\n",config_gcp_thing_id);
    4152:	0029      	movs	r1, r5
    4154:	4840      	ldr	r0, [pc, #256]	; (4258 <wifi_state_init+0x17c>)
    4156:	4b41      	ldr	r3, [pc, #260]	; (425c <wifi_state_init+0x180>)
    4158:	4798      	blx	r3
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    415a:	4b41      	ldr	r3, [pc, #260]	; (4260 <wifi_state_init+0x184>)
    415c:	6a1b      	ldr	r3, [r3, #32]
	if(SW2_ACTIVE == port_pin_get_input_level(SW2_PIN)){ //enter provisioning mode
    415e:	055b      	lsls	r3, r3, #21
    4160:	d412      	bmi.n	4188 <wifi_state_init+0xac>
	socketInit();
    4162:	4b40      	ldr	r3, [pc, #256]	; (4264 <wifi_state_init+0x188>)
    4164:	4798      	blx	r3
	registerSocketCallback(wifi_socket_handler_cb, wifi_resolve_handler_cb);
    4166:	4940      	ldr	r1, [pc, #256]	; (4268 <wifi_state_init+0x18c>)
    4168:	4840      	ldr	r0, [pc, #256]	; (426c <wifi_state_init+0x190>)
    416a:	4b41      	ldr	r3, [pc, #260]	; (4270 <wifi_state_init+0x194>)
    416c:	4798      	blx	r3
	status = m2m_wifi_get_firmware_version(&wifi_version);
    416e:	a801      	add	r0, sp, #4
    4170:	4b40      	ldr	r3, [pc, #256]	; (4274 <wifi_state_init+0x198>)
    4172:	4798      	blx	r3
	if(M2M_SUCCESS == status)
    4174:	2800      	cmp	r0, #0
    4176:	d037      	beq.n	41e8 <wifi_state_init+0x10c>
		WIFI_PRINTF("Failed to retrieve WINC firmware version\r\n");
    4178:	483f      	ldr	r0, [pc, #252]	; (4278 <wifi_state_init+0x19c>)
    417a:	4b31      	ldr	r3, [pc, #196]	; (4240 <wifi_state_init+0x164>)
    417c:	4798      	blx	r3
		return;
    417e:	e7bf      	b.n	4100 <wifi_state_init+0x24>
		m2m_wifi_set_mac_address(gau8MacAddr);
    4180:	4831      	ldr	r0, [pc, #196]	; (4248 <wifi_state_init+0x16c>)
    4182:	4b3e      	ldr	r3, [pc, #248]	; (427c <wifi_state_init+0x1a0>)
    4184:	4798      	blx	r3
    4186:	e7db      	b.n	4140 <wifi_state_init+0x64>
		printf("Entering provisioning mode\r\n");
    4188:	483d      	ldr	r0, [pc, #244]	; (4280 <wifi_state_init+0x1a4>)
    418a:	4b2d      	ldr	r3, [pc, #180]	; (4240 <wifi_state_init+0x164>)
    418c:	4798      	blx	r3
		led_ctrl_set_color(LED_COLOR_Cyan ,LED_MODE_NONE);
    418e:	2100      	movs	r1, #0
    4190:	2005      	movs	r0, #5
    4192:	4b22      	ldr	r3, [pc, #136]	; (421c <wifi_state_init+0x140>)
    4194:	4798      	blx	r3
		led_ctrl_set_mode(LED_MODE_TURN_ON);
    4196:	2002      	movs	r0, #2
    4198:	4b21      	ldr	r3, [pc, #132]	; (4220 <wifi_state_init+0x144>)
    419a:	4798      	blx	r3
	set_dev_name_to_mac((uint8_t *)gacDeviceName, gau8MacAddr);
    419c:	4e39      	ldr	r6, [pc, #228]	; (4284 <wifi_state_init+0x1a8>)
    419e:	492a      	ldr	r1, [pc, #168]	; (4248 <wifi_state_init+0x16c>)
    41a0:	0030      	movs	r0, r6
    41a2:	4f2c      	ldr	r7, [pc, #176]	; (4254 <wifi_state_init+0x178>)
    41a4:	47b8      	blx	r7
	set_dev_name_to_mac((uint8_t *)gstrM2MAPConfig.au8SSID, gau8MacAddr);
    41a6:	4d38      	ldr	r5, [pc, #224]	; (4288 <wifi_state_init+0x1ac>)
    41a8:	4927      	ldr	r1, [pc, #156]	; (4248 <wifi_state_init+0x16c>)
    41aa:	0028      	movs	r0, r5
    41ac:	47b8      	blx	r7
		m2m_wifi_set_device_name((uint8_t *)gacDeviceName, (uint8_t)m2m_strlen((uint8_t *)gacDeviceName));
    41ae:	0030      	movs	r0, r6
    41b0:	4b36      	ldr	r3, [pc, #216]	; (428c <wifi_state_init+0x1b0>)
    41b2:	4798      	blx	r3
    41b4:	b2c1      	uxtb	r1, r0
    41b6:	0030      	movs	r0, r6
    41b8:	4b35      	ldr	r3, [pc, #212]	; (4290 <wifi_state_init+0x1b4>)
    41ba:	4798      	blx	r3
		gstrM2MAPConfig.au8DHCPServerIP[0] = 0xC0; /* 192 */
    41bc:	22c0      	movs	r2, #192	; 0xc0
    41be:	2341      	movs	r3, #65	; 0x41
    41c0:	54ea      	strb	r2, [r5, r3]
		gstrM2MAPConfig.au8DHCPServerIP[1] = 0xA8; /* 168 */
    41c2:	3a18      	subs	r2, #24
    41c4:	3301      	adds	r3, #1
    41c6:	54ea      	strb	r2, [r5, r3]
		gstrM2MAPConfig.au8DHCPServerIP[2] = 0x01; /* 1 */
    41c8:	3b41      	subs	r3, #65	; 0x41
    41ca:	3a65      	subs	r2, #101	; 0x65
    41cc:	54ab      	strb	r3, [r5, r2]
		gstrM2MAPConfig.au8DHCPServerIP[3] = 0x01; /* 1 */
    41ce:	3201      	adds	r2, #1
    41d0:	54ab      	strb	r3, [r5, r2]
		m2m_wifi_start_provision_mode((tstrM2MAPConfig *)&gstrM2MAPConfig, (char *)gacHttpProvDomainName, 1);
    41d2:	3a43      	subs	r2, #67	; 0x43
    41d4:	492f      	ldr	r1, [pc, #188]	; (4294 <wifi_state_init+0x1b8>)
    41d6:	0028      	movs	r0, r5
    41d8:	4b2f      	ldr	r3, [pc, #188]	; (4298 <wifi_state_init+0x1bc>)
    41da:	4798      	blx	r3
		printf("Provision Mode started.\r\nConnect to [%s] via AP[%s] and fill up the page.\r\n", MAIN_HTTP_PROV_SERVER_DOMAIN_NAME, gstrM2MAPConfig.au8SSID);
    41dc:	002a      	movs	r2, r5
    41de:	492f      	ldr	r1, [pc, #188]	; (429c <wifi_state_init+0x1c0>)
    41e0:	482f      	ldr	r0, [pc, #188]	; (42a0 <wifi_state_init+0x1c4>)
    41e2:	4b1e      	ldr	r3, [pc, #120]	; (425c <wifi_state_init+0x180>)
    41e4:	4798      	blx	r3
    41e6:	e7bc      	b.n	4162 <wifi_state_init+0x86>
		WIFI_PRINTF("WINC1500: Chip ID: 0x%08lX\r\n", wifi_version.u32Chipid);
    41e8:	ad01      	add	r5, sp, #4
    41ea:	9901      	ldr	r1, [sp, #4]
    41ec:	482d      	ldr	r0, [pc, #180]	; (42a4 <wifi_state_init+0x1c8>)
    41ee:	4e1b      	ldr	r6, [pc, #108]	; (425c <wifi_state_init+0x180>)
    41f0:	47b0      	blx	r6
		WIFI_PRINTF("WINC1500: Firmware Version: %u.%u.%u\r\n",
    41f2:	79ab      	ldrb	r3, [r5, #6]
    41f4:	796a      	ldrb	r2, [r5, #5]
    41f6:	7929      	ldrb	r1, [r5, #4]
    41f8:	482b      	ldr	r0, [pc, #172]	; (42a8 <wifi_state_init+0x1cc>)
    41fa:	47b0      	blx	r6
		WIFI_PRINTF("WINC1500: Firmware Min Driver Version: %u.%u.%u\r\n",
    41fc:	7a6b      	ldrb	r3, [r5, #9]
    41fe:	7a2a      	ldrb	r2, [r5, #8]
    4200:	79e9      	ldrb	r1, [r5, #7]
    4202:	482a      	ldr	r0, [pc, #168]	; (42ac <wifi_state_init+0x1d0>)
    4204:	47b0      	blx	r6
		WIFI_PRINTF("WINC1500: Driver Version: %d.%d.%d\r\n",
    4206:	2304      	movs	r3, #4
    4208:	2205      	movs	r2, #5
    420a:	2113      	movs	r1, #19
    420c:	4828      	ldr	r0, [pc, #160]	; (42b0 <wifi_state_init+0x1d4>)
    420e:	47b0      	blx	r6
    4210:	2301      	movs	r3, #1
    4212:	8023      	strh	r3, [r4, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    4214:	2200      	movs	r2, #0
    4216:	4b04      	ldr	r3, [pc, #16]	; (4228 <wifi_state_init+0x14c>)
    4218:	609a      	str	r2, [r3, #8]
    421a:	e771      	b.n	4100 <wifi_state_init+0x24>
    421c:	00007239 	.word	0x00007239
    4220:	00007369 	.word	0x00007369
    4224:	000059a5 	.word	0x000059a5
    4228:	200005e0 	.word	0x200005e0
    422c:	0000a0a9 	.word	0x0000a0a9
    4230:	0000a479 	.word	0x0000a479
    4234:	00003d15 	.word	0x00003d15
    4238:	0000b2f1 	.word	0x0000b2f1
    423c:	0001436c 	.word	0x0001436c
    4240:	00010c7d 	.word	0x00010c7d
    4244:	0000b72d 	.word	0x0000b72d
    4248:	200001a8 	.word	0x200001a8
    424c:	0000b75d 	.word	0x0000b75d
    4250:	20000274 	.word	0x20000274
    4254:	00003d59 	.word	0x00003d59
    4258:	00014384 	.word	0x00014384
    425c:	00010b61 	.word	0x00010b61
    4260:	40002880 	.word	0x40002880
    4264:	0000d231 	.word	0x0000d231
    4268:	00003ec9 	.word	0x00003ec9
    426c:	00003e19 	.word	0x00003e19
    4270:	0000d275 	.word	0x0000d275
    4274:	0000b7c1 	.word	0x0000b7c1
    4278:	000144b8 	.word	0x000144b8
    427c:	0000b6fd 	.word	0x0000b6fd
    4280:	0001439c 	.word	0x0001439c
    4284:	20000188 	.word	0x20000188
    4288:	200001b0 	.word	0x200001b0
    428c:	0000a489 	.word	0x0000a489
    4290:	0000b789 	.word	0x0000b789
    4294:	20000198 	.word	0x20000198
    4298:	0000b7ed 	.word	0x0000b7ed
    429c:	000143b8 	.word	0x000143b8
    42a0:	000143c8 	.word	0x000143c8
    42a4:	00014414 	.word	0x00014414
    42a8:	00014434 	.word	0x00014434
    42ac:	0001445c 	.word	0x0001445c
    42b0:	00014490 	.word	0x00014490

000042b4 <wifi_timer_update>:
	if(g_wifi_context.holdoff)
    42b4:	4b03      	ldr	r3, [pc, #12]	; (42c4 <wifi_timer_update+0x10>)
    42b6:	689b      	ldr	r3, [r3, #8]
    42b8:	2b00      	cmp	r3, #0
    42ba:	d002      	beq.n	42c2 <wifi_timer_update+0xe>
		g_wifi_context.holdoff--;
    42bc:	3b01      	subs	r3, #1
    42be:	4a01      	ldr	r2, [pc, #4]	; (42c4 <wifi_timer_update+0x10>)
    42c0:	6093      	str	r3, [r2, #8]
}
    42c2:	4770      	bx	lr
    42c4:	200005e0 	.word	0x200005e0

000042c8 <wifi_has_error>:
	return (WIFI_STATE_ERROR == g_wifi_context.state.state);
    42c8:	4b02      	ldr	r3, [pc, #8]	; (42d4 <wifi_has_error+0xc>)
    42ca:	8818      	ldrh	r0, [r3, #0]
    42cc:	3806      	subs	r0, #6
    42ce:	4243      	negs	r3, r0
    42d0:	4158      	adcs	r0, r3
}
    42d2:	4770      	bx	lr
    42d4:	200005e0 	.word	0x200005e0

000042d8 <wifi_task>:
	TINY_STATE_DEF(WIFI_STATE_ERROR,            &wifi_state_error)
};

/* WIFI State Controller */
void wifi_task(void)
{
    42d8:	b570      	push	{r4, r5, r6, lr}
	if(!g_wifi_context.state.count)
    42da:	4b19      	ldr	r3, [pc, #100]	; (4340 <wifi_task+0x68>)
    42dc:	885b      	ldrh	r3, [r3, #2]
    42de:	2b00      	cmp	r3, #0
    42e0:	d125      	bne.n	432e <wifi_task+0x56>
    ((tiny_state_ctx*)context)->states = states;
    42e2:	4a17      	ldr	r2, [pc, #92]	; (4340 <wifi_task+0x68>)
    42e4:	4b17      	ldr	r3, [pc, #92]	; (4344 <wifi_task+0x6c>)
    42e6:	6053      	str	r3, [r2, #4]
    ((tiny_state_ctx*)context)->count = count;
    42e8:	2107      	movs	r1, #7
    42ea:	8051      	strh	r1, [r2, #2]
    ((tiny_state_ctx*)context)->state = initial;
    42ec:	2100      	movs	r1, #0
    42ee:	8011      	strh	r1, [r2, #0]
    tiny_state_def * pState = tiny_state_find(pCtx->states, pCtx->count, pCtx->state);
    42f0:	0018      	movs	r0, r3
    42f2:	2507      	movs	r5, #7
        if(states[i]._s == state)
    42f4:	2400      	movs	r4, #0
    42f6:	681b      	ldr	r3, [r3, #0]
    42f8:	42a3      	cmp	r3, r4
    42fa:	d00f      	beq.n	431c <wifi_task+0x44>
    42fc:	0002      	movs	r2, r0
    42fe:	320c      	adds	r2, #12
{
    4300:	2300      	movs	r3, #0
    for(i=0;i<count;i++)
    4302:	3301      	adds	r3, #1
    4304:	b29b      	uxth	r3, r3
    4306:	42ab      	cmp	r3, r5
    4308:	d20d      	bcs.n	4326 <wifi_task+0x4e>
        if(states[i]._s == state)
    430a:	0010      	movs	r0, r2
    430c:	320c      	adds	r2, #12
    430e:	0011      	movs	r1, r2
    4310:	390c      	subs	r1, #12
    4312:	6809      	ldr	r1, [r1, #0]
    4314:	42a1      	cmp	r1, r4
    4316:	d1f4      	bne.n	4302 <wifi_task+0x2a>
    if(pState && pState->_f)
    4318:	2800      	cmp	r0, #0
    431a:	d004      	beq.n	4326 <wifi_task+0x4e>
    431c:	6883      	ldr	r3, [r0, #8]
    431e:	2b00      	cmp	r3, #0
    4320:	d001      	beq.n	4326 <wifi_task+0x4e>
        pState->_f(context);
    4322:	4807      	ldr	r0, [pc, #28]	; (4340 <wifi_task+0x68>)
    4324:	4798      	blx	r3

	/* Run the state machine*/
	tiny_state_driver(&g_wifi_context);

	/* Handle WINC1500 pending events */
	m2m_wifi_handle_events(NULL);
    4326:	2000      	movs	r0, #0
    4328:	4b07      	ldr	r3, [pc, #28]	; (4348 <wifi_task+0x70>)
    432a:	4798      	blx	r3
}
    432c:	bd70      	pop	{r4, r5, r6, pc}
    tiny_state_def * pState = tiny_state_find(pCtx->states, pCtx->count, pCtx->state);
    432e:	4b04      	ldr	r3, [pc, #16]	; (4340 <wifi_task+0x68>)
    4330:	6858      	ldr	r0, [r3, #4]
    4332:	885d      	ldrh	r5, [r3, #2]
        if(states[i]._s == state)
    4334:	881c      	ldrh	r4, [r3, #0]
    4336:	6803      	ldr	r3, [r0, #0]
    4338:	42a3      	cmp	r3, r4
    433a:	d1df      	bne.n	42fc <wifi_task+0x24>
    433c:	e7ec      	b.n	4318 <wifi_task+0x40>
    433e:	46c0      	nop			; (mov r8, r8)
    4340:	200005e0 	.word	0x200005e0
    4344:	20000134 	.word	0x20000134
    4348:	0000b425 	.word	0x0000b425

0000434c <wifi_request_time>:
	} while (wifi_is_busy());
}

/* Request Time from NTP servers and update clock */
void wifi_request_time(void)
{
    434c:	b510      	push	{r4, lr}
	return (WIFI_STATE_READY == g_wifi_context.state.state);
    434e:	4b06      	ldr	r3, [pc, #24]	; (4368 <wifi_request_time+0x1c>)
	if(wifi_is_ready())
    4350:	881b      	ldrh	r3, [r3, #0]
    4352:	2b04      	cmp	r3, #4
    4354:	d000      	beq.n	4358 <wifi_request_time+0xc>
	{
		m2m_wifi_get_sytem_time();
		wifi_state_update(&g_wifi_context, WIFI_STATE_WAIT, WIFI_COUNTER_GET_TIME_WAIT);
	}
}
    4356:	bd10      	pop	{r4, pc}
		m2m_wifi_get_sytem_time();
    4358:	4b04      	ldr	r3, [pc, #16]	; (436c <wifi_request_time+0x20>)
    435a:	4798      	blx	r3
    ((tiny_state_ctx*)context)->state = next;
    435c:	4b02      	ldr	r3, [pc, #8]	; (4368 <wifi_request_time+0x1c>)
    435e:	2203      	movs	r2, #3
    4360:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    4362:	3261      	adds	r2, #97	; 0x61
    4364:	609a      	str	r2, [r3, #8]
}
    4366:	e7f6      	b.n	4356 <wifi_request_time+0xa>
    4368:	200005e0 	.word	0x200005e0
    436c:	0000b8a1 	.word	0x0000b8a1

00004370 <wifi_connect>:
	}
}

/* Connect to a host and create a socket - blocking call */
int wifi_connect(char * host, int port)
{
    4370:	b5f0      	push	{r4, r5, r6, r7, lr}
    4372:	b089      	sub	sp, #36	; 0x24
    4374:	000e      	movs	r6, r1
	return (WIFI_STATE_READY == g_wifi_context.state.state);
    4376:	4b34      	ldr	r3, [pc, #208]	; (4448 <wifi_connect+0xd8>)
	int status = MQTTCLIENT_FAILURE;
	SOCKET new_socket = SOCK_ERR_INVALID;
	struct sockaddr_in socket_address;
	int optval;

	if(!wifi_is_ready())
    4378:	881b      	ldrh	r3, [r3, #0]
    437a:	2b04      	cmp	r3, #4
    437c:	d15a      	bne.n	4434 <wifi_connect+0xc4>
	g_wifi_context.host = 0;
    437e:	2200      	movs	r2, #0
    4380:	4b31      	ldr	r3, [pc, #196]	; (4448 <wifi_connect+0xd8>)
    4382:	60da      	str	r2, [r3, #12]
	if(MQTTCLIENT_SUCCESS == gethostbyname((uint8*)host))
    4384:	4b31      	ldr	r3, [pc, #196]	; (444c <wifi_connect+0xdc>)
    4386:	4798      	blx	r3
    4388:	2800      	cmp	r0, #0
    438a:	d043      	beq.n	4414 <wifi_connect+0xa4>
    438c:	4b2e      	ldr	r3, [pc, #184]	; (4448 <wifi_connect+0xd8>)
    438e:	2206      	movs	r2, #6
    4390:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    4392:	3227      	adds	r2, #39	; 0x27
    4394:	32ff      	adds	r2, #255	; 0xff
    4396:	609a      	str	r2, [r3, #8]
		wifi_task();
    4398:	4d2d      	ldr	r5, [pc, #180]	; (4450 <wifi_connect+0xe0>)
	return (WIFI_STATE_WAIT == g_wifi_context.state.state);
    439a:	4c2b      	ldr	r4, [pc, #172]	; (4448 <wifi_connect+0xd8>)
		wifi_task();
    439c:	47a8      	blx	r5
	return (WIFI_STATE_WAIT == g_wifi_context.state.state);
    439e:	8823      	ldrh	r3, [r4, #0]
	} while (wifi_is_busy());
    43a0:	2b03      	cmp	r3, #3
    43a2:	d0fb      	beq.n	439c <wifi_connect+0x2c>

	/* Wait for the command to complete or timeout */
	wifi_task_block_until_done();

	/* Check for failures */
	if(!wifi_is_ready())
    43a4:	2b04      	cmp	r3, #4
    43a6:	d148      	bne.n	443a <wifi_connect+0xca>
	{
		return status;
	}

	// Create the socket
	new_socket = socket(AF_INET, SOCK_STREAM, 1);
    43a8:	2201      	movs	r2, #1
    43aa:	2101      	movs	r1, #1
    43ac:	2002      	movs	r0, #2
    43ae:	4b29      	ldr	r3, [pc, #164]	; (4454 <wifi_connect+0xe4>)
    43b0:	4798      	blx	r3
    43b2:	1e05      	subs	r5, r0, #0
	if (new_socket < 0)
    43b4:	db44      	blt.n	4440 <wifi_connect+0xd0>
		/* Failed to create the socket */
		return status;
	}
	
	/* Set the socket information */
	socket_address.sin_family      = AF_INET;
    43b6:	ac04      	add	r4, sp, #16
    43b8:	2302      	movs	r3, #2
    43ba:	8023      	strh	r3, [r4, #0]
	socket_address.sin_addr.s_addr = g_wifi_context.host;
    43bc:	4b22      	ldr	r3, [pc, #136]	; (4448 <wifi_connect+0xd8>)
    43be:	68db      	ldr	r3, [r3, #12]
    43c0:	9305      	str	r3, [sp, #20]
	socket_address.sin_port        = _htons(port);
    43c2:	0233      	lsls	r3, r6, #8
    43c4:	4a24      	ldr	r2, [pc, #144]	; (4458 <wifi_connect+0xe8>)
    43c6:	4013      	ands	r3, r2
    43c8:	b2b6      	uxth	r6, r6
    43ca:	0a36      	lsrs	r6, r6, #8
    43cc:	431e      	orrs	r6, r3
    43ce:	8066      	strh	r6, [r4, #2]

	optval = 1;
    43d0:	2301      	movs	r3, #1
    43d2:	9303      	str	r3, [sp, #12]
	setsockopt(new_socket, SOL_SSL_SOCKET, SO_SSL_ENABLE_SESSION_CACHING,
    43d4:	3303      	adds	r3, #3
    43d6:	9300      	str	r3, [sp, #0]
    43d8:	ab03      	add	r3, sp, #12
    43da:	2203      	movs	r2, #3
    43dc:	2102      	movs	r1, #2
    43de:	4e1f      	ldr	r6, [pc, #124]	; (445c <wifi_connect+0xec>)
    43e0:	47b0      	blx	r6
	setsockopt(new_socket, SOL_SSL_SOCKET, SO_SSL_BYPASS_X509_VERIF,
	&optval, sizeof(optval));
	#endif

	/* Connect to the specified host */
	status = connect(new_socket, (struct sockaddr*)&socket_address,
    43e2:	2210      	movs	r2, #16
    43e4:	0021      	movs	r1, r4
    43e6:	0028      	movs	r0, r5
    43e8:	4b1d      	ldr	r3, [pc, #116]	; (4460 <wifi_connect+0xf0>)
    43ea:	4798      	blx	r3
    43ec:	1e06      	subs	r6, r0, #0
	sizeof(socket_address));
	if (status != SOCK_ERR_NO_ERROR)
    43ee:	d117      	bne.n	4420 <wifi_connect+0xb0>
    43f0:	4b15      	ldr	r3, [pc, #84]	; (4448 <wifi_connect+0xd8>)
    43f2:	2203      	movs	r2, #3
    43f4:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    43f6:	3261      	adds	r2, #97	; 0x61
    43f8:	609a      	str	r2, [r3, #8]
		wifi_task();
    43fa:	4f15      	ldr	r7, [pc, #84]	; (4450 <wifi_connect+0xe0>)
	return (WIFI_STATE_WAIT == g_wifi_context.state.state);
    43fc:	001c      	movs	r4, r3
		wifi_task();
    43fe:	47b8      	blx	r7
	return (WIFI_STATE_WAIT == g_wifi_context.state.state);
    4400:	8823      	ldrh	r3, [r4, #0]
	} while (wifi_is_busy());
    4402:	2b03      	cmp	r3, #3
    4404:	d0fb      	beq.n	43fe <wifi_connect+0x8e>

	/* Wait for the command to complete or timeout */
	wifi_task_block_until_done();

	/* Check for failures */
	if(!wifi_is_ready())
    4406:	2b04      	cmp	r3, #4
    4408:	d10e      	bne.n	4428 <wifi_connect+0xb8>
		close(new_socket);
		return MQTTCLIENT_FAILURE;
	}

	/* Save the socket for use */
	g_wifi_context.sock = new_socket;
    440a:	4b0f      	ldr	r3, [pc, #60]	; (4448 <wifi_connect+0xd8>)
    440c:	741d      	strb	r5, [r3, #16]

	return MQTTCLIENT_SUCCESS;
}
    440e:	0030      	movs	r0, r6
    4410:	b009      	add	sp, #36	; 0x24
    4412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4414:	4b0c      	ldr	r3, [pc, #48]	; (4448 <wifi_connect+0xd8>)
    4416:	2203      	movs	r2, #3
    4418:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    441a:	3261      	adds	r2, #97	; 0x61
    441c:	609a      	str	r2, [r3, #8]
    441e:	e7bb      	b.n	4398 <wifi_connect+0x28>
		close(new_socket);
    4420:	0028      	movs	r0, r5
    4422:	4b10      	ldr	r3, [pc, #64]	; (4464 <wifi_connect+0xf4>)
    4424:	4798      	blx	r3
		return status;
    4426:	e7f2      	b.n	440e <wifi_connect+0x9e>
		close(new_socket);
    4428:	0028      	movs	r0, r5
    442a:	4b0e      	ldr	r3, [pc, #56]	; (4464 <wifi_connect+0xf4>)
    442c:	4798      	blx	r3
		return MQTTCLIENT_FAILURE;
    442e:	2601      	movs	r6, #1
    4430:	4276      	negs	r6, r6
    4432:	e7ec      	b.n	440e <wifi_connect+0x9e>
		return status;
    4434:	2601      	movs	r6, #1
    4436:	4276      	negs	r6, r6
    4438:	e7e9      	b.n	440e <wifi_connect+0x9e>
		return status;
    443a:	2601      	movs	r6, #1
    443c:	4276      	negs	r6, r6
    443e:	e7e6      	b.n	440e <wifi_connect+0x9e>
		return status;
    4440:	2601      	movs	r6, #1
    4442:	4276      	negs	r6, r6
    4444:	e7e3      	b.n	440e <wifi_connect+0x9e>
    4446:	46c0      	nop			; (mov r8, r8)
    4448:	200005e0 	.word	0x200005e0
    444c:	0000d665 	.word	0x0000d665
    4450:	000042d9 	.word	0x000042d9
    4454:	0000d289 	.word	0x0000d289
    4458:	00ffff00 	.word	0x00ffff00
    445c:	0000d6a1 	.word	0x0000d6a1
    4460:	0000d40d 	.word	0x0000d40d
    4464:	0000d5c9 	.word	0x0000d5c9

00004468 <wifi_read_data>:

/* Read data from a socket - blocking call */
int wifi_read_data(uint8_t *read_buffer, uint32_t read_length, uint32_t timeout_ms)
{
    4468:	b5f0      	push	{r4, r5, r6, r7, lr}
    446a:	b083      	sub	sp, #12
    446c:	9001      	str	r0, [sp, #4]
    446e:	000c      	movs	r4, r1
    4470:	9200      	str	r2, [sp, #0]
	return (WIFI_STATE_READY == g_wifi_context.state.state);
    4472:	4b31      	ldr	r3, [pc, #196]	; (4538 <wifi_read_data+0xd0>)
	int status = MQTTCLIENT_FAILURE;
	
	if(!wifi_is_ready())
    4474:	881b      	ldrh	r3, [r3, #0]
    4476:	2b04      	cmp	r3, #4
    4478:	d15b      	bne.n	4532 <wifi_read_data+0xca>
	{
		return status;
	}

	if ((WIFI_BUFFER_SIZE - g_wifi_context.rxloc) >= read_length)
    447a:	23be      	movs	r3, #190	; 0xbe
    447c:	00db      	lsls	r3, r3, #3
    447e:	4a2e      	ldr	r2, [pc, #184]	; (4538 <wifi_read_data+0xd0>)
    4480:	58d1      	ldr	r1, [r2, r3]
    4482:	4b2e      	ldr	r3, [pc, #184]	; (453c <wifi_read_data+0xd4>)
    4484:	1a5b      	subs	r3, r3, r1
    4486:	42a3      	cmp	r3, r4
    4488:	d30d      	bcc.n	44a6 <wifi_read_data+0x3e>
	{
		status = MQTTCLIENT_SUCCESS;

		/* Get the data from the existing received buffer */
		memcpy(&read_buffer[0], &g_wifi_context.rxbuf[g_wifi_context.rxloc], read_length);
    448a:	0015      	movs	r5, r2
    448c:	3111      	adds	r1, #17
    448e:	1851      	adds	r1, r2, r1
    4490:	0022      	movs	r2, r4
    4492:	4b2b      	ldr	r3, [pc, #172]	; (4540 <wifi_read_data+0xd8>)
    4494:	4798      	blx	r3

		g_wifi_context.rxloc += read_length;
    4496:	22be      	movs	r2, #190	; 0xbe
    4498:	00d2      	lsls	r2, r2, #3
    449a:	58ab      	ldr	r3, [r5, r2]
    449c:	191b      	adds	r3, r3, r4
    449e:	50ab      	str	r3, [r5, r2]
			memcpy(&read_buffer[0], &g_wifi_context.rxbuf[0], read_length);
			g_wifi_context.rxloc += read_length;
		}
	}
	
	return ((status == MQTTCLIENT_SUCCESS) ? (int)read_length : status);
    44a0:	0020      	movs	r0, r4
}
    44a2:	b003      	add	sp, #12
    44a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		g_wifi_context.rxloc = 0;
    44a6:	4d24      	ldr	r5, [pc, #144]	; (4538 <wifi_read_data+0xd0>)
    44a8:	2200      	movs	r2, #0
    44aa:	23be      	movs	r3, #190	; 0xbe
    44ac:	00db      	lsls	r3, r3, #3
    44ae:	50ea      	str	r2, [r5, r3]
		memset(&g_wifi_context.rxbuf[0], 0, WIFI_BUFFER_SIZE);
    44b0:	002f      	movs	r7, r5
    44b2:	3711      	adds	r7, #17
    44b4:	4e21      	ldr	r6, [pc, #132]	; (453c <wifi_read_data+0xd4>)
    44b6:	0032      	movs	r2, r6
    44b8:	2100      	movs	r1, #0
    44ba:	0038      	movs	r0, r7
    44bc:	4b21      	ldr	r3, [pc, #132]	; (4544 <wifi_read_data+0xdc>)
    44be:	4798      	blx	r3
		if(MQTTCLIENT_SUCCESS != (status = recv(g_wifi_context.sock, g_wifi_context.rxbuf, WIFI_BUFFER_SIZE, timeout_ms)))
    44c0:	2010      	movs	r0, #16
    44c2:	5628      	ldrsb	r0, [r5, r0]
    44c4:	9b00      	ldr	r3, [sp, #0]
    44c6:	0032      	movs	r2, r6
    44c8:	0039      	movs	r1, r7
    44ca:	4f1f      	ldr	r7, [pc, #124]	; (4548 <wifi_read_data+0xe0>)
    44cc:	47b8      	blx	r7
    44ce:	2800      	cmp	r0, #0
    44d0:	d1e7      	bne.n	44a2 <wifi_read_data+0x3a>
		wifi_state_update(&g_wifi_context, WIFI_STATE_WAIT, timeout_ms + WIFI_UPDATE_PERIOD);
    44d2:	9d00      	ldr	r5, [sp, #0]
    44d4:	3564      	adds	r5, #100	; 0x64
    44d6:	4f18      	ldr	r7, [pc, #96]	; (4538 <wifi_read_data+0xd0>)
    44d8:	2303      	movs	r3, #3
    44da:	803b      	strh	r3, [r7, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    44dc:	2164      	movs	r1, #100	; 0x64
    44de:	0028      	movs	r0, r5
    44e0:	4b1a      	ldr	r3, [pc, #104]	; (454c <wifi_read_data+0xe4>)
    44e2:	4798      	blx	r3
    44e4:	60b8      	str	r0, [r7, #8]
	if(val && !g_wifi_context.holdoff)
    44e6:	2d00      	cmp	r5, #0
    44e8:	d003      	beq.n	44f2 <wifi_read_data+0x8a>
    44ea:	2800      	cmp	r0, #0
    44ec:	d101      	bne.n	44f2 <wifi_read_data+0x8a>
		g_wifi_context.holdoff = 1;
    44ee:	2201      	movs	r2, #1
    44f0:	60ba      	str	r2, [r7, #8]
		wifi_task();
    44f2:	4f17      	ldr	r7, [pc, #92]	; (4550 <wifi_read_data+0xe8>)
	return (WIFI_STATE_WAIT == g_wifi_context.state.state);
    44f4:	4d10      	ldr	r5, [pc, #64]	; (4538 <wifi_read_data+0xd0>)
		wifi_task();
    44f6:	47b8      	blx	r7
	return (WIFI_STATE_WAIT == g_wifi_context.state.state);
    44f8:	882b      	ldrh	r3, [r5, #0]
	} while (wifi_is_busy());
    44fa:	2b03      	cmp	r3, #3
    44fc:	d0fb      	beq.n	44f6 <wifi_read_data+0x8e>
		if(!wifi_is_ready())
    44fe:	2b04      	cmp	r3, #4
    4500:	d00a      	beq.n	4518 <wifi_read_data+0xb0>
			if(!wifi_has_error())
    4502:	2b06      	cmp	r3, #6
    4504:	d102      	bne.n	450c <wifi_read_data+0xa4>
		return status;
    4506:	2001      	movs	r0, #1
    4508:	4240      	negs	r0, r0
    450a:	e7ca      	b.n	44a2 <wifi_read_data+0x3a>
    450c:	4b0a      	ldr	r3, [pc, #40]	; (4538 <wifi_read_data+0xd0>)
    450e:	2204      	movs	r2, #4
    4510:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    4512:	2200      	movs	r2, #0
    4514:	609a      	str	r2, [r3, #8]
    4516:	e7f6      	b.n	4506 <wifi_read_data+0x9e>
			memcpy(&read_buffer[0], &g_wifi_context.rxbuf[0], read_length);
    4518:	4d07      	ldr	r5, [pc, #28]	; (4538 <wifi_read_data+0xd0>)
    451a:	0029      	movs	r1, r5
    451c:	3111      	adds	r1, #17
    451e:	0022      	movs	r2, r4
    4520:	9801      	ldr	r0, [sp, #4]
    4522:	4b07      	ldr	r3, [pc, #28]	; (4540 <wifi_read_data+0xd8>)
    4524:	4798      	blx	r3
			g_wifi_context.rxloc += read_length;
    4526:	22be      	movs	r2, #190	; 0xbe
    4528:	00d2      	lsls	r2, r2, #3
    452a:	58ab      	ldr	r3, [r5, r2]
    452c:	191b      	adds	r3, r3, r4
    452e:	50ab      	str	r3, [r5, r2]
    4530:	e7b6      	b.n	44a0 <wifi_read_data+0x38>
		return status;
    4532:	2001      	movs	r0, #1
    4534:	4240      	negs	r0, r0
    4536:	e7b4      	b.n	44a2 <wifi_read_data+0x3a>
    4538:	200005e0 	.word	0x200005e0
    453c:	000005dc 	.word	0x000005dc
    4540:	000109c9 	.word	0x000109c9
    4544:	000109ff 	.word	0x000109ff
    4548:	0000d535 	.word	0x0000d535
    454c:	0000e565 	.word	0x0000e565
    4550:	000042d9 	.word	0x000042d9

00004554 <wifi_send_data>:

/* Send data to a socket - blocking call */
int wifi_send_data(uint8_t *send_buffer, uint32_t send_length, uint32_t timeout_ms)
{
    4554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4556:	0005      	movs	r5, r0
    4558:	000e      	movs	r6, r1
	return (WIFI_STATE_READY == g_wifi_context.state.state);
    455a:	4b16      	ldr	r3, [pc, #88]	; (45b4 <wifi_send_data+0x60>)
	int status = MQTTCLIENT_FAILURE;
	
	if(!wifi_is_ready())
    455c:	881b      	ldrh	r3, [r3, #0]
    455e:	2b04      	cmp	r3, #4
    4560:	d125      	bne.n	45ae <wifi_send_data+0x5a>
	{
		return status;
	}

	status = send(g_wifi_context.sock, send_buffer, send_length, 0);
    4562:	b28a      	uxth	r2, r1
    4564:	4c13      	ldr	r4, [pc, #76]	; (45b4 <wifi_send_data+0x60>)
    4566:	2010      	movs	r0, #16
    4568:	5620      	ldrsb	r0, [r4, r0]
    456a:	2300      	movs	r3, #0
    456c:	0029      	movs	r1, r5
    456e:	4d12      	ldr	r5, [pc, #72]	; (45b8 <wifi_send_data+0x64>)
    4570:	47a8      	blx	r5
    4572:	0005      	movs	r5, r0
	g_wifi_context.txlen = send_length;
    4574:	4b11      	ldr	r3, [pc, #68]	; (45bc <wifi_send_data+0x68>)
    4576:	50e6      	str	r6, [r4, r3]
    4578:	2303      	movs	r3, #3
    457a:	8023      	strh	r3, [r4, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    457c:	3361      	adds	r3, #97	; 0x61
    457e:	60a3      	str	r3, [r4, #8]
		wifi_task();
    4580:	4f0f      	ldr	r7, [pc, #60]	; (45c0 <wifi_send_data+0x6c>)
	return (WIFI_STATE_WAIT == g_wifi_context.state.state);
    4582:	4c0c      	ldr	r4, [pc, #48]	; (45b4 <wifi_send_data+0x60>)
		wifi_task();
    4584:	47b8      	blx	r7
	return (WIFI_STATE_WAIT == g_wifi_context.state.state);
    4586:	8823      	ldrh	r3, [r4, #0]
	} while (wifi_is_busy());
    4588:	2b03      	cmp	r3, #3
    458a:	d0fb      	beq.n	4584 <wifi_send_data+0x30>

	/* Wait for the command to complete or timeout */
	wifi_task_block_until_done();

	/* Check for failures */
	if(!wifi_is_ready())
    458c:	2b04      	cmp	r3, #4
    458e:	d00a      	beq.n	45a6 <wifi_send_data+0x52>
	{
		status = MQTTCLIENT_FAILURE;
		if(!wifi_has_error())
    4590:	2b06      	cmp	r3, #6
    4592:	d102      	bne.n	459a <wifi_send_data+0x46>
		return status;
    4594:	2001      	movs	r0, #1
    4596:	4240      	negs	r0, r0
    4598:	e008      	b.n	45ac <wifi_send_data+0x58>
    459a:	4b06      	ldr	r3, [pc, #24]	; (45b4 <wifi_send_data+0x60>)
    459c:	2204      	movs	r2, #4
    459e:	801a      	strh	r2, [r3, #0]
	g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
    45a0:	2200      	movs	r2, #0
    45a2:	609a      	str	r2, [r3, #8]
    45a4:	e7f6      	b.n	4594 <wifi_send_data+0x40>
	status = send(g_wifi_context.sock, send_buffer, send_length, 0);
    45a6:	1e28      	subs	r0, r5, #0
			/* Timed out but we aren't going to retry */
			wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
		}
	}
	
	return ((status == MQTTCLIENT_SUCCESS) ? (int)send_length : status);
    45a8:	d100      	bne.n	45ac <wifi_send_data+0x58>
    45aa:	0030      	movs	r0, r6
}
    45ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return status;
    45ae:	2001      	movs	r0, #1
    45b0:	4240      	negs	r0, r0
    45b2:	e7fb      	b.n	45ac <wifi_send_data+0x58>
    45b4:	200005e0 	.word	0x200005e0
    45b8:	0000d49d 	.word	0x0000d49d
    45bc:	000005f4 	.word	0x000005f4
    45c0:	000042d9 	.word	0x000042d9

000045c4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    45c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    45c6:	46de      	mov	lr, fp
    45c8:	4657      	mov	r7, sl
    45ca:	464e      	mov	r6, r9
    45cc:	4645      	mov	r5, r8
    45ce:	b5e0      	push	{r5, r6, r7, lr}
    45d0:	b087      	sub	sp, #28
    45d2:	4680      	mov	r8, r0
    45d4:	9104      	str	r1, [sp, #16]
    45d6:	0016      	movs	r6, r2
    45d8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    45da:	2200      	movs	r2, #0
    45dc:	2300      	movs	r3, #0
    45de:	2100      	movs	r1, #0
    45e0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    45e2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    45e4:	2001      	movs	r0, #1
    45e6:	0021      	movs	r1, r4
    45e8:	9600      	str	r6, [sp, #0]
    45ea:	9701      	str	r7, [sp, #4]
    45ec:	465c      	mov	r4, fp
    45ee:	9403      	str	r4, [sp, #12]
    45f0:	4644      	mov	r4, r8
    45f2:	9405      	str	r4, [sp, #20]
    45f4:	e013      	b.n	461e <long_division+0x5a>
    45f6:	2420      	movs	r4, #32
    45f8:	1a64      	subs	r4, r4, r1
    45fa:	0005      	movs	r5, r0
    45fc:	40e5      	lsrs	r5, r4
    45fe:	46a8      	mov	r8, r5
    4600:	e014      	b.n	462c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    4602:	9c00      	ldr	r4, [sp, #0]
    4604:	9d01      	ldr	r5, [sp, #4]
    4606:	1b12      	subs	r2, r2, r4
    4608:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    460a:	465c      	mov	r4, fp
    460c:	464d      	mov	r5, r9
    460e:	432c      	orrs	r4, r5
    4610:	46a3      	mov	fp, r4
    4612:	9c03      	ldr	r4, [sp, #12]
    4614:	4645      	mov	r5, r8
    4616:	432c      	orrs	r4, r5
    4618:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    461a:	3901      	subs	r1, #1
    461c:	d325      	bcc.n	466a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    461e:	2420      	movs	r4, #32
    4620:	4264      	negs	r4, r4
    4622:	190c      	adds	r4, r1, r4
    4624:	d4e7      	bmi.n	45f6 <long_division+0x32>
    4626:	0005      	movs	r5, r0
    4628:	40a5      	lsls	r5, r4
    462a:	46a8      	mov	r8, r5
    462c:	0004      	movs	r4, r0
    462e:	408c      	lsls	r4, r1
    4630:	46a1      	mov	r9, r4
		r = r << 1;
    4632:	1892      	adds	r2, r2, r2
    4634:	415b      	adcs	r3, r3
    4636:	0014      	movs	r4, r2
    4638:	001d      	movs	r5, r3
		if (n & bit_shift) {
    463a:	9e05      	ldr	r6, [sp, #20]
    463c:	464f      	mov	r7, r9
    463e:	403e      	ands	r6, r7
    4640:	46b4      	mov	ip, r6
    4642:	9e04      	ldr	r6, [sp, #16]
    4644:	4647      	mov	r7, r8
    4646:	403e      	ands	r6, r7
    4648:	46b2      	mov	sl, r6
    464a:	4666      	mov	r6, ip
    464c:	4657      	mov	r7, sl
    464e:	433e      	orrs	r6, r7
    4650:	d003      	beq.n	465a <long_division+0x96>
			r |= 0x01;
    4652:	0006      	movs	r6, r0
    4654:	4326      	orrs	r6, r4
    4656:	0032      	movs	r2, r6
    4658:	002b      	movs	r3, r5
		if (r >= d) {
    465a:	9c00      	ldr	r4, [sp, #0]
    465c:	9d01      	ldr	r5, [sp, #4]
    465e:	429d      	cmp	r5, r3
    4660:	d8db      	bhi.n	461a <long_division+0x56>
    4662:	d1ce      	bne.n	4602 <long_division+0x3e>
    4664:	4294      	cmp	r4, r2
    4666:	d8d8      	bhi.n	461a <long_division+0x56>
    4668:	e7cb      	b.n	4602 <long_division+0x3e>
    466a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    466c:	4658      	mov	r0, fp
    466e:	0019      	movs	r1, r3
    4670:	b007      	add	sp, #28
    4672:	bc3c      	pop	{r2, r3, r4, r5}
    4674:	4690      	mov	r8, r2
    4676:	4699      	mov	r9, r3
    4678:	46a2      	mov	sl, r4
    467a:	46ab      	mov	fp, r5
    467c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000467e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    467e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4680:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4682:	2340      	movs	r3, #64	; 0x40
    4684:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    4686:	4281      	cmp	r1, r0
    4688:	d202      	bcs.n	4690 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    468a:	0018      	movs	r0, r3
    468c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    468e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4690:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    4692:	1c63      	adds	r3, r4, #1
    4694:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    4696:	4288      	cmp	r0, r1
    4698:	d9f9      	bls.n	468e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    469a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    469c:	2cff      	cmp	r4, #255	; 0xff
    469e:	d8f4      	bhi.n	468a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    46a0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    46a2:	2300      	movs	r3, #0
    46a4:	e7f1      	b.n	468a <_sercom_get_sync_baud_val+0xc>
	...

000046a8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    46a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    46aa:	b083      	sub	sp, #12
    46ac:	000f      	movs	r7, r1
    46ae:	0016      	movs	r6, r2
    46b0:	aa08      	add	r2, sp, #32
    46b2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    46b4:	0004      	movs	r4, r0
    46b6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    46b8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    46ba:	42bc      	cmp	r4, r7
    46bc:	d902      	bls.n	46c4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    46be:	0010      	movs	r0, r2
    46c0:	b003      	add	sp, #12
    46c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    46c4:	2b00      	cmp	r3, #0
    46c6:	d114      	bne.n	46f2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    46c8:	0002      	movs	r2, r0
    46ca:	0008      	movs	r0, r1
    46cc:	2100      	movs	r1, #0
    46ce:	4c19      	ldr	r4, [pc, #100]	; (4734 <_sercom_get_async_baud_val+0x8c>)
    46d0:	47a0      	blx	r4
    46d2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    46d4:	003a      	movs	r2, r7
    46d6:	2300      	movs	r3, #0
    46d8:	2000      	movs	r0, #0
    46da:	4c17      	ldr	r4, [pc, #92]	; (4738 <_sercom_get_async_baud_val+0x90>)
    46dc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    46de:	2200      	movs	r2, #0
    46e0:	2301      	movs	r3, #1
    46e2:	1a12      	subs	r2, r2, r0
    46e4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    46e6:	0c12      	lsrs	r2, r2, #16
    46e8:	041b      	lsls	r3, r3, #16
    46ea:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    46ec:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    46ee:	2200      	movs	r2, #0
    46f0:	e7e5      	b.n	46be <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    46f2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    46f4:	2b01      	cmp	r3, #1
    46f6:	d1f9      	bne.n	46ec <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    46f8:	000a      	movs	r2, r1
    46fa:	2300      	movs	r3, #0
    46fc:	2100      	movs	r1, #0
    46fe:	4c0d      	ldr	r4, [pc, #52]	; (4734 <_sercom_get_async_baud_val+0x8c>)
    4700:	47a0      	blx	r4
    4702:	0002      	movs	r2, r0
    4704:	000b      	movs	r3, r1
    4706:	9200      	str	r2, [sp, #0]
    4708:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    470a:	0038      	movs	r0, r7
    470c:	2100      	movs	r1, #0
    470e:	4c0a      	ldr	r4, [pc, #40]	; (4738 <_sercom_get_async_baud_val+0x90>)
    4710:	47a0      	blx	r4
    4712:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    4714:	2380      	movs	r3, #128	; 0x80
    4716:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4718:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    471a:	4298      	cmp	r0, r3
    471c:	d8cf      	bhi.n	46be <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    471e:	0f79      	lsrs	r1, r7, #29
    4720:	00f8      	lsls	r0, r7, #3
    4722:	9a00      	ldr	r2, [sp, #0]
    4724:	9b01      	ldr	r3, [sp, #4]
    4726:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    4728:	00ea      	lsls	r2, r5, #3
    472a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    472c:	b2d2      	uxtb	r2, r2
    472e:	0352      	lsls	r2, r2, #13
    4730:	432a      	orrs	r2, r5
    4732:	e7db      	b.n	46ec <_sercom_get_async_baud_val+0x44>
    4734:	0000e949 	.word	0x0000e949
    4738:	000045c5 	.word	0x000045c5

0000473c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    473c:	b510      	push	{r4, lr}
    473e:	b082      	sub	sp, #8
    4740:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4742:	4b0e      	ldr	r3, [pc, #56]	; (477c <sercom_set_gclk_generator+0x40>)
    4744:	781b      	ldrb	r3, [r3, #0]
    4746:	2b00      	cmp	r3, #0
    4748:	d007      	beq.n	475a <sercom_set_gclk_generator+0x1e>
    474a:	2900      	cmp	r1, #0
    474c:	d105      	bne.n	475a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    474e:	4b0b      	ldr	r3, [pc, #44]	; (477c <sercom_set_gclk_generator+0x40>)
    4750:	785b      	ldrb	r3, [r3, #1]
    4752:	4283      	cmp	r3, r0
    4754:	d010      	beq.n	4778 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4756:	201d      	movs	r0, #29
    4758:	e00c      	b.n	4774 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    475a:	a901      	add	r1, sp, #4
    475c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    475e:	2011      	movs	r0, #17
    4760:	4b07      	ldr	r3, [pc, #28]	; (4780 <sercom_set_gclk_generator+0x44>)
    4762:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4764:	2011      	movs	r0, #17
    4766:	4b07      	ldr	r3, [pc, #28]	; (4784 <sercom_set_gclk_generator+0x48>)
    4768:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    476a:	4b04      	ldr	r3, [pc, #16]	; (477c <sercom_set_gclk_generator+0x40>)
    476c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    476e:	2201      	movs	r2, #1
    4770:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4772:	2000      	movs	r0, #0
}
    4774:	b002      	add	sp, #8
    4776:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4778:	2000      	movs	r0, #0
    477a:	e7fb      	b.n	4774 <sercom_set_gclk_generator+0x38>
    477c:	20000bd8 	.word	0x20000bd8
    4780:	0000e17d 	.word	0x0000e17d
    4784:	0000e10d 	.word	0x0000e10d

00004788 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4788:	4b40      	ldr	r3, [pc, #256]	; (488c <_sercom_get_default_pad+0x104>)
    478a:	4298      	cmp	r0, r3
    478c:	d032      	beq.n	47f4 <_sercom_get_default_pad+0x6c>
    478e:	d90a      	bls.n	47a6 <_sercom_get_default_pad+0x1e>
    4790:	4b3f      	ldr	r3, [pc, #252]	; (4890 <_sercom_get_default_pad+0x108>)
    4792:	4298      	cmp	r0, r3
    4794:	d04e      	beq.n	4834 <_sercom_get_default_pad+0xac>
    4796:	4b3f      	ldr	r3, [pc, #252]	; (4894 <_sercom_get_default_pad+0x10c>)
    4798:	4298      	cmp	r0, r3
    479a:	d05b      	beq.n	4854 <_sercom_get_default_pad+0xcc>
    479c:	4b3e      	ldr	r3, [pc, #248]	; (4898 <_sercom_get_default_pad+0x110>)
    479e:	4298      	cmp	r0, r3
    47a0:	d038      	beq.n	4814 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    47a2:	2000      	movs	r0, #0
}
    47a4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    47a6:	2384      	movs	r3, #132	; 0x84
    47a8:	05db      	lsls	r3, r3, #23
    47aa:	4298      	cmp	r0, r3
    47ac:	d00c      	beq.n	47c8 <_sercom_get_default_pad+0x40>
    47ae:	4b3b      	ldr	r3, [pc, #236]	; (489c <_sercom_get_default_pad+0x114>)
    47b0:	4298      	cmp	r0, r3
    47b2:	d1f6      	bne.n	47a2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    47b4:	2901      	cmp	r1, #1
    47b6:	d017      	beq.n	47e8 <_sercom_get_default_pad+0x60>
    47b8:	2900      	cmp	r1, #0
    47ba:	d05d      	beq.n	4878 <_sercom_get_default_pad+0xf0>
    47bc:	2902      	cmp	r1, #2
    47be:	d015      	beq.n	47ec <_sercom_get_default_pad+0x64>
    47c0:	2903      	cmp	r1, #3
    47c2:	d015      	beq.n	47f0 <_sercom_get_default_pad+0x68>
	return 0;
    47c4:	2000      	movs	r0, #0
    47c6:	e7ed      	b.n	47a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    47c8:	2901      	cmp	r1, #1
    47ca:	d007      	beq.n	47dc <_sercom_get_default_pad+0x54>
    47cc:	2900      	cmp	r1, #0
    47ce:	d051      	beq.n	4874 <_sercom_get_default_pad+0xec>
    47d0:	2902      	cmp	r1, #2
    47d2:	d005      	beq.n	47e0 <_sercom_get_default_pad+0x58>
    47d4:	2903      	cmp	r1, #3
    47d6:	d005      	beq.n	47e4 <_sercom_get_default_pad+0x5c>
	return 0;
    47d8:	2000      	movs	r0, #0
    47da:	e7e3      	b.n	47a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    47dc:	4830      	ldr	r0, [pc, #192]	; (48a0 <_sercom_get_default_pad+0x118>)
    47de:	e7e1      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    47e0:	4830      	ldr	r0, [pc, #192]	; (48a4 <_sercom_get_default_pad+0x11c>)
    47e2:	e7df      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    47e4:	4830      	ldr	r0, [pc, #192]	; (48a8 <_sercom_get_default_pad+0x120>)
    47e6:	e7dd      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    47e8:	4830      	ldr	r0, [pc, #192]	; (48ac <_sercom_get_default_pad+0x124>)
    47ea:	e7db      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    47ec:	4830      	ldr	r0, [pc, #192]	; (48b0 <_sercom_get_default_pad+0x128>)
    47ee:	e7d9      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    47f0:	4830      	ldr	r0, [pc, #192]	; (48b4 <_sercom_get_default_pad+0x12c>)
    47f2:	e7d7      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    47f4:	2901      	cmp	r1, #1
    47f6:	d007      	beq.n	4808 <_sercom_get_default_pad+0x80>
    47f8:	2900      	cmp	r1, #0
    47fa:	d03f      	beq.n	487c <_sercom_get_default_pad+0xf4>
    47fc:	2902      	cmp	r1, #2
    47fe:	d005      	beq.n	480c <_sercom_get_default_pad+0x84>
    4800:	2903      	cmp	r1, #3
    4802:	d005      	beq.n	4810 <_sercom_get_default_pad+0x88>
	return 0;
    4804:	2000      	movs	r0, #0
    4806:	e7cd      	b.n	47a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4808:	482b      	ldr	r0, [pc, #172]	; (48b8 <_sercom_get_default_pad+0x130>)
    480a:	e7cb      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    480c:	482b      	ldr	r0, [pc, #172]	; (48bc <_sercom_get_default_pad+0x134>)
    480e:	e7c9      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    4810:	482b      	ldr	r0, [pc, #172]	; (48c0 <_sercom_get_default_pad+0x138>)
    4812:	e7c7      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    4814:	2901      	cmp	r1, #1
    4816:	d007      	beq.n	4828 <_sercom_get_default_pad+0xa0>
    4818:	2900      	cmp	r1, #0
    481a:	d031      	beq.n	4880 <_sercom_get_default_pad+0xf8>
    481c:	2902      	cmp	r1, #2
    481e:	d005      	beq.n	482c <_sercom_get_default_pad+0xa4>
    4820:	2903      	cmp	r1, #3
    4822:	d005      	beq.n	4830 <_sercom_get_default_pad+0xa8>
	return 0;
    4824:	2000      	movs	r0, #0
    4826:	e7bd      	b.n	47a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4828:	4826      	ldr	r0, [pc, #152]	; (48c4 <_sercom_get_default_pad+0x13c>)
    482a:	e7bb      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    482c:	4826      	ldr	r0, [pc, #152]	; (48c8 <_sercom_get_default_pad+0x140>)
    482e:	e7b9      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    4830:	4826      	ldr	r0, [pc, #152]	; (48cc <_sercom_get_default_pad+0x144>)
    4832:	e7b7      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    4834:	2901      	cmp	r1, #1
    4836:	d007      	beq.n	4848 <_sercom_get_default_pad+0xc0>
    4838:	2900      	cmp	r1, #0
    483a:	d023      	beq.n	4884 <_sercom_get_default_pad+0xfc>
    483c:	2902      	cmp	r1, #2
    483e:	d005      	beq.n	484c <_sercom_get_default_pad+0xc4>
    4840:	2903      	cmp	r1, #3
    4842:	d005      	beq.n	4850 <_sercom_get_default_pad+0xc8>
	return 0;
    4844:	2000      	movs	r0, #0
    4846:	e7ad      	b.n	47a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4848:	4821      	ldr	r0, [pc, #132]	; (48d0 <_sercom_get_default_pad+0x148>)
    484a:	e7ab      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    484c:	4821      	ldr	r0, [pc, #132]	; (48d4 <_sercom_get_default_pad+0x14c>)
    484e:	e7a9      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    4850:	4821      	ldr	r0, [pc, #132]	; (48d8 <_sercom_get_default_pad+0x150>)
    4852:	e7a7      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    4854:	2901      	cmp	r1, #1
    4856:	d007      	beq.n	4868 <_sercom_get_default_pad+0xe0>
    4858:	2900      	cmp	r1, #0
    485a:	d015      	beq.n	4888 <_sercom_get_default_pad+0x100>
    485c:	2902      	cmp	r1, #2
    485e:	d005      	beq.n	486c <_sercom_get_default_pad+0xe4>
    4860:	2903      	cmp	r1, #3
    4862:	d005      	beq.n	4870 <_sercom_get_default_pad+0xe8>
	return 0;
    4864:	2000      	movs	r0, #0
    4866:	e79d      	b.n	47a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4868:	481c      	ldr	r0, [pc, #112]	; (48dc <_sercom_get_default_pad+0x154>)
    486a:	e79b      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    486c:	481c      	ldr	r0, [pc, #112]	; (48e0 <_sercom_get_default_pad+0x158>)
    486e:	e799      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    4870:	481c      	ldr	r0, [pc, #112]	; (48e4 <_sercom_get_default_pad+0x15c>)
    4872:	e797      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    4874:	481c      	ldr	r0, [pc, #112]	; (48e8 <_sercom_get_default_pad+0x160>)
    4876:	e795      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    4878:	2003      	movs	r0, #3
    487a:	e793      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    487c:	481b      	ldr	r0, [pc, #108]	; (48ec <_sercom_get_default_pad+0x164>)
    487e:	e791      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    4880:	481b      	ldr	r0, [pc, #108]	; (48f0 <_sercom_get_default_pad+0x168>)
    4882:	e78f      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    4884:	481b      	ldr	r0, [pc, #108]	; (48f4 <_sercom_get_default_pad+0x16c>)
    4886:	e78d      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    4888:	481b      	ldr	r0, [pc, #108]	; (48f8 <_sercom_get_default_pad+0x170>)
    488a:	e78b      	b.n	47a4 <_sercom_get_default_pad+0x1c>
    488c:	42000800 	.word	0x42000800
    4890:	42001000 	.word	0x42001000
    4894:	43000400 	.word	0x43000400
    4898:	42000c00 	.word	0x42000c00
    489c:	42000400 	.word	0x42000400
    48a0:	00050003 	.word	0x00050003
    48a4:	00060003 	.word	0x00060003
    48a8:	00070003 	.word	0x00070003
    48ac:	00010003 	.word	0x00010003
    48b0:	001e0003 	.word	0x001e0003
    48b4:	001f0003 	.word	0x001f0003
    48b8:	00090003 	.word	0x00090003
    48bc:	000a0003 	.word	0x000a0003
    48c0:	000b0003 	.word	0x000b0003
    48c4:	00110003 	.word	0x00110003
    48c8:	00120003 	.word	0x00120003
    48cc:	00130003 	.word	0x00130003
    48d0:	000d0003 	.word	0x000d0003
    48d4:	000e0003 	.word	0x000e0003
    48d8:	000f0003 	.word	0x000f0003
    48dc:	00170003 	.word	0x00170003
    48e0:	00180003 	.word	0x00180003
    48e4:	00190003 	.word	0x00190003
    48e8:	00040003 	.word	0x00040003
    48ec:	00080003 	.word	0x00080003
    48f0:	00100003 	.word	0x00100003
    48f4:	000c0003 	.word	0x000c0003
    48f8:	00160003 	.word	0x00160003

000048fc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    48fc:	b530      	push	{r4, r5, lr}
    48fe:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4900:	4b0b      	ldr	r3, [pc, #44]	; (4930 <_sercom_get_sercom_inst_index+0x34>)
    4902:	466a      	mov	r2, sp
    4904:	cb32      	ldmia	r3!, {r1, r4, r5}
    4906:	c232      	stmia	r2!, {r1, r4, r5}
    4908:	cb32      	ldmia	r3!, {r1, r4, r5}
    490a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    490c:	9b00      	ldr	r3, [sp, #0]
    490e:	4283      	cmp	r3, r0
    4910:	d00b      	beq.n	492a <_sercom_get_sercom_inst_index+0x2e>
    4912:	2301      	movs	r3, #1
    4914:	009a      	lsls	r2, r3, #2
    4916:	4669      	mov	r1, sp
    4918:	5852      	ldr	r2, [r2, r1]
    491a:	4282      	cmp	r2, r0
    491c:	d006      	beq.n	492c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    491e:	3301      	adds	r3, #1
    4920:	2b06      	cmp	r3, #6
    4922:	d1f7      	bne.n	4914 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4924:	2000      	movs	r0, #0
}
    4926:	b007      	add	sp, #28
    4928:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    492a:	2300      	movs	r3, #0
			return i;
    492c:	b2d8      	uxtb	r0, r3
    492e:	e7fa      	b.n	4926 <_sercom_get_sercom_inst_index+0x2a>
    4930:	00014524 	.word	0x00014524

00004934 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    4934:	b5f0      	push	{r4, r5, r6, r7, lr}
    4936:	46c6      	mov	lr, r8
    4938:	b500      	push	{lr}
    493a:	000c      	movs	r4, r1
    493c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    493e:	2800      	cmp	r0, #0
    4940:	d10f      	bne.n	4962 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    4942:	2a00      	cmp	r2, #0
    4944:	dd11      	ble.n	496a <_read+0x36>
    4946:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    4948:	4e09      	ldr	r6, [pc, #36]	; (4970 <_read+0x3c>)
    494a:	4d0a      	ldr	r5, [pc, #40]	; (4974 <_read+0x40>)
    494c:	6830      	ldr	r0, [r6, #0]
    494e:	0021      	movs	r1, r4
    4950:	682b      	ldr	r3, [r5, #0]
    4952:	4798      	blx	r3
		ptr++;
    4954:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    4956:	42bc      	cmp	r4, r7
    4958:	d1f8      	bne.n	494c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    495a:	4640      	mov	r0, r8
    495c:	bc04      	pop	{r2}
    495e:	4690      	mov	r8, r2
    4960:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    4962:	2301      	movs	r3, #1
    4964:	425b      	negs	r3, r3
    4966:	4698      	mov	r8, r3
    4968:	e7f7      	b.n	495a <_read+0x26>
	for (; len > 0; --len) {
    496a:	4680      	mov	r8, r0
    496c:	e7f5      	b.n	495a <_read+0x26>
    496e:	46c0      	nop			; (mov r8, r8)
    4970:	20002b00 	.word	0x20002b00
    4974:	20002af8 	.word	0x20002af8

00004978 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    4978:	b5f0      	push	{r4, r5, r6, r7, lr}
    497a:	46c6      	mov	lr, r8
    497c:	b500      	push	{lr}
    497e:	000e      	movs	r6, r1
    4980:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    4982:	3801      	subs	r0, #1
    4984:	2802      	cmp	r0, #2
    4986:	d810      	bhi.n	49aa <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    4988:	2a00      	cmp	r2, #0
    498a:	d011      	beq.n	49b0 <_write+0x38>
    498c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    498e:	4b0c      	ldr	r3, [pc, #48]	; (49c0 <_write+0x48>)
    4990:	4698      	mov	r8, r3
    4992:	4f0c      	ldr	r7, [pc, #48]	; (49c4 <_write+0x4c>)
    4994:	4643      	mov	r3, r8
    4996:	6818      	ldr	r0, [r3, #0]
    4998:	5d31      	ldrb	r1, [r6, r4]
    499a:	683b      	ldr	r3, [r7, #0]
    499c:	4798      	blx	r3
    499e:	2800      	cmp	r0, #0
    49a0:	db08      	blt.n	49b4 <_write+0x3c>
			return -1;
		}
		++nChars;
    49a2:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    49a4:	42a5      	cmp	r5, r4
    49a6:	d1f5      	bne.n	4994 <_write+0x1c>
    49a8:	e006      	b.n	49b8 <_write+0x40>
		return -1;
    49aa:	2401      	movs	r4, #1
    49ac:	4264      	negs	r4, r4
    49ae:	e003      	b.n	49b8 <_write+0x40>
	for (; len != 0; --len) {
    49b0:	0014      	movs	r4, r2
    49b2:	e001      	b.n	49b8 <_write+0x40>
			return -1;
    49b4:	2401      	movs	r4, #1
    49b6:	4264      	negs	r4, r4
	}
	return nChars;
}
    49b8:	0020      	movs	r0, r4
    49ba:	bc04      	pop	{r2}
    49bc:	4690      	mov	r8, r2
    49be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49c0:	20002b00 	.word	0x20002b00
    49c4:	20002afc 	.word	0x20002afc

000049c8 <atca_kit_get_rx_buffer>:
 *  \return pointer to the current rx buffer index
 */
uint8_t* atca_kit_get_rx_buffer(void)
{
	return pucUsbRxBuffer;
}
    49c8:	4800      	ldr	r0, [pc, #0]	; (49cc <atca_kit_get_rx_buffer+0x4>)
    49ca:	4770      	bx	lr
    49cc:	20000be4 	.word	0x20000be4

000049d0 <atca_kit_lock>:
	return pucUsbTxBuffer;
}

bool atca_kit_lock(void)
{
    return atca_kit_holdoff;
    49d0:	4b02      	ldr	r3, [pc, #8]	; (49dc <atca_kit_lock+0xc>)
    49d2:	6818      	ldr	r0, [r3, #0]
    49d4:	1e43      	subs	r3, r0, #1
    49d6:	4198      	sbcs	r0, r3
    49d8:	b2c0      	uxtb	r0, r0
}
    49da:	4770      	bx	lr
    49dc:	20000bdc 	.word	0x20000bdc

000049e0 <atca_kit_timer_update>:
}

/* Must be called on the TIMER_UPDATE_PERIOD */
void atca_kit_timer_update(void)
{
    if(atca_kit_holdoff)
    49e0:	4b03      	ldr	r3, [pc, #12]	; (49f0 <atca_kit_timer_update+0x10>)
    49e2:	681b      	ldr	r3, [r3, #0]
    49e4:	2b00      	cmp	r3, #0
    49e6:	d002      	beq.n	49ee <atca_kit_timer_update+0xe>
    {
        atca_kit_holdoff--;
    49e8:	3b01      	subs	r3, #1
    49ea:	4a01      	ldr	r2, [pc, #4]	; (49f0 <atca_kit_timer_update+0x10>)
    49ec:	6013      	str	r3, [r2, #0]
    }
}
    49ee:	4770      	bx	lr
    49f0:	20000bdc 	.word	0x20000bdc

000049f4 <atca_kit_convert_nibble_to_ascii>:
 * \param[in] nibble nibble value to be converted
 * \return ASCII value
**/
uint8_t atca_kit_convert_nibble_to_ascii(uint8_t nibble)
{
    nibble &= 0x0F;
    49f4:	230f      	movs	r3, #15
    49f6:	4003      	ands	r3, r0
    if (nibble <= 0x09 )
        nibble += '0';
    else
        nibble += ('A' - 10);
    49f8:	0018      	movs	r0, r3
    49fa:	3037      	adds	r0, #55	; 0x37
    if (nibble <= 0x09 )
    49fc:	2b09      	cmp	r3, #9
    49fe:	d900      	bls.n	4a02 <atca_kit_convert_nibble_to_ascii+0xe>
    return nibble;
}
    4a00:	4770      	bx	lr
        nibble += '0';
    4a02:	3330      	adds	r3, #48	; 0x30
    4a04:	0018      	movs	r0, r3
    4a06:	e7fb      	b.n	4a00 <atca_kit_convert_nibble_to_ascii+0xc>

00004a08 <atca_kit_convert_ascii_to_nibble>:
/** \brief This function converts an ASCII character to a nibble.
 * \param[in] ascii ASCII value to be converted
 * \return nibble value
**/
uint8_t atca_kit_convert_ascii_to_nibble(uint8_t ascii)
{
    4a08:	0002      	movs	r2, r0
    if ((ascii <= '9') && (ascii >= '0'))
    4a0a:	3830      	subs	r0, #48	; 0x30
    4a0c:	b2c0      	uxtb	r0, r0
    4a0e:	2809      	cmp	r0, #9
    4a10:	d90d      	bls.n	4a2e <atca_kit_convert_ascii_to_nibble+0x26>
        ascii -= '0';
    else if ((ascii <= 'F' ) && (ascii >= 'A'))
    4a12:	0013      	movs	r3, r2
    4a14:	3b41      	subs	r3, #65	; 0x41
    4a16:	2b05      	cmp	r3, #5
    4a18:	d907      	bls.n	4a2a <atca_kit_convert_ascii_to_nibble+0x22>
        ascii -= ('A' - 10);
    else if ((ascii <= 'f') && (ascii >= 'a'))
        ascii -= ('a' - 10);
    else
        ascii = 0;
    4a1a:	2000      	movs	r0, #0
    else if ((ascii <= 'f') && (ascii >= 'a'))
    4a1c:	0013      	movs	r3, r2
    4a1e:	3b61      	subs	r3, #97	; 0x61
    4a20:	2b05      	cmp	r3, #5
    4a22:	d804      	bhi.n	4a2e <atca_kit_convert_ascii_to_nibble+0x26>
        ascii -= ('a' - 10);
    4a24:	3a57      	subs	r2, #87	; 0x57
    4a26:	b2d0      	uxtb	r0, r2
    4a28:	e001      	b.n	4a2e <atca_kit_convert_ascii_to_nibble+0x26>
        ascii -= ('A' - 10);
    4a2a:	3a37      	subs	r2, #55	; 0x37
    4a2c:	b2d0      	uxtb	r0, r2
    return ascii;
}
    4a2e:	4770      	bx	lr

00004a30 <atca_kit_convert_ascii_to_binary>:
 * \param[in] length number of bytes in buffer
 * \param[in, out] buffer pointer to buffer
 * \return number of bytes in buffer
 */
uint16_t atca_kit_convert_ascii_to_binary(uint16_t length, uint8_t *buffer)
{
    4a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a32:	46d6      	mov	lr, sl
    4a34:	464f      	mov	r7, r9
    4a36:	4646      	mov	r6, r8
    4a38:	b5c0      	push	{r6, r7, lr}
    4a3a:	4682      	mov	sl, r0
    4a3c:	000f      	movs	r7, r1
	if (length < 2)
		return 0;

	uint16_t i, binIndex;

	for (i = 0, binIndex = 0; i < length; i += 2)
    4a3e:	2801      	cmp	r0, #1
    4a40:	d91d      	bls.n	4a7e <atca_kit_convert_ascii_to_binary+0x4e>
    4a42:	2600      	movs	r6, #0
    4a44:	2500      	movs	r5, #0
	{
		buffer[binIndex] = atca_kit_convert_ascii_to_nibble(buffer[i]) << 4;
    4a46:	4b0f      	ldr	r3, [pc, #60]	; (4a84 <atca_kit_convert_ascii_to_binary+0x54>)
    4a48:	4699      	mov	r9, r3
    4a4a:	19bb      	adds	r3, r7, r6
    4a4c:	4698      	mov	r8, r3
    4a4e:	5d78      	ldrb	r0, [r7, r5]
    4a50:	47c8      	blx	r9
    4a52:	0100      	lsls	r0, r0, #4
    4a54:	b2c4      	uxtb	r4, r0
    4a56:	4643      	mov	r3, r8
    4a58:	701c      	strb	r4, [r3, #0]
		buffer[binIndex++] |= atca_kit_convert_ascii_to_nibble(buffer[i + 1]);
    4a5a:	197b      	adds	r3, r7, r5
    4a5c:	7858      	ldrb	r0, [r3, #1]
    4a5e:	47c8      	blx	r9
    4a60:	3601      	adds	r6, #1
    4a62:	b2b6      	uxth	r6, r6
    4a64:	4304      	orrs	r4, r0
    4a66:	4643      	mov	r3, r8
    4a68:	701c      	strb	r4, [r3, #0]
	for (i = 0, binIndex = 0; i < length; i += 2)
    4a6a:	3502      	adds	r5, #2
    4a6c:	b2ad      	uxth	r5, r5
    4a6e:	45aa      	cmp	sl, r5
    4a70:	d8eb      	bhi.n	4a4a <atca_kit_convert_ascii_to_binary+0x1a>
	}

	return binIndex;
}
    4a72:	0030      	movs	r0, r6
    4a74:	bc1c      	pop	{r2, r3, r4}
    4a76:	4690      	mov	r8, r2
    4a78:	4699      	mov	r9, r3
    4a7a:	46a2      	mov	sl, r4
    4a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0, binIndex = 0; i < length; i += 2)
    4a7e:	2600      	movs	r6, #0
    4a80:	e7f7      	b.n	4a72 <atca_kit_convert_ascii_to_binary+0x42>
    4a82:	46c0      	nop			; (mov r8, r8)
    4a84:	00004a09 	.word	0x00004a09

00004a88 <atca_kit_detect_I2c_devices>:
		return DEVICE_TYPE_UNKNOWN;
	return device_info[index].device_type;
}

ATCA_STATUS atca_kit_detect_I2c_devices()
{
    4a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a8a:	b083      	sub	sp, #12
	ATCA_STATUS status = ATCA_NO_DEVICES;
	uint8_t revision[4];
	uint8_t i;

	status = atcab_init( &cfg_ateccx08a_i2c_default );
    4a8c:	482f      	ldr	r0, [pc, #188]	; (4b4c <atca_kit_detect_I2c_devices+0xc4>)
    4a8e:	4b30      	ldr	r3, [pc, #192]	; (4b50 <atca_kit_detect_I2c_devices+0xc8>)
    4a90:	4798      	blx	r3
    4a92:	1e05      	subs	r5, r0, #0
	if (status != ATCA_SUCCESS)
    4a94:	d002      	beq.n	4a9c <atca_kit_detect_I2c_devices+0x14>
	memcpy(device_info[device_count].dev_rev, revision, sizeof(revision));

	device_count++;
	
	return status;
}
    4a96:	0028      	movs	r0, r5
    4a98:	b003      	add	sp, #12
    4a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = atcab_info(revision);
    4a9c:	a801      	add	r0, sp, #4
    4a9e:	4b2d      	ldr	r3, [pc, #180]	; (4b54 <atca_kit_detect_I2c_devices+0xcc>)
    4aa0:	4798      	blx	r3
	for (i=0xB0; i<0xC8 && status; i+=2)
    4aa2:	2800      	cmp	r0, #0
    4aa4:	d015      	beq.n	4ad2 <atca_kit_detect_I2c_devices+0x4a>
		cfg_ateccx08a_i2c_default.atcai2c.slave_address = i;
    4aa6:	22b0      	movs	r2, #176	; 0xb0
    4aa8:	4b28      	ldr	r3, [pc, #160]	; (4b4c <atca_kit_detect_I2c_devices+0xc4>)
    4aaa:	711a      	strb	r2, [r3, #4]
		status = atcab_info(revision);
    4aac:	a801      	add	r0, sp, #4
    4aae:	4b29      	ldr	r3, [pc, #164]	; (4b54 <atca_kit_detect_I2c_devices+0xcc>)
    4ab0:	4798      	blx	r3
	for (i=0xB0; i<0xC8 && status; i+=2)
    4ab2:	24b2      	movs	r4, #178	; 0xb2
		cfg_ateccx08a_i2c_default.atcai2c.slave_address = i;
    4ab4:	4f25      	ldr	r7, [pc, #148]	; (4b4c <atca_kit_detect_I2c_devices+0xc4>)
		status = atcab_info(revision);
    4ab6:	4e27      	ldr	r6, [pc, #156]	; (4b54 <atca_kit_detect_I2c_devices+0xcc>)
	for (i=0xB0; i<0xC8 && status; i+=2)
    4ab8:	2800      	cmp	r0, #0
    4aba:	d00a      	beq.n	4ad2 <atca_kit_detect_I2c_devices+0x4a>
		cfg_ateccx08a_i2c_default.atcai2c.slave_address = i;
    4abc:	713c      	strb	r4, [r7, #4]
		status = atcab_info(revision);
    4abe:	a801      	add	r0, sp, #4
    4ac0:	47b0      	blx	r6
	for (i=0xB0; i<0xC8 && status; i+=2)
    4ac2:	3402      	adds	r4, #2
    4ac4:	b2e4      	uxtb	r4, r4
    4ac6:	2cc8      	cmp	r4, #200	; 0xc8
    4ac8:	d1f6      	bne.n	4ab8 <atca_kit_detect_I2c_devices+0x30>
	if (status != ATCA_SUCCESS)
    4aca:	2800      	cmp	r0, #0
    4acc:	d001      	beq.n	4ad2 <atca_kit_detect_I2c_devices+0x4a>
		status = atcab_info(revision);
    4ace:	0005      	movs	r5, r0
    4ad0:	e7e1      	b.n	4a96 <atca_kit_detect_I2c_devices+0xe>
	device_info[device_count].address = cfg_ateccx08a_i2c_default.atcai2c.slave_address;
    4ad2:	4b21      	ldr	r3, [pc, #132]	; (4b58 <atca_kit_detect_I2c_devices+0xd0>)
    4ad4:	781b      	ldrb	r3, [r3, #0]
    4ad6:	4a21      	ldr	r2, [pc, #132]	; (4b5c <atca_kit_detect_I2c_devices+0xd4>)
    4ad8:	00d9      	lsls	r1, r3, #3
    4ada:	1850      	adds	r0, r2, r1
    4adc:	4c1b      	ldr	r4, [pc, #108]	; (4b4c <atca_kit_detect_I2c_devices+0xc4>)
    4ade:	7924      	ldrb	r4, [r4, #4]
    4ae0:	7084      	strb	r4, [r0, #2]
	device_info[device_count].bus_type = DEVKIT_IF_I2C;
    4ae2:	2002      	movs	r0, #2
    4ae4:	5488      	strb	r0, [r1, r2]
	switch(revision[2])
    4ae6:	aa01      	add	r2, sp, #4
    4ae8:	7892      	ldrb	r2, [r2, #2]
    4aea:	2a50      	cmp	r2, #80	; 0x50
    4aec:	d00a      	beq.n	4b04 <atca_kit_detect_I2c_devices+0x7c>
    4aee:	2a60      	cmp	r2, #96	; 0x60
    4af0:	d01d      	beq.n	4b2e <atca_kit_detect_I2c_devices+0xa6>
			device_info[device_count].device_type = DEVICE_TYPE_ECC108A;
    4af2:	00db      	lsls	r3, r3, #3
    4af4:	4a19      	ldr	r2, [pc, #100]	; (4b5c <atca_kit_detect_I2c_devices+0xd4>)
    4af6:	18d3      	adds	r3, r2, r3
    4af8:	220a      	movs	r2, #10
    4afa:	705a      	strb	r2, [r3, #1]
			cfg_ateccx08a_i2c_default.devtype = ATECC108A;
    4afc:	3a09      	subs	r2, #9
    4afe:	4b13      	ldr	r3, [pc, #76]	; (4b4c <atca_kit_detect_I2c_devices+0xc4>)
    4b00:	705a      	strb	r2, [r3, #1]
			break;
    4b02:	e007      	b.n	4b14 <atca_kit_detect_I2c_devices+0x8c>
			device_info[device_count].device_type = DEVICE_TYPE_ECC508A;
    4b04:	00db      	lsls	r3, r3, #3
    4b06:	4a15      	ldr	r2, [pc, #84]	; (4b5c <atca_kit_detect_I2c_devices+0xd4>)
    4b08:	18d3      	adds	r3, r2, r3
    4b0a:	220b      	movs	r2, #11
    4b0c:	705a      	strb	r2, [r3, #1]
			cfg_ateccx08a_i2c_default.devtype = ATECC508A;
    4b0e:	3a09      	subs	r2, #9
    4b10:	4b0e      	ldr	r3, [pc, #56]	; (4b4c <atca_kit_detect_I2c_devices+0xc4>)
    4b12:	705a      	strb	r2, [r3, #1]
	memcpy(device_info[device_count].dev_rev, revision, sizeof(revision));
    4b14:	4e10      	ldr	r6, [pc, #64]	; (4b58 <atca_kit_detect_I2c_devices+0xd0>)
    4b16:	7834      	ldrb	r4, [r6, #0]
    4b18:	00e3      	lsls	r3, r4, #3
    4b1a:	4810      	ldr	r0, [pc, #64]	; (4b5c <atca_kit_detect_I2c_devices+0xd4>)
    4b1c:	18c0      	adds	r0, r0, r3
    4b1e:	3004      	adds	r0, #4
    4b20:	2204      	movs	r2, #4
    4b22:	a901      	add	r1, sp, #4
    4b24:	4b0e      	ldr	r3, [pc, #56]	; (4b60 <atca_kit_detect_I2c_devices+0xd8>)
    4b26:	4798      	blx	r3
	device_count++;
    4b28:	3401      	adds	r4, #1
    4b2a:	7034      	strb	r4, [r6, #0]
	return status;
    4b2c:	e7b3      	b.n	4a96 <atca_kit_detect_I2c_devices+0xe>
			device_info[device_count].device_type = DEVICE_TYPE_ECC608A;
    4b2e:	00db      	lsls	r3, r3, #3
    4b30:	4a0a      	ldr	r2, [pc, #40]	; (4b5c <atca_kit_detect_I2c_devices+0xd4>)
    4b32:	18d3      	adds	r3, r2, r3
    4b34:	220c      	movs	r2, #12
    4b36:	705a      	strb	r2, [r3, #1]
			cfg_ateccx08a_i2c_default.devtype = ATECC608A;
    4b38:	4804      	ldr	r0, [pc, #16]	; (4b4c <atca_kit_detect_I2c_devices+0xc4>)
    4b3a:	2303      	movs	r3, #3
    4b3c:	7043      	strb	r3, [r0, #1]
			status = atcab_init( &cfg_ateccx08a_i2c_default );
    4b3e:	4b04      	ldr	r3, [pc, #16]	; (4b50 <atca_kit_detect_I2c_devices+0xc8>)
    4b40:	4798      	blx	r3
			if (status != ATCA_SUCCESS)
    4b42:	2800      	cmp	r0, #0
    4b44:	d0e6      	beq.n	4b14 <atca_kit_detect_I2c_devices+0x8c>
				return status;
    4b46:	0005      	movs	r5, r0
    4b48:	e7a5      	b.n	4a96 <atca_kit_detect_I2c_devices+0xe>
    4b4a:	46c0      	nop			; (mov r8, r8)
    4b4c:	20000284 	.word	0x20000284
    4b50:	00003565 	.word	0x00003565
    4b54:	000061e5 	.word	0x000061e5
    4b58:	20000be0 	.word	0x20000be0
    4b5c:	20002b04 	.word	0x20002b04
    4b60:	000109c9 	.word	0x000109c9

00004b64 <atca_kit_discover_devices>:
 *         SWI, I2C, and SPI. They in turn enter found
 *         devices into the #device_info array.
 * \return interface found
 */
interface_id_t atca_kit_discover_devices()
{
    4b64:	b510      	push	{r4, lr}
	ATCA_STATUS status = ATCA_NO_DEVICES;
	interface_id_t bus_type;

	device_count = 0;
    4b66:	4c0a      	ldr	r4, [pc, #40]	; (4b90 <atca_kit_discover_devices+0x2c>)
    4b68:	2300      	movs	r3, #0
    4b6a:	7023      	strb	r3, [r4, #0]
	memset(device_info, 0, sizeof(device_info));
    4b6c:	2208      	movs	r2, #8
    4b6e:	2100      	movs	r1, #0
    4b70:	4808      	ldr	r0, [pc, #32]	; (4b94 <atca_kit_discover_devices+0x30>)
    4b72:	4b09      	ldr	r3, [pc, #36]	; (4b98 <atca_kit_discover_devices+0x34>)
    4b74:	4798      	blx	r3

	status = atca_kit_detect_I2c_devices();
    4b76:	4b09      	ldr	r3, [pc, #36]	; (4b9c <atca_kit_discover_devices+0x38>)
    4b78:	4798      	blx	r3
    4b7a:	0003      	movs	r3, r0

	if (device_count == 0 || status != ATCA_SUCCESS)
    4b7c:	7822      	ldrb	r2, [r4, #0]
		return DEVKIT_IF_UNKNOWN;
    4b7e:	2000      	movs	r0, #0
	if (device_count == 0 || status != ATCA_SUCCESS)
    4b80:	2a00      	cmp	r2, #0
    4b82:	d003      	beq.n	4b8c <atca_kit_discover_devices+0x28>
    4b84:	2b00      	cmp	r3, #0
    4b86:	d101      	bne.n	4b8c <atca_kit_discover_devices+0x28>

	bus_type = device_info[0].bus_type;
    4b88:	4b02      	ldr	r3, [pc, #8]	; (4b94 <atca_kit_discover_devices+0x30>)
    4b8a:	7818      	ldrb	r0, [r3, #0]

	return bus_type;
}
    4b8c:	bd10      	pop	{r4, pc}
    4b8e:	46c0      	nop			; (mov r8, r8)
    4b90:	20000be0 	.word	0x20000be0
    4b94:	20002b04 	.word	0x20002b04
    4b98:	000109ff 	.word	0x000109ff
    4b9c:	00004a89 	.word	0x00004a89

00004ba0 <atca_kit_get_commands_info>:
 * \param[out] cmd_index is index corresponding to opcode
 * \param[out] rx_length is length of response to be came to device
 * \return ATCA_SUCCESS
 */
uint8_t atca_kit_get_commands_info(uint8_t *tx_buffer, uint8_t *cmd_index, uint16_t *rx_length)
{
    4ba0:	b510      	push	{r4, lr}
	uint8_t status = ATCA_SUCCESS;
	uint8_t opCode = tx_buffer[1];
	uint8_t param1 = tx_buffer[2];
    4ba2:	7884      	ldrb	r4, [r0, #2]
	
	switch (opCode) {
    4ba4:	7843      	ldrb	r3, [r0, #1]
    4ba6:	2b47      	cmp	r3, #71	; 0x47
    4ba8:	d807      	bhi.n	4bba <atca_kit_get_commands_info+0x1a>
    4baa:	009b      	lsls	r3, r3, #2
    4bac:	483c      	ldr	r0, [pc, #240]	; (4ca0 <atca_kit_get_commands_info+0x100>)
    4bae:	58c3      	ldr	r3, [r0, r3]
    4bb0:	469f      	mov	pc, r3
		
		case ATCA_CHECKMAC:
			*cmd_index = CMD_CHECKMAC;
    4bb2:	2301      	movs	r3, #1
    4bb4:	700b      	strb	r3, [r1, #0]
			*rx_length = CHECKMAC_RSP_SIZE;
    4bb6:	3303      	adds	r3, #3
    4bb8:	8013      	strh	r3, [r2, #0]
			break;
		
	}

	return status;
}
    4bba:	2000      	movs	r0, #0
    4bbc:	bd10      	pop	{r4, pc}
			*cmd_index = CMD_COUNTER;
    4bbe:	2302      	movs	r3, #2
    4bc0:	700b      	strb	r3, [r1, #0]
			*rx_length = COUNTER_RSP_SIZE;
    4bc2:	3305      	adds	r3, #5
    4bc4:	8013      	strh	r3, [r2, #0]
			break;
    4bc6:	e7f8      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*cmd_index = CMD_DERIVEKEY;
    4bc8:	2303      	movs	r3, #3
    4bca:	700b      	strb	r3, [r1, #0]
			*rx_length = DERIVE_KEY_RSP_SIZE;
    4bcc:	3301      	adds	r3, #1
    4bce:	8013      	strh	r3, [r2, #0]
			break;
    4bd0:	e7f3      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*cmd_index = CMD_ECDH;
    4bd2:	2304      	movs	r3, #4
    4bd4:	700b      	strb	r3, [r1, #0]
			*rx_length = ECDH_RSP_SIZE;
    4bd6:	333f      	adds	r3, #63	; 0x3f
    4bd8:	8013      	strh	r3, [r2, #0]
			break;
    4bda:	e7ee      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*cmd_index = CMD_GENDIG;
    4bdc:	2305      	movs	r3, #5
    4bde:	700b      	strb	r3, [r1, #0]
			*rx_length = GENDIG_RSP_SIZE;
    4be0:	3b01      	subs	r3, #1
    4be2:	8013      	strh	r3, [r2, #0]
			break;
    4be4:	e7e9      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*cmd_index = CMD_GENKEY;
    4be6:	2306      	movs	r3, #6
    4be8:	700b      	strb	r3, [r1, #0]
			*rx_length = (param1 == GENKEY_MODE_DIGEST)	? GENKEY_RSP_SIZE_SHORT : GENKEY_RSP_SIZE_LONG;
    4bea:	2c08      	cmp	r4, #8
    4bec:	d002      	beq.n	4bf4 <atca_kit_get_commands_info+0x54>
    4bee:	3345      	adds	r3, #69	; 0x45
    4bf0:	8013      	strh	r3, [r2, #0]
			break;
    4bf2:	e7e2      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*rx_length = (param1 == GENKEY_MODE_DIGEST)	? GENKEY_RSP_SIZE_SHORT : GENKEY_RSP_SIZE_LONG;
    4bf4:	2304      	movs	r3, #4
    4bf6:	e7fb      	b.n	4bf0 <atca_kit_get_commands_info+0x50>
			*cmd_index = CMD_HMAC;
    4bf8:	2307      	movs	r3, #7
    4bfa:	700b      	strb	r3, [r1, #0]
			*rx_length = HMAC_RSP_SIZE;
    4bfc:	331c      	adds	r3, #28
    4bfe:	8013      	strh	r3, [r2, #0]
			break;
    4c00:	e7db      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*cmd_index = CMD_INFO;
    4c02:	2308      	movs	r3, #8
    4c04:	700b      	strb	r3, [r1, #0]
			*rx_length = INFO_RSP_SIZE;
    4c06:	3b01      	subs	r3, #1
    4c08:	8013      	strh	r3, [r2, #0]
			break;
    4c0a:	e7d6      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*cmd_index = CMD_LOCK;
    4c0c:	2309      	movs	r3, #9
    4c0e:	700b      	strb	r3, [r1, #0]
			*rx_length = LOCK_RSP_SIZE;
    4c10:	3b05      	subs	r3, #5
    4c12:	8013      	strh	r3, [r2, #0]
			break;
    4c14:	e7d1      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*cmd_index = CMD_MAC;
    4c16:	230a      	movs	r3, #10
    4c18:	700b      	strb	r3, [r1, #0]
			*rx_length = MAC_RSP_SIZE;
    4c1a:	3319      	adds	r3, #25
    4c1c:	8013      	strh	r3, [r2, #0]
			break;
    4c1e:	e7cc      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*cmd_index = CMD_NONCE;
    4c20:	230b      	movs	r3, #11
    4c22:	700b      	strb	r3, [r1, #0]
			*rx_length = (param1 == NONCE_MODE_PASSTHROUGH)	? NONCE_RSP_SIZE_SHORT : NONCE_RSP_SIZE_LONG;
    4c24:	2c03      	cmp	r4, #3
    4c26:	d002      	beq.n	4c2e <atca_kit_get_commands_info+0x8e>
    4c28:	3318      	adds	r3, #24
    4c2a:	8013      	strh	r3, [r2, #0]
			break;
    4c2c:	e7c5      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*rx_length = (param1 == NONCE_MODE_PASSTHROUGH)	? NONCE_RSP_SIZE_SHORT : NONCE_RSP_SIZE_LONG;
    4c2e:	2304      	movs	r3, #4
    4c30:	e7fb      	b.n	4c2a <atca_kit_get_commands_info+0x8a>
			*cmd_index = CMD_PAUSE;
    4c32:	230c      	movs	r3, #12
    4c34:	700b      	strb	r3, [r1, #0]
			*rx_length = PAUSE_RSP_SIZE;
    4c36:	3b08      	subs	r3, #8
    4c38:	8013      	strh	r3, [r2, #0]
			break;
    4c3a:	e7be      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*cmd_index = CMD_PRIVWRITE;
    4c3c:	230d      	movs	r3, #13
    4c3e:	700b      	strb	r3, [r1, #0]
			*rx_length = PRIVWRITE_RSP_SIZE;
    4c40:	3b09      	subs	r3, #9
    4c42:	8013      	strh	r3, [r2, #0]
			break;
    4c44:	e7b9      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*cmd_index = CMD_RANDOM;
    4c46:	230e      	movs	r3, #14
    4c48:	700b      	strb	r3, [r1, #0]
			*rx_length = RANDOM_RSP_SIZE;
    4c4a:	3315      	adds	r3, #21
    4c4c:	8013      	strh	r3, [r2, #0]
			break;
    4c4e:	e7b4      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*cmd_index = CMD_READMEM;
    4c50:	230f      	movs	r3, #15
    4c52:	700b      	strb	r3, [r1, #0]
			*rx_length = (param1 & 0x80)	? READ_32_RSP_SIZE : READ_4_RSP_SIZE;
    4c54:	b264      	sxtb	r4, r4
    4c56:	2c00      	cmp	r4, #0
    4c58:	db02      	blt.n	4c60 <atca_kit_get_commands_info+0xc0>
    4c5a:	3b08      	subs	r3, #8
    4c5c:	8013      	strh	r3, [r2, #0]
			break;
    4c5e:	e7ac      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*rx_length = (param1 & 0x80)	? READ_32_RSP_SIZE : READ_4_RSP_SIZE;
    4c60:	2323      	movs	r3, #35	; 0x23
    4c62:	e7fb      	b.n	4c5c <atca_kit_get_commands_info+0xbc>
			*cmd_index = CMD_SHA;
    4c64:	2310      	movs	r3, #16
    4c66:	700b      	strb	r3, [r1, #0]
			*rx_length = (param1 == SHA_MODE_SHA256_END) ? ATCA_RSP_SIZE_32 : ATCA_RSP_SIZE_4;
    4c68:	2c02      	cmp	r4, #2
    4c6a:	d002      	beq.n	4c72 <atca_kit_get_commands_info+0xd2>
    4c6c:	3b09      	subs	r3, #9
    4c6e:	8013      	strh	r3, [r2, #0]
			break;
    4c70:	e7a3      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*rx_length = (param1 == SHA_MODE_SHA256_END) ? ATCA_RSP_SIZE_32 : ATCA_RSP_SIZE_4;
    4c72:	2323      	movs	r3, #35	; 0x23
    4c74:	e7fb      	b.n	4c6e <atca_kit_get_commands_info+0xce>
			*cmd_index = CMD_SIGN;
    4c76:	2311      	movs	r3, #17
    4c78:	700b      	strb	r3, [r1, #0]
			*rx_length = SIGN_RSP_SIZE;
    4c7a:	333a      	adds	r3, #58	; 0x3a
    4c7c:	8013      	strh	r3, [r2, #0]
			break;
    4c7e:	e79c      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*cmd_index = CMD_UPDATEEXTRA;
    4c80:	2312      	movs	r3, #18
    4c82:	700b      	strb	r3, [r1, #0]
			*rx_length = UPDATE_RSP_SIZE;
    4c84:	3b0e      	subs	r3, #14
    4c86:	8013      	strh	r3, [r2, #0]
			break;
    4c88:	e797      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*cmd_index = CMD_VERIFY;
    4c8a:	2313      	movs	r3, #19
    4c8c:	700b      	strb	r3, [r1, #0]
			*rx_length = VERIFY_RSP_SIZE;
    4c8e:	3b0f      	subs	r3, #15
    4c90:	8013      	strh	r3, [r2, #0]
			break;
    4c92:	e792      	b.n	4bba <atca_kit_get_commands_info+0x1a>
			*cmd_index = CMD_WRITEMEM;
    4c94:	2314      	movs	r3, #20
    4c96:	700b      	strb	r3, [r1, #0]
			*rx_length = WRITE_RSP_SIZE;
    4c98:	3b10      	subs	r3, #16
    4c9a:	8013      	strh	r3, [r2, #0]
			break;
    4c9c:	e78d      	b.n	4bba <atca_kit_get_commands_info+0x1a>
    4c9e:	46c0      	nop			; (mov r8, r8)
    4ca0:	0001453c 	.word	0x0001453c

00004ca4 <atca_kit_send_and_receive>:
 * \param[in] tx_buffer is buffer to be sent
 * \param[in] rx_buffer is buffer to be received
 * \return ATCA_STATUS
 */
uint8_t atca_kit_send_and_receive(uint8_t *tx_buffer, uint8_t *rx_buffer)
{
    4ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ca6:	b085      	sub	sp, #20
    4ca8:	0005      	movs	r5, r0
    4caa:	000e      	movs	r6, r1
	ATCACommand _CommandObj = NULL;
	ATCAIface   _Iface = NULL;

	do {

		if ( tx_buffer == NULL || rx_buffer == NULL )
    4cac:	2800      	cmp	r0, #0
    4cae:	d043      	beq.n	4d38 <atca_kit_send_and_receive+0x94>
    4cb0:	2900      	cmp	r1, #0
    4cb2:	d043      	beq.n	4d3c <atca_kit_send_and_receive+0x98>
			break;

		if ( atca_kit_get_commands_info( tx_buffer, &cmd_index, &rx_length ) != ATCA_SUCCESS )
    4cb4:	aa03      	add	r2, sp, #12
    4cb6:	ab02      	add	r3, sp, #8
    4cb8:	1dd9      	adds	r1, r3, #7
    4cba:	4b21      	ldr	r3, [pc, #132]	; (4d40 <atca_kit_send_and_receive+0x9c>)
    4cbc:	4798      	blx	r3
	uint8_t status = ATCA_SUCCESS;
    4cbe:	2400      	movs	r4, #0
		if ( atca_kit_get_commands_info( tx_buffer, &cmd_index, &rx_length ) != ATCA_SUCCESS )
    4cc0:	2800      	cmp	r0, #0
    4cc2:	d002      	beq.n	4cca <atca_kit_send_and_receive+0x26>

	} while(0);
	
	return status;
	
}
    4cc4:	0020      	movs	r0, r4
    4cc6:	b005      	add	sp, #20
    4cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cmd_buffer = (uint8_t *)malloc(tx_buffer[0] + 1);
    4cca:	782c      	ldrb	r4, [r5, #0]
    4ccc:	1c60      	adds	r0, r4, #1
    4cce:	4b1d      	ldr	r3, [pc, #116]	; (4d44 <atca_kit_send_and_receive+0xa0>)
    4cd0:	4798      	blx	r3
    4cd2:	0007      	movs	r7, r0
		memcpy(&cmd_buffer[1], tx_buffer, tx_buffer[0]);
    4cd4:	3001      	adds	r0, #1
    4cd6:	0022      	movs	r2, r4
    4cd8:	0029      	movs	r1, r5
    4cda:	4b1b      	ldr	r3, [pc, #108]	; (4d48 <atca_kit_send_and_receive+0xa4>)
    4cdc:	4798      	blx	r3
		_Device= atcab_get_device();
    4cde:	4b1b      	ldr	r3, [pc, #108]	; (4d4c <atca_kit_send_and_receive+0xa8>)
    4ce0:	4798      	blx	r3
		_CommandObj = atGetCommands(_gDevice);
    4ce2:	4b1b      	ldr	r3, [pc, #108]	; (4d50 <atca_kit_send_and_receive+0xac>)
    4ce4:	6818      	ldr	r0, [r3, #0]
    4ce6:	4b1b      	ldr	r3, [pc, #108]	; (4d54 <atca_kit_send_and_receive+0xb0>)
    4ce8:	4798      	blx	r3
    4cea:	0001      	movs	r1, r0
    4cec:	9000      	str	r0, [sp, #0]
        if ((status = atGetExecTime(tx_buffer[1], _CommandObj)) != ATCA_SUCCESS)
    4cee:	7868      	ldrb	r0, [r5, #1]
    4cf0:	4b19      	ldr	r3, [pc, #100]	; (4d58 <atca_kit_send_and_receive+0xb4>)
    4cf2:	4798      	blx	r3
    4cf4:	1e04      	subs	r4, r0, #0
    4cf6:	d1e5      	bne.n	4cc4 <atca_kit_send_and_receive+0x20>
		if ( (status = atcab_wakeup()) != ATCA_SUCCESS )
    4cf8:	4b18      	ldr	r3, [pc, #96]	; (4d5c <atca_kit_send_and_receive+0xb8>)
    4cfa:	4798      	blx	r3
    4cfc:	1e04      	subs	r4, r0, #0
    4cfe:	d1e1      	bne.n	4cc4 <atca_kit_send_and_receive+0x20>
		_Device= atcab_get_device();
    4d00:	4b12      	ldr	r3, [pc, #72]	; (4d4c <atca_kit_send_and_receive+0xa8>)
    4d02:	4798      	blx	r3
		_Iface = atGetIFace(_Device);
    4d04:	4b16      	ldr	r3, [pc, #88]	; (4d60 <atca_kit_send_and_receive+0xbc>)
    4d06:	4798      	blx	r3
    4d08:	9001      	str	r0, [sp, #4]
		if ((status = atsend( _Iface, (uint8_t *)cmd_buffer, tx_buffer[0])) != ATCA_SUCCESS )
    4d0a:	782a      	ldrb	r2, [r5, #0]
    4d0c:	0039      	movs	r1, r7
    4d0e:	4b15      	ldr	r3, [pc, #84]	; (4d64 <atca_kit_send_and_receive+0xc0>)
    4d10:	4798      	blx	r3
    4d12:	1e04      	subs	r4, r0, #0
    4d14:	d1d6      	bne.n	4cc4 <atca_kit_send_and_receive+0x20>
		atca_delay_ms(_CommandObj->execution_time_msec);
    4d16:	9b00      	ldr	r3, [sp, #0]
    4d18:	8858      	ldrh	r0, [r3, #2]
    4d1a:	4b13      	ldr	r3, [pc, #76]	; (4d68 <atca_kit_send_and_receive+0xc4>)
    4d1c:	4798      	blx	r3
		if ((status = atreceive( _Iface, rx_buffer, &rx_length)) != ATCA_SUCCESS )
    4d1e:	aa03      	add	r2, sp, #12
    4d20:	0031      	movs	r1, r6
    4d22:	9801      	ldr	r0, [sp, #4]
    4d24:	4b11      	ldr	r3, [pc, #68]	; (4d6c <atca_kit_send_and_receive+0xc8>)
    4d26:	4798      	blx	r3
    4d28:	1e04      	subs	r4, r0, #0
    4d2a:	d1cb      	bne.n	4cc4 <atca_kit_send_and_receive+0x20>
		atcab_idle();
    4d2c:	4b10      	ldr	r3, [pc, #64]	; (4d70 <atca_kit_send_and_receive+0xcc>)
    4d2e:	4798      	blx	r3
		free((void *)cmd_buffer);
    4d30:	0038      	movs	r0, r7
    4d32:	4b10      	ldr	r3, [pc, #64]	; (4d74 <atca_kit_send_and_receive+0xd0>)
    4d34:	4798      	blx	r3
    4d36:	e7c5      	b.n	4cc4 <atca_kit_send_and_receive+0x20>
	uint8_t status = ATCA_SUCCESS;
    4d38:	2400      	movs	r4, #0
    4d3a:	e7c3      	b.n	4cc4 <atca_kit_send_and_receive+0x20>
    4d3c:	2400      	movs	r4, #0
    4d3e:	e7c1      	b.n	4cc4 <atca_kit_send_and_receive+0x20>
    4d40:	00004ba1 	.word	0x00004ba1
    4d44:	00010949 	.word	0x00010949
    4d48:	000109c9 	.word	0x000109c9
    4d4c:	000035dd 	.word	0x000035dd
    4d50:	200005d0 	.word	0x200005d0
    4d54:	00005fc9 	.word	0x00005fc9
    4d58:	00005ca5 	.word	0x00005ca5
    4d5c:	000035e9 	.word	0x000035e9
    4d60:	00005fcd 	.word	0x00005fcd
    4d64:	00006001 	.word	0x00006001
    4d68:	00006e95 	.word	0x00006e95
    4d6c:	00006009 	.word	0x00006009
    4d70:	00003605 	.word	0x00003605
    4d74:	0001095d 	.word	0x0001095d

00004d78 <atca_kit_send_command>:
/** \brief Only send a command array.
 * \param[in] tx_buffer is buffer to be sent
 * \return ATCA_STATUS
 */
uint8_t atca_kit_send_command(uint8_t *tx_buffer)
{
    4d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d7a:	b083      	sub	sp, #12
    4d7c:	1e05      	subs	r5, r0, #0
	ATCACommand _CommandObj = NULL;
	ATCAIface   _Iface = NULL;

	do {

		if ( tx_buffer == NULL )
    4d7e:	d036      	beq.n	4dee <atca_kit_send_command+0x76>
			break;

		if ( atca_kit_get_commands_info( tx_buffer, &cmd_index, &rx_length ) != ATCA_SUCCESS )
    4d80:	aa01      	add	r2, sp, #4
    4d82:	466b      	mov	r3, sp
    4d84:	1dd9      	adds	r1, r3, #7
    4d86:	4b1b      	ldr	r3, [pc, #108]	; (4df4 <atca_kit_send_command+0x7c>)
    4d88:	4798      	blx	r3
	uint8_t status = ATCA_SUCCESS;
    4d8a:	2400      	movs	r4, #0
		if ( atca_kit_get_commands_info( tx_buffer, &cmd_index, &rx_length ) != ATCA_SUCCESS )
    4d8c:	2800      	cmp	r0, #0
    4d8e:	d002      	beq.n	4d96 <atca_kit_send_command+0x1e>

	} while(0);
	
	return status;
	
}
    4d90:	0020      	movs	r0, r4
    4d92:	b003      	add	sp, #12
    4d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cmd_buffer = (uint8_t *)malloc(tx_buffer[0] + 1);
    4d96:	782c      	ldrb	r4, [r5, #0]
    4d98:	1c60      	adds	r0, r4, #1
    4d9a:	4b17      	ldr	r3, [pc, #92]	; (4df8 <atca_kit_send_command+0x80>)
    4d9c:	4798      	blx	r3
    4d9e:	0006      	movs	r6, r0
		memcpy(&cmd_buffer[1], tx_buffer, tx_buffer[0]);
    4da0:	3001      	adds	r0, #1
    4da2:	0022      	movs	r2, r4
    4da4:	0029      	movs	r1, r5
    4da6:	4b15      	ldr	r3, [pc, #84]	; (4dfc <atca_kit_send_command+0x84>)
    4da8:	4798      	blx	r3
		_Device= atcab_get_device();
    4daa:	4b15      	ldr	r3, [pc, #84]	; (4e00 <atca_kit_send_command+0x88>)
    4dac:	4798      	blx	r3
		_CommandObj = atGetCommands(_Device);
    4dae:	4b15      	ldr	r3, [pc, #84]	; (4e04 <atca_kit_send_command+0x8c>)
    4db0:	4798      	blx	r3
    4db2:	0007      	movs	r7, r0
        if ((status = atGetExecTime(tx_buffer[1], _CommandObj)) != ATCA_SUCCESS)
    4db4:	7868      	ldrb	r0, [r5, #1]
    4db6:	0039      	movs	r1, r7
    4db8:	4b13      	ldr	r3, [pc, #76]	; (4e08 <atca_kit_send_command+0x90>)
    4dba:	4798      	blx	r3
    4dbc:	1e04      	subs	r4, r0, #0
    4dbe:	d1e7      	bne.n	4d90 <atca_kit_send_command+0x18>
		if ( (status = atcab_wakeup()) != ATCA_SUCCESS )
    4dc0:	4b12      	ldr	r3, [pc, #72]	; (4e0c <atca_kit_send_command+0x94>)
    4dc2:	4798      	blx	r3
    4dc4:	1e04      	subs	r4, r0, #0
    4dc6:	d1e3      	bne.n	4d90 <atca_kit_send_command+0x18>
		_Device= atcab_get_device();
    4dc8:	4b0d      	ldr	r3, [pc, #52]	; (4e00 <atca_kit_send_command+0x88>)
    4dca:	4798      	blx	r3
		_Iface = atGetIFace(_Device);
    4dcc:	4b10      	ldr	r3, [pc, #64]	; (4e10 <atca_kit_send_command+0x98>)
    4dce:	4798      	blx	r3
		if ( (status = atsend( _Iface, (uint8_t *)cmd_buffer, tx_buffer[0])) != ATCA_SUCCESS )
    4dd0:	782a      	ldrb	r2, [r5, #0]
    4dd2:	0031      	movs	r1, r6
    4dd4:	4b0f      	ldr	r3, [pc, #60]	; (4e14 <atca_kit_send_command+0x9c>)
    4dd6:	4798      	blx	r3
    4dd8:	1e04      	subs	r4, r0, #0
    4dda:	d1d9      	bne.n	4d90 <atca_kit_send_command+0x18>
		atca_delay_ms(_CommandObj->execution_time_msec);
    4ddc:	8878      	ldrh	r0, [r7, #2]
    4dde:	4b0e      	ldr	r3, [pc, #56]	; (4e18 <atca_kit_send_command+0xa0>)
    4de0:	4798      	blx	r3
		atcab_idle();
    4de2:	4b0e      	ldr	r3, [pc, #56]	; (4e1c <atca_kit_send_command+0xa4>)
    4de4:	4798      	blx	r3
		free((void *)cmd_buffer);
    4de6:	0030      	movs	r0, r6
    4de8:	4b0d      	ldr	r3, [pc, #52]	; (4e20 <atca_kit_send_command+0xa8>)
    4dea:	4798      	blx	r3
    4dec:	e7d0      	b.n	4d90 <atca_kit_send_command+0x18>
	uint8_t status = ATCA_SUCCESS;
    4dee:	2400      	movs	r4, #0
    4df0:	e7ce      	b.n	4d90 <atca_kit_send_command+0x18>
    4df2:	46c0      	nop			; (mov r8, r8)
    4df4:	00004ba1 	.word	0x00004ba1
    4df8:	00010949 	.word	0x00010949
    4dfc:	000109c9 	.word	0x000109c9
    4e00:	000035dd 	.word	0x000035dd
    4e04:	00005fc9 	.word	0x00005fc9
    4e08:	00005ca5 	.word	0x00005ca5
    4e0c:	000035e9 	.word	0x000035e9
    4e10:	00005fcd 	.word	0x00005fcd
    4e14:	00006001 	.word	0x00006001
    4e18:	00006e95 	.word	0x00006e95
    4e1c:	00003605 	.word	0x00003605
    4e20:	0001095d 	.word	0x0001095d

00004e24 <atca_kit_receive_response>:
 * \param[in] size is size to be received
 * \param[out] rx_buffer is buffer that includes data to be received from a device 
 * \return ATCA_STATUS
 */
uint8_t atca_kit_receive_response(uint8_t size, uint8_t *rx_buffer)
{
    4e24:	b530      	push	{r4, r5, lr}
    4e26:	b083      	sub	sp, #12
    4e28:	1e0d      	subs	r5, r1, #0
	uint8_t status = ATCA_SUCCESS;
	uint16_t rxlength = size;	
    4e2a:	466b      	mov	r3, sp
    4e2c:	80d8      	strh	r0, [r3, #6]
	ATCADevice  _Device = NULL;
	ATCAIface   _Iface = NULL;

	do {

		if ( rx_buffer == NULL )
    4e2e:	d016      	beq.n	4e5e <atca_kit_receive_response+0x3a>
			break;

		_Device= atcab_get_device();
    4e30:	4b0c      	ldr	r3, [pc, #48]	; (4e64 <atca_kit_receive_response+0x40>)
    4e32:	4798      	blx	r3
		
		if ( (status = atcab_wakeup()) != ATCA_SUCCESS )
    4e34:	4b0c      	ldr	r3, [pc, #48]	; (4e68 <atca_kit_receive_response+0x44>)
    4e36:	4798      	blx	r3
    4e38:	1e04      	subs	r4, r0, #0
    4e3a:	d002      	beq.n	4e42 <atca_kit_receive_response+0x1e>

	} while(0);
	
	return status;
	
}
    4e3c:	0020      	movs	r0, r4
    4e3e:	b003      	add	sp, #12
    4e40:	bd30      	pop	{r4, r5, pc}
		_Device= atcab_get_device();
    4e42:	4b08      	ldr	r3, [pc, #32]	; (4e64 <atca_kit_receive_response+0x40>)
    4e44:	4798      	blx	r3
		_Iface = atGetIFace(_Device);
    4e46:	4b09      	ldr	r3, [pc, #36]	; (4e6c <atca_kit_receive_response+0x48>)
    4e48:	4798      	blx	r3
		if ( (status = atreceive( _Iface, rx_buffer, &rxlength)) != ATCA_SUCCESS )
    4e4a:	466b      	mov	r3, sp
    4e4c:	1d9a      	adds	r2, r3, #6
    4e4e:	0029      	movs	r1, r5
    4e50:	4b07      	ldr	r3, [pc, #28]	; (4e70 <atca_kit_receive_response+0x4c>)
    4e52:	4798      	blx	r3
    4e54:	1e04      	subs	r4, r0, #0
    4e56:	d1f1      	bne.n	4e3c <atca_kit_receive_response+0x18>
		atcab_idle();
    4e58:	4b06      	ldr	r3, [pc, #24]	; (4e74 <atca_kit_receive_response+0x50>)
    4e5a:	4798      	blx	r3
    4e5c:	e7ee      	b.n	4e3c <atca_kit_receive_response+0x18>
	uint8_t status = ATCA_SUCCESS;
    4e5e:	2400      	movs	r4, #0
    4e60:	e7ec      	b.n	4e3c <atca_kit_receive_response+0x18>
    4e62:	46c0      	nop			; (mov r8, r8)
    4e64:	000035dd 	.word	0x000035dd
    4e68:	000035e9 	.word	0x000035e9
    4e6c:	00005fcd 	.word	0x00005fcd
    4e70:	00006009 	.word	0x00006009
    4e74:	00003605 	.word	0x00003605

00004e78 <atca_kit_extract_data_load>:
 * \param[out] dataLength number of bytes extracted
 * \param[out] data pointer to pointer to binary data
 * \return status: invalid parameters or success
 */
uint8_t atca_kit_extract_data_load(const char* command, uint16_t* dataLength, uint8_t** data)
{
    4e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e7a:	0004      	movs	r4, r0
    4e7c:	000d      	movs	r5, r1
    4e7e:	0016      	movs	r6, r2
	uint8_t status = KIT_STATUS_INVALID_PARAMS;
	if (!command || !dataLength || !data)
    4e80:	2800      	cmp	r0, #0
    4e82:	d01c      	beq.n	4ebe <atca_kit_extract_data_load+0x46>
    4e84:	2900      	cmp	r1, #0
    4e86:	d01c      	beq.n	4ec2 <atca_kit_extract_data_load+0x4a>
    4e88:	2a00      	cmp	r2, #0
    4e8a:	d01c      	beq.n	4ec6 <atca_kit_extract_data_load+0x4e>
		return status;

	char* pToken = strchr(command, '(');
    4e8c:	2128      	movs	r1, #40	; 0x28
    4e8e:	4b10      	ldr	r3, [pc, #64]	; (4ed0 <atca_kit_extract_data_load+0x58>)
    4e90:	4798      	blx	r3
    4e92:	1e07      	subs	r7, r0, #0
	if (!pToken)
    4e94:	d019      	beq.n	4eca <atca_kit_extract_data_load+0x52>
		return status;

	char* dataEnd = strchr(pToken, ')');
    4e96:	2129      	movs	r1, #41	; 0x29
    4e98:	4b0d      	ldr	r3, [pc, #52]	; (4ed0 <atca_kit_extract_data_load+0x58>)
    4e9a:	4798      	blx	r3
	if (!dataEnd)
		// Allow a missing closing parenthesis.
		dataEnd = (char *) command + strlen(command);
	else
		dataEnd--;
    4e9c:	1e43      	subs	r3, r0, #1
	if (!dataEnd)
    4e9e:	2800      	cmp	r0, #0
    4ea0:	d008      	beq.n	4eb4 <atca_kit_extract_data_load+0x3c>

	uint16_t asciiLength = (uint16_t) (dataEnd - pToken);
	*data = (uint8_t *) pToken + 1;
    4ea2:	1c79      	adds	r1, r7, #1
    4ea4:	6031      	str	r1, [r6, #0]
	uint16_t asciiLength = (uint16_t) (dataEnd - pToken);
    4ea6:	1bd8      	subs	r0, r3, r7
	*dataLength = atca_kit_convert_ascii_to_binary(asciiLength, *data);
    4ea8:	b280      	uxth	r0, r0
    4eaa:	4b0a      	ldr	r3, [pc, #40]	; (4ed4 <atca_kit_extract_data_load+0x5c>)
    4eac:	4798      	blx	r3
    4eae:	8028      	strh	r0, [r5, #0]

	return KIT_STATUS_SUCCESS;
    4eb0:	2000      	movs	r0, #0
}
    4eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dataEnd = (char *) command + strlen(command);
    4eb4:	0020      	movs	r0, r4
    4eb6:	4b08      	ldr	r3, [pc, #32]	; (4ed8 <atca_kit_extract_data_load+0x60>)
    4eb8:	4798      	blx	r3
    4eba:	1823      	adds	r3, r4, r0
    4ebc:	e7f1      	b.n	4ea2 <atca_kit_extract_data_load+0x2a>
		return status;
    4ebe:	20c3      	movs	r0, #195	; 0xc3
    4ec0:	e7f7      	b.n	4eb2 <atca_kit_extract_data_load+0x3a>
    4ec2:	20c3      	movs	r0, #195	; 0xc3
    4ec4:	e7f5      	b.n	4eb2 <atca_kit_extract_data_load+0x3a>
    4ec6:	20c3      	movs	r0, #195	; 0xc3
    4ec8:	e7f3      	b.n	4eb2 <atca_kit_extract_data_load+0x3a>
		return status;
    4eca:	20c3      	movs	r0, #195	; 0xc3
    4ecc:	e7f1      	b.n	4eb2 <atca_kit_extract_data_load+0x3a>
    4ece:	46c0      	nop			; (mov r8, r8)
    4ed0:	00010f8b 	.word	0x00010f8b
    4ed4:	00004a31 	.word	0x00004a31
    4ed8:	00010fa7 	.word	0x00010fa7

00004edc <atca_kit_parse_ecc_commands>:
{
    4edc:	b530      	push	{r4, r5, lr}
    4ede:	b083      	sub	sp, #12
    4ee0:	0008      	movs	r0, r1
    4ee2:	0015      	movs	r5, r2
    4ee4:	001c      	movs	r4, r3
	char *pToken = strchr((char *) command, ':');
    4ee6:	213a      	movs	r1, #58	; 0x3a
    4ee8:	4b3a      	ldr	r3, [pc, #232]	; (4fd4 <atca_kit_parse_ecc_commands+0xf8>)
    4eea:	4798      	blx	r3
	*responseLength = 0;
    4eec:	2300      	movs	r3, #0
    4eee:	802b      	strh	r3, [r5, #0]
	if (!pToken)
    4ef0:	2800      	cmp	r0, #0
    4ef2:	d067      	beq.n	4fc4 <atca_kit_parse_ecc_commands+0xe8>
	switch (pToken[1]) {
    4ef4:	7843      	ldrb	r3, [r0, #1]
    4ef6:	3b61      	subs	r3, #97	; 0x61
    4ef8:	b2da      	uxtb	r2, r3
    4efa:	2a16      	cmp	r2, #22
    4efc:	d864      	bhi.n	4fc8 <atca_kit_parse_ecc_commands+0xec>
    4efe:	0093      	lsls	r3, r2, #2
    4f00:	4a35      	ldr	r2, [pc, #212]	; (4fd8 <atca_kit_parse_ecc_commands+0xfc>)
    4f02:	58d3      	ldr	r3, [r2, r3]
    4f04:	469f      	mov	pc, r3
			status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
    4f06:	3002      	adds	r0, #2
    4f08:	466a      	mov	r2, sp
    4f0a:	1d91      	adds	r1, r2, #6
    4f0c:	4b33      	ldr	r3, [pc, #204]	; (4fdc <atca_kit_parse_ecc_commands+0x100>)
    4f0e:	4798      	blx	r3
			if (status != KIT_STATUS_SUCCESS)
    4f10:	2800      	cmp	r0, #0
    4f12:	d10c      	bne.n	4f2e <atca_kit_parse_ecc_commands+0x52>
			response[SHA204_BUFFER_POS_COUNT] = 0;
    4f14:	2300      	movs	r3, #0
    4f16:	7023      	strb	r3, [r4, #0]
			status = atca_kit_send_and_receive(data_load[0], &response[0]);
    4f18:	0021      	movs	r1, r4
    4f1a:	9800      	ldr	r0, [sp, #0]
    4f1c:	4b30      	ldr	r3, [pc, #192]	; (4fe0 <atca_kit_parse_ecc_commands+0x104>)
    4f1e:	4798      	blx	r3
			if (status != KIT_STATUS_SUCCESS)
    4f20:	2800      	cmp	r0, #0
    4f22:	d104      	bne.n	4f2e <atca_kit_parse_ecc_commands+0x52>
			*responseLength = response[SHA204_BUFFER_POS_COUNT];
    4f24:	7823      	ldrb	r3, [r4, #0]
    4f26:	802b      	strh	r3, [r5, #0]
			break;
    4f28:	e001      	b.n	4f2e <atca_kit_parse_ecc_commands+0x52>
			status = atcab_wakeup();
    4f2a:	4b2e      	ldr	r3, [pc, #184]	; (4fe4 <atca_kit_parse_ecc_commands+0x108>)
    4f2c:	4798      	blx	r3
}
    4f2e:	b003      	add	sp, #12
    4f30:	bd30      	pop	{r4, r5, pc}
			status = atcab_sleep();
    4f32:	4b2d      	ldr	r3, [pc, #180]	; (4fe8 <atca_kit_parse_ecc_commands+0x10c>)
    4f34:	4798      	blx	r3
    4f36:	e7fa      	b.n	4f2e <atca_kit_parse_ecc_commands+0x52>
			status = atcab_idle();
    4f38:	4b2c      	ldr	r3, [pc, #176]	; (4fec <atca_kit_parse_ecc_commands+0x110>)
    4f3a:	4798      	blx	r3
    4f3c:	e7f7      	b.n	4f2e <atca_kit_parse_ecc_commands+0x52>
			status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
    4f3e:	3002      	adds	r0, #2
    4f40:	466a      	mov	r2, sp
    4f42:	1d91      	adds	r1, r2, #6
    4f44:	4b25      	ldr	r3, [pc, #148]	; (4fdc <atca_kit_parse_ecc_commands+0x100>)
    4f46:	4798      	blx	r3
    4f48:	e7f1      	b.n	4f2e <atca_kit_parse_ecc_commands+0x52>
			pToken = strchr(&pToken[1], ':');
    4f4a:	3001      	adds	r0, #1
    4f4c:	213a      	movs	r1, #58	; 0x3a
    4f4e:	4b21      	ldr	r3, [pc, #132]	; (4fd4 <atca_kit_parse_ecc_commands+0xf8>)
    4f50:	4798      	blx	r3
			if (!pToken)
    4f52:	2800      	cmp	r0, #0
    4f54:	d03a      	beq.n	4fcc <atca_kit_parse_ecc_commands+0xf0>
			switch (pToken[1]) {
    4f56:	7843      	ldrb	r3, [r0, #1]
    4f58:	2b72      	cmp	r3, #114	; 0x72
    4f5a:	d016      	beq.n	4f8a <atca_kit_parse_ecc_commands+0xae>
    4f5c:	b2da      	uxtb	r2, r3
    4f5e:	2a72      	cmp	r2, #114	; 0x72
    4f60:	d906      	bls.n	4f70 <atca_kit_parse_ecc_commands+0x94>
    4f62:	2b73      	cmp	r3, #115	; 0x73
    4f64:	d024      	beq.n	4fb0 <atca_kit_parse_ecc_commands+0xd4>
    4f66:	2b77      	cmp	r3, #119	; 0x77
    4f68:	d132      	bne.n	4fd0 <atca_kit_parse_ecc_commands+0xf4>
					status = atcab_wakeup();
    4f6a:	4b1e      	ldr	r3, [pc, #120]	; (4fe4 <atca_kit_parse_ecc_commands+0x108>)
    4f6c:	4798      	blx	r3
    4f6e:	e7de      	b.n	4f2e <atca_kit_parse_ecc_commands+0x52>
			switch (pToken[1]) {
    4f70:	2b63      	cmp	r3, #99	; 0x63
    4f72:	d12d      	bne.n	4fd0 <atca_kit_parse_ecc_commands+0xf4>
					status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
    4f74:	3002      	adds	r0, #2
    4f76:	466a      	mov	r2, sp
    4f78:	1d91      	adds	r1, r2, #6
    4f7a:	4b18      	ldr	r3, [pc, #96]	; (4fdc <atca_kit_parse_ecc_commands+0x100>)
    4f7c:	4798      	blx	r3
					if (status != KIT_STATUS_SUCCESS)
    4f7e:	2800      	cmp	r0, #0
    4f80:	d1d5      	bne.n	4f2e <atca_kit_parse_ecc_commands+0x52>
					status = atca_kit_send_command(dataLoad);				
    4f82:	9800      	ldr	r0, [sp, #0]
    4f84:	4b1a      	ldr	r3, [pc, #104]	; (4ff0 <atca_kit_parse_ecc_commands+0x114>)
    4f86:	4798      	blx	r3
					break;
    4f88:	e7d1      	b.n	4f2e <atca_kit_parse_ecc_commands+0x52>
					status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
    4f8a:	3002      	adds	r0, #2
    4f8c:	466a      	mov	r2, sp
    4f8e:	1d91      	adds	r1, r2, #6
    4f90:	4b12      	ldr	r3, [pc, #72]	; (4fdc <atca_kit_parse_ecc_commands+0x100>)
    4f92:	4798      	blx	r3
					if (status != KIT_STATUS_SUCCESS)
    4f94:	2800      	cmp	r0, #0
    4f96:	d1ca      	bne.n	4f2e <atca_kit_parse_ecc_commands+0x52>
					response[SHA204_BUFFER_POS_COUNT] = 0;
    4f98:	2300      	movs	r3, #0
    4f9a:	7023      	strb	r3, [r4, #0]
					status = atca_kit_receive_response(*data_load[0], response);
    4f9c:	9b00      	ldr	r3, [sp, #0]
    4f9e:	7818      	ldrb	r0, [r3, #0]
    4fa0:	0021      	movs	r1, r4
    4fa2:	4b14      	ldr	r3, [pc, #80]	; (4ff4 <atca_kit_parse_ecc_commands+0x118>)
    4fa4:	4798      	blx	r3
					if (status != KIT_STATUS_SUCCESS)
    4fa6:	2800      	cmp	r0, #0
    4fa8:	d1c1      	bne.n	4f2e <atca_kit_parse_ecc_commands+0x52>
					*responseLength = response[SHA204_BUFFER_POS_COUNT];
    4faa:	7823      	ldrb	r3, [r4, #0]
    4fac:	802b      	strh	r3, [r5, #0]
					break;
    4fae:	e7be      	b.n	4f2e <atca_kit_parse_ecc_commands+0x52>
					status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
    4fb0:	3002      	adds	r0, #2
    4fb2:	466a      	mov	r2, sp
    4fb4:	1d91      	adds	r1, r2, #6
    4fb6:	4b09      	ldr	r3, [pc, #36]	; (4fdc <atca_kit_parse_ecc_commands+0x100>)
    4fb8:	4798      	blx	r3
					if (status == KIT_STATUS_SUCCESS) {
    4fba:	2800      	cmp	r0, #0
    4fbc:	d0b7      	beq.n	4f2e <atca_kit_parse_ecc_commands+0x52>
						status = atcab_idle();
    4fbe:	4b0b      	ldr	r3, [pc, #44]	; (4fec <atca_kit_parse_ecc_commands+0x110>)
    4fc0:	4798      	blx	r3
    4fc2:	e7b4      	b.n	4f2e <atca_kit_parse_ecc_commands+0x52>
		return status;
    4fc4:	2000      	movs	r0, #0
    4fc6:	e7b2      	b.n	4f2e <atca_kit_parse_ecc_commands+0x52>
			status = KIT_STATUS_UNKNOWN_COMMAND;
    4fc8:	20c0      	movs	r0, #192	; 0xc0
    4fca:	e7b0      	b.n	4f2e <atca_kit_parse_ecc_commands+0x52>
				return status;
    4fcc:	2000      	movs	r0, #0
    4fce:	e7ae      	b.n	4f2e <atca_kit_parse_ecc_commands+0x52>
					status = KIT_STATUS_UNKNOWN_COMMAND;
    4fd0:	20c0      	movs	r0, #192	; 0xc0
    4fd2:	e7ac      	b.n	4f2e <atca_kit_parse_ecc_commands+0x52>
    4fd4:	00010f8b 	.word	0x00010f8b
    4fd8:	0001465c 	.word	0x0001465c
    4fdc:	00004e79 	.word	0x00004e79
    4fe0:	00004ca5 	.word	0x00004ca5
    4fe4:	000035e9 	.word	0x000035e9
    4fe8:	00003621 	.word	0x00003621
    4fec:	00003605 	.word	0x00003605
    4ff0:	00004d79 	.word	0x00004d79
    4ff4:	00004e25 	.word	0x00004e25

00004ff8 <atca_kit_create_usb_packet>:
    \param[in] length number of bytes in data load plus one status byte
    \param[in] buffer pointer to data
    \return length of ASCII data
*/
uint16_t atca_kit_create_usb_packet(uint16_t length, uint8_t *buffer)
{
    4ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ffa:	46de      	mov	lr, fp
    4ffc:	4657      	mov	r7, sl
    4ffe:	464e      	mov	r6, r9
    5000:	4645      	mov	r5, r8
    5002:	b5e0      	push	{r5, r6, r7, lr}
    5004:	b083      	sub	sp, #12
    5006:	9001      	str	r0, [sp, #4]
    5008:	4688      	mov	r8, r1
	uint16_t binBufferIndex = length - 1;
    500a:	1e42      	subs	r2, r0, #1
    500c:	b293      	uxth	r3, r2
	// Size of data load is length minus status byte.
	uint16_t asciiLength = 2 * (length - 1) + 5; // + 5: 2 status byte characters + '(' + ")\n"
    500e:	0052      	lsls	r2, r2, #1
    5010:	b292      	uxth	r2, r2
    5012:	1d51      	adds	r1, r2, #5
    5014:	b289      	uxth	r1, r1
    5016:	9100      	str	r1, [sp, #0]
	uint16_t asciiBufferIndex = asciiLength - 1;
    5018:	1d11      	adds	r1, r2, #4
	uint8_t byteValue;

	// Terminate ASCII packet.
	buffer[asciiBufferIndex--] = KIT_EOP;
    501a:	b289      	uxth	r1, r1
    501c:	200a      	movs	r0, #10
    501e:	4644      	mov	r4, r8
    5020:	5460      	strb	r0, [r4, r1]

	// Append ')'.
	buffer[asciiBufferIndex--] = ')';
    5022:	1c91      	adds	r1, r2, #2
    5024:	b289      	uxth	r1, r1
    5026:	468b      	mov	fp, r1
	buffer[asciiBufferIndex--] = KIT_EOP;
    5028:	3203      	adds	r2, #3
	buffer[asciiBufferIndex--] = ')';
    502a:	b292      	uxth	r2, r2
    502c:	2129      	movs	r1, #41	; 0x29
    502e:	54a1      	strb	r1, [r4, r2]

	// Convert binary data to hex-ascii starting with the last byte of data.
	while (binBufferIndex)
    5030:	2b00      	cmp	r3, #0
    5032:	d01e      	beq.n	5072 <atca_kit_create_usb_packet+0x7a>
    5034:	465c      	mov	r4, fp
	{
		byteValue = buffer[binBufferIndex--];
		buffer[asciiBufferIndex--] = atca_kit_convert_nibble_to_ascii(byteValue);
    5036:	4a1c      	ldr	r2, [pc, #112]	; (50a8 <atca_kit_create_usb_packet+0xb0>)
    5038:	4691      	mov	r9, r2
		byteValue = buffer[binBufferIndex--];
    503a:	1e5f      	subs	r7, r3, #1
    503c:	b2bf      	uxth	r7, r7
    503e:	4642      	mov	r2, r8
    5040:	5cd6      	ldrb	r6, [r2, r3]
		buffer[asciiBufferIndex--] = atca_kit_convert_nibble_to_ascii(byteValue);
    5042:	1e65      	subs	r5, r4, #1
    5044:	b2ad      	uxth	r5, r5
    5046:	46a2      	mov	sl, r4
    5048:	44c2      	add	sl, r8
    504a:	0030      	movs	r0, r6
    504c:	47c8      	blx	r9
    504e:	4653      	mov	r3, sl
    5050:	7018      	strb	r0, [r3, #0]
		buffer[asciiBufferIndex--] = atca_kit_convert_nibble_to_ascii(byteValue >> 4);
    5052:	3c02      	subs	r4, #2
    5054:	b2a4      	uxth	r4, r4
    5056:	4445      	add	r5, r8
    5058:	0930      	lsrs	r0, r6, #4
    505a:	47c8      	blx	r9
    505c:	7028      	strb	r0, [r5, #0]
		byteValue = buffer[binBufferIndex--];
    505e:	1e3b      	subs	r3, r7, #0
	while (binBufferIndex)
    5060:	d1eb      	bne.n	503a <atca_kit_create_usb_packet+0x42>
    5062:	9a01      	ldr	r2, [sp, #4]
    5064:	03d3      	lsls	r3, r2, #15
    5066:	1a9b      	subs	r3, r3, r2
    5068:	005b      	lsls	r3, r3, #1
    506a:	3302      	adds	r3, #2
    506c:	445b      	add	r3, fp
    506e:	b29b      	uxth	r3, r3
    5070:	469b      	mov	fp, r3
	}

	// Start data load with open parenthesis.
	buffer[asciiBufferIndex--] = '(';
    5072:	2328      	movs	r3, #40	; 0x28
    5074:	4642      	mov	r2, r8
    5076:	4659      	mov	r1, fp
    5078:	5453      	strb	r3, [r2, r1]

	// Convert first byte (function return value) to hex-ascii.
	byteValue = buffer[0];
    507a:	7815      	ldrb	r5, [r2, #0]
	buffer[asciiBufferIndex--] = '(';
    507c:	1e4c      	subs	r4, r1, #1
	buffer[asciiBufferIndex--] = atca_kit_convert_nibble_to_ascii(byteValue);
    507e:	b2a4      	uxth	r4, r4
    5080:	4444      	add	r4, r8
    5082:	0028      	movs	r0, r5
    5084:	4e08      	ldr	r6, [pc, #32]	; (50a8 <atca_kit_create_usb_packet+0xb0>)
    5086:	47b0      	blx	r6
    5088:	7020      	strb	r0, [r4, #0]
    508a:	465b      	mov	r3, fp
    508c:	1e9c      	subs	r4, r3, #2
	buffer[asciiBufferIndex] = atca_kit_convert_nibble_to_ascii(byteValue >> 4);
    508e:	b2a4      	uxth	r4, r4
    5090:	4444      	add	r4, r8
    5092:	0928      	lsrs	r0, r5, #4
    5094:	47b0      	blx	r6
    5096:	7020      	strb	r0, [r4, #0]

	return asciiLength;
}
    5098:	9800      	ldr	r0, [sp, #0]
    509a:	b003      	add	sp, #12
    509c:	bc3c      	pop	{r2, r3, r4, r5}
    509e:	4690      	mov	r8, r2
    50a0:	4699      	mov	r9, r3
    50a2:	46a2      	mov	sl, r4
    50a4:	46ab      	mov	fp, r5
    50a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50a8:	000049f5 	.word	0x000049f5

000050ac <atca_kit_parse_board_commands>:
{
    50ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    50ae:	46c6      	mov	lr, r8
    50b0:	b500      	push	{lr}
    50b2:	b088      	sub	sp, #32
    50b4:	0008      	movs	r0, r1
    50b6:	0015      	movs	r5, r2
    50b8:	001c      	movs	r4, r3
	uint16_t dataLength = 1;
    50ba:	2201      	movs	r2, #1
    50bc:	231e      	movs	r3, #30
    50be:	446b      	add	r3, sp
    50c0:	801a      	strh	r2, [r3, #0]
	const char *StringInterface[] = {"no_device ", "SPI ", "TWI ", "SWI "};
    50c2:	aa02      	add	r2, sp, #8
    50c4:	4b96      	ldr	r3, [pc, #600]	; (5320 <atca_kit_parse_board_commands+0x274>)
    50c6:	cbc2      	ldmia	r3!, {r1, r6, r7}
    50c8:	c2c2      	stmia	r2!, {r1, r6, r7}
    50ca:	681b      	ldr	r3, [r3, #0]
    50cc:	6013      	str	r3, [r2, #0]
	const char *pToken = strchr((char *) command, ':');
    50ce:	213a      	movs	r1, #58	; 0x3a
    50d0:	4b94      	ldr	r3, [pc, #592]	; (5324 <atca_kit_parse_board_commands+0x278>)
    50d2:	4798      	blx	r3
	if (!pToken)
    50d4:	2800      	cmp	r0, #0
    50d6:	d100      	bne.n	50da <atca_kit_parse_board_commands+0x2e>
    50d8:	e120      	b.n	531c <atca_kit_parse_board_commands+0x270>
	*responseIsAscii = 1;
    50da:	2301      	movs	r3, #1
    50dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    50de:	7013      	strb	r3, [r2, #0]
	switch(pToken[1]) {
    50e0:	7843      	ldrb	r3, [r0, #1]
    50e2:	2b64      	cmp	r3, #100	; 0x64
    50e4:	d100      	bne.n	50e8 <atca_kit_parse_board_commands+0x3c>
    50e6:	e0a5      	b.n	5234 <atca_kit_parse_board_commands+0x188>
    50e8:	2b66      	cmp	r3, #102	; 0x66
    50ea:	d041      	beq.n	5170 <atca_kit_parse_board_commands+0xc4>
    50ec:	2b61      	cmp	r3, #97	; 0x61
    50ee:	d00f      	beq.n	5110 <atca_kit_parse_board_commands+0x64>
	uint16_t responseIndex = 0;
    50f0:	2700      	movs	r7, #0
	uint8_t status = KIT_STATUS_UNKNOWN_COMMAND;
    50f2:	26c0      	movs	r6, #192	; 0xc0
	response[responseIndex] = status;
    50f4:	19e1      	adds	r1, r4, r7
    50f6:	700e      	strb	r6, [r1, #0]
	*responseLength = atca_kit_create_usb_packet(dataLength, &response[responseIndex]) + responseIndex;
    50f8:	231e      	movs	r3, #30
    50fa:	446b      	add	r3, sp
    50fc:	8818      	ldrh	r0, [r3, #0]
    50fe:	4b8a      	ldr	r3, [pc, #552]	; (5328 <atca_kit_parse_board_commands+0x27c>)
    5100:	4798      	blx	r3
    5102:	183f      	adds	r7, r7, r0
    5104:	802f      	strh	r7, [r5, #0]
}
    5106:	0030      	movs	r0, r6
    5108:	b008      	add	sp, #32
    510a:	bc04      	pop	{r2}
    510c:	4690      	mov	r8, r2
    510e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = atca_kit_extract_data_load((const char*)pToken, &dataLength, rxData);
    5110:	aa06      	add	r2, sp, #24
    5112:	211e      	movs	r1, #30
    5114:	4469      	add	r1, sp
    5116:	4b85      	ldr	r3, [pc, #532]	; (532c <atca_kit_parse_board_commands+0x280>)
    5118:	4798      	blx	r3
    511a:	0006      	movs	r6, r0
	uint16_t responseIndex = 0;
    511c:	2700      	movs	r7, #0
			if (status != KIT_STATUS_SUCCESS)
    511e:	2800      	cmp	r0, #0
    5120:	d1e8      	bne.n	50f4 <atca_kit_parse_board_commands+0x48>
            status = atca_kit_process_board_app_command(rxData[0], dataLength, response, responseLength);
    5122:	9806      	ldr	r0, [sp, #24]
    if(!rxbuf || !rxlen)
    5124:	2800      	cmp	r0, #0
    5126:	d100      	bne.n	512a <atca_kit_parse_board_commands+0x7e>
    5128:	e0f2      	b.n	5310 <atca_kit_parse_board_commands+0x264>
            status = atca_kit_process_board_app_command(rxData[0], dataLength, response, responseLength);
    512a:	231e      	movs	r3, #30
    512c:	446b      	add	r3, sp
    512e:	881f      	ldrh	r7, [r3, #0]
        return ATCA_BAD_PARAM;
    5130:	36e2      	adds	r6, #226	; 0xe2
    if(!rxbuf || !rxlen)
    5132:	2f00      	cmp	r7, #0
    5134:	d0de      	beq.n	50f4 <atca_kit_parse_board_commands+0x48>
    switch(rxbuf[0])
    5136:	7803      	ldrb	r3, [r0, #0]
    5138:	2b00      	cmp	r3, #0
    513a:	d002      	beq.n	5142 <atca_kit_parse_board_commands+0x96>
	uint16_t responseIndex = 0;
    513c:	2700      	movs	r7, #0
    ATCA_STATUS status = ATCA_PARSE_ERROR;
    513e:	26d2      	movs	r6, #210	; 0xd2
    5140:	e7d8      	b.n	50f4 <atca_kit_parse_board_commands+0x48>
            if(sizeof(struct kit_app_datetime) < rxlen)
    5142:	2f07      	cmp	r7, #7
    5144:	d802      	bhi.n	514c <atca_kit_parse_board_commands+0xa0>
	uint16_t responseIndex = 0;
    5146:	2700      	movs	r7, #0
    ATCA_STATUS status = ATCA_PARSE_ERROR;
    5148:	26d2      	movs	r6, #210	; 0xd2
    514a:	e7d3      	b.n	50f4 <atca_kit_parse_board_commands+0x48>
                time_utils_set(datetime->year, datetime->month, datetime->day, datetime->hour, datetime->minute, datetime->minute);
    514c:	1c46      	adds	r6, r0, #1
    514e:	7987      	ldrb	r7, [r0, #6]
    5150:	7943      	ldrb	r3, [r0, #5]
    5152:	7902      	ldrb	r2, [r0, #4]
    5154:	78c1      	ldrb	r1, [r0, #3]
    5156:	7840      	ldrb	r0, [r0, #1]
    5158:	4684      	mov	ip, r0
    515a:	7870      	ldrb	r0, [r6, #1]
    515c:	0200      	lsls	r0, r0, #8
    515e:	4666      	mov	r6, ip
    5160:	4330      	orrs	r0, r6
    5162:	9701      	str	r7, [sp, #4]
    5164:	9700      	str	r7, [sp, #0]
    5166:	4e72      	ldr	r6, [pc, #456]	; (5330 <atca_kit_parse_board_commands+0x284>)
    5168:	47b0      	blx	r6
	uint16_t responseIndex = 0;
    516a:	2700      	movs	r7, #0
                status = ATCA_SUCCESS;
    516c:	003e      	movs	r6, r7
    516e:	e7c1      	b.n	50f4 <atca_kit_parse_board_commands+0x48>
			status = atca_kit_extract_data_load((const char*)pToken, &dataLength, rxData);
    5170:	aa06      	add	r2, sp, #24
    5172:	211e      	movs	r1, #30
    5174:	4469      	add	r1, sp
    5176:	4b6d      	ldr	r3, [pc, #436]	; (532c <atca_kit_parse_board_commands+0x280>)
    5178:	4798      	blx	r3
    517a:	0006      	movs	r6, r0
	uint16_t responseIndex = 0;
    517c:	2700      	movs	r7, #0
			if (status != KIT_STATUS_SUCCESS)
    517e:	2800      	cmp	r0, #0
    5180:	d1b8      	bne.n	50f4 <atca_kit_parse_board_commands+0x48>
			dataLength = 4; // size of versions + status byte
    5182:	2204      	movs	r2, #4
    5184:	231e      	movs	r3, #30
    5186:	446b      	add	r3, sp
    5188:	801a      	strh	r2, [r3, #0]
			switch (*rxData[0]) {
    518a:	9b06      	ldr	r3, [sp, #24]
    518c:	781b      	ldrb	r3, [r3, #0]
    518e:	2b01      	cmp	r3, #1
    5190:	d01a      	beq.n	51c8 <atca_kit_parse_board_commands+0x11c>
    5192:	2b00      	cmp	r3, #0
    5194:	d006      	beq.n	51a4 <atca_kit_parse_board_commands+0xf8>
    5196:	2b02      	cmp	r3, #2
    5198:	d028      	beq.n	51ec <atca_kit_parse_board_commands+0x140>
    519a:	2b03      	cmp	r3, #3
    519c:	d038      	beq.n	5210 <atca_kit_parse_board_commands+0x164>
	uint16_t responseIndex = 0;
    519e:	2700      	movs	r7, #0
					status = KIT_STATUS_INVALID_PARAMS;
    51a0:	26c3      	movs	r6, #195	; 0xc3
    51a2:	e7a7      	b.n	50f4 <atca_kit_parse_board_commands+0x48>
					strcpy((char *) response, StringKit);
    51a4:	220e      	movs	r2, #14
    51a6:	4963      	ldr	r1, [pc, #396]	; (5334 <atca_kit_parse_board_commands+0x288>)
    51a8:	0020      	movs	r0, r4
    51aa:	4b63      	ldr	r3, [pc, #396]	; (5338 <atca_kit_parse_board_commands+0x28c>)
    51ac:	4698      	mov	r8, r3
    51ae:	4798      	blx	r3
					responseIndex = strlen((char *) response);
    51b0:	0020      	movs	r0, r4
    51b2:	4b62      	ldr	r3, [pc, #392]	; (533c <atca_kit_parse_board_commands+0x290>)
    51b4:	4798      	blx	r3
    51b6:	b287      	uxth	r7, r0
					memcpy((char *) (response + responseIndex + 1), VersionKit, dataLength);
    51b8:	0400      	lsls	r0, r0, #16
    51ba:	0c00      	lsrs	r0, r0, #16
    51bc:	3001      	adds	r0, #1
    51be:	1820      	adds	r0, r4, r0
    51c0:	2204      	movs	r2, #4
    51c2:	495f      	ldr	r1, [pc, #380]	; (5340 <atca_kit_parse_board_commands+0x294>)
    51c4:	47c0      	blx	r8
					break;
    51c6:	e795      	b.n	50f4 <atca_kit_parse_board_commands+0x48>
					strcpy((char *) response, StringSha204);
    51c8:	2208      	movs	r2, #8
    51ca:	495e      	ldr	r1, [pc, #376]	; (5344 <atca_kit_parse_board_commands+0x298>)
    51cc:	0020      	movs	r0, r4
    51ce:	4b5a      	ldr	r3, [pc, #360]	; (5338 <atca_kit_parse_board_commands+0x28c>)
    51d0:	4698      	mov	r8, r3
    51d2:	4798      	blx	r3
					responseIndex = strlen((char *) response);
    51d4:	0020      	movs	r0, r4
    51d6:	4b59      	ldr	r3, [pc, #356]	; (533c <atca_kit_parse_board_commands+0x290>)
    51d8:	4798      	blx	r3
    51da:	b287      	uxth	r7, r0
					memcpy((char *) (response + responseIndex + 1), VersionSha204, dataLength);
    51dc:	0400      	lsls	r0, r0, #16
    51de:	0c00      	lsrs	r0, r0, #16
    51e0:	3001      	adds	r0, #1
    51e2:	1820      	adds	r0, r4, r0
    51e4:	2204      	movs	r2, #4
    51e6:	4958      	ldr	r1, [pc, #352]	; (5348 <atca_kit_parse_board_commands+0x29c>)
    51e8:	47c0      	blx	r8
					break;
    51ea:	e783      	b.n	50f4 <atca_kit_parse_board_commands+0x48>
					strcpy((char *) response, StringAes132);
    51ec:	2208      	movs	r2, #8
    51ee:	4957      	ldr	r1, [pc, #348]	; (534c <atca_kit_parse_board_commands+0x2a0>)
    51f0:	0020      	movs	r0, r4
    51f2:	4b51      	ldr	r3, [pc, #324]	; (5338 <atca_kit_parse_board_commands+0x28c>)
    51f4:	4698      	mov	r8, r3
    51f6:	4798      	blx	r3
					responseIndex = strlen((char *) response);
    51f8:	0020      	movs	r0, r4
    51fa:	4b50      	ldr	r3, [pc, #320]	; (533c <atca_kit_parse_board_commands+0x290>)
    51fc:	4798      	blx	r3
    51fe:	b287      	uxth	r7, r0
					memcpy((char *) (response + responseIndex + 1), VersionAes132, dataLength);
    5200:	0400      	lsls	r0, r0, #16
    5202:	0c00      	lsrs	r0, r0, #16
    5204:	3001      	adds	r0, #1
    5206:	1820      	adds	r0, r4, r0
    5208:	2204      	movs	r2, #4
    520a:	4951      	ldr	r1, [pc, #324]	; (5350 <atca_kit_parse_board_commands+0x2a4>)
    520c:	47c0      	blx	r8
					break;
    520e:	e771      	b.n	50f4 <atca_kit_parse_board_commands+0x48>
					strcpy((char *) response, StringEcc508);
    5210:	2208      	movs	r2, #8
    5212:	4950      	ldr	r1, [pc, #320]	; (5354 <atca_kit_parse_board_commands+0x2a8>)
    5214:	0020      	movs	r0, r4
    5216:	4b48      	ldr	r3, [pc, #288]	; (5338 <atca_kit_parse_board_commands+0x28c>)
    5218:	4698      	mov	r8, r3
    521a:	4798      	blx	r3
					responseIndex = strlen((char *) response);
    521c:	0020      	movs	r0, r4
    521e:	4b47      	ldr	r3, [pc, #284]	; (533c <atca_kit_parse_board_commands+0x290>)
    5220:	4798      	blx	r3
    5222:	b287      	uxth	r7, r0
					memcpy((char *) (response + responseIndex + 1), VersionEcc508, dataLength);
    5224:	0400      	lsls	r0, r0, #16
    5226:	0c00      	lsrs	r0, r0, #16
    5228:	3001      	adds	r0, #1
    522a:	1820      	adds	r0, r4, r0
    522c:	2204      	movs	r2, #4
    522e:	494a      	ldr	r1, [pc, #296]	; (5358 <atca_kit_parse_board_commands+0x2ac>)
    5230:	47c0      	blx	r8
					break;
    5232:	e75f      	b.n	50f4 <atca_kit_parse_board_commands+0x48>
			status = atca_kit_extract_data_load((const char*)pToken, &dataLength, rxData);
    5234:	aa06      	add	r2, sp, #24
    5236:	211e      	movs	r1, #30
    5238:	4469      	add	r1, sp
    523a:	4b3c      	ldr	r3, [pc, #240]	; (532c <atca_kit_parse_board_commands+0x280>)
    523c:	4798      	blx	r3
    523e:	0006      	movs	r6, r0
	uint16_t responseIndex = 0;
    5240:	2700      	movs	r7, #0
			if (status != KIT_STATUS_SUCCESS)
    5242:	2800      	cmp	r0, #0
    5244:	d000      	beq.n	5248 <atca_kit_parse_board_commands+0x19c>
    5246:	e755      	b.n	50f4 <atca_kit_parse_board_commands+0x48>
			device_interface = atca_kit_discover_devices();
    5248:	4b44      	ldr	r3, [pc, #272]	; (535c <atca_kit_parse_board_commands+0x2b0>)
    524a:	4798      	blx	r3
    524c:	0007      	movs	r7, r0
			deviceIndex = *rxData[0];
    524e:	9b06      	ldr	r3, [sp, #24]
    5250:	781b      	ldrb	r3, [r3, #0]
    5252:	4698      	mov	r8, r3
	if (index >= device_count)
    5254:	4b42      	ldr	r3, [pc, #264]	; (5360 <atca_kit_parse_board_commands+0x2b4>)
    5256:	781b      	ldrb	r3, [r3, #0]
    5258:	4543      	cmp	r3, r8
    525a:	d95c      	bls.n	5316 <atca_kit_parse_board_commands+0x26a>
			switch (dev_info->device_type) {
    525c:	4643      	mov	r3, r8
    525e:	00da      	lsls	r2, r3, #3
    5260:	4b40      	ldr	r3, [pc, #256]	; (5364 <atca_kit_parse_board_commands+0x2b8>)
    5262:	189b      	adds	r3, r3, r2
    5264:	785a      	ldrb	r2, [r3, #1]
    5266:	2a0c      	cmp	r2, #12
    5268:	d826      	bhi.n	52b8 <atca_kit_parse_board_commands+0x20c>
    526a:	0093      	lsls	r3, r2, #2
    526c:	4a3e      	ldr	r2, [pc, #248]	; (5368 <atca_kit_parse_board_commands+0x2bc>)
    526e:	58d3      	ldr	r3, [r2, r3]
    5270:	469f      	mov	pc, r3
					strcpy((char *) response, StringSha204);
    5272:	2208      	movs	r2, #8
    5274:	4933      	ldr	r1, [pc, #204]	; (5344 <atca_kit_parse_board_commands+0x298>)
    5276:	0020      	movs	r0, r4
    5278:	4b2f      	ldr	r3, [pc, #188]	; (5338 <atca_kit_parse_board_commands+0x28c>)
    527a:	4798      	blx	r3
			if (dev_info->bus_type == DEVKIT_IF_UNKNOWN) {
    527c:	4643      	mov	r3, r8
    527e:	00db      	lsls	r3, r3, #3
    5280:	4a38      	ldr	r2, [pc, #224]	; (5364 <atca_kit_parse_board_commands+0x2b8>)
    5282:	5c9b      	ldrb	r3, [r3, r2]
    5284:	2b00      	cmp	r3, #0
    5286:	d11d      	bne.n	52c4 <atca_kit_parse_board_commands+0x218>
				responseIndex = strlen((char *) response);
    5288:	0020      	movs	r0, r4
    528a:	4b2c      	ldr	r3, [pc, #176]	; (533c <atca_kit_parse_board_commands+0x290>)
    528c:	4798      	blx	r3
    528e:	b287      	uxth	r7, r0
				break;
    5290:	e730      	b.n	50f4 <atca_kit_parse_board_commands+0x48>
					strcpy((char *) response, StringAes132);
    5292:	2208      	movs	r2, #8
    5294:	492d      	ldr	r1, [pc, #180]	; (534c <atca_kit_parse_board_commands+0x2a0>)
    5296:	0020      	movs	r0, r4
    5298:	4b27      	ldr	r3, [pc, #156]	; (5338 <atca_kit_parse_board_commands+0x28c>)
    529a:	4798      	blx	r3
					break;
    529c:	e7ee      	b.n	527c <atca_kit_parse_board_commands+0x1d0>
					strcpy((char *) response, StringEcc508);
    529e:	2208      	movs	r2, #8
    52a0:	492c      	ldr	r1, [pc, #176]	; (5354 <atca_kit_parse_board_commands+0x2a8>)
    52a2:	0020      	movs	r0, r4
    52a4:	4b24      	ldr	r3, [pc, #144]	; (5338 <atca_kit_parse_board_commands+0x28c>)
    52a6:	4798      	blx	r3
					break;
    52a8:	e7e8      	b.n	527c <atca_kit_parse_board_commands+0x1d0>
					strcpy((char *) response, StringInterface[0]);
    52aa:	220b      	movs	r2, #11
    52ac:	492f      	ldr	r1, [pc, #188]	; (536c <atca_kit_parse_board_commands+0x2c0>)
    52ae:	0020      	movs	r0, r4
    52b0:	4b21      	ldr	r3, [pc, #132]	; (5338 <atca_kit_parse_board_commands+0x28c>)
    52b2:	4798      	blx	r3
					status = KIT_STATUS_NO_DEVICE;
    52b4:	26c5      	movs	r6, #197	; 0xc5
					break;
    52b6:	e7e1      	b.n	527c <atca_kit_parse_board_commands+0x1d0>
					strcpy((char *) response, "unknown_device");
    52b8:	220f      	movs	r2, #15
    52ba:	492d      	ldr	r1, [pc, #180]	; (5370 <atca_kit_parse_board_commands+0x2c4>)
    52bc:	0020      	movs	r0, r4
    52be:	4b1e      	ldr	r3, [pc, #120]	; (5338 <atca_kit_parse_board_commands+0x28c>)
    52c0:	4798      	blx	r3
					break;
    52c2:	e7db      	b.n	527c <atca_kit_parse_board_commands+0x1d0>
			strcat((char *) response, StringInterface[device_interface]);
    52c4:	00bf      	lsls	r7, r7, #2
    52c6:	ab02      	add	r3, sp, #8
    52c8:	58f9      	ldr	r1, [r7, r3]
    52ca:	0020      	movs	r0, r4
    52cc:	4b29      	ldr	r3, [pc, #164]	; (5374 <atca_kit_parse_board_commands+0x2c8>)
    52ce:	4798      	blx	r3
			responseIndex = strlen((char *) response);
    52d0:	0020      	movs	r0, r4
    52d2:	4b1a      	ldr	r3, [pc, #104]	; (533c <atca_kit_parse_board_commands+0x290>)
    52d4:	4798      	blx	r3
    52d6:	b287      	uxth	r7, r0
			dataLength++;
    52d8:	221e      	movs	r2, #30
    52da:	446a      	add	r2, sp
    52dc:	8813      	ldrh	r3, [r2, #0]
    52de:	3301      	adds	r3, #1
    52e0:	8013      	strh	r3, [r2, #0]
			response[responseIndex + 1] = dev_info->bus_type == DEVKIT_IF_I2C ? dev_info->address : dev_info->device_index;
    52e2:	0402      	lsls	r2, r0, #16
    52e4:	0c12      	lsrs	r2, r2, #16
    52e6:	3201      	adds	r2, #1
    52e8:	18a2      	adds	r2, r4, r2
    52ea:	4643      	mov	r3, r8
    52ec:	00db      	lsls	r3, r3, #3
    52ee:	491d      	ldr	r1, [pc, #116]	; (5364 <atca_kit_parse_board_commands+0x2b8>)
    52f0:	5c5b      	ldrb	r3, [r3, r1]
    52f2:	2b02      	cmp	r3, #2
    52f4:	d006      	beq.n	5304 <atca_kit_parse_board_commands+0x258>
    52f6:	4643      	mov	r3, r8
    52f8:	00db      	lsls	r3, r3, #3
    52fa:	491a      	ldr	r1, [pc, #104]	; (5364 <atca_kit_parse_board_commands+0x2b8>)
    52fc:	18cb      	adds	r3, r1, r3
    52fe:	78db      	ldrb	r3, [r3, #3]
    5300:	7013      	strb	r3, [r2, #0]
			break;
    5302:	e6f7      	b.n	50f4 <atca_kit_parse_board_commands+0x48>
			response[responseIndex + 1] = dev_info->bus_type == DEVKIT_IF_I2C ? dev_info->address : dev_info->device_index;
    5304:	4643      	mov	r3, r8
    5306:	00d9      	lsls	r1, r3, #3
    5308:	4b16      	ldr	r3, [pc, #88]	; (5364 <atca_kit_parse_board_commands+0x2b8>)
    530a:	185b      	adds	r3, r3, r1
    530c:	789b      	ldrb	r3, [r3, #2]
    530e:	e7f7      	b.n	5300 <atca_kit_parse_board_commands+0x254>
	uint16_t responseIndex = 0;
    5310:	2700      	movs	r7, #0
        return ATCA_BAD_PARAM;
    5312:	26e2      	movs	r6, #226	; 0xe2
    5314:	e6ee      	b.n	50f4 <atca_kit_parse_board_commands+0x48>
	uint16_t responseIndex = 0;
    5316:	2700      	movs	r7, #0
				status = KIT_STATUS_NO_DEVICE;
    5318:	26c5      	movs	r6, #197	; 0xc5
    531a:	e6eb      	b.n	50f4 <atca_kit_parse_board_commands+0x48>
		return status;
    531c:	26c0      	movs	r6, #192	; 0xc0
    531e:	e6f2      	b.n	5106 <atca_kit_parse_board_commands+0x5a>
    5320:	000146ec 	.word	0x000146ec
    5324:	00010f8b 	.word	0x00010f8b
    5328:	00004ff9 	.word	0x00004ff9
    532c:	00004e79 	.word	0x00004e79
    5330:	00003bc5 	.word	0x00003bc5
    5334:	0001471c 	.word	0x0001471c
    5338:	000109c9 	.word	0x000109c9
    533c:	00010fa7 	.word	0x00010fa7
    5340:	00014704 	.word	0x00014704
    5344:	0001472c 	.word	0x0001472c
    5348:	00014708 	.word	0x00014708
    534c:	00014734 	.word	0x00014734
    5350:	000146fc 	.word	0x000146fc
    5354:	0001473c 	.word	0x0001473c
    5358:	00014700 	.word	0x00014700
    535c:	00004b65 	.word	0x00004b65
    5360:	20000be0 	.word	0x20000be0
    5364:	20002b04 	.word	0x20002b04
    5368:	000146b8 	.word	0x000146b8
    536c:	00014744 	.word	0x00014744
    5370:	0001470c 	.word	0x0001470c
    5374:	00010f71 	.word	0x00010f71

00005378 <atca_kit_convert_data>:
 * \param[in] length number of bytes to send
 * \param[in] buffer pointer to tx buffer
 * \return new length of data
 */
uint16_t atca_kit_convert_data(uint16_t length, uint8_t *buffer)
{
    5378:	b510      	push	{r4, lr}
	if (length > DEVICE_BUFFER_SIZE_MAX_RX) {
    537a:	287b      	cmp	r0, #123	; 0x7b
    537c:	d902      	bls.n	5384 <atca_kit_convert_data+0xc>
		buffer[0] = KIT_STATUS_USB_TX_OVERFLOW;
    537e:	23c2      	movs	r3, #194	; 0xc2
    5380:	700b      	strb	r3, [r1, #0]
		length = DEVICE_BUFFER_SIZE_MAX_RX;
    5382:	207b      	movs	r0, #123	; 0x7b
	}
	return atca_kit_create_usb_packet(length, buffer);
    5384:	4b01      	ldr	r3, [pc, #4]	; (538c <atca_kit_convert_data+0x14>)
    5386:	4798      	blx	r3
}
    5388:	bd10      	pop	{r4, pc}
    538a:	46c0      	nop			; (mov r8, r8)
    538c:	00004ff9 	.word	0x00004ff9

00005390 <atca_kit_process_usb_packet>:
 * \param[in] rx_length is length of received packet 
 * \param[in] txLength is Tx length to be sent to Host
 * returns pointer of buffer to be sent
 */
uint8_t* atca_kit_process_usb_packet(uint16_t rx_length, uint16_t *txLength)
{
    5390:	b5f0      	push	{r4, r5, r6, r7, lr}
    5392:	46de      	mov	lr, fp
    5394:	4657      	mov	r7, sl
    5396:	464e      	mov	r6, r9
    5398:	4645      	mov	r5, r8
    539a:	b5e0      	push	{r5, r6, r7, lr}
    539c:	b085      	sub	sp, #20
    539e:	0007      	movs	r7, r0
    53a0:	468b      	mov	fp, r1
	uint8_t status = KIT_STATUS_SUCCESS;
	uint8_t responseIsAscii = 0;
    53a2:	2200      	movs	r2, #0
    53a4:	230f      	movs	r3, #15
    53a6:	446b      	add	r3, sp
    53a8:	701a      	strb	r2, [r3, #0]
	uint16_t rxLength = rx_length - 1;	// except for a line feed character
    53aa:	3801      	subs	r0, #1
    53ac:	b283      	uxth	r3, r0
    53ae:	469a      	mov	sl, r3
		pucUsbTxBuffer[0] = rxPacketStatus;
		*txLength = 1;
		*txLength = atca_kit_convert_data(*txLength, pucUsbTxBuffer);
	}

	memset(pucUsbTxBuffer, 0, sizeof(pucUsbTxBuffer));
    53b0:	4a35      	ldr	r2, [pc, #212]	; (5488 <atca_kit_process_usb_packet+0xf8>)
    53b2:	2100      	movs	r1, #0
    53b4:	4835      	ldr	r0, [pc, #212]	; (548c <atca_kit_process_usb_packet+0xfc>)
    53b6:	4b36      	ldr	r3, [pc, #216]	; (5490 <atca_kit_process_usb_packet+0x100>)
    53b8:	4798      	blx	r3

	// Process packet.
	for (uint16_t i = 0; i < rxLength; i++)
    53ba:	4653      	mov	r3, sl
    53bc:	2b00      	cmp	r3, #0
    53be:	d019      	beq.n	53f4 <atca_kit_process_usb_packet+0x64>
    53c0:	4c34      	ldr	r4, [pc, #208]	; (5494 <atca_kit_process_usb_packet+0x104>)
    53c2:	3f02      	subs	r7, #2
    53c4:	b2bf      	uxth	r7, r7
    53c6:	3701      	adds	r7, #1
    53c8:	19e7      	adds	r7, r4, r7
		pRxBuffer[i] = tolower(pRxBuffer[i]);
    53ca:	4b33      	ldr	r3, [pc, #204]	; (5498 <atca_kit_process_usb_packet+0x108>)
    53cc:	4699      	mov	r9, r3
    53ce:	2303      	movs	r3, #3
    53d0:	4698      	mov	r8, r3
    53d2:	e003      	b.n	53dc <atca_kit_process_usb_packet+0x4c>
    53d4:	7032      	strb	r2, [r6, #0]
    53d6:	3401      	adds	r4, #1
	for (uint16_t i = 0; i < rxLength; i++)
    53d8:	42bc      	cmp	r4, r7
    53da:	d00b      	beq.n	53f4 <atca_kit_process_usb_packet+0x64>
    53dc:	0026      	movs	r6, r4
		pRxBuffer[i] = tolower(pRxBuffer[i]);
    53de:	7825      	ldrb	r5, [r4, #0]
    53e0:	47c8      	blx	r9
    53e2:	1940      	adds	r0, r0, r5
    53e4:	7843      	ldrb	r3, [r0, #1]
    53e6:	4642      	mov	r2, r8
    53e8:	4013      	ands	r3, r2
    53ea:	002a      	movs	r2, r5
    53ec:	2b01      	cmp	r3, #1
    53ee:	d1f1      	bne.n	53d4 <atca_kit_process_usb_packet+0x44>
    53f0:	3220      	adds	r2, #32
    53f2:	e7ef      	b.n	53d4 <atca_kit_process_usb_packet+0x44>

	if (pRxBuffer[0] == 'l') {	// lib
    53f4:	4b27      	ldr	r3, [pc, #156]	; (5494 <atca_kit_process_usb_packet+0x104>)
    53f6:	781b      	ldrb	r3, [r3, #0]
    53f8:	2b6c      	cmp	r3, #108	; 0x6c
    53fa:	d00c      	beq.n	5416 <atca_kit_process_usb_packet+0x86>
	uint8_t* pRxBuffer = atca_kit_get_rx_buffer();
    53fc:	4925      	ldr	r1, [pc, #148]	; (5494 <atca_kit_process_usb_packet+0x104>)
			status = KIT_STATUS_UNKNOWN_COMMAND;
		else
			pRxBuffer++;
	}

	switch (pRxBuffer[0]) {
    53fe:	780b      	ldrb	r3, [r1, #0]
    5400:	2b65      	cmp	r3, #101	; 0x65
    5402:	d012      	beq.n	542a <atca_kit_process_usb_packet+0x9a>
    5404:	2b73      	cmp	r3, #115	; 0x73
    5406:	d010      	beq.n	542a <atca_kit_process_usb_packet+0x9a>
    5408:	2b62      	cmp	r3, #98	; 0x62
    540a:	d031      	beq.n	5470 <atca_kit_process_usb_packet+0xe0>
			status = atca_kit_parse_board_commands((uint8_t) rxLength, (uint8_t *)pRxBuffer, txLength, txBuffer, &responseIsAscii);
			break;

		default :
			status = KIT_STATUS_UNKNOWN_COMMAND;
			*txLength = 1;			
    540c:	2301      	movs	r3, #1
    540e:	465a      	mov	r2, fp
    5410:	8013      	strh	r3, [r2, #0]
			status = KIT_STATUS_UNKNOWN_COMMAND;
    5412:	20c0      	movs	r0, #192	; 0xc0
			break;
    5414:	e00f      	b.n	5436 <atca_kit_process_usb_packet+0xa6>
		pRxBuffer = memchr(pRxBuffer, ':', rxBufferIndex);
    5416:	2200      	movs	r2, #0
    5418:	213a      	movs	r1, #58	; 0x3a
    541a:	481e      	ldr	r0, [pc, #120]	; (5494 <atca_kit_process_usb_packet+0x104>)
    541c:	4b1f      	ldr	r3, [pc, #124]	; (549c <atca_kit_process_usb_packet+0x10c>)
    541e:	4798      	blx	r3
			pRxBuffer++;
    5420:	0003      	movs	r3, r0
    5422:	1e5a      	subs	r2, r3, #1
    5424:	4193      	sbcs	r3, r2
    5426:	18c1      	adds	r1, r0, r3
    5428:	e7e9      	b.n	53fe <atca_kit_process_usb_packet+0x6e>
			status = atca_kit_parse_ecc_commands(rxLength, (uint8_t *)pRxBuffer, txLength, pucUsbTxBuffer + 1);
    542a:	4b18      	ldr	r3, [pc, #96]	; (548c <atca_kit_process_usb_packet+0xfc>)
    542c:	3301      	adds	r3, #1
    542e:	465a      	mov	r2, fp
    5430:	4650      	mov	r0, sl
    5432:	4c1b      	ldr	r4, [pc, #108]	; (54a0 <atca_kit_process_usb_packet+0x110>)
    5434:	47a0      	blx	r4
	}

	if (!responseIsAscii) {
    5436:	230f      	movs	r3, #15
    5438:	446b      	add	r3, sp
    543a:	781b      	ldrb	r3, [r3, #0]
    543c:	2b00      	cmp	r3, #0
    543e:	d10f      	bne.n	5460 <atca_kit_process_usb_packet+0xd0>
		// Copy leading function return byte.
		pucUsbTxBuffer[0] = status;
    5440:	4b12      	ldr	r3, [pc, #72]	; (548c <atca_kit_process_usb_packet+0xfc>)
    5442:	7018      	strb	r0, [r3, #0]
		// Tell atca_kit_convert_data the correct txLength.
		if (*txLength < DEVICE_BUFFER_SIZE_MAX_RX)
    5444:	465b      	mov	r3, fp
    5446:	881b      	ldrh	r3, [r3, #0]
    5448:	2b7a      	cmp	r3, #122	; 0x7a
    544a:	d802      	bhi.n	5452 <atca_kit_process_usb_packet+0xc2>
			(*txLength)++;
    544c:	3301      	adds	r3, #1
    544e:	465a      	mov	r2, fp
    5450:	8013      	strh	r3, [r2, #0]
		*txLength = atca_kit_convert_data(*txLength, pucUsbTxBuffer);
    5452:	465b      	mov	r3, fp
    5454:	8818      	ldrh	r0, [r3, #0]
    5456:	490d      	ldr	r1, [pc, #52]	; (548c <atca_kit_process_usb_packet+0xfc>)
    5458:	4b12      	ldr	r3, [pc, #72]	; (54a4 <atca_kit_process_usb_packet+0x114>)
    545a:	4798      	blx	r3
    545c:	465b      	mov	r3, fp
    545e:	8018      	strh	r0, [r3, #0]
	}

	return txBuffer;
}
    5460:	480a      	ldr	r0, [pc, #40]	; (548c <atca_kit_process_usb_packet+0xfc>)
    5462:	b005      	add	sp, #20
    5464:	bc3c      	pop	{r2, r3, r4, r5}
    5466:	4690      	mov	r8, r2
    5468:	4699      	mov	r9, r3
    546a:	46a2      	mov	sl, r4
    546c:	46ab      	mov	fp, r5
    546e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = atca_kit_parse_board_commands((uint8_t) rxLength, (uint8_t *)pRxBuffer, txLength, txBuffer, &responseIsAscii);
    5470:	20ff      	movs	r0, #255	; 0xff
    5472:	4653      	mov	r3, sl
    5474:	4018      	ands	r0, r3
    5476:	230f      	movs	r3, #15
    5478:	446b      	add	r3, sp
    547a:	9300      	str	r3, [sp, #0]
    547c:	4b03      	ldr	r3, [pc, #12]	; (548c <atca_kit_process_usb_packet+0xfc>)
    547e:	465a      	mov	r2, fp
    5480:	4c09      	ldr	r4, [pc, #36]	; (54a8 <atca_kit_process_usb_packet+0x118>)
    5482:	47a0      	blx	r4
			break;
    5484:	e7d7      	b.n	5436 <atca_kit_process_usb_packet+0xa6>
    5486:	46c0      	nop			; (mov r8, r8)
    5488:	000008fc 	.word	0x000008fc
    548c:	200014e0 	.word	0x200014e0
    5490:	000109ff 	.word	0x000109ff
    5494:	20000be4 	.word	0x20000be4
    5498:	00010855 	.word	0x00010855
    549c:	00010995 	.word	0x00010995
    54a0:	00004edd 	.word	0x00004edd
    54a4:	00005379 	.word	0x00005379
    54a8:	000050ad 	.word	0x000050ad

000054ac <atca_kit_main_handler>:

/** \brief This handler is to receive and send USB packets with Host over the HID interface.
 */
void atca_kit_main_handler(void)
{
    54ac:	b530      	push	{r4, r5, lr}
    54ae:	b083      	sub	sp, #12
    uint16_t txlen;

    if(g_usb_message_received)
    54b0:	4b0d      	ldr	r3, [pc, #52]	; (54e8 <atca_kit_main_handler+0x3c>)
    54b2:	681b      	ldr	r3, [r3, #0]
    54b4:	2b00      	cmp	r3, #0
    54b6:	d101      	bne.n	54bc <atca_kit_main_handler+0x10>
        //DEBUG_PRINTF("Kit TX: %d, %s\r\n", txlen, pucUsbTxBuffer);
        usb_send_response_message(pucUsbTxBuffer, txlen);

        g_usb_message_received--;
    }
}
    54b8:	b003      	add	sp, #12
    54ba:	bd30      	pop	{r4, r5, pc}
    atca_kit_holdoff = val / TIMER_UPDATE_PERIOD;
    54bc:	2232      	movs	r2, #50	; 0x32
    54be:	4b0b      	ldr	r3, [pc, #44]	; (54ec <atca_kit_main_handler+0x40>)
    54c0:	601a      	str	r2, [r3, #0]
        atca_kit_process_usb_packet(g_usb_buffer_length, &txlen);
    54c2:	466b      	mov	r3, sp
    54c4:	1d9c      	adds	r4, r3, #6
    54c6:	4d0a      	ldr	r5, [pc, #40]	; (54f0 <atca_kit_main_handler+0x44>)
    54c8:	8828      	ldrh	r0, [r5, #0]
    54ca:	0021      	movs	r1, r4
    54cc:	4b09      	ldr	r3, [pc, #36]	; (54f4 <atca_kit_main_handler+0x48>)
    54ce:	4798      	blx	r3
        g_usb_buffer_length = 0;
    54d0:	2300      	movs	r3, #0
    54d2:	802b      	strh	r3, [r5, #0]
        usb_send_response_message(pucUsbTxBuffer, txlen);
    54d4:	8821      	ldrh	r1, [r4, #0]
    54d6:	4808      	ldr	r0, [pc, #32]	; (54f8 <atca_kit_main_handler+0x4c>)
    54d8:	4b08      	ldr	r3, [pc, #32]	; (54fc <atca_kit_main_handler+0x50>)
    54da:	4798      	blx	r3
        g_usb_message_received--;
    54dc:	4a02      	ldr	r2, [pc, #8]	; (54e8 <atca_kit_main_handler+0x3c>)
    54de:	6813      	ldr	r3, [r2, #0]
    54e0:	3b01      	subs	r3, #1
    54e2:	6013      	str	r3, [r2, #0]
}
    54e4:	e7e8      	b.n	54b8 <atca_kit_main_handler+0xc>
    54e6:	46c0      	nop			; (mov r8, r8)
    54e8:	20002af4 	.word	0x20002af4
    54ec:	20000bdc 	.word	0x20000bdc
    54f0:	200005de 	.word	0x200005de
    54f4:	00005391 	.word	0x00005391
    54f8:	200014e0 	.word	0x200014e0
    54fc:	00003c05 	.word	0x00003c05

00005500 <client_state_error>:
    5500:	2300      	movs	r3, #0
    5502:	8003      	strh	r3, [r0, #0]
static void client_counter_set(void* pCtx, uint32_t val)
{
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;

    /* Convert to loop time*/
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
    5504:	6083      	str	r3, [r0, #8]
static void client_state_error(void * pCtx)
{

    /* Move to the next state */
    client_state_update(pCtx, CLIENT_STATE_INIT, 0);
}
    5506:	4770      	bx	lr

00005508 <client_publish_message>:
{
    5508:	b5f0      	push	{r4, r5, r6, r7, lr}
    550a:	b0e3      	sub	sp, #396	; 0x18c
    550c:	0004      	movs	r4, r0
    uint32_t ts = time_utils_get_utc();
    550e:	4b2b      	ldr	r3, [pc, #172]	; (55bc <client_publish_message+0xb4>)
    5510:	4798      	blx	r3
    5512:	0006      	movs	r6, r0
    uint32_t temp = sensor_get_temperature();
    5514:	4b2a      	ldr	r3, [pc, #168]	; (55c0 <client_publish_message+0xb8>)
    5516:	4798      	blx	r3
    5518:	0005      	movs	r5, r0
    uint32_t speed = sensor_get_fan_speed();
    551a:	4b2a      	ldr	r3, [pc, #168]	; (55c4 <client_publish_message+0xbc>)
    551c:	4798      	blx	r3
    551e:	0007      	movs	r7, r0
    if(config_get_client_pub_topic(topic, sizeof(topic)))
    5520:	2164      	movs	r1, #100	; 0x64
    5522:	a805      	add	r0, sp, #20
    5524:	4b28      	ldr	r3, [pc, #160]	; (55c8 <client_publish_message+0xc0>)
    5526:	4798      	blx	r3
    5528:	2800      	cmp	r0, #0
    552a:	d139      	bne.n	55a0 <client_publish_message+0x98>
    uint32_t speed = sensor_get_fan_speed();
    552c:	9702      	str	r7, [sp, #8]
    snprintf(json_message, sizeof(json_message), "{ \"timestamp\": %u, \"temperature\": %d.%02d, \"fan-speed\": %d }", ts, temp/1000, temp % 1000,  speed);
    552e:	21fa      	movs	r1, #250	; 0xfa
    5530:	0089      	lsls	r1, r1, #2
    5532:	0028      	movs	r0, r5
    5534:	4b25      	ldr	r3, [pc, #148]	; (55cc <client_publish_message+0xc4>)
    5536:	4798      	blx	r3
    5538:	9101      	str	r1, [sp, #4]
    553a:	21fa      	movs	r1, #250	; 0xfa
    553c:	0089      	lsls	r1, r1, #2
    553e:	0028      	movs	r0, r5
    5540:	4b23      	ldr	r3, [pc, #140]	; (55d0 <client_publish_message+0xc8>)
    5542:	4798      	blx	r3
    5544:	9000      	str	r0, [sp, #0]
    5546:	0033      	movs	r3, r6
    5548:	4a22      	ldr	r2, [pc, #136]	; (55d4 <client_publish_message+0xcc>)
    554a:	2180      	movs	r1, #128	; 0x80
    554c:	0049      	lsls	r1, r1, #1
    554e:	a81e      	add	r0, sp, #120	; 0x78
    5550:	4d21      	ldr	r5, [pc, #132]	; (55d8 <client_publish_message+0xd0>)
    5552:	47a8      	blx	r5
    message.qos      = QOS1;
    5554:	ab5e      	add	r3, sp, #376	; 0x178
    5556:	2201      	movs	r2, #1
    5558:	701a      	strb	r2, [r3, #0]
    message.retained = 0;
    555a:	2200      	movs	r2, #0
    555c:	705a      	strb	r2, [r3, #1]
    message.dup      = 0;
    555e:	709a      	strb	r2, [r3, #2]
    message_id++;
    5560:	4b1e      	ldr	r3, [pc, #120]	; (55dc <client_publish_message+0xd4>)
    5562:	881b      	ldrh	r3, [r3, #0]
    5564:	3301      	adds	r3, #1
    5566:	b29b      	uxth	r3, r3
    if (message_id == (UINT16_MAX - 1))
    5568:	4a1d      	ldr	r2, [pc, #116]	; (55e0 <client_publish_message+0xd8>)
    556a:	4293      	cmp	r3, r2
    556c:	d01c      	beq.n	55a8 <client_publish_message+0xa0>
    message_id++;
    556e:	4a1b      	ldr	r2, [pc, #108]	; (55dc <client_publish_message+0xd4>)
    5570:	8013      	strh	r3, [r2, #0]
    message.id       = client_get_message_id();
    5572:	ad5e      	add	r5, sp, #376	; 0x178
    return message_id;
    5574:	4b19      	ldr	r3, [pc, #100]	; (55dc <client_publish_message+0xd4>)
    message.id       = client_get_message_id();
    5576:	881b      	ldrh	r3, [r3, #0]
    5578:	80ab      	strh	r3, [r5, #4]
    message.payload = (void*)json_message;
    557a:	ae1e      	add	r6, sp, #120	; 0x78
    557c:	9660      	str	r6, [sp, #384]	; 0x180
    message.payloadlen = strlen(json_message);
    557e:	0030      	movs	r0, r6
    5580:	4b18      	ldr	r3, [pc, #96]	; (55e4 <client_publish_message+0xdc>)
    5582:	4798      	blx	r3
    5584:	60e8      	str	r0, [r5, #12]
    CLIENT_PRINTF("Publishing MQTT Message %s\r\n", json_message);
    5586:	0031      	movs	r1, r6
    5588:	4817      	ldr	r0, [pc, #92]	; (55e8 <client_publish_message+0xe0>)
    558a:	4b18      	ldr	r3, [pc, #96]	; (55ec <client_publish_message+0xe4>)
    558c:	4798      	blx	r3
    status = MQTTPublish(mqtt_client, topic, &message);
    558e:	002a      	movs	r2, r5
    5590:	a905      	add	r1, sp, #20
    5592:	0020      	movs	r0, r4
    5594:	4b16      	ldr	r3, [pc, #88]	; (55f0 <client_publish_message+0xe8>)
    5596:	4798      	blx	r3
    if (status != MQTTCLIENT_SUCCESS)
    5598:	2800      	cmp	r0, #0
    559a:	d109      	bne.n	55b0 <client_publish_message+0xa8>
}
    559c:	b063      	add	sp, #396	; 0x18c
    559e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLIENT_PRINTF("Failed to get topic string");
    55a0:	4814      	ldr	r0, [pc, #80]	; (55f4 <client_publish_message+0xec>)
    55a2:	4b12      	ldr	r3, [pc, #72]	; (55ec <client_publish_message+0xe4>)
    55a4:	4798      	blx	r3
    55a6:	e7f9      	b.n	559c <client_publish_message+0x94>
        message_id = 1;
    55a8:	2201      	movs	r2, #1
    55aa:	4b0c      	ldr	r3, [pc, #48]	; (55dc <client_publish_message+0xd4>)
    55ac:	801a      	strh	r2, [r3, #0]
    55ae:	e7e0      	b.n	5572 <client_publish_message+0x6a>
        CLIENT_PRINTF("Failed to publish the MQTT message: %d\r\n", status);
    55b0:	0001      	movs	r1, r0
    55b2:	4811      	ldr	r0, [pc, #68]	; (55f8 <client_publish_message+0xf0>)
    55b4:	4b0d      	ldr	r3, [pc, #52]	; (55ec <client_publish_message+0xe4>)
    55b6:	4798      	blx	r3
    55b8:	e7f0      	b.n	559c <client_publish_message+0x94>
    55ba:	46c0      	nop			; (mov r8, r8)
    55bc:	00003ba1 	.word	0x00003ba1
    55c0:	00003ab9 	.word	0x00003ab9
    55c4:	00003af5 	.word	0x00003af5
    55c8:	00005b05 	.word	0x00005b05
    55cc:	0000e671 	.word	0x0000e671
    55d0:	0000e565 	.word	0x0000e565
    55d4:	0001482c 	.word	0x0001482c
    55d8:	00010e21 	.word	0x00010e21
    55dc:	200026b4 	.word	0x200026b4
    55e0:	0000fffe 	.word	0x0000fffe
    55e4:	00010fa7 	.word	0x00010fa7
    55e8:	0001486c 	.word	0x0001486c
    55ec:	00010b61 	.word	0x00010b61
    55f0:	00007a59 	.word	0x00007a59
    55f4:	00014810 	.word	0x00014810
    55f8:	0001488c 	.word	0x0001488c

000055fc <client_process_message>:
{
    55fc:	b570      	push	{r4, r5, r6, lr}
    55fe:	0004      	movs	r4, r0
	printf("received config: %.*s\r\n",data->message->payloadlen,(char*)data->message->payload);
    5600:	6803      	ldr	r3, [r0, #0]
    5602:	689a      	ldr	r2, [r3, #8]
    5604:	68d9      	ldr	r1, [r3, #12]
    5606:	4822      	ldr	r0, [pc, #136]	; (5690 <client_process_message+0x94>)
    5608:	4b22      	ldr	r3, [pc, #136]	; (5694 <client_process_message+0x98>)
    560a:	4798      	blx	r3
	if(0==strncmp("LEDOn",(char*)data->message->payload,data->message->payloadlen)){
    560c:	6823      	ldr	r3, [r4, #0]
    560e:	689d      	ldr	r5, [r3, #8]
    5610:	68de      	ldr	r6, [r3, #12]
    5612:	0032      	movs	r2, r6
    5614:	0029      	movs	r1, r5
    5616:	4820      	ldr	r0, [pc, #128]	; (5698 <client_process_message+0x9c>)
    5618:	4b20      	ldr	r3, [pc, #128]	; (569c <client_process_message+0xa0>)
    561a:	4798      	blx	r3
    561c:	2800      	cmp	r0, #0
    561e:	d02a      	beq.n	5676 <client_process_message+0x7a>
	else if(0==strncmp("LEDOff",(char*)data->message->payload,data->message->payloadlen)){
    5620:	0032      	movs	r2, r6
    5622:	0029      	movs	r1, r5
    5624:	481e      	ldr	r0, [pc, #120]	; (56a0 <client_process_message+0xa4>)
    5626:	4b1d      	ldr	r3, [pc, #116]	; (569c <client_process_message+0xa0>)
    5628:	4798      	blx	r3
    562a:	2800      	cmp	r0, #0
    562c:	d02b      	beq.n	5686 <client_process_message+0x8a>
    json_message_value   = json_parse_string((char*)data->message->payload);
    562e:	6823      	ldr	r3, [r4, #0]
    5630:	6898      	ldr	r0, [r3, #8]
    5632:	4b1c      	ldr	r3, [pc, #112]	; (56a4 <client_process_message+0xa8>)
    5634:	4798      	blx	r3
    json_message_object  = json_value_get_object(json_message_value);
    5636:	4b1c      	ldr	r3, [pc, #112]	; (56a8 <client_process_message+0xac>)
    5638:	4798      	blx	r3
    563a:	0004      	movs	r4, r0
    json_array_settings = json_object_get_array(json_message_object, "fan-speed-map");
    563c:	491b      	ldr	r1, [pc, #108]	; (56ac <client_process_message+0xb0>)
    563e:	4b1c      	ldr	r3, [pc, #112]	; (56b0 <client_process_message+0xb4>)
    5640:	4798      	blx	r3
    if(json_array_settings)
    5642:	2800      	cmp	r0, #0
    5644:	d001      	beq.n	564a <client_process_message+0x4e>
        update_settings_from_json(json_array_settings);
    5646:	4b1b      	ldr	r3, [pc, #108]	; (56b4 <client_process_message+0xb8>)
    5648:	4798      	blx	r3
    json_override_object = json_object_get_object(json_message_object, "override");
    564a:	491b      	ldr	r1, [pc, #108]	; (56b8 <client_process_message+0xbc>)
    564c:	0020      	movs	r0, r4
    564e:	4b1b      	ldr	r3, [pc, #108]	; (56bc <client_process_message+0xc0>)
    5650:	4798      	blx	r3
    if(json_override_object)
    5652:	2800      	cmp	r0, #0
    5654:	d001      	beq.n	565a <client_process_message+0x5e>
        override_from_json(json_override_object);
    5656:	4b1a      	ldr	r3, [pc, #104]	; (56c0 <client_process_message+0xc4>)
    5658:	4798      	blx	r3
    update_rate = json_object_get_number(json_message_object, "update-rate");
    565a:	491a      	ldr	r1, [pc, #104]	; (56c4 <client_process_message+0xc8>)
    565c:	0020      	movs	r0, r4
    565e:	4b1a      	ldr	r3, [pc, #104]	; (56c8 <client_process_message+0xcc>)
    5660:	4798      	blx	r3
    5662:	4b1a      	ldr	r3, [pc, #104]	; (56cc <client_process_message+0xd0>)
    5664:	4798      	blx	r3
    if(1000 < update_rate)
    5666:	23fa      	movs	r3, #250	; 0xfa
    5668:	009b      	lsls	r3, r3, #2
    566a:	4298      	cmp	r0, r3
    566c:	d902      	bls.n	5674 <client_process_message+0x78>
        g_client_context.update_period = update_rate;
    566e:	4b18      	ldr	r3, [pc, #96]	; (56d0 <client_process_message+0xd4>)
    5670:	4a18      	ldr	r2, [pc, #96]	; (56d4 <client_process_message+0xd8>)
    5672:	52d0      	strh	r0, [r2, r3]
}
    5674:	bd70      	pop	{r4, r5, r6, pc}
		led_ctrl_set_color(LED_COLOR_GREEN,LED_MODE_NONE);
    5676:	2100      	movs	r1, #0
    5678:	3001      	adds	r0, #1
    567a:	4b17      	ldr	r3, [pc, #92]	; (56d8 <client_process_message+0xdc>)
    567c:	4798      	blx	r3
		led_ctrl_set_mode(LED_MODE_TURN_ON);
    567e:	2002      	movs	r0, #2
    5680:	4b16      	ldr	r3, [pc, #88]	; (56dc <client_process_message+0xe0>)
    5682:	4798      	blx	r3
    5684:	e7d3      	b.n	562e <client_process_message+0x32>
		led_ctrl_set_mode(LED_MODE_TURN_OFF);
    5686:	3001      	adds	r0, #1
    5688:	4b14      	ldr	r3, [pc, #80]	; (56dc <client_process_message+0xe0>)
    568a:	4798      	blx	r3
    568c:	e7cf      	b.n	562e <client_process_message+0x32>
    568e:	46c0      	nop			; (mov r8, r8)
    5690:	000147c0 	.word	0x000147c0
    5694:	00010b61 	.word	0x00010b61
    5698:	000147d8 	.word	0x000147d8
    569c:	00010fb5 	.word	0x00010fb5
    56a0:	000147e0 	.word	0x000147e0
    56a4:	000091b9 	.word	0x000091b9
    56a8:	00008b6d 	.word	0x00008b6d
    56ac:	000147e8 	.word	0x000147e8
    56b0:	00008bb1 	.word	0x00008bb1
    56b4:	000039fd 	.word	0x000039fd
    56b8:	000147f8 	.word	0x000147f8
    56bc:	00008b85 	.word	0x00008b85
    56c0:	00003a91 	.word	0x00003a91
    56c4:	00014804 	.word	0x00014804
    56c8:	00008bf5 	.word	0x00008bf5
    56cc:	0000e99d 	.word	0x0000e99d
    56d0:	000008d4 	.word	0x000008d4
    56d4:	20001ddc 	.word	0x20001ddc
    56d8:	00007239 	.word	0x00007239
    56dc:	00007369 	.word	0x00007369

000056e0 <client_state_init>:
{
    56e0:	b530      	push	{r4, r5, lr}
    56e2:	b085      	sub	sp, #20
    56e4:	0004      	movs	r4, r0
    ctx->mqtt_net.mqttread  = &mqtt_packet_read;
    56e6:	4b0f      	ldr	r3, [pc, #60]	; (5724 <client_state_init+0x44>)
    56e8:	60c3      	str	r3, [r0, #12]
    ctx->mqtt_net.mqttwrite = &mqtt_packet_write;
    56ea:	4b0f      	ldr	r3, [pc, #60]	; (5728 <client_state_init+0x48>)
    56ec:	6103      	str	r3, [r0, #16]
        ctx->mqtt_tx_buf, CLIENT_MQTT_TX_BUF_SIZE,
    56ee:	238e      	movs	r3, #142	; 0x8e
    56f0:	00db      	lsls	r3, r3, #3
    56f2:	18c3      	adds	r3, r0, r3
    MQTTClientInit(&ctx->mqtt_client, &ctx->mqtt_net, CLIENT_MQTT_TIMEOUT_MS,
    56f4:	0001      	movs	r1, r0
    56f6:	310c      	adds	r1, #12
    56f8:	3014      	adds	r0, #20
    56fa:	2280      	movs	r2, #128	; 0x80
    56fc:	00d2      	lsls	r2, r2, #3
    56fe:	9202      	str	r2, [sp, #8]
        ctx->mqtt_rx_buf, CLIENT_MQTT_RX_BUF_SIZE);
    5700:	0025      	movs	r5, r4
    5702:	3570      	adds	r5, #112	; 0x70
    MQTTClientInit(&ctx->mqtt_client, &ctx->mqtt_net, CLIENT_MQTT_TIMEOUT_MS,
    5704:	9501      	str	r5, [sp, #4]
    5706:	9200      	str	r2, [sp, #0]
    5708:	22fa      	movs	r2, #250	; 0xfa
    570a:	00d2      	lsls	r2, r2, #3
    570c:	4d07      	ldr	r5, [pc, #28]	; (572c <client_state_init+0x4c>)
    570e:	47a8      	blx	r5
    ctx->update_period = CLIENT_REPORT_PERIOD_DEFAULT;
    5710:	4a07      	ldr	r2, [pc, #28]	; (5730 <client_state_init+0x50>)
    5712:	4b08      	ldr	r3, [pc, #32]	; (5734 <client_state_init+0x54>)
    5714:	52e2      	strh	r2, [r4, r3]
    5716:	2301      	movs	r3, #1
    5718:	8023      	strh	r3, [r4, #0]
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
    571a:	2300      	movs	r3, #0
    571c:	60a3      	str	r3, [r4, #8]
}
    571e:	b005      	add	sp, #20
    5720:	bd30      	pop	{r4, r5, pc}
    5722:	46c0      	nop			; (mov r8, r8)
    5724:	000083fd 	.word	0x000083fd
    5728:	00008411 	.word	0x00008411
    572c:	0000747d 	.word	0x0000747d
    5730:	00001388 	.word	0x00001388
    5734:	000008d4 	.word	0x000008d4

00005738 <client_state_run>:
{
    5738:	b570      	push	{r4, r5, r6, lr}
    573a:	0004      	movs	r4, r0
    if(wifi_has_error())
    573c:	4b10      	ldr	r3, [pc, #64]	; (5780 <client_state_run+0x48>)
    573e:	4798      	blx	r3
    5740:	2800      	cmp	r0, #0
    5742:	d109      	bne.n	5758 <client_state_run+0x20>
    if(client_counter_finished(pCtx))
    5744:	68a3      	ldr	r3, [r4, #8]
    5746:	2b00      	cmp	r3, #0
    5748:	d008      	beq.n	575c <client_state_run+0x24>
        if(MQTTYield(&ctx->mqtt_client, MQTT_YEILD_TIMEOUT_MS))
    574a:	0020      	movs	r0, r4
    574c:	3014      	adds	r0, #20
    574e:	21fa      	movs	r1, #250	; 0xfa
    5750:	0049      	lsls	r1, r1, #1
    5752:	4b0c      	ldr	r3, [pc, #48]	; (5784 <client_state_run+0x4c>)
    5754:	4798      	blx	r3
}
    5756:	bd70      	pop	{r4, r5, r6, pc}
    5758:	2300      	movs	r3, #0
    575a:	8023      	strh	r3, [r4, #0]
        client_counter_set(pCtx, ctx->update_period);
    575c:	4b0a      	ldr	r3, [pc, #40]	; (5788 <client_state_run+0x50>)
    575e:	5ae5      	ldrh	r5, [r4, r3]
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
    5760:	2164      	movs	r1, #100	; 0x64
    5762:	0028      	movs	r0, r5
    5764:	4b09      	ldr	r3, [pc, #36]	; (578c <client_state_run+0x54>)
    5766:	4798      	blx	r3
    5768:	60a0      	str	r0, [r4, #8]
    if(val && !ctx->holdoff)
    576a:	2d00      	cmp	r5, #0
    576c:	d003      	beq.n	5776 <client_state_run+0x3e>
    576e:	2800      	cmp	r0, #0
    5770:	d101      	bne.n	5776 <client_state_run+0x3e>
        ctx->holdoff = 1;
    5772:	2301      	movs	r3, #1
    5774:	60a3      	str	r3, [r4, #8]
        client_publish_message(&ctx->mqtt_client);
    5776:	0020      	movs	r0, r4
    5778:	3014      	adds	r0, #20
    577a:	4b05      	ldr	r3, [pc, #20]	; (5790 <client_state_run+0x58>)
    577c:	4798      	blx	r3
    577e:	e7ea      	b.n	5756 <client_state_run+0x1e>
    5780:	000042c9 	.word	0x000042c9
    5784:	00007809 	.word	0x00007809
    5788:	000008d4 	.word	0x000008d4
    578c:	0000e565 	.word	0x0000e565
    5790:	00005509 	.word	0x00005509

00005794 <client_state_get_time>:
{
    5794:	b510      	push	{r4, lr}
    5796:	0004      	movs	r4, r0
    if(client_counter_finished(pCtx))
    5798:	6883      	ldr	r3, [r0, #8]
    579a:	2b00      	cmp	r3, #0
    579c:	d000      	beq.n	57a0 <client_state_get_time+0xc>
}
    579e:	bd10      	pop	{r4, pc}
        if(!time_utils_get_utc())
    57a0:	4b06      	ldr	r3, [pc, #24]	; (57bc <client_state_get_time+0x28>)
    57a2:	4798      	blx	r3
    57a4:	2800      	cmp	r0, #0
    57a6:	d004      	beq.n	57b2 <client_state_get_time+0x1e>
    57a8:	2302      	movs	r3, #2
    57aa:	8023      	strh	r3, [r4, #0]
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
    57ac:	2300      	movs	r3, #0
    57ae:	60a3      	str	r3, [r4, #8]
}
    57b0:	e7f5      	b.n	579e <client_state_get_time+0xa>
            wifi_request_time();
    57b2:	4b03      	ldr	r3, [pc, #12]	; (57c0 <client_state_get_time+0x2c>)
    57b4:	4798      	blx	r3
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
    57b6:	2364      	movs	r3, #100	; 0x64
    57b8:	60a3      	str	r3, [r4, #8]
    57ba:	e7f0      	b.n	579e <client_state_get_time+0xa>
    57bc:	00003ba1 	.word	0x00003ba1
    57c0:	0000434d 	.word	0x0000434d

000057c4 <client_state_connect>:
{
    57c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    57c6:	b097      	sub	sp, #92	; 0x5c
    57c8:	0004      	movs	r4, r0
    if(client_counter_finished(pCtx))
    57ca:	6883      	ldr	r3, [r0, #8]
    57cc:	2b00      	cmp	r3, #0
    57ce:	d001      	beq.n	57d4 <client_state_connect+0x10>
}
    57d0:	b017      	add	sp, #92	; 0x5c
    57d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
    57d4:	3364      	adds	r3, #100	; 0x64
    57d6:	6083      	str	r3, [r0, #8]
    if(config_get_host_info((char*)ctx->mqtt_rx_buf, CLIENT_MQTT_RX_BUF_SIZE, &port))
    57d8:	0005      	movs	r5, r0
    57da:	3570      	adds	r5, #112	; 0x70
    57dc:	466a      	mov	r2, sp
    57de:	2180      	movs	r1, #128	; 0x80
    57e0:	00c9      	lsls	r1, r1, #3
    57e2:	0028      	movs	r0, r5
    57e4:	4b37      	ldr	r3, [pc, #220]	; (58c4 <client_state_connect+0x100>)
    57e6:	4798      	blx	r3
    57e8:	2800      	cmp	r0, #0
    57ea:	d1f1      	bne.n	57d0 <client_state_connect+0xc>
    if(wifi_connect((char*)ctx->mqtt_rx_buf, port))
    57ec:	466b      	mov	r3, sp
    57ee:	8819      	ldrh	r1, [r3, #0]
    57f0:	0028      	movs	r0, r5
    57f2:	4b35      	ldr	r3, [pc, #212]	; (58c8 <client_state_connect+0x104>)
    57f4:	4798      	blx	r3
        if(client_connect_socket(pCtx))
    57f6:	2800      	cmp	r0, #0
    57f8:	d1ea      	bne.n	57d0 <client_state_connect+0xc>
    MQTTPacket_connectData mqtt_options = MQTTPacket_connectData_initializer;
    57fa:	2258      	movs	r2, #88	; 0x58
    57fc:	4933      	ldr	r1, [pc, #204]	; (58cc <client_state_connect+0x108>)
    57fe:	4668      	mov	r0, sp
    5800:	4b33      	ldr	r3, [pc, #204]	; (58d0 <client_state_connect+0x10c>)
    5802:	4798      	blx	r3
    mqtt_options.keepAliveInterval = MQTT_KEEP_ALIVE_INTERVAL_S;
    5804:	23e1      	movs	r3, #225	; 0xe1
    5806:	009b      	lsls	r3, r3, #2
    5808:	466a      	mov	r2, sp
    580a:	8313      	strh	r3, [r2, #24]
    mqtt_options.clientID.cstring = (char*)&ctx->mqtt_rx_buf[0];
    580c:	9503      	str	r5, [sp, #12]
    if(config_get_client_id(mqtt_options.clientID.cstring, buf_bytes_remaining))
    580e:	2180      	movs	r1, #128	; 0x80
    5810:	00c9      	lsls	r1, r1, #3
    5812:	0028      	movs	r0, r5
    5814:	4b2f      	ldr	r3, [pc, #188]	; (58d4 <client_state_connect+0x110>)
    5816:	4798      	blx	r3
    5818:	2800      	cmp	r0, #0
    581a:	d14b      	bne.n	58b4 <client_state_connect+0xf0>
    mqtt_options.username.cstring = mqtt_options.clientID.cstring + strlen(mqtt_options.clientID.cstring) + 1;
    581c:	9e03      	ldr	r6, [sp, #12]
    581e:	0030      	movs	r0, r6
    5820:	4b2d      	ldr	r3, [pc, #180]	; (58d8 <client_state_connect+0x114>)
    5822:	4798      	blx	r3
    5824:	1c45      	adds	r5, r0, #1
    5826:	1970      	adds	r0, r6, r5
    5828:	9010      	str	r0, [sp, #64]	; 0x40
    buf_bytes_remaining -= (mqtt_options.username.cstring - mqtt_options.clientID.cstring);
    582a:	2180      	movs	r1, #128	; 0x80
    582c:	00c9      	lsls	r1, r1, #3
    582e:	1b4d      	subs	r5, r1, r5
    if(config_get_client_username(mqtt_options.username.cstring, buf_bytes_remaining))
    5830:	0029      	movs	r1, r5
    5832:	4b2a      	ldr	r3, [pc, #168]	; (58dc <client_state_connect+0x118>)
    5834:	4798      	blx	r3
    5836:	2800      	cmp	r0, #0
    5838:	d13c      	bne.n	58b4 <client_state_connect+0xf0>
    mqtt_options.password.cstring = mqtt_options.username.cstring + strlen(mqtt_options.username.cstring) + 1;
    583a:	9e10      	ldr	r6, [sp, #64]	; 0x40
    583c:	0030      	movs	r0, r6
    583e:	4b26      	ldr	r3, [pc, #152]	; (58d8 <client_state_connect+0x114>)
    5840:	4798      	blx	r3
    5842:	1c41      	adds	r1, r0, #1
    5844:	1870      	adds	r0, r6, r1
    5846:	9013      	str	r0, [sp, #76]	; 0x4c
    buf_bytes_remaining -= (mqtt_options.password.cstring - mqtt_options.username.cstring);
    5848:	1a69      	subs	r1, r5, r1
    if(config_get_client_password(mqtt_options.password.cstring, buf_bytes_remaining))
    584a:	4b25      	ldr	r3, [pc, #148]	; (58e0 <client_state_connect+0x11c>)
    584c:	4798      	blx	r3
    584e:	2800      	cmp	r0, #0
    5850:	d130      	bne.n	58b4 <client_state_connect+0xf0>
    return MQTTConnect(&ctx->mqtt_client, &mqtt_options);
    5852:	0026      	movs	r6, r4
    5854:	3614      	adds	r6, #20
    5856:	4669      	mov	r1, sp
    5858:	0030      	movs	r0, r6
    585a:	4b22      	ldr	r3, [pc, #136]	; (58e4 <client_state_connect+0x120>)
    585c:	4798      	blx	r3
        if(status)
    585e:	2800      	cmp	r0, #0
    5860:	d12a      	bne.n	58b8 <client_state_connect+0xf4>
    status = config_get_client_sub_topic((char*)ctx->sub_topic, sizeof(ctx->sub_topic));
    5862:	2387      	movs	r3, #135	; 0x87
    5864:	011b      	lsls	r3, r3, #4
    5866:	18e7      	adds	r7, r4, r3
    5868:	2164      	movs	r1, #100	; 0x64
    586a:	0038      	movs	r0, r7
    586c:	4b1e      	ldr	r3, [pc, #120]	; (58e8 <client_state_connect+0x124>)
    586e:	4798      	blx	r3
    5870:	1e05      	subs	r5, r0, #0
    if (status != MQTTCLIENT_SUCCESS)
    5872:	d117      	bne.n	58a4 <client_state_connect+0xe0>
		printf("subscribed to : %s\r\n",ctx->sub_topic);
    5874:	0039      	movs	r1, r7
    5876:	481d      	ldr	r0, [pc, #116]	; (58ec <client_state_connect+0x128>)
    5878:	4b1d      	ldr	r3, [pc, #116]	; (58f0 <client_state_connect+0x12c>)
    587a:	4798      	blx	r3
		led_ctrl_set_color(LED_COLOR_BLUE,LED_MODE_NONE);
    587c:	2100      	movs	r1, #0
    587e:	2000      	movs	r0, #0
    5880:	4b1c      	ldr	r3, [pc, #112]	; (58f4 <client_state_connect+0x130>)
    5882:	4798      	blx	r3
		led_ctrl_set_mode(LED_MODE_TURN_ON);
    5884:	2002      	movs	r0, #2
    5886:	4b1c      	ldr	r3, [pc, #112]	; (58f8 <client_state_connect+0x134>)
    5888:	4798      	blx	r3
    status = MQTTSubscribe(&ctx->mqtt_client, ctx->sub_topic, QOS1, &client_process_message);
    588a:	4b1c      	ldr	r3, [pc, #112]	; (58fc <client_state_connect+0x138>)
    588c:	2201      	movs	r2, #1
    588e:	0039      	movs	r1, r7
    5890:	0030      	movs	r0, r6
    5892:	4d1b      	ldr	r5, [pc, #108]	; (5900 <client_state_connect+0x13c>)
    5894:	47a8      	blx	r5
    5896:	1e05      	subs	r5, r0, #0
        if(status)
    5898:	d107      	bne.n	58aa <client_state_connect+0xe6>
    589a:	2303      	movs	r3, #3
    589c:	8023      	strh	r3, [r4, #0]
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
    589e:	2300      	movs	r3, #0
    58a0:	60a3      	str	r3, [r4, #8]
    58a2:	e795      	b.n	57d0 <client_state_connect+0xc>
        CLIENT_PRINTF("Failed to load the subscription topic name");
    58a4:	4817      	ldr	r0, [pc, #92]	; (5904 <client_state_connect+0x140>)
    58a6:	4b12      	ldr	r3, [pc, #72]	; (58f0 <client_state_connect+0x12c>)
    58a8:	4798      	blx	r3
            CLIENT_PRINTF("MQTT Subscription Failed (%d)\r\n", status);
    58aa:	0029      	movs	r1, r5
    58ac:	4816      	ldr	r0, [pc, #88]	; (5908 <client_state_connect+0x144>)
    58ae:	4b10      	ldr	r3, [pc, #64]	; (58f0 <client_state_connect+0x12c>)
    58b0:	4798      	blx	r3
            return;
    58b2:	e78d      	b.n	57d0 <client_state_connect+0xc>
    58b4:	2001      	movs	r0, #1
    58b6:	4240      	negs	r0, r0
            CLIENT_PRINTF("MQTT Client Failed to Connect (%d)\r\n", status);
    58b8:	0001      	movs	r1, r0
    58ba:	4814      	ldr	r0, [pc, #80]	; (590c <client_state_connect+0x148>)
    58bc:	4b0c      	ldr	r3, [pc, #48]	; (58f0 <client_state_connect+0x12c>)
    58be:	4798      	blx	r3
            return;
    58c0:	e786      	b.n	57d0 <client_state_connect+0xc>
    58c2:	46c0      	nop			; (mov r8, r8)
    58c4:	00005b9d 	.word	0x00005b9d
    58c8:	00004371 	.word	0x00004371
    58cc:	00014768 	.word	0x00014768
    58d0:	000109c9 	.word	0x000109c9
    58d4:	000059a9 	.word	0x000059a9
    58d8:	00010fa7 	.word	0x00010fa7
    58dc:	00005a11 	.word	0x00005a11
    58e0:	00005a55 	.word	0x00005a55
    58e4:	00007885 	.word	0x00007885
    58e8:	00005b51 	.word	0x00005b51
    58ec:	0001490c 	.word	0x0001490c
    58f0:	00010b61 	.word	0x00010b61
    58f4:	00007239 	.word	0x00007239
    58f8:	00007369 	.word	0x00007369
    58fc:	000055fd 	.word	0x000055fd
    5900:	00007955 	.word	0x00007955
    5904:	000148e0 	.word	0x000148e0
    5908:	00014924 	.word	0x00014924
    590c:	000148b8 	.word	0x000148b8

00005910 <client_timer_update>:
    if(g_client_context.holdoff)
    5910:	4b03      	ldr	r3, [pc, #12]	; (5920 <client_timer_update+0x10>)
    5912:	689b      	ldr	r3, [r3, #8]
    5914:	2b00      	cmp	r3, #0
    5916:	d002      	beq.n	591e <client_timer_update+0xe>
        g_client_context.holdoff--;
    5918:	3b01      	subs	r3, #1
    591a:	4a01      	ldr	r2, [pc, #4]	; (5920 <client_timer_update+0x10>)
    591c:	6093      	str	r3, [r2, #8]
}
    591e:	4770      	bx	lr
    5920:	20001ddc 	.word	0x20001ddc

00005924 <client_task>:
    TINY_STATE_DEF(CLIENT_STATE_ERROR,      &client_state_error),
};

/* Assume a 100ms time basis */
void client_task(void)
{
    5924:	b570      	push	{r4, r5, r6, lr}
    if(!g_client_context.state.count)
    5926:	4b17      	ldr	r3, [pc, #92]	; (5984 <client_task+0x60>)
    5928:	885b      	ldrh	r3, [r3, #2]
    592a:	2b00      	cmp	r3, #0
    592c:	d122      	bne.n	5974 <client_task+0x50>
    ((tiny_state_ctx*)context)->states = states;
    592e:	4a15      	ldr	r2, [pc, #84]	; (5984 <client_task+0x60>)
    5930:	4b15      	ldr	r3, [pc, #84]	; (5988 <client_task+0x64>)
    5932:	6053      	str	r3, [r2, #4]
    ((tiny_state_ctx*)context)->count = count;
    5934:	2105      	movs	r1, #5
    5936:	8051      	strh	r1, [r2, #2]
    ((tiny_state_ctx*)context)->state = initial;
    5938:	2100      	movs	r1, #0
    593a:	8011      	strh	r1, [r2, #0]
    tiny_state_def * pState = tiny_state_find(pCtx->states, pCtx->count, pCtx->state);
    593c:	0018      	movs	r0, r3
    593e:	2505      	movs	r5, #5
        if(states[i]._s == state)
    5940:	2400      	movs	r4, #0
    5942:	681b      	ldr	r3, [r3, #0]
    5944:	42a3      	cmp	r3, r4
    5946:	d00f      	beq.n	5968 <client_task+0x44>
    5948:	0002      	movs	r2, r0
    594a:	320c      	adds	r2, #12
{
    594c:	2300      	movs	r3, #0
    for(i=0;i<count;i++)
    594e:	3301      	adds	r3, #1
    5950:	b29b      	uxth	r3, r3
    5952:	42ab      	cmp	r3, r5
    5954:	d20d      	bcs.n	5972 <client_task+0x4e>
        if(states[i]._s == state)
    5956:	0010      	movs	r0, r2
    5958:	320c      	adds	r2, #12
    595a:	0011      	movs	r1, r2
    595c:	390c      	subs	r1, #12
    595e:	6809      	ldr	r1, [r1, #0]
    5960:	42a1      	cmp	r1, r4
    5962:	d1f4      	bne.n	594e <client_task+0x2a>
    if(pState && pState->_f)
    5964:	2800      	cmp	r0, #0
    5966:	d004      	beq.n	5972 <client_task+0x4e>
    5968:	6883      	ldr	r3, [r0, #8]
    596a:	2b00      	cmp	r3, #0
    596c:	d001      	beq.n	5972 <client_task+0x4e>
        pState->_f(context);
    596e:	4805      	ldr	r0, [pc, #20]	; (5984 <client_task+0x60>)
    5970:	4798      	blx	r3
	    tiny_state_init(&g_client_context, g_client_states, sizeof(g_client_states)/sizeof(g_client_states[0]), CLIENT_STATE_INIT);
    }

    /* Run the state machine*/
    tiny_state_driver(&g_client_context);
}
    5972:	bd70      	pop	{r4, r5, r6, pc}
    tiny_state_def * pState = tiny_state_find(pCtx->states, pCtx->count, pCtx->state);
    5974:	4b03      	ldr	r3, [pc, #12]	; (5984 <client_task+0x60>)
    5976:	6858      	ldr	r0, [r3, #4]
    5978:	885d      	ldrh	r5, [r3, #2]
        if(states[i]._s == state)
    597a:	881c      	ldrh	r4, [r3, #0]
    597c:	6803      	ldr	r3, [r0, #0]
    597e:	42a3      	cmp	r3, r4
    5980:	d1e2      	bne.n	5948 <client_task+0x24>
    5982:	e7ef      	b.n	5964 <client_task+0x40>
    5984:	20001ddc 	.word	0x20001ddc
    5988:	20000238 	.word	0x20000238

0000598c <config_crypto>:
char config_gcp_thing_id[] = "WINC1500_00-00";  //this will be overwritten with mac address based name in wifi_task

#endif /* CONFIG_USE_STATIC_CONFIG */

void config_crypto(void)
{
    598c:	b510      	push	{r4, lr}
	/* Configure the default I2C address of the device */
	cfg_ateccx08a_i2c_default.atcai2c.slave_address = 0xB0;
    598e:	22b0      	movs	r2, #176	; 0xb0
    5990:	4b02      	ldr	r3, [pc, #8]	; (599c <config_crypto+0x10>)
    5992:	711a      	strb	r2, [r3, #4]
    /* For the ATSAMG55-XPRO Development board */
    cfg_ateccx08a_i2c_default.atcai2c.bus = 1;
#endif

	/* Detect devices */
	(void)atca_kit_detect_I2c_devices();
    5994:	4b02      	ldr	r3, [pc, #8]	; (59a0 <config_crypto+0x14>)
    5996:	4798      	blx	r3
}
    5998:	bd10      	pop	{r4, pc}
    599a:	46c0      	nop			; (mov r8, r8)
    599c:	20000284 	.word	0x20000284
    59a0:	00004a89 	.word	0x00004a89

000059a4 <config_ready>:

bool config_ready(void)
{
    return true;
}
    59a4:	2001      	movs	r0, #1
    59a6:	4770      	bx	lr

000059a8 <config_get_client_id>:
    return status;
}

/** \brief Populate the buffer with the client id */
int config_get_client_id(char* buf, size_t buflen)
{
    59a8:	b570      	push	{r4, r5, r6, lr}
    59aa:	b084      	sub	sp, #16
    59ac:	0005      	movs	r5, r0
    59ae:	000c      	movs	r4, r1
    if(buf && buflen)
    59b0:	2800      	cmp	r0, #0
    59b2:	d014      	beq.n	59de <config_get_client_id+0x36>
    59b4:	2900      	cmp	r1, #0
    59b6:	d015      	beq.n	59e4 <config_get_client_id+0x3c>
    {
        int rv;

        rv = snprintf(buf, buflen, "projects/%s/locations/%s/registries/%s/devices/%s", 
    59b8:	4b0f      	ldr	r3, [pc, #60]	; (59f8 <config_get_client_id+0x50>)
    59ba:	9302      	str	r3, [sp, #8]
    59bc:	4b0f      	ldr	r3, [pc, #60]	; (59fc <config_get_client_id+0x54>)
    59be:	9301      	str	r3, [sp, #4]
    59c0:	4b0f      	ldr	r3, [pc, #60]	; (5a00 <config_get_client_id+0x58>)
    59c2:	9300      	str	r3, [sp, #0]
    59c4:	4b0f      	ldr	r3, [pc, #60]	; (5a04 <config_get_client_id+0x5c>)
    59c6:	4a10      	ldr	r2, [pc, #64]	; (5a08 <config_get_client_id+0x60>)
    59c8:	4e10      	ldr	r6, [pc, #64]	; (5a0c <config_get_client_id+0x64>)
    59ca:	47b0      	blx	r6
            config_gcp_project_id, config_gcp_region_id, config_gcp_registry_id, config_gcp_thing_id);

        if(0 < rv && rv < buflen)
    59cc:	2800      	cmp	r0, #0
    59ce:	dd0c      	ble.n	59ea <config_get_client_id+0x42>
    59d0:	4284      	cmp	r4, r0
    59d2:	d90d      	bls.n	59f0 <config_get_client_id+0x48>
        {
            buf[rv] = 0;
    59d4:	2300      	movs	r3, #0
    59d6:	542b      	strb	r3, [r5, r0]
            return 0;
    59d8:	2000      	movs	r0, #0
        }
    }
    return -1;
}
    59da:	b004      	add	sp, #16
    59dc:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    59de:	2001      	movs	r0, #1
    59e0:	4240      	negs	r0, r0
    59e2:	e7fa      	b.n	59da <config_get_client_id+0x32>
    59e4:	2001      	movs	r0, #1
    59e6:	4240      	negs	r0, r0
    59e8:	e7f7      	b.n	59da <config_get_client_id+0x32>
    59ea:	2001      	movs	r0, #1
    59ec:	4240      	negs	r0, r0
    59ee:	e7f4      	b.n	59da <config_get_client_id+0x32>
    59f0:	2001      	movs	r0, #1
    59f2:	4240      	negs	r0, r0
    59f4:	e7f1      	b.n	59da <config_get_client_id+0x32>
    59f6:	46c0      	nop			; (mov r8, r8)
    59f8:	20000274 	.word	0x20000274
    59fc:	000149e4 	.word	0x000149e4
    5a00:	000149d8 	.word	0x000149d8
    5a04:	000149c4 	.word	0x000149c4
    5a08:	000149f4 	.word	0x000149f4
    5a0c:	00010e21 	.word	0x00010e21

00005a10 <config_get_client_username>:

/* Populate the buffer with the username */
int config_get_client_username(char* buf, size_t buflen)
{
    5a10:	b570      	push	{r4, r5, r6, lr}
    5a12:	0005      	movs	r5, r0
    5a14:	000c      	movs	r4, r1
    if(buf && buflen)
    5a16:	2800      	cmp	r0, #0
    5a18:	d00c      	beq.n	5a34 <config_get_client_username+0x24>
    5a1a:	2900      	cmp	r1, #0
    5a1c:	d00d      	beq.n	5a3a <config_get_client_username+0x2a>
    {
        int rv = snprintf(buf, buflen, "unused");
    5a1e:	4a0b      	ldr	r2, [pc, #44]	; (5a4c <config_get_client_username+0x3c>)
    5a20:	4b0b      	ldr	r3, [pc, #44]	; (5a50 <config_get_client_username+0x40>)
    5a22:	4798      	blx	r3

        if(0 < rv && rv < buflen)
    5a24:	2800      	cmp	r0, #0
    5a26:	dd0b      	ble.n	5a40 <config_get_client_username+0x30>
    5a28:	4284      	cmp	r4, r0
    5a2a:	d90c      	bls.n	5a46 <config_get_client_username+0x36>
        {
            buf[rv] = 0;
    5a2c:	2300      	movs	r3, #0
    5a2e:	542b      	strb	r3, [r5, r0]
            return 0;
    5a30:	2000      	movs	r0, #0
        }
    }
    return -1;
}
    5a32:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    5a34:	2001      	movs	r0, #1
    5a36:	4240      	negs	r0, r0
    5a38:	e7fb      	b.n	5a32 <config_get_client_username+0x22>
    5a3a:	2001      	movs	r0, #1
    5a3c:	4240      	negs	r0, r0
    5a3e:	e7f8      	b.n	5a32 <config_get_client_username+0x22>
    5a40:	2001      	movs	r0, #1
    5a42:	4240      	negs	r0, r0
    5a44:	e7f5      	b.n	5a32 <config_get_client_username+0x22>
    5a46:	2001      	movs	r0, #1
    5a48:	4240      	negs	r0, r0
    5a4a:	e7f2      	b.n	5a32 <config_get_client_username+0x22>
    5a4c:	00014a5c 	.word	0x00014a5c
    5a50:	00010e21 	.word	0x00010e21

00005a54 <config_get_client_password>:

/* Populate the buffer with the user's password */
int config_get_client_password(char* buf, size_t buflen)
{
    5a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a56:	b083      	sub	sp, #12
    5a58:	0007      	movs	r7, r0
    5a5a:	000d      	movs	r5, r1
    int rv = -1;

    if(buf && buflen)
    5a5c:	2800      	cmp	r0, #0
    5a5e:	d031      	beq.n	5ac4 <config_get_client_password+0x70>
    5a60:	2900      	cmp	r1, #0
    5a62:	d032      	beq.n	5aca <config_get_client_password+0x76>
    {
        atca_jwt_t jwt;
        
        uint32_t ts = time_utils_get_utc();
    5a64:	4b1a      	ldr	r3, [pc, #104]	; (5ad0 <config_get_client_password+0x7c>)
    5a66:	4798      	blx	r3
    5a68:	0006      	movs	r6, r0

        rv = atcab_init(&cfg_ateccx08a_i2c_default);
    5a6a:	481a      	ldr	r0, [pc, #104]	; (5ad4 <config_get_client_password+0x80>)
    5a6c:	4b1a      	ldr	r3, [pc, #104]	; (5ad8 <config_get_client_password+0x84>)
    5a6e:	4798      	blx	r3
    5a70:	1e04      	subs	r4, r0, #0
        if(ATCA_SUCCESS != rv)
    5a72:	d002      	beq.n	5a7a <config_get_client_password+0x26>
        rv = atca_jwt_finalize(&jwt, 0);

        atcab_release();
    }
    return rv;
}
    5a74:	0020      	movs	r0, r4
    5a76:	b003      	add	sp, #12
    5a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rv = atca_jwt_init(&jwt, buf, buflen);
    5a7a:	b2aa      	uxth	r2, r5
    5a7c:	0039      	movs	r1, r7
    5a7e:	4668      	mov	r0, sp
    5a80:	4b16      	ldr	r3, [pc, #88]	; (5adc <config_get_client_password+0x88>)
    5a82:	4798      	blx	r3
    5a84:	1e04      	subs	r4, r0, #0
        if(ATCA_SUCCESS != rv)
    5a86:	d1f5      	bne.n	5a74 <config_get_client_password+0x20>
        if(ATCA_SUCCESS != (rv = atca_jwt_add_claim_numeric(&jwt, "iat", ts)))
    5a88:	0032      	movs	r2, r6
    5a8a:	4915      	ldr	r1, [pc, #84]	; (5ae0 <config_get_client_password+0x8c>)
    5a8c:	4668      	mov	r0, sp
    5a8e:	4b15      	ldr	r3, [pc, #84]	; (5ae4 <config_get_client_password+0x90>)
    5a90:	4798      	blx	r3
    5a92:	1e04      	subs	r4, r0, #0
    5a94:	d1ee      	bne.n	5a74 <config_get_client_password+0x20>
        if(ATCA_SUCCESS != (rv = atca_jwt_add_claim_numeric(&jwt, "exp", ts + 86400)))
    5a96:	4b14      	ldr	r3, [pc, #80]	; (5ae8 <config_get_client_password+0x94>)
    5a98:	18f2      	adds	r2, r6, r3
    5a9a:	4914      	ldr	r1, [pc, #80]	; (5aec <config_get_client_password+0x98>)
    5a9c:	4668      	mov	r0, sp
    5a9e:	4b11      	ldr	r3, [pc, #68]	; (5ae4 <config_get_client_password+0x90>)
    5aa0:	4798      	blx	r3
    5aa2:	1e04      	subs	r4, r0, #0
    5aa4:	d1e6      	bne.n	5a74 <config_get_client_password+0x20>
        if(ATCA_SUCCESS != (rv = atca_jwt_add_claim_string(&jwt, "aud", config_gcp_project_id)))
    5aa6:	4a12      	ldr	r2, [pc, #72]	; (5af0 <config_get_client_password+0x9c>)
    5aa8:	4912      	ldr	r1, [pc, #72]	; (5af4 <config_get_client_password+0xa0>)
    5aaa:	4668      	mov	r0, sp
    5aac:	4b12      	ldr	r3, [pc, #72]	; (5af8 <config_get_client_password+0xa4>)
    5aae:	4798      	blx	r3
    5ab0:	1e04      	subs	r4, r0, #0
    5ab2:	d1df      	bne.n	5a74 <config_get_client_password+0x20>
        rv = atca_jwt_finalize(&jwt, 0);
    5ab4:	2100      	movs	r1, #0
    5ab6:	4668      	mov	r0, sp
    5ab8:	4b10      	ldr	r3, [pc, #64]	; (5afc <config_get_client_password+0xa8>)
    5aba:	4798      	blx	r3
    5abc:	0004      	movs	r4, r0
        atcab_release();
    5abe:	4b10      	ldr	r3, [pc, #64]	; (5b00 <config_get_client_password+0xac>)
    5ac0:	4798      	blx	r3
    5ac2:	e7d7      	b.n	5a74 <config_get_client_password+0x20>
    int rv = -1;
    5ac4:	2401      	movs	r4, #1
    5ac6:	4264      	negs	r4, r4
    5ac8:	e7d4      	b.n	5a74 <config_get_client_password+0x20>
    5aca:	2401      	movs	r4, #1
    5acc:	4264      	negs	r4, r4
    5ace:	e7d1      	b.n	5a74 <config_get_client_password+0x20>
    5ad0:	00003ba1 	.word	0x00003ba1
    5ad4:	20000284 	.word	0x20000284
    5ad8:	00003565 	.word	0x00003565
    5adc:	00006eed 	.word	0x00006eed
    5ae0:	00014a28 	.word	0x00014a28
    5ae4:	00007131 	.word	0x00007131
    5ae8:	00015180 	.word	0x00015180
    5aec:	00014a2c 	.word	0x00014a2c
    5af0:	000149c4 	.word	0x000149c4
    5af4:	00014a30 	.word	0x00014a30
    5af8:	000070bd 	.word	0x000070bd
    5afc:	00006f59 	.word	0x00006f59
    5b00:	00003551 	.word	0x00003551

00005b04 <config_get_client_pub_topic>:

/* Get the topic id  where the client will be publishing messages */
int config_get_client_pub_topic(char* buf, size_t buflen)
{
    5b04:	b570      	push	{r4, r5, r6, lr}
    5b06:	0005      	movs	r5, r0
    5b08:	000c      	movs	r4, r1
    if(buf && buflen)
    5b0a:	2800      	cmp	r0, #0
    5b0c:	d00d      	beq.n	5b2a <config_get_client_pub_topic+0x26>
    5b0e:	2900      	cmp	r1, #0
    5b10:	d00e      	beq.n	5b30 <config_get_client_pub_topic+0x2c>
    {
        int rv = snprintf(buf, buflen, "/devices/%s/events", config_gcp_thing_id);
    5b12:	4b0c      	ldr	r3, [pc, #48]	; (5b44 <config_get_client_pub_topic+0x40>)
    5b14:	4a0c      	ldr	r2, [pc, #48]	; (5b48 <config_get_client_pub_topic+0x44>)
    5b16:	4e0d      	ldr	r6, [pc, #52]	; (5b4c <config_get_client_pub_topic+0x48>)
    5b18:	47b0      	blx	r6

        if(0 < rv && rv < buflen)
    5b1a:	2800      	cmp	r0, #0
    5b1c:	dd0b      	ble.n	5b36 <config_get_client_pub_topic+0x32>
    5b1e:	4284      	cmp	r4, r0
    5b20:	d90c      	bls.n	5b3c <config_get_client_pub_topic+0x38>
        {
            buf[rv] = 0;
    5b22:	2300      	movs	r3, #0
    5b24:	542b      	strb	r3, [r5, r0]
            return 0;
    5b26:	2000      	movs	r0, #0
        }
    }
    return -1;
}
    5b28:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    5b2a:	2001      	movs	r0, #1
    5b2c:	4240      	negs	r0, r0
    5b2e:	e7fb      	b.n	5b28 <config_get_client_pub_topic+0x24>
    5b30:	2001      	movs	r0, #1
    5b32:	4240      	negs	r0, r0
    5b34:	e7f8      	b.n	5b28 <config_get_client_pub_topic+0x24>
    5b36:	2001      	movs	r0, #1
    5b38:	4240      	negs	r0, r0
    5b3a:	e7f5      	b.n	5b28 <config_get_client_pub_topic+0x24>
    5b3c:	2001      	movs	r0, #1
    5b3e:	4240      	negs	r0, r0
    5b40:	e7f2      	b.n	5b28 <config_get_client_pub_topic+0x24>
    5b42:	46c0      	nop			; (mov r8, r8)
    5b44:	20000274 	.word	0x20000274
    5b48:	00014a34 	.word	0x00014a34
    5b4c:	00010e21 	.word	0x00010e21

00005b50 <config_get_client_sub_topic>:

/* Get the topic id  where the client will be publishing messages */
int config_get_client_sub_topic(char* buf, size_t buflen)
{
    5b50:	b570      	push	{r4, r5, r6, lr}
    5b52:	0005      	movs	r5, r0
    5b54:	000c      	movs	r4, r1
    if(buf && buflen)
    5b56:	2800      	cmp	r0, #0
    5b58:	d00d      	beq.n	5b76 <config_get_client_sub_topic+0x26>
    5b5a:	2900      	cmp	r1, #0
    5b5c:	d00e      	beq.n	5b7c <config_get_client_sub_topic+0x2c>
    {
        int rv = snprintf(buf, buflen, "/devices/%s/config", config_gcp_thing_id);
    5b5e:	4b0c      	ldr	r3, [pc, #48]	; (5b90 <config_get_client_sub_topic+0x40>)
    5b60:	4a0c      	ldr	r2, [pc, #48]	; (5b94 <config_get_client_sub_topic+0x44>)
    5b62:	4e0d      	ldr	r6, [pc, #52]	; (5b98 <config_get_client_sub_topic+0x48>)
    5b64:	47b0      	blx	r6

        if(0 < rv && rv < buflen)
    5b66:	2800      	cmp	r0, #0
    5b68:	dd0b      	ble.n	5b82 <config_get_client_sub_topic+0x32>
    5b6a:	4284      	cmp	r4, r0
    5b6c:	d90c      	bls.n	5b88 <config_get_client_sub_topic+0x38>
        {
            buf[rv] = 0;
    5b6e:	2300      	movs	r3, #0
    5b70:	542b      	strb	r3, [r5, r0]
            return 0;
    5b72:	2000      	movs	r0, #0
        }
    }
    return -1;
}
    5b74:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    5b76:	2001      	movs	r0, #1
    5b78:	4240      	negs	r0, r0
    5b7a:	e7fb      	b.n	5b74 <config_get_client_sub_topic+0x24>
    5b7c:	2001      	movs	r0, #1
    5b7e:	4240      	negs	r0, r0
    5b80:	e7f8      	b.n	5b74 <config_get_client_sub_topic+0x24>
    5b82:	2001      	movs	r0, #1
    5b84:	4240      	negs	r0, r0
    5b86:	e7f5      	b.n	5b74 <config_get_client_sub_topic+0x24>
    5b88:	2001      	movs	r0, #1
    5b8a:	4240      	negs	r0, r0
    5b8c:	e7f2      	b.n	5b74 <config_get_client_sub_topic+0x24>
    5b8e:	46c0      	nop			; (mov r8, r8)
    5b90:	20000274 	.word	0x20000274
    5b94:	00014a48 	.word	0x00014a48
    5b98:	00010e21 	.word	0x00010e21

00005b9c <config_get_host_info>:

/* Retrieve the host connection information */
int config_get_host_info(char* buf, size_t buflen, uint16_t * port)
{
    5b9c:	b570      	push	{r4, r5, r6, lr}
    5b9e:	0005      	movs	r5, r0
    5ba0:	000c      	movs	r4, r1
    int rv;

    if(!buf || !buflen || !port)
    5ba2:	2800      	cmp	r0, #0
    5ba4:	d012      	beq.n	5bcc <config_get_host_info+0x30>
    5ba6:	2900      	cmp	r1, #0
    5ba8:	d013      	beq.n	5bd2 <config_get_host_info+0x36>
    5baa:	2a00      	cmp	r2, #0
    5bac:	d014      	beq.n	5bd8 <config_get_host_info+0x3c>
    {
        return -1;
    }

    *port = config_gcp_mqtt_port;
    5bae:	23bc      	movs	r3, #188	; 0xbc
    5bb0:	33ff      	adds	r3, #255	; 0xff
    5bb2:	8013      	strh	r3, [r2, #0]

    rv = snprintf(buf, buflen, "%s", config_gcp_host_name);
    5bb4:	4b0d      	ldr	r3, [pc, #52]	; (5bec <config_get_host_info+0x50>)
    5bb6:	4a0e      	ldr	r2, [pc, #56]	; (5bf0 <config_get_host_info+0x54>)
    5bb8:	4e0e      	ldr	r6, [pc, #56]	; (5bf4 <config_get_host_info+0x58>)
    5bba:	47b0      	blx	r6

    if(0 < rv && rv < buflen)
    5bbc:	2800      	cmp	r0, #0
    5bbe:	dd0e      	ble.n	5bde <config_get_host_info+0x42>
    5bc0:	4284      	cmp	r4, r0
    5bc2:	d90f      	bls.n	5be4 <config_get_host_info+0x48>
    {
        buf[rv] = 0;
    5bc4:	2300      	movs	r3, #0
    5bc6:	542b      	strb	r3, [r5, r0]
        return 0;
    5bc8:	2000      	movs	r0, #0
    else
    {
        /* Failed */
        return -1;
    }
}
    5bca:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
    5bcc:	2001      	movs	r0, #1
    5bce:	4240      	negs	r0, r0
    5bd0:	e7fb      	b.n	5bca <config_get_host_info+0x2e>
    5bd2:	2001      	movs	r0, #1
    5bd4:	4240      	negs	r0, r0
    5bd6:	e7f8      	b.n	5bca <config_get_host_info+0x2e>
    5bd8:	2001      	movs	r0, #1
    5bda:	4240      	negs	r0, r0
    5bdc:	e7f5      	b.n	5bca <config_get_host_info+0x2e>
        return -1;
    5bde:	2001      	movs	r0, #1
    5be0:	4240      	negs	r0, r0
    5be2:	e7f2      	b.n	5bca <config_get_host_info+0x2e>
    5be4:	2001      	movs	r0, #1
    5be6:	4240      	negs	r0, r0
    5be8:	e7ef      	b.n	5bca <config_get_host_info+0x2e>
    5bea:	46c0      	nop			; (mov r8, r8)
    5bec:	000149b0 	.word	0x000149b0
    5bf0:	00014a64 	.word	0x00014a64
    5bf4:	00010e21 	.word	0x00010e21

00005bf8 <config_print_public_key>:
const uint8_t public_key_x509_header[] = { 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86,
                                           0x48, 0xCE, 0x3D, 0x02, 0x01, 0x06, 0x08, 0x2A,
                                           0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03, 
                                           0x42, 0x00, 0x04 };
int config_print_public_key(void)
{
    5bf8:	b530      	push	{r4, r5, lr}
    5bfa:	b0a3      	sub	sp, #140	; 0x8c
    uint8_t buf[128];
    uint8_t * tmp;
    size_t buf_len = sizeof(buf);
    5bfc:	2380      	movs	r3, #128	; 0x80
    5bfe:	9301      	str	r3, [sp, #4]
    int i;

    ATCA_STATUS rv = atcab_init(&cfg_ateccx08a_i2c_default);
    5c00:	4813      	ldr	r0, [pc, #76]	; (5c50 <config_print_public_key+0x58>)
    5c02:	4b14      	ldr	r3, [pc, #80]	; (5c54 <config_print_public_key+0x5c>)
    5c04:	4798      	blx	r3
    if(ATCA_SUCCESS != rv)
    5c06:	2800      	cmp	r0, #0
    5c08:	d001      	beq.n	5c0e <config_print_public_key+0x16>
    buf[buf_len] = 0;

    /* Print out the key */
    DEBUG_PRINTF("-----BEGIN PUBLIC KEY-----\r\n%s\r\n-----END PUBLIC KEY-----\r\n", buf);

    5c0a:	b023      	add	sp, #140	; 0x8c
    5c0c:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, public_key_x509_header, sizeof(public_key_x509_header));
    5c0e:	221b      	movs	r2, #27
    5c10:	4911      	ldr	r1, [pc, #68]	; (5c58 <config_print_public_key+0x60>)
    5c12:	202d      	movs	r0, #45	; 0x2d
    5c14:	4468      	add	r0, sp
    5c16:	4b11      	ldr	r3, [pc, #68]	; (5c5c <config_print_public_key+0x64>)
    5c18:	4798      	blx	r3
    rv = atcab_get_pubkey(0, tmp + sizeof(public_key_x509_header));
    5c1a:	a912      	add	r1, sp, #72	; 0x48
    5c1c:	2000      	movs	r0, #0
    5c1e:	4b10      	ldr	r3, [pc, #64]	; (5c60 <config_print_public_key+0x68>)
    5c20:	4798      	blx	r3
    5c22:	0004      	movs	r4, r0
    atcab_release();
    5c24:	4b0f      	ldr	r3, [pc, #60]	; (5c64 <config_print_public_key+0x6c>)
    5c26:	4798      	blx	r3
        return rv;
    5c28:	1e20      	subs	r0, r4, #0
    if (ATCA_SUCCESS != rv ) {
    5c2a:	d1ee      	bne.n	5c0a <config_print_public_key+0x12>
    rv = atcab_base64encode(tmp, ATCA_PUB_KEY_SIZE + sizeof(public_key_x509_header), buf, &buf_len);
    5c2c:	ab01      	add	r3, sp, #4
    5c2e:	aa02      	add	r2, sp, #8
    5c30:	215b      	movs	r1, #91	; 0x5b
    5c32:	202d      	movs	r0, #45	; 0x2d
    5c34:	4468      	add	r0, sp
    5c36:	4c0c      	ldr	r4, [pc, #48]	; (5c68 <config_print_public_key+0x70>)
    5c38:	47a0      	blx	r4
    if(ATCA_SUCCESS != rv)
    5c3a:	2800      	cmp	r0, #0
    5c3c:	d1e5      	bne.n	5c0a <config_print_public_key+0x12>
    buf[buf_len] = 0;
    5c3e:	a902      	add	r1, sp, #8
    5c40:	2300      	movs	r3, #0
    5c42:	9a01      	ldr	r2, [sp, #4]
    5c44:	548b      	strb	r3, [r1, r2]
    DEBUG_PRINTF("-----BEGIN PUBLIC KEY-----\r\n%s\r\n-----END PUBLIC KEY-----\r\n", buf);
    5c46:	4809      	ldr	r0, [pc, #36]	; (5c6c <config_print_public_key+0x74>)
    5c48:	4b09      	ldr	r3, [pc, #36]	; (5c70 <config_print_public_key+0x78>)
    5c4a:	4798      	blx	r3
    5c4c:	e7dd      	b.n	5c0a <config_print_public_key+0x12>
    5c4e:	46c0      	nop			; (mov r8, r8)
    5c50:	20000284 	.word	0x20000284
    5c54:	00003565 	.word	0x00003565
    5c58:	00014aa4 	.word	0x00014aa4
    5c5c:	000109c9 	.word	0x000109c9
    5c60:	00006175 	.word	0x00006175
    5c64:	00003551 	.word	0x00003551
    5c68:	000039e5 	.word	0x000039e5
    5c6c:	00014a68 	.word	0x00014a68
    5c70:	00010b61 	.word	0x00010b61

00005c74 <newATCACommand>:
/** \brief constructor for ATCACommand
 * \param[in] device_type - specifies which set of commands and execution times should be associated with this command object
 * \return ATCACommand instance
 */
ATCACommand newATCACommand(ATCADeviceType device_type)    // constructor
{
    5c74:	b510      	push	{r4, lr}
    5c76:	0004      	movs	r4, r0
    ATCA_STATUS status = ATCA_SUCCESS;
    ATCACommand ca_cmd;

    ca_cmd = (ATCACommand)malloc(sizeof(atca_command));
    5c78:	2004      	movs	r0, #4
    5c7a:	4b03      	ldr	r3, [pc, #12]	; (5c88 <newATCACommand+0x14>)
    5c7c:	4798      	blx	r3
    ca_cmd->dt = device_type;
    5c7e:	7004      	strb	r4, [r0, #0]
    ca_cmd->clock_divider = 0;
    5c80:	2300      	movs	r3, #0
    5c82:	7043      	strb	r3, [r0, #1]
        free(ca_cmd);
        ca_cmd = NULL;
    }

    return ca_cmd;
}
    5c84:	bd10      	pop	{r4, pc}
    5c86:	46c0      	nop			; (mov r8, r8)
    5c88:	00010949 	.word	0x00010949

00005c8c <deleteATCACommand>:

/** \brief ATCACommand destructor
 * \param[in] ca_cmd instance of a command object
 */
void deleteATCACommand(ATCACommand *ca_cmd)    // destructor
{
    5c8c:	b510      	push	{r4, lr}
    5c8e:	0004      	movs	r4, r0
    if (*ca_cmd)
    5c90:	6800      	ldr	r0, [r0, #0]
    5c92:	2800      	cmp	r0, #0
    5c94:	d001      	beq.n	5c9a <deleteATCACommand+0xe>
    {
        free((void*)*ca_cmd);
    5c96:	4b02      	ldr	r3, [pc, #8]	; (5ca0 <deleteATCACommand+0x14>)
    5c98:	4798      	blx	r3
    }

    *ca_cmd = NULL;
    5c9a:	2300      	movs	r3, #0
    5c9c:	6023      	str	r3, [r4, #0]
}
    5c9e:	bd10      	pop	{r4, pc}
    5ca0:	0001095d 	.word	0x0001095d

00005ca4 <atGetExecTime>:
 *  \param[in] opcode  Opcode value of the command
 *  \param[in] ca_cmd  Command object for which the execution times are associated
 *  \return ATCA_SUCCESS
 */
ATCA_STATUS atGetExecTime(uint8_t opcode, ATCACommand ca_cmd)
{
    5ca4:	b570      	push	{r4, r5, r6, lr}
    ATCA_STATUS status = ATCA_SUCCESS;
    const device_execution_time_t *execution_times;
    uint8_t i, no_of_commands;


    switch (ca_cmd->dt)
    5ca6:	780b      	ldrb	r3, [r1, #0]
    5ca8:	2b01      	cmp	r3, #1
    5caa:	d037      	beq.n	5d1c <atGetExecTime+0x78>
    5cac:	2b00      	cmp	r3, #0
    5cae:	d02b      	beq.n	5d08 <atGetExecTime+0x64>
    5cb0:	2b02      	cmp	r3, #2
    5cb2:	d006      	beq.n	5cc2 <atGetExecTime+0x1e>
    5cb4:	2b03      	cmp	r3, #3
    5cb6:	d01f      	beq.n	5cf8 <atGetExecTime+0x54>
        no_of_commands = 0;
        execution_times = NULL;
        break;
    }

    ca_cmd->execution_time_msec = UNSUPPORTED;
    5cb8:	2301      	movs	r3, #1
    5cba:	425b      	negs	r3, r3
    5cbc:	804b      	strh	r3, [r1, #2]
        }
    }

    if (ca_cmd->execution_time_msec == UNSUPPORTED)
    {
        status = ATCA_BAD_OPCODE;
    5cbe:	20f2      	movs	r0, #242	; 0xf2
    }

    return status;
    5cc0:	e019      	b.n	5cf6 <atGetExecTime+0x52>
        no_of_commands = sizeof(device_execution_time_508) / sizeof(device_execution_time_t);
    5cc2:	2614      	movs	r6, #20
        execution_times = device_execution_time_508;
    5cc4:	4d1a      	ldr	r5, [pc, #104]	; (5d30 <atGetExecTime+0x8c>)
    ca_cmd->execution_time_msec = UNSUPPORTED;
    5cc6:	2301      	movs	r3, #1
    5cc8:	425b      	negs	r3, r3
    5cca:	804b      	strh	r3, [r1, #2]
        if (execution_times[i].opcode == opcode)
    5ccc:	782b      	ldrb	r3, [r5, #0]
    5cce:	4283      	cmp	r3, r0
    5cd0:	d00b      	beq.n	5cea <atGetExecTime+0x46>
    5cd2:	1d2a      	adds	r2, r5, #4
    5cd4:	2300      	movs	r3, #0
    for (i = 0; i < no_of_commands; i++)
    5cd6:	3301      	adds	r3, #1
    5cd8:	b2db      	uxtb	r3, r3
    5cda:	42b3      	cmp	r3, r6
    5cdc:	d21c      	bcs.n	5d18 <atGetExecTime+0x74>
        if (execution_times[i].opcode == opcode)
    5cde:	0015      	movs	r5, r2
    5ce0:	3204      	adds	r2, #4
    5ce2:	1f14      	subs	r4, r2, #4
    5ce4:	7824      	ldrb	r4, [r4, #0]
    5ce6:	4284      	cmp	r4, r0
    5ce8:	d1f5      	bne.n	5cd6 <atGetExecTime+0x32>
            ca_cmd->execution_time_msec = execution_times[i].execution_time_msec;
    5cea:	886b      	ldrh	r3, [r5, #2]
    5cec:	804b      	strh	r3, [r1, #2]
    if (ca_cmd->execution_time_msec == UNSUPPORTED)
    5cee:	4a11      	ldr	r2, [pc, #68]	; (5d34 <atGetExecTime+0x90>)
    ATCA_STATUS status = ATCA_SUCCESS;
    5cf0:	2000      	movs	r0, #0
    if (ca_cmd->execution_time_msec == UNSUPPORTED)
    5cf2:	4293      	cmp	r3, r2
    5cf4:	d00e      	beq.n	5d14 <atGetExecTime+0x70>
}
    5cf6:	bd70      	pop	{r4, r5, r6, pc}
        if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M1)
    5cf8:	784b      	ldrb	r3, [r1, #1]
    5cfa:	2b28      	cmp	r3, #40	; 0x28
    5cfc:	d011      	beq.n	5d22 <atGetExecTime+0x7e>
        else if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M2)
    5cfe:	2b68      	cmp	r3, #104	; 0x68
    5d00:	d012      	beq.n	5d28 <atGetExecTime+0x84>
            no_of_commands = sizeof(device_execution_time_608_m0) / sizeof(device_execution_time_t);
    5d02:	2616      	movs	r6, #22
            execution_times = device_execution_time_608_m0;
    5d04:	4d0c      	ldr	r5, [pc, #48]	; (5d38 <atGetExecTime+0x94>)
    5d06:	e7de      	b.n	5cc6 <atGetExecTime+0x22>
    ca_cmd->execution_time_msec = UNSUPPORTED;
    5d08:	2301      	movs	r3, #1
    5d0a:	425b      	negs	r3, r3
    5d0c:	804b      	strh	r3, [r1, #2]
        no_of_commands = sizeof(device_execution_time_204) / sizeof(device_execution_time_t);
    5d0e:	260e      	movs	r6, #14
        execution_times = device_execution_time_204;
    5d10:	4d0a      	ldr	r5, [pc, #40]	; (5d3c <atGetExecTime+0x98>)
    5d12:	e7db      	b.n	5ccc <atGetExecTime+0x28>
        status = ATCA_BAD_OPCODE;
    5d14:	30f2      	adds	r0, #242	; 0xf2
    5d16:	e7ee      	b.n	5cf6 <atGetExecTime+0x52>
    5d18:	20f2      	movs	r0, #242	; 0xf2
    5d1a:	e7ec      	b.n	5cf6 <atGetExecTime+0x52>
        no_of_commands = sizeof(device_execution_time_108) / sizeof(device_execution_time_t);
    5d1c:	2613      	movs	r6, #19
        execution_times = device_execution_time_108;
    5d1e:	4d08      	ldr	r5, [pc, #32]	; (5d40 <atGetExecTime+0x9c>)
    5d20:	e7d1      	b.n	5cc6 <atGetExecTime+0x22>
            no_of_commands = sizeof(device_execution_time_608_m1) / sizeof(device_execution_time_t);
    5d22:	2616      	movs	r6, #22
            execution_times = device_execution_time_608_m1;
    5d24:	4d07      	ldr	r5, [pc, #28]	; (5d44 <atGetExecTime+0xa0>)
    5d26:	e7ce      	b.n	5cc6 <atGetExecTime+0x22>
            no_of_commands = sizeof(device_execution_time_608_m2) / sizeof(device_execution_time_t);
    5d28:	2616      	movs	r6, #22
            execution_times = device_execution_time_608_m2;
    5d2a:	4d07      	ldr	r5, [pc, #28]	; (5d48 <atGetExecTime+0xa4>)
    5d2c:	e7cb      	b.n	5cc6 <atGetExecTime+0x22>
    5d2e:	46c0      	nop			; (mov r8, r8)
    5d30:	00014b48 	.word	0x00014b48
    5d34:	0000ffff 	.word	0x0000ffff
    5d38:	00014b98 	.word	0x00014b98
    5d3c:	00014b10 	.word	0x00014b10
    5d40:	00014ac4 	.word	0x00014ac4
    5d44:	00014bf0 	.word	0x00014bf0
    5d48:	00014c48 	.word	0x00014c48

00005d4c <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
    5d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d4e:	46d6      	mov	lr, sl
    5d50:	464f      	mov	r7, r9
    5d52:	4646      	mov	r6, r8
    5d54:	b5c0      	push	{r6, r7, lr}
    5d56:	4694      	mov	ip, r2
    uint16_t crc_register = 0;
    uint16_t polynom = 0x8005;
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
    5d58:	2800      	cmp	r0, #0
    5d5a:	d021      	beq.n	5da0 <atCRC+0x54>
    5d5c:	4689      	mov	r9, r1
    5d5e:	4688      	mov	r8, r1
    5d60:	4480      	add	r8, r0
    5d62:	2300      	movs	r3, #0
            data_bit = (data[counter] & shift_register) ? 1 : 0;
            crc_bit = crc_register >> 15;
            crc_register <<= 1;
            if (data_bit != crc_bit)
            {
                crc_register ^= polynom;
    5d64:	4813      	ldr	r0, [pc, #76]	; (5db4 <atCRC+0x68>)
    5d66:	e016      	b.n	5d96 <atCRC+0x4a>
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
    5d68:	006d      	lsls	r5, r5, #1
    5d6a:	b2ed      	uxtb	r5, r5
    5d6c:	3e01      	subs	r6, #1
    5d6e:	2e00      	cmp	r6, #0
    5d70:	d00c      	beq.n	5d8c <atCRC+0x40>
            crc_bit = crc_register >> 15;
    5d72:	0bdf      	lsrs	r7, r3, #15
            crc_register <<= 1;
    5d74:	005b      	lsls	r3, r3, #1
    5d76:	b29b      	uxth	r3, r3
            data_bit = (data[counter] & shift_register) ? 1 : 0;
    5d78:	002c      	movs	r4, r5
    5d7a:	400c      	ands	r4, r1
    5d7c:	1e62      	subs	r2, r4, #1
    5d7e:	4194      	sbcs	r4, r2
            if (data_bit != crc_bit)
    5d80:	b2e4      	uxtb	r4, r4
    5d82:	42bc      	cmp	r4, r7
    5d84:	d0f0      	beq.n	5d68 <atCRC+0x1c>
                crc_register ^= polynom;
    5d86:	4043      	eors	r3, r0
    5d88:	b29b      	uxth	r3, r3
    5d8a:	e7ed      	b.n	5d68 <atCRC+0x1c>
    5d8c:	2201      	movs	r2, #1
    5d8e:	4692      	mov	sl, r2
    5d90:	44d1      	add	r9, sl
    for (counter = 0; counter < length; counter++)
    5d92:	45c1      	cmp	r9, r8
    5d94:	d005      	beq.n	5da2 <atCRC+0x56>
            data_bit = (data[counter] & shift_register) ? 1 : 0;
    5d96:	464a      	mov	r2, r9
    5d98:	7811      	ldrb	r1, [r2, #0]
    5d9a:	2608      	movs	r6, #8
    5d9c:	2501      	movs	r5, #1
    5d9e:	e7e8      	b.n	5d72 <atCRC+0x26>
    uint16_t crc_register = 0;
    5da0:	2300      	movs	r3, #0
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
    5da2:	4662      	mov	r2, ip
    5da4:	7013      	strb	r3, [r2, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
    5da6:	0a1b      	lsrs	r3, r3, #8
    5da8:	7053      	strb	r3, [r2, #1]
}
    5daa:	bc1c      	pop	{r2, r3, r4}
    5dac:	4690      	mov	r8, r2
    5dae:	4699      	mov	r9, r3
    5db0:	46a2      	mov	sl, r4
    5db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5db4:	ffff8005 	.word	0xffff8005

00005db8 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
    5db8:	b510      	push	{r4, lr}
    uint8_t length, *crc;

    length = packet->txsize - ATCA_CRC_SIZE;
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
    5dba:	1c41      	adds	r1, r0, #1
    length = packet->txsize - ATCA_CRC_SIZE;
    5dbc:	7840      	ldrb	r0, [r0, #1]
    5dbe:	3802      	subs	r0, #2
    crc = &(packet->txsize) + length;
    5dc0:	b2c0      	uxtb	r0, r0
    5dc2:	180a      	adds	r2, r1, r0

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
    5dc4:	4b01      	ldr	r3, [pc, #4]	; (5dcc <atCalcCrc+0x14>)
    5dc6:	4798      	blx	r3
}
    5dc8:	bd10      	pop	{r4, pc}
    5dca:	46c0      	nop			; (mov r8, r8)
    5dcc:	00005d4d 	.word	0x00005d4d

00005dd0 <atGenKey>:
{
    5dd0:	b510      	push	{r4, lr}
    packet->opcode = ATCA_GENKEY;
    5dd2:	2340      	movs	r3, #64	; 0x40
    5dd4:	708b      	strb	r3, [r1, #2]
    if (packet->param1 & GENKEY_MODE_PUBKEY_DIGEST)
    5dd6:	78cb      	ldrb	r3, [r1, #3]
    5dd8:	06db      	lsls	r3, r3, #27
    5dda:	d409      	bmi.n	5df0 <atGenKey+0x20>
        packet->txsize = GENKEY_COUNT;
    5ddc:	2307      	movs	r3, #7
    5dde:	704b      	strb	r3, [r1, #1]
        packet->rxsize = GENKEY_RSP_SIZE_LONG;
    5de0:	224b      	movs	r2, #75	; 0x4b
    5de2:	3383      	adds	r3, #131	; 0x83
    5de4:	52ca      	strh	r2, [r1, r3]
    atCalcCrc(packet);
    5de6:	0008      	movs	r0, r1
    5de8:	4b04      	ldr	r3, [pc, #16]	; (5dfc <atGenKey+0x2c>)
    5dea:	4798      	blx	r3
}
    5dec:	2000      	movs	r0, #0
    5dee:	bd10      	pop	{r4, pc}
        packet->txsize = GENKEY_COUNT_DATA;
    5df0:	230a      	movs	r3, #10
    5df2:	704b      	strb	r3, [r1, #1]
        packet->rxsize = GENKEY_RSP_SIZE_SHORT;
    5df4:	2204      	movs	r2, #4
    5df6:	3380      	adds	r3, #128	; 0x80
    5df8:	52ca      	strh	r2, [r1, r3]
    5dfa:	e7f4      	b.n	5de6 <atGenKey+0x16>
    5dfc:	00005db9 	.word	0x00005db9

00005e00 <atInfo>:
{
    5e00:	b510      	push	{r4, lr}
    packet->opcode = ATCA_INFO;
    5e02:	2330      	movs	r3, #48	; 0x30
    5e04:	708b      	strb	r3, [r1, #2]
    packet->txsize = INFO_COUNT;
    5e06:	3b29      	subs	r3, #41	; 0x29
    5e08:	704b      	strb	r3, [r1, #1]
    packet->rxsize = INFO_RSP_SIZE;
    5e0a:	228a      	movs	r2, #138	; 0x8a
    5e0c:	528b      	strh	r3, [r1, r2]
    atCalcCrc(packet);
    5e0e:	0008      	movs	r0, r1
    5e10:	4b01      	ldr	r3, [pc, #4]	; (5e18 <atInfo+0x18>)
    5e12:	4798      	blx	r3
}
    5e14:	2000      	movs	r0, #0
    5e16:	bd10      	pop	{r4, pc}
    5e18:	00005db9 	.word	0x00005db9

00005e1c <atNonce>:
{
    5e1c:	b510      	push	{r4, lr}
    uint8_t calc_mode = packet->param1 & NONCE_MODE_MASK;
    5e1e:	78ca      	ldrb	r2, [r1, #3]
    5e20:	2303      	movs	r3, #3
    5e22:	4013      	ands	r3, r2
    packet->opcode = ATCA_NONCE;
    5e24:	2016      	movs	r0, #22
    5e26:	7088      	strb	r0, [r1, #2]
    if ((calc_mode == NONCE_MODE_SEED_UPDATE || calc_mode == NONCE_MODE_NO_SEED_UPDATE))
    5e28:	2b01      	cmp	r3, #1
    5e2a:	d903      	bls.n	5e34 <atNonce+0x18>
        return ATCA_BAD_PARAM;
    5e2c:	20e2      	movs	r0, #226	; 0xe2
    else if (calc_mode == NONCE_MODE_PASSTHROUGH)
    5e2e:	2b03      	cmp	r3, #3
    5e30:	d00a      	beq.n	5e48 <atNonce+0x2c>
}
    5e32:	bd10      	pop	{r4, pc}
        packet->txsize = NONCE_COUNT_SHORT;
    5e34:	231b      	movs	r3, #27
    5e36:	704b      	strb	r3, [r1, #1]
        packet->rxsize = NONCE_RSP_SIZE_LONG; // 32-byte output
    5e38:	2223      	movs	r2, #35	; 0x23
    5e3a:	336f      	adds	r3, #111	; 0x6f
    5e3c:	52ca      	strh	r2, [r1, r3]
    atCalcCrc(packet);
    5e3e:	0008      	movs	r0, r1
    5e40:	4b07      	ldr	r3, [pc, #28]	; (5e60 <atNonce+0x44>)
    5e42:	4798      	blx	r3
    return ATCA_SUCCESS;
    5e44:	2000      	movs	r0, #0
    5e46:	e7f4      	b.n	5e32 <atNonce+0x16>
        if ((packet->param1 & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
    5e48:	0693      	lsls	r3, r2, #26
    5e4a:	d505      	bpl.n	5e58 <atNonce+0x3c>
            packet->txsize = NONCE_COUNT_LONG_64;
    5e4c:	2347      	movs	r3, #71	; 0x47
    5e4e:	704b      	strb	r3, [r1, #1]
        packet->rxsize = NONCE_RSP_SIZE_SHORT; // Status-only output
    5e50:	2204      	movs	r2, #4
    5e52:	238a      	movs	r3, #138	; 0x8a
    5e54:	52ca      	strh	r2, [r1, r3]
    5e56:	e7f2      	b.n	5e3e <atNonce+0x22>
            packet->txsize = NONCE_COUNT_LONG;
    5e58:	2327      	movs	r3, #39	; 0x27
    5e5a:	704b      	strb	r3, [r1, #1]
    5e5c:	e7f8      	b.n	5e50 <atNonce+0x34>
    5e5e:	46c0      	nop			; (mov r8, r8)
    5e60:	00005db9 	.word	0x00005db9

00005e64 <atRandom>:
{
    5e64:	b510      	push	{r4, lr}
    packet->opcode = ATCA_RANDOM;
    5e66:	231b      	movs	r3, #27
    5e68:	708b      	strb	r3, [r1, #2]
    packet->txsize = RANDOM_COUNT;
    5e6a:	3b14      	subs	r3, #20
    5e6c:	704b      	strb	r3, [r1, #1]
    packet->rxsize = RANDOM_RSP_SIZE;
    5e6e:	2223      	movs	r2, #35	; 0x23
    5e70:	3383      	adds	r3, #131	; 0x83
    5e72:	52ca      	strh	r2, [r1, r3]
    atCalcCrc(packet);
    5e74:	0008      	movs	r0, r1
    5e76:	4b02      	ldr	r3, [pc, #8]	; (5e80 <atRandom+0x1c>)
    5e78:	4798      	blx	r3
}
    5e7a:	2000      	movs	r0, #0
    5e7c:	bd10      	pop	{r4, pc}
    5e7e:	46c0      	nop			; (mov r8, r8)
    5e80:	00005db9 	.word	0x00005db9

00005e84 <atRead>:
{
    5e84:	b510      	push	{r4, lr}
    packet->opcode = ATCA_READ;
    5e86:	2302      	movs	r3, #2
    5e88:	708b      	strb	r3, [r1, #2]
    packet->txsize = READ_COUNT;
    5e8a:	3305      	adds	r3, #5
    5e8c:	704b      	strb	r3, [r1, #1]
    if ((packet->param1 & 0x80) == 0)
    5e8e:	78cb      	ldrb	r3, [r1, #3]
    5e90:	2b7f      	cmp	r3, #127	; 0x7f
    5e92:	d807      	bhi.n	5ea4 <atRead+0x20>
        packet->rxsize = READ_4_RSP_SIZE;
    5e94:	2207      	movs	r2, #7
    5e96:	238a      	movs	r3, #138	; 0x8a
    5e98:	52ca      	strh	r2, [r1, r3]
    atCalcCrc(packet);
    5e9a:	0008      	movs	r0, r1
    5e9c:	4b03      	ldr	r3, [pc, #12]	; (5eac <atRead+0x28>)
    5e9e:	4798      	blx	r3
}
    5ea0:	2000      	movs	r0, #0
    5ea2:	bd10      	pop	{r4, pc}
        packet->rxsize = READ_32_RSP_SIZE;
    5ea4:	2223      	movs	r2, #35	; 0x23
    5ea6:	238a      	movs	r3, #138	; 0x8a
    5ea8:	52ca      	strh	r2, [r1, r3]
    5eaa:	e7f6      	b.n	5e9a <atRead+0x16>
    5eac:	00005db9 	.word	0x00005db9

00005eb0 <atSign>:
{
    5eb0:	b510      	push	{r4, lr}
    packet->opcode = ATCA_SIGN;
    5eb2:	2341      	movs	r3, #65	; 0x41
    5eb4:	708b      	strb	r3, [r1, #2]
    packet->txsize = SIGN_COUNT;
    5eb6:	3b3a      	subs	r3, #58	; 0x3a
    5eb8:	704b      	strb	r3, [r1, #1]
    packet->rxsize = ATCA_RSP_SIZE_64;
    5eba:	2243      	movs	r2, #67	; 0x43
    5ebc:	3383      	adds	r3, #131	; 0x83
    5ebe:	52ca      	strh	r2, [r1, r3]
    atCalcCrc(packet);
    5ec0:	0008      	movs	r0, r1
    5ec2:	4b02      	ldr	r3, [pc, #8]	; (5ecc <atSign+0x1c>)
    5ec4:	4798      	blx	r3
}
    5ec6:	2000      	movs	r0, #0
    5ec8:	bd10      	pop	{r4, pc}
    5eca:	46c0      	nop			; (mov r8, r8)
    5ecc:	00005db9 	.word	0x00005db9

00005ed0 <atCheckCrc>:
 * \param[in] response pointer to response
 * \return ATCA_SUCCESS on success, otherwise ATCA_RX_CRC_ERROR
 */

ATCA_STATUS atCheckCrc(const uint8_t *response)
{
    5ed0:	b570      	push	{r4, r5, r6, lr}
    5ed2:	b082      	sub	sp, #8
    5ed4:	0005      	movs	r5, r0
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
    5ed6:	7804      	ldrb	r4, [r0, #0]

    count -= ATCA_CRC_SIZE;
    5ed8:	3c02      	subs	r4, #2
    atCRC(count, response, crc);
    5eda:	b2e4      	uxtb	r4, r4
    5edc:	ae01      	add	r6, sp, #4
    5ede:	0032      	movs	r2, r6
    5ee0:	0001      	movs	r1, r0
    5ee2:	0020      	movs	r0, r4
    5ee4:	4b08      	ldr	r3, [pc, #32]	; (5f08 <atCheckCrc+0x38>)
    5ee6:	4798      	blx	r3

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
    5ee8:	7832      	ldrb	r2, [r6, #0]
    5eea:	5d2b      	ldrb	r3, [r5, r4]
    5eec:	20e5      	movs	r0, #229	; 0xe5
    5eee:	429a      	cmp	r2, r3
    5ef0:	d001      	beq.n	5ef6 <atCheckCrc+0x26>
}
    5ef2:	b002      	add	sp, #8
    5ef4:	bd70      	pop	{r4, r5, r6, pc}
    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
    5ef6:	192c      	adds	r4, r5, r4
    5ef8:	ab01      	add	r3, sp, #4
    5efa:	785a      	ldrb	r2, [r3, #1]
    5efc:	7863      	ldrb	r3, [r4, #1]
    5efe:	429a      	cmp	r2, r3
    5f00:	d1f7      	bne.n	5ef2 <atCheckCrc+0x22>
    5f02:	2000      	movs	r0, #0
    5f04:	e7f5      	b.n	5ef2 <atCheckCrc+0x22>
    5f06:	46c0      	nop			; (mov r8, r8)
    5f08:	00005d4d 	.word	0x00005d4d

00005f0c <isATCAError>:
 * \param[in] data pointer to received data - expected to be in the form of a CA device response frame
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
    5f0c:	b510      	push	{r4, lr}
    5f0e:	b082      	sub	sp, #8
    5f10:	0004      	movs	r4, r0
    uint8_t good[4] = { 0x04, 0x00, 0x03, 0x40 };
    5f12:	4b18      	ldr	r3, [pc, #96]	; (5f74 <isATCAError+0x68>)
    5f14:	681b      	ldr	r3, [r3, #0]
    5f16:	9301      	str	r3, [sp, #4]

    if (memcmp(data, good, 4) == 0)
    5f18:	2204      	movs	r2, #4
    5f1a:	a901      	add	r1, sp, #4
    5f1c:	4b16      	ldr	r3, [pc, #88]	; (5f78 <isATCAError+0x6c>)
    5f1e:	4798      	blx	r3
    {
        return ATCA_SUCCESS;
    5f20:	2300      	movs	r3, #0
    if (memcmp(data, good, 4) == 0)
    5f22:	2800      	cmp	r0, #0
    5f24:	d002      	beq.n	5f2c <isATCAError+0x20>
    }

    if (data[0] == 0x04)        // error packets are always 4 bytes long
    5f26:	7822      	ldrb	r2, [r4, #0]
    5f28:	2a04      	cmp	r2, #4
    5f2a:	d002      	beq.n	5f32 <isATCAError+0x26>
    }
    else
    {
        return ATCA_SUCCESS;
    }
}
    5f2c:	0018      	movs	r0, r3
    5f2e:	b002      	add	sp, #8
    5f30:	bd10      	pop	{r4, pc}
        switch (data[1])
    5f32:	7862      	ldrb	r2, [r4, #1]
    5f34:	2a07      	cmp	r2, #7
    5f36:	d018      	beq.n	5f6a <isATCAError+0x5e>
    5f38:	b2d3      	uxtb	r3, r2
    5f3a:	2b07      	cmp	r3, #7
    5f3c:	d809      	bhi.n	5f52 <isATCAError+0x46>
    5f3e:	2a03      	cmp	r2, #3
    5f40:	d011      	beq.n	5f66 <isATCAError+0x5a>
            return ATCA_STATUS_ECC;
    5f42:	23d6      	movs	r3, #214	; 0xd6
        switch (data[1])
    5f44:	2a05      	cmp	r2, #5
    5f46:	d0f1      	beq.n	5f2c <isATCAError+0x20>
            return ATCA_CHECKMAC_VERIFY_FAILED;
    5f48:	3b05      	subs	r3, #5
        switch (data[1])
    5f4a:	2a01      	cmp	r2, #1
    5f4c:	d0ee      	beq.n	5f2c <isATCAError+0x20>
            return ATCA_GEN_FAIL;
    5f4e:	23e1      	movs	r3, #225	; 0xe1
    5f50:	e7ec      	b.n	5f2c <isATCAError+0x20>
        switch (data[1])
    5f52:	2a11      	cmp	r2, #17
    5f54:	d00b      	beq.n	5f6e <isATCAError+0x62>
    5f56:	b2d1      	uxtb	r1, r2
            return ATCA_STATUS_CRC;
    5f58:	23d4      	movs	r3, #212	; 0xd4
        switch (data[1])
    5f5a:	29ff      	cmp	r1, #255	; 0xff
    5f5c:	d0e6      	beq.n	5f2c <isATCAError+0x20>
            return ATCA_EXECUTION_ERROR;
    5f5e:	3320      	adds	r3, #32
        switch (data[1])
    5f60:	2a0f      	cmp	r2, #15
    5f62:	d1f4      	bne.n	5f4e <isATCAError+0x42>
    5f64:	e7e2      	b.n	5f2c <isATCAError+0x20>
            return ATCA_PARSE_ERROR;
    5f66:	23d2      	movs	r3, #210	; 0xd2
    5f68:	e7e0      	b.n	5f2c <isATCAError+0x20>
            return ATCA_STATUS_SELFTEST_ERROR;
    5f6a:	23d7      	movs	r3, #215	; 0xd7
    5f6c:	e7de      	b.n	5f2c <isATCAError+0x20>
            return ATCA_WAKE_SUCCESS;
    5f6e:	23f3      	movs	r3, #243	; 0xf3
    5f70:	e7dc      	b.n	5f2c <isATCAError+0x20>
    5f72:	46c0      	nop			; (mov r8, r8)
    5f74:	00014ac0 	.word	0x00014ac0
    5f78:	000109ab 	.word	0x000109ab

00005f7c <newATCADevice>:
 * \param[in] cfg  pointer to an interface configuration object
 * \return reference to a new ATCADevice
 */

ATCADevice newATCADevice(ATCAIfaceCfg *cfg)
{
    5f7c:	b570      	push	{r4, r5, r6, lr}
    5f7e:	1e05      	subs	r5, r0, #0
    ATCADevice ca_dev = NULL;

    if (cfg == NULL)
    5f80:	d017      	beq.n	5fb2 <newATCADevice+0x36>
    {
        return NULL;
    }

    ca_dev = (ATCADevice)malloc(sizeof(struct atca_device));
    5f82:	2008      	movs	r0, #8
    5f84:	4b0c      	ldr	r3, [pc, #48]	; (5fb8 <newATCADevice+0x3c>)
    5f86:	4798      	blx	r3
    5f88:	0004      	movs	r4, r0
    ca_dev->mCommands = (ATCACommand)newATCACommand(cfg->devtype);
    5f8a:	7868      	ldrb	r0, [r5, #1]
    5f8c:	4b0b      	ldr	r3, [pc, #44]	; (5fbc <newATCADevice+0x40>)
    5f8e:	4798      	blx	r3
    5f90:	6020      	str	r0, [r4, #0]
    ca_dev->mIface    = (ATCAIface)newATCAIface(cfg);
    5f92:	0028      	movs	r0, r5
    5f94:	4b0a      	ldr	r3, [pc, #40]	; (5fc0 <newATCADevice+0x44>)
    5f96:	4798      	blx	r3
    5f98:	6060      	str	r0, [r4, #4]

    if (ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
    5f9a:	6823      	ldr	r3, [r4, #0]
    5f9c:	2b00      	cmp	r3, #0
    5f9e:	d003      	beq.n	5fa8 <newATCADevice+0x2c>
    5fa0:	2800      	cmp	r0, #0
    5fa2:	d001      	beq.n	5fa8 <newATCADevice+0x2c>
        free(ca_dev);
        ca_dev = NULL;
    }

    return ca_dev;
}
    5fa4:	0020      	movs	r0, r4
    5fa6:	bd70      	pop	{r4, r5, r6, pc}
        free(ca_dev);
    5fa8:	0020      	movs	r0, r4
    5faa:	4b06      	ldr	r3, [pc, #24]	; (5fc4 <newATCADevice+0x48>)
    5fac:	4798      	blx	r3
        ca_dev = NULL;
    5fae:	2400      	movs	r4, #0
    5fb0:	e7f8      	b.n	5fa4 <newATCADevice+0x28>
        return NULL;
    5fb2:	2400      	movs	r4, #0
    5fb4:	e7f6      	b.n	5fa4 <newATCADevice+0x28>
    5fb6:	46c0      	nop			; (mov r8, r8)
    5fb8:	00010949 	.word	0x00010949
    5fbc:	00005c75 	.word	0x00005c75
    5fc0:	000060d5 	.word	0x000060d5
    5fc4:	0001095d 	.word	0x0001095d

00005fc8 <atGetCommands>:
 * \param[in] dev  reference to a device
 * \return reference to the ATCACommand object for the device
 */
ATCACommand atGetCommands(ATCADevice dev)
{
    return dev->mCommands;
    5fc8:	6800      	ldr	r0, [r0, #0]
}
    5fca:	4770      	bx	lr

00005fcc <atGetIFace>:
 * \return reference to the ATCAIface object for the device
 */

ATCAIface atGetIFace(ATCADevice dev)
{
    return dev->mIface;
    5fcc:	6840      	ldr	r0, [r0, #4]
}
    5fce:	4770      	bx	lr

00005fd0 <deleteATCADevice>:
/** \brief destructor for a device NULLs reference after object is freed
 * \param[in] ca_dev  pointer to a reference to a device
 *
 */
void deleteATCADevice(ATCADevice *ca_dev)   // destructor
{
    5fd0:	b570      	push	{r4, r5, r6, lr}
    5fd2:	0005      	movs	r5, r0
    struct atca_device *dev = *ca_dev;
    5fd4:	6804      	ldr	r4, [r0, #0]

    if (*ca_dev)
    5fd6:	2c00      	cmp	r4, #0
    5fd8:	d008      	beq.n	5fec <deleteATCADevice+0x1c>
    {
        deleteATCACommand( (ATCACommand*)&(dev->mCommands));
    5fda:	0020      	movs	r0, r4
    5fdc:	4b05      	ldr	r3, [pc, #20]	; (5ff4 <deleteATCADevice+0x24>)
    5fde:	4798      	blx	r3
        deleteATCAIface((ATCAIface*)&(dev->mIface));
    5fe0:	1d20      	adds	r0, r4, #4
    5fe2:	4b05      	ldr	r3, [pc, #20]	; (5ff8 <deleteATCADevice+0x28>)
    5fe4:	4798      	blx	r3
        free((void*)*ca_dev);
    5fe6:	6828      	ldr	r0, [r5, #0]
    5fe8:	4b04      	ldr	r3, [pc, #16]	; (5ffc <deleteATCADevice+0x2c>)
    5fea:	4798      	blx	r3
    }

    *ca_dev = NULL;
    5fec:	2300      	movs	r3, #0
    5fee:	602b      	str	r3, [r5, #0]
}
    5ff0:	bd70      	pop	{r4, r5, r6, pc}
    5ff2:	46c0      	nop			; (mov r8, r8)
    5ff4:	00005c8d 	.word	0x00005c8d
    5ff8:	0000604d 	.word	0x0000604d
    5ffc:	0001095d 	.word	0x0001095d

00006000 <atsend>:
 * \param[in] txdata    pointer to the data to be transmitted to the device
 * \param[in] txlength  The total number of bytes to be transmitted to the device
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsend(ATCAIface ca_iface, uint8_t *txdata, int txlength)
{
    6000:	b510      	push	{r4, lr}
    return ca_iface->atsend(ca_iface, txdata, txlength);
    6002:	6903      	ldr	r3, [r0, #16]
    6004:	4798      	blx	r3
}
    6006:	bd10      	pop	{r4, pc}

00006008 <atreceive>:
 * \param[in] rxdata   pointer to the data to be stored from device
 * \param[in] rxlength  pointer to holds the number of bytes to be received from device.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atreceive(ATCAIface ca_iface, uint8_t *rxdata, uint16_t *rxlength)
{
    6008:	b510      	push	{r4, lr}
    return ca_iface->atreceive(ca_iface, rxdata, rxlength);
    600a:	6943      	ldr	r3, [r0, #20]
    600c:	4798      	blx	r3
}
    600e:	bd10      	pop	{r4, pc}

00006010 <atwake>:
 *  User should not call this function directly,instead  use atcab_wakeup() function
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atwake(ATCAIface ca_iface)
{
    6010:	b510      	push	{r4, lr}
    return ca_iface->atwake(ca_iface);
    6012:	6983      	ldr	r3, [r0, #24]
    6014:	4798      	blx	r3
}
    6016:	bd10      	pop	{r4, pc}

00006018 <atidle>:
 *  User should not call this function directly,instead  use atcab_idle() function
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atidle(ATCAIface ca_iface)
{
    6018:	b510      	push	{r4, lr}
    ATCA_STATUS status;

    status = ca_iface->atidle(ca_iface);
    601a:	69c3      	ldr	r3, [r0, #28]
    601c:	4798      	blx	r3
    601e:	0004      	movs	r4, r0
    atca_delay_ms(1);
    6020:	2001      	movs	r0, #1
    6022:	4b02      	ldr	r3, [pc, #8]	; (602c <atidle+0x14>)
    6024:	4798      	blx	r3
    return status;
}
    6026:	0020      	movs	r0, r4
    6028:	bd10      	pop	{r4, pc}
    602a:	46c0      	nop			; (mov r8, r8)
    602c:	00006e95 	.word	0x00006e95

00006030 <atsleep>:
 *  User should not call this function directly,instead  use atcab_sleep() function
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsleep(ATCAIface ca_iface)
{
    6030:	b510      	push	{r4, lr}
    ATCA_STATUS status;

    status = ca_iface->atsleep(ca_iface);
    6032:	6a03      	ldr	r3, [r0, #32]
    6034:	4798      	blx	r3
    6036:	0004      	movs	r4, r0
    atca_delay_ms(1);
    6038:	2001      	movs	r0, #1
    603a:	4b02      	ldr	r3, [pc, #8]	; (6044 <atsleep+0x14>)
    603c:	4798      	blx	r3
    return status;
}
    603e:	0020      	movs	r0, r4
    6040:	bd10      	pop	{r4, pc}
    6042:	46c0      	nop			; (mov r8, r8)
    6044:	00006e95 	.word	0x00006e95

00006048 <atgetifacecfg>:
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return returns the pointer to ATCAIfaceCfg.
 */
ATCAIfaceCfg * atgetifacecfg(ATCAIface ca_iface)
{
    return ca_iface->mIfaceCFG;
    6048:	6840      	ldr	r0, [r0, #4]
}
    604a:	4770      	bx	lr

0000604c <deleteATCAIface>:

/** \brief destructor for ATCAIface objects
 * \param[in] ca_iface  points to the logical configuration for the interface
 */
void deleteATCAIface(ATCAIface *ca_iface) // destructor
{
    604c:	b510      	push	{r4, lr}
    604e:	0004      	movs	r4, r0
    if (*ca_iface)
    6050:	6803      	ldr	r3, [r0, #0]
    6052:	2b00      	cmp	r3, #0
    6054:	d006      	beq.n	6064 <deleteATCAIface+0x18>
    {
        hal_iface_release( (*ca_iface)->mType, (*ca_iface)->hal_data);  // let HAL clean up and disable physical level interface if ref count is 0
    6056:	6a59      	ldr	r1, [r3, #36]	; 0x24
    6058:	7818      	ldrb	r0, [r3, #0]
    605a:	4b04      	ldr	r3, [pc, #16]	; (606c <deleteATCAIface+0x20>)
    605c:	4798      	blx	r3
        free((void*)*ca_iface);
    605e:	6820      	ldr	r0, [r4, #0]
    6060:	4b03      	ldr	r3, [pc, #12]	; (6070 <deleteATCAIface+0x24>)
    6062:	4798      	blx	r3
    }

    *ca_iface = NULL;
    6064:	2300      	movs	r3, #0
    6066:	6023      	str	r3, [r4, #0]
}
    6068:	bd10      	pop	{r4, pc}
    606a:	46c0      	nop			; (mov r8, r8)
    606c:	00006941 	.word	0x00006941
    6070:	0001095d 	.word	0x0001095d

00006074 <_atinit>:

ATCA_STATUS _atinit(ATCAIface ca_iface, ATCAHAL_t *hal)
{
    6074:	b570      	push	{r4, r5, r6, lr}
    6076:	0004      	movs	r4, r0
    6078:	000d      	movs	r5, r1
    // get method mapping to HAL methods for this interface
    hal_iface_init(ca_iface->mIfaceCFG, hal);
    607a:	6840      	ldr	r0, [r0, #4]
    607c:	4b09      	ldr	r3, [pc, #36]	; (60a4 <_atinit+0x30>)
    607e:	4798      	blx	r3
    ca_iface->atinit     = hal->halinit;
    6080:	682b      	ldr	r3, [r5, #0]
    6082:	60a3      	str	r3, [r4, #8]
    ca_iface->atpostinit = hal->halpostinit;
    6084:	686b      	ldr	r3, [r5, #4]
    6086:	60e3      	str	r3, [r4, #12]
    ca_iface->atsend     = hal->halsend;
    6088:	68ab      	ldr	r3, [r5, #8]
    608a:	6123      	str	r3, [r4, #16]
    ca_iface->atreceive  = hal->halreceive;
    608c:	68eb      	ldr	r3, [r5, #12]
    608e:	6163      	str	r3, [r4, #20]
    ca_iface->atwake     = hal->halwake;
    6090:	692b      	ldr	r3, [r5, #16]
    6092:	61a3      	str	r3, [r4, #24]
    ca_iface->atsleep    = hal->halsleep;
    6094:	69ab      	ldr	r3, [r5, #24]
    6096:	6223      	str	r3, [r4, #32]
    ca_iface->atidle     = hal->halidle;
    6098:	696b      	ldr	r3, [r5, #20]
    609a:	61e3      	str	r3, [r4, #28]
    ca_iface->hal_data   = hal->hal_data;
    609c:	6a2b      	ldr	r3, [r5, #32]
    609e:	6263      	str	r3, [r4, #36]	; 0x24

    return ATCA_SUCCESS;
}
    60a0:	2000      	movs	r0, #0
    60a2:	bd70      	pop	{r4, r5, r6, pc}
    60a4:	000068ed 	.word	0x000068ed

000060a8 <atinit>:
{
    60a8:	b510      	push	{r4, lr}
    60aa:	b08a      	sub	sp, #40	; 0x28
    60ac:	0004      	movs	r4, r0
    _atinit(ca_iface, &hal);
    60ae:	a901      	add	r1, sp, #4
    60b0:	4b07      	ldr	r3, [pc, #28]	; (60d0 <atinit+0x28>)
    60b2:	4798      	blx	r3
    status = ca_iface->atinit(&hal, ca_iface->mIfaceCFG);
    60b4:	6861      	ldr	r1, [r4, #4]
    60b6:	a801      	add	r0, sp, #4
    60b8:	68a3      	ldr	r3, [r4, #8]
    60ba:	4798      	blx	r3
    if (status == ATCA_SUCCESS)
    60bc:	2800      	cmp	r0, #0
    60be:	d001      	beq.n	60c4 <atinit+0x1c>
}
    60c0:	b00a      	add	sp, #40	; 0x28
    60c2:	bd10      	pop	{r4, pc}
        ca_iface->hal_data = hal.hal_data;
    60c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    60c6:	6263      	str	r3, [r4, #36]	; 0x24
        status = ca_iface->atpostinit(ca_iface);
    60c8:	68e3      	ldr	r3, [r4, #12]
    60ca:	0020      	movs	r0, r4
    60cc:	4798      	blx	r3
    60ce:	e7f7      	b.n	60c0 <atinit+0x18>
    60d0:	00006075 	.word	0x00006075

000060d4 <newATCAIface>:
{
    60d4:	b570      	push	{r4, r5, r6, lr}
    60d6:	0005      	movs	r5, r0
    ca_iface = (ATCAIface)malloc(sizeof(struct atca_iface));
    60d8:	2028      	movs	r0, #40	; 0x28
    60da:	4b08      	ldr	r3, [pc, #32]	; (60fc <newATCAIface+0x28>)
    60dc:	4798      	blx	r3
    60de:	0004      	movs	r4, r0
    ca_iface->mType = cfg->iface_type;
    60e0:	782b      	ldrb	r3, [r5, #0]
    60e2:	7003      	strb	r3, [r0, #0]
    ca_iface->mIfaceCFG = cfg;
    60e4:	6045      	str	r5, [r0, #4]
    if (atinit(ca_iface) != ATCA_SUCCESS)
    60e6:	4b06      	ldr	r3, [pc, #24]	; (6100 <newATCAIface+0x2c>)
    60e8:	4798      	blx	r3
    60ea:	2800      	cmp	r0, #0
    60ec:	d101      	bne.n	60f2 <newATCAIface+0x1e>
}
    60ee:	0020      	movs	r0, r4
    60f0:	bd70      	pop	{r4, r5, r6, pc}
        free(ca_iface);
    60f2:	0020      	movs	r0, r4
    60f4:	4b03      	ldr	r3, [pc, #12]	; (6104 <newATCAIface+0x30>)
    60f6:	4798      	blx	r3
        ca_iface = NULL;
    60f8:	2400      	movs	r4, #0
    return ca_iface;
    60fa:	e7f8      	b.n	60ee <newATCAIface+0x1a>
    60fc:	00010949 	.word	0x00010949
    6100:	000060a9 	.word	0x000060a9
    6104:	0001095d 	.word	0x0001095d

00006108 <atcab_genkey_base>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_genkey_base(uint8_t mode, uint16_t key_id, const uint8_t* other_data, uint8_t* public_key)
{
    6108:	b570      	push	{r4, r5, r6, lr}
    610a:	b0a4      	sub	sp, #144	; 0x90
    610c:	0014      	movs	r4, r2
    610e:	001d      	movs	r5, r3
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    6110:	4b14      	ldr	r3, [pc, #80]	; (6164 <atcab_genkey_base+0x5c>)
    6112:	681b      	ldr	r3, [r3, #0]
    6114:	681e      	ldr	r6, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        // Build GenKey command
        packet.param1 = mode;
    6116:	ab01      	add	r3, sp, #4
    6118:	70d8      	strb	r0, [r3, #3]
        packet.param2 = key_id;
    611a:	8099      	strh	r1, [r3, #4]
        if (other_data)
    611c:	2a00      	cmp	r2, #0
    611e:	d005      	beq.n	612c <atcab_genkey_base+0x24>
        {
            memcpy(packet.data, other_data, GENKEY_OTHER_DATA_SIZE);
    6120:	2203      	movs	r2, #3
    6122:	0021      	movs	r1, r4
    6124:	200a      	movs	r0, #10
    6126:	4468      	add	r0, sp
    6128:	4b0f      	ldr	r3, [pc, #60]	; (6168 <atcab_genkey_base+0x60>)
    612a:	4798      	blx	r3
        }

        if ((status = atGenKey(ca_cmd, &packet)) != ATCA_SUCCESS)
    612c:	a901      	add	r1, sp, #4
    612e:	0030      	movs	r0, r6
    6130:	4b0e      	ldr	r3, [pc, #56]	; (616c <atcab_genkey_base+0x64>)
    6132:	4798      	blx	r3
    6134:	1e04      	subs	r4, r0, #0
    6136:	d002      	beq.n	613e <atcab_genkey_base+0x36>
        }
    }
    while (0);

    return status;
}
    6138:	0020      	movs	r0, r4
    613a:	b024      	add	sp, #144	; 0x90
    613c:	bd70      	pop	{r4, r5, r6, pc}
        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
    613e:	a801      	add	r0, sp, #4
    6140:	4b0b      	ldr	r3, [pc, #44]	; (6170 <atcab_genkey_base+0x68>)
    6142:	4798      	blx	r3
    6144:	1e04      	subs	r4, r0, #0
    6146:	d1f7      	bne.n	6138 <atcab_genkey_base+0x30>
        if (public_key && packet.data[ATCA_COUNT_IDX] > 4)
    6148:	2d00      	cmp	r5, #0
    614a:	d0f5      	beq.n	6138 <atcab_genkey_base+0x30>
    614c:	ab01      	add	r3, sp, #4
    614e:	799a      	ldrb	r2, [r3, #6]
    6150:	2a04      	cmp	r2, #4
    6152:	d9f1      	bls.n	6138 <atcab_genkey_base+0x30>
            memcpy(public_key, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - 3);
    6154:	3a03      	subs	r2, #3
    6156:	210b      	movs	r1, #11
    6158:	4469      	add	r1, sp
    615a:	0028      	movs	r0, r5
    615c:	4b02      	ldr	r3, [pc, #8]	; (6168 <atcab_genkey_base+0x60>)
    615e:	4798      	blx	r3
    6160:	e7ea      	b.n	6138 <atcab_genkey_base+0x30>
    6162:	46c0      	nop			; (mov r8, r8)
    6164:	200005d0 	.word	0x200005d0
    6168:	000109c9 	.word	0x000109c9
    616c:	00005dd1 	.word	0x00005dd1
    6170:	00003719 	.word	0x00003719

00006174 <atcab_get_pubkey>:
 *                          isn't required.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_pubkey(uint16_t key_id, uint8_t *public_key)
{
    6174:	b510      	push	{r4, lr}
    6176:	000b      	movs	r3, r1
    return atcab_genkey_base(GENKEY_MODE_PUBLIC, key_id, NULL, public_key);
    6178:	2200      	movs	r2, #0
    617a:	0001      	movs	r1, r0
    617c:	2000      	movs	r0, #0
    617e:	4c01      	ldr	r4, [pc, #4]	; (6184 <atcab_get_pubkey+0x10>)
    6180:	47a0      	blx	r4
    6182:	bd10      	pop	{r4, pc}
    6184:	00006109 	.word	0x00006109

00006188 <atcab_info_base>:
 * \param[out] out_data  Response from info command (4 bytes). Can be set to
 *                       NULL if not required.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_info_base(uint8_t mode, uint16_t param2, uint8_t* out_data)
{
    6188:	b530      	push	{r4, r5, lr}
    618a:	b0a5      	sub	sp, #148	; 0x94
    618c:	0015      	movs	r5, r2
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    618e:	4b11      	ldr	r3, [pc, #68]	; (61d4 <atcab_info_base+0x4c>)
    6190:	681b      	ldr	r3, [r3, #0]
    6192:	681a      	ldr	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;

    // build an info command
    packet.param1 = mode;
    6194:	ab01      	add	r3, sp, #4
    6196:	70d8      	strb	r0, [r3, #3]
    packet.param2 = param2;
    6198:	8099      	strh	r1, [r3, #4]

    do
    {

        if ((status = atInfo(ca_cmd, &packet)) != ATCA_SUCCESS)
    619a:	0019      	movs	r1, r3
    619c:	0010      	movs	r0, r2
    619e:	4b0e      	ldr	r3, [pc, #56]	; (61d8 <atcab_info_base+0x50>)
    61a0:	4798      	blx	r3
    61a2:	1e04      	subs	r4, r0, #0
    61a4:	d002      	beq.n	61ac <atcab_info_base+0x24>
        }
    }
    while (0);

    return status;
}
    61a6:	0020      	movs	r0, r4
    61a8:	b025      	add	sp, #148	; 0x94
    61aa:	bd30      	pop	{r4, r5, pc}
        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
    61ac:	a801      	add	r0, sp, #4
    61ae:	4b0b      	ldr	r3, [pc, #44]	; (61dc <atcab_info_base+0x54>)
    61b0:	4798      	blx	r3
    61b2:	1e04      	subs	r4, r0, #0
    61b4:	d1f7      	bne.n	61a6 <atcab_info_base+0x1e>
        if (out_data != NULL && packet.rxsize >= 7)
    61b6:	2d00      	cmp	r5, #0
    61b8:	d0f5      	beq.n	61a6 <atcab_info_base+0x1e>
    61ba:	238a      	movs	r3, #138	; 0x8a
    61bc:	aa01      	add	r2, sp, #4
    61be:	5ad3      	ldrh	r3, [r2, r3]
    61c0:	2b06      	cmp	r3, #6
    61c2:	d9f0      	bls.n	61a6 <atcab_info_base+0x1e>
            memcpy(out_data, &packet.data[ATCA_RSP_DATA_IDX], 4);
    61c4:	2204      	movs	r2, #4
    61c6:	210b      	movs	r1, #11
    61c8:	4469      	add	r1, sp
    61ca:	0028      	movs	r0, r5
    61cc:	4b04      	ldr	r3, [pc, #16]	; (61e0 <atcab_info_base+0x58>)
    61ce:	4798      	blx	r3
    61d0:	e7e9      	b.n	61a6 <atcab_info_base+0x1e>
    61d2:	46c0      	nop			; (mov r8, r8)
    61d4:	200005d0 	.word	0x200005d0
    61d8:	00005e01 	.word	0x00005e01
    61dc:	00003719 	.word	0x00003719
    61e0:	000109c9 	.word	0x000109c9

000061e4 <atcab_info>:
/** \brief Use the Info command to get the device revision (DevRev).
 *  \param[out] revision  Device revision is returned here (4 bytes).
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_info(uint8_t* revision)
{
    61e4:	b510      	push	{r4, lr}
    61e6:	0002      	movs	r2, r0
    if (revision == NULL)
    {
        return ATCA_BAD_PARAM;
    61e8:	20e2      	movs	r0, #226	; 0xe2
    if (revision == NULL)
    61ea:	2a00      	cmp	r2, #0
    61ec:	d003      	beq.n	61f6 <atcab_info+0x12>
    }

    return atcab_info_base(INFO_MODE_REVISION, 0, revision);
    61ee:	2100      	movs	r1, #0
    61f0:	2000      	movs	r0, #0
    61f2:	4b01      	ldr	r3, [pc, #4]	; (61f8 <atcab_info+0x14>)
    61f4:	4798      	blx	r3
}
    61f6:	bd10      	pop	{r4, pc}
    61f8:	00006189 	.word	0x00006189

000061fc <atcab_nonce_base>:
 *                          needed.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_base(uint8_t mode, uint16_t zero, const uint8_t *num_in, uint8_t* rand_out)
{
    61fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    61fe:	b0a5      	sub	sp, #148	; 0x94
    6200:	0016      	movs	r6, r2
    6202:	001d      	movs	r5, r3
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    6204:	4b1f      	ldr	r3, [pc, #124]	; (6284 <atcab_nonce_base+0x88>)
    6206:	681b      	ldr	r3, [r3, #0]
    6208:	681f      	ldr	r7, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t nonce_mode = mode & NONCE_MODE_MASK;
    620a:	2303      	movs	r3, #3
    620c:	4003      	ands	r3, r0

    do
    {
        // build a nonce command
        packet.param1 = mode;
    620e:	aa01      	add	r2, sp, #4
    6210:	70d0      	strb	r0, [r2, #3]
        packet.param2 = zero;
    6212:	8091      	strh	r1, [r2, #4]

        // Copy the right amount of NumIn data
        if ((nonce_mode == NONCE_MODE_SEED_UPDATE || nonce_mode == NONCE_MODE_NO_SEED_UPDATE))
    6214:	2b01      	cmp	r3, #1
    6216:	d905      	bls.n	6224 <atcab_nonce_base+0x28>
                memcpy(packet.data, num_in, 32);
            }
        }
        else
        {
            return ATCA_BAD_PARAM;
    6218:	24e2      	movs	r4, #226	; 0xe2
        else if (nonce_mode == NONCE_MODE_PASSTHROUGH)
    621a:	2b03      	cmp	r3, #3
    621c:	d021      	beq.n	6262 <atcab_nonce_base+0x66>

    }
    while (0);

    return status;
}
    621e:	0020      	movs	r0, r4
    6220:	b025      	add	sp, #148	; 0x94
    6222:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy(packet.data, num_in, NONCE_NUMIN_SIZE);
    6224:	2214      	movs	r2, #20
    6226:	0031      	movs	r1, r6
    6228:	200a      	movs	r0, #10
    622a:	4468      	add	r0, sp
    622c:	4b16      	ldr	r3, [pc, #88]	; (6288 <atcab_nonce_base+0x8c>)
    622e:	4798      	blx	r3
        if ((status = atNonce(ca_cmd, &packet)) != ATCA_SUCCESS)
    6230:	a901      	add	r1, sp, #4
    6232:	0038      	movs	r0, r7
    6234:	4b15      	ldr	r3, [pc, #84]	; (628c <atcab_nonce_base+0x90>)
    6236:	4798      	blx	r3
    6238:	1e04      	subs	r4, r0, #0
    623a:	d1f0      	bne.n	621e <atcab_nonce_base+0x22>
        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
    623c:	a801      	add	r0, sp, #4
    623e:	4b14      	ldr	r3, [pc, #80]	; (6290 <atcab_nonce_base+0x94>)
    6240:	4798      	blx	r3
    6242:	1e04      	subs	r4, r0, #0
    6244:	d1eb      	bne.n	621e <atcab_nonce_base+0x22>
        if ((rand_out != NULL) && (packet.rxsize >= 35))
    6246:	2d00      	cmp	r5, #0
    6248:	d0e9      	beq.n	621e <atcab_nonce_base+0x22>
    624a:	238a      	movs	r3, #138	; 0x8a
    624c:	aa01      	add	r2, sp, #4
    624e:	5ad3      	ldrh	r3, [r2, r3]
    6250:	2b22      	cmp	r3, #34	; 0x22
    6252:	d9e4      	bls.n	621e <atcab_nonce_base+0x22>
            memcpy(&rand_out[0], &packet.data[ATCA_RSP_DATA_IDX], 32);
    6254:	2220      	movs	r2, #32
    6256:	210b      	movs	r1, #11
    6258:	4469      	add	r1, sp
    625a:	0028      	movs	r0, r5
    625c:	4b0a      	ldr	r3, [pc, #40]	; (6288 <atcab_nonce_base+0x8c>)
    625e:	4798      	blx	r3
    6260:	e7dd      	b.n	621e <atcab_nonce_base+0x22>
            if ((mode & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
    6262:	0683      	lsls	r3, r0, #26
    6264:	d506      	bpl.n	6274 <atcab_nonce_base+0x78>
                memcpy(packet.data, num_in, 64);
    6266:	2240      	movs	r2, #64	; 0x40
    6268:	0031      	movs	r1, r6
    626a:	200a      	movs	r0, #10
    626c:	4468      	add	r0, sp
    626e:	4b06      	ldr	r3, [pc, #24]	; (6288 <atcab_nonce_base+0x8c>)
    6270:	4798      	blx	r3
    6272:	e7dd      	b.n	6230 <atcab_nonce_base+0x34>
                memcpy(packet.data, num_in, 32);
    6274:	2220      	movs	r2, #32
    6276:	0031      	movs	r1, r6
    6278:	200a      	movs	r0, #10
    627a:	4468      	add	r0, sp
    627c:	4b02      	ldr	r3, [pc, #8]	; (6288 <atcab_nonce_base+0x8c>)
    627e:	4798      	blx	r3
    6280:	e7d6      	b.n	6230 <atcab_nonce_base+0x34>
    6282:	46c0      	nop			; (mov r8, r8)
    6284:	200005d0 	.word	0x200005d0
    6288:	000109c9 	.word	0x000109c9
    628c:	00005e1d 	.word	0x00005e1d
    6290:	00003719 	.word	0x00003719

00006294 <atcab_nonce_load>:
 *                          depending on device and target.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_load(uint8_t target, const uint8_t *num_in, uint16_t num_in_size)
{
    6294:	b510      	push	{r4, lr}
    uint8_t mode = NONCE_MODE_PASSTHROUGH | (NONCE_MODE_TARGET_MASK & target);
    6296:	233f      	movs	r3, #63	; 0x3f
    6298:	4398      	bics	r0, r3

    if (num_in_size == 32)
    629a:	2a20      	cmp	r2, #32
    629c:	d004      	beq.n	62a8 <atcab_nonce_load+0x14>
    {
        mode |= NONCE_MODE_INPUT_LEN_64;
    }
    else
    {
        return ATCA_BAD_PARAM;
    629e:	23e2      	movs	r3, #226	; 0xe2
    else if (num_in_size == 64)
    62a0:	2a40      	cmp	r2, #64	; 0x40
    62a2:	d004      	beq.n	62ae <atcab_nonce_load+0x1a>
    }

    return atcab_nonce_base(mode, 0, num_in, NULL);
}
    62a4:	0018      	movs	r0, r3
    62a6:	bd10      	pop	{r4, pc}
    uint8_t mode = NONCE_MODE_PASSTHROUGH | (NONCE_MODE_TARGET_MASK & target);
    62a8:	3b3c      	subs	r3, #60	; 0x3c
    62aa:	4318      	orrs	r0, r3
    62ac:	e001      	b.n	62b2 <atcab_nonce_load+0x1e>
        mode |= NONCE_MODE_INPUT_LEN_64;
    62ae:	3bbf      	subs	r3, #191	; 0xbf
    62b0:	4318      	orrs	r0, r3
    return atcab_nonce_base(mode, 0, num_in, NULL);
    62b2:	2300      	movs	r3, #0
    62b4:	000a      	movs	r2, r1
    62b6:	2100      	movs	r1, #0
    62b8:	4c01      	ldr	r4, [pc, #4]	; (62c0 <atcab_nonce_load+0x2c>)
    62ba:	47a0      	blx	r4
    62bc:	0003      	movs	r3, r0
    62be:	e7f1      	b.n	62a4 <atcab_nonce_load+0x10>
    62c0:	000061fd 	.word	0x000061fd

000062c4 <atcab_random>:
 * \param[out] rand_out  32 bytes of random data is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
    62c4:	b530      	push	{r4, r5, lr}
    62c6:	b0a5      	sub	sp, #148	; 0x94
    62c8:	0005      	movs	r5, r0
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    62ca:	4b14      	ldr	r3, [pc, #80]	; (631c <atcab_random+0x58>)
    62cc:	681b      	ldr	r3, [r3, #0]
    62ce:	6818      	ldr	r0, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
    62d0:	a901      	add	r1, sp, #4
    62d2:	2300      	movs	r3, #0
    62d4:	70cb      	strb	r3, [r1, #3]
        packet.param2 = 0x0000;
    62d6:	808b      	strh	r3, [r1, #4]

        if ((status = atRandom(ca_cmd, &packet)) != ATCA_SUCCESS)
    62d8:	4b11      	ldr	r3, [pc, #68]	; (6320 <atcab_random+0x5c>)
    62da:	4798      	blx	r3
    62dc:	1e04      	subs	r4, r0, #0
    62de:	d002      	beq.n	62e6 <atcab_random+0x22>
    }
    while (0);


    return status;
}
    62e0:	0020      	movs	r0, r4
    62e2:	b025      	add	sp, #148	; 0x94
    62e4:	bd30      	pop	{r4, r5, pc}
        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
    62e6:	a801      	add	r0, sp, #4
    62e8:	4b0e      	ldr	r3, [pc, #56]	; (6324 <atcab_random+0x60>)
    62ea:	4798      	blx	r3
    62ec:	1e04      	subs	r4, r0, #0
    62ee:	d1f7      	bne.n	62e0 <atcab_random+0x1c>
        if (packet.rxsize < packet.data[ATCA_COUNT_IDX] || packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
    62f0:	ab01      	add	r3, sp, #4
    62f2:	799a      	ldrb	r2, [r3, #6]
    62f4:	218a      	movs	r1, #138	; 0x8a
    62f6:	5a5b      	ldrh	r3, [r3, r1]
    62f8:	4293      	cmp	r3, r2
    62fa:	d201      	bcs.n	6300 <atcab_random+0x3c>
            status = ATCA_RX_FAIL;
    62fc:	24e6      	movs	r4, #230	; 0xe6
    62fe:	e7ef      	b.n	62e0 <atcab_random+0x1c>
        if (packet.rxsize < packet.data[ATCA_COUNT_IDX] || packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
    6300:	2a23      	cmp	r2, #35	; 0x23
    6302:	d001      	beq.n	6308 <atcab_random+0x44>
            status = ATCA_RX_FAIL;
    6304:	24e6      	movs	r4, #230	; 0xe6
    6306:	e7eb      	b.n	62e0 <atcab_random+0x1c>
        if (rand_out)
    6308:	2d00      	cmp	r5, #0
    630a:	d0e9      	beq.n	62e0 <atcab_random+0x1c>
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
    630c:	3a03      	subs	r2, #3
    630e:	397f      	subs	r1, #127	; 0x7f
    6310:	4469      	add	r1, sp
    6312:	0028      	movs	r0, r5
    6314:	4b04      	ldr	r3, [pc, #16]	; (6328 <atcab_random+0x64>)
    6316:	4798      	blx	r3
    6318:	e7e2      	b.n	62e0 <atcab_random+0x1c>
    631a:	46c0      	nop			; (mov r8, r8)
    631c:	200005d0 	.word	0x200005d0
    6320:	00005e65 	.word	0x00005e65
    6324:	00003719 	.word	0x00003719
    6328:	000109c9 	.word	0x000109c9

0000632c <atcab_read_zone>:
 *  \param[in]  len     Length of the data to be read. Must be either 4 or 32.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
    632c:	b5f0      	push	{r4, r5, r6, r7, lr}
    632e:	b0a9      	sub	sp, #164	; 0xa4
    6330:	9003      	str	r0, [sp, #12]
    6332:	a82e      	add	r0, sp, #184	; 0xb8
    6334:	c880      	ldmia	r0!, {r7}
    6336:	7805      	ldrb	r5, [r0, #0]
    uint16_t addr;

    do
    {
        // Check the input parameters
        if (data == NULL)
    6338:	2f00      	cmp	r7, #0
    633a:	d00a      	beq.n	6352 <atcab_read_zone+0x26>
    ATCACommand ca_cmd = _gDevice->mCommands;
    633c:	4821      	ldr	r0, [pc, #132]	; (63c4 <atcab_read_zone+0x98>)
    633e:	6800      	ldr	r0, [r0, #0]
    6340:	6806      	ldr	r6, [r0, #0]
        {
            return ATCA_BAD_PARAM;
        }

        if (len != 4 && len != 32)
    6342:	2d04      	cmp	r5, #4
    6344:	d016      	beq.n	6374 <atcab_read_zone+0x48>
        {
            return ATCA_BAD_PARAM;
    6346:	24e2      	movs	r4, #226	; 0xe2
        if (len != 4 && len != 32)
    6348:	2d20      	cmp	r5, #32
    634a:	d004      	beq.n	6356 <atcab_read_zone+0x2a>
        memcpy(data, &packet.data[1], len);
    }
    while (0);

    return status;
}
    634c:	0020      	movs	r0, r4
    634e:	b029      	add	sp, #164	; 0xa4
    6350:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ATCA_BAD_PARAM;
    6352:	24e2      	movs	r4, #226	; 0xe2
    6354:	e7fa      	b.n	634c <atcab_read_zone+0x20>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
    6356:	200a      	movs	r0, #10
    6358:	ac02      	add	r4, sp, #8
    635a:	46a4      	mov	ip, r4
    635c:	4460      	add	r0, ip
    635e:	9000      	str	r0, [sp, #0]
    6360:	9803      	ldr	r0, [sp, #12]
    6362:	4c19      	ldr	r4, [pc, #100]	; (63c8 <atcab_read_zone+0x9c>)
    6364:	47a0      	blx	r4
    6366:	1e04      	subs	r4, r0, #0
    6368:	d1f0      	bne.n	634c <atcab_read_zone+0x20>
            zone = zone | ATCA_ZONE_READWRITE_32;
    636a:	2380      	movs	r3, #128	; 0x80
    636c:	9a03      	ldr	r2, [sp, #12]
    636e:	431a      	orrs	r2, r3
    6370:	9203      	str	r2, [sp, #12]
    6372:	e009      	b.n	6388 <atcab_read_zone+0x5c>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
    6374:	200a      	movs	r0, #10
    6376:	ac02      	add	r4, sp, #8
    6378:	46a4      	mov	ip, r4
    637a:	4460      	add	r0, ip
    637c:	9000      	str	r0, [sp, #0]
    637e:	9803      	ldr	r0, [sp, #12]
    6380:	4c11      	ldr	r4, [pc, #68]	; (63c8 <atcab_read_zone+0x9c>)
    6382:	47a0      	blx	r4
    6384:	1e04      	subs	r4, r0, #0
    6386:	d1e1      	bne.n	634c <atcab_read_zone+0x20>
        packet.param1 = zone;
    6388:	a905      	add	r1, sp, #20
    638a:	466b      	mov	r3, sp
    638c:	7b1b      	ldrb	r3, [r3, #12]
    638e:	70cb      	strb	r3, [r1, #3]
        packet.param2 = addr;
    6390:	230a      	movs	r3, #10
    6392:	aa02      	add	r2, sp, #8
    6394:	4694      	mov	ip, r2
    6396:	4463      	add	r3, ip
    6398:	881b      	ldrh	r3, [r3, #0]
    639a:	808b      	strh	r3, [r1, #4]
        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
    639c:	0030      	movs	r0, r6
    639e:	4b0b      	ldr	r3, [pc, #44]	; (63cc <atcab_read_zone+0xa0>)
    63a0:	4798      	blx	r3
    63a2:	1e04      	subs	r4, r0, #0
    63a4:	d1d2      	bne.n	634c <atcab_read_zone+0x20>
        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
    63a6:	a805      	add	r0, sp, #20
    63a8:	4b09      	ldr	r3, [pc, #36]	; (63d0 <atcab_read_zone+0xa4>)
    63aa:	4798      	blx	r3
    63ac:	1e04      	subs	r4, r0, #0
    63ae:	d1cd      	bne.n	634c <atcab_read_zone+0x20>
        memcpy(data, &packet.data[1], len);
    63b0:	002a      	movs	r2, r5
    63b2:	2113      	movs	r1, #19
    63b4:	ab02      	add	r3, sp, #8
    63b6:	469c      	mov	ip, r3
    63b8:	4461      	add	r1, ip
    63ba:	0038      	movs	r0, r7
    63bc:	4b05      	ldr	r3, [pc, #20]	; (63d4 <atcab_read_zone+0xa8>)
    63be:	4798      	blx	r3
    63c0:	e7c4      	b.n	634c <atcab_read_zone+0x20>
    63c2:	46c0      	nop			; (mov r8, r8)
    63c4:	200005d0 	.word	0x200005d0
    63c8:	00003649 	.word	0x00003649
    63cc:	00005e85 	.word	0x00005e85
    63d0:	00003719 	.word	0x00003719
    63d4:	000109c9 	.word	0x000109c9

000063d8 <atcab_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
    63d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    63da:	46de      	mov	lr, fp
    63dc:	4657      	mov	r7, sl
    63de:	464e      	mov	r6, r9
    63e0:	4645      	mov	r5, r8
    63e2:	b5e0      	push	{r5, r6, r7, lr}
    63e4:	b091      	sub	sp, #68	; 0x44
    63e6:	0005      	movs	r5, r0
    63e8:	9102      	str	r1, [sp, #8]
    63ea:	0017      	movs	r7, r2
    63ec:	9303      	str	r3, [sp, #12]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
    63ee:	2300      	movs	r3, #0
    63f0:	930f      	str	r3, [sp, #60]	; 0x3c
    size_t copy_length = 0;
    size_t read_offset = 0;

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
    {
        return ATCA_BAD_PARAM;
    63f2:	24e2      	movs	r4, #226	; 0xe2
    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
    63f4:	2802      	cmp	r0, #2
    63f6:	d907      	bls.n	6408 <atcab_read_bytes_zone+0x30>
        }
    }
    while (false);

    return status;
}
    63f8:	0020      	movs	r0, r4
    63fa:	b011      	add	sp, #68	; 0x44
    63fc:	bc3c      	pop	{r2, r3, r4, r5}
    63fe:	4690      	mov	r8, r2
    6400:	4699      	mov	r9, r3
    6402:	46a2      	mov	sl, r4
    6404:	46ab      	mov	fp, r5
    6406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (zone == ATCA_ZONE_DATA && slot > 15)
    6408:	2802      	cmp	r0, #2
    640a:	d01f      	beq.n	644c <atcab_read_bytes_zone+0x74>
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
    640c:	2400      	movs	r4, #0
    if (length == 0)
    640e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    6410:	2b00      	cmp	r3, #0
    6412:	d0f1      	beq.n	63f8 <atcab_read_bytes_zone+0x20>
        return ATCA_BAD_PARAM;
    6414:	34e2      	adds	r4, #226	; 0xe2
    if (data == NULL)
    6416:	9b03      	ldr	r3, [sp, #12]
    6418:	2b00      	cmp	r3, #0
    641a:	d0ed      	beq.n	63f8 <atcab_read_bytes_zone+0x20>
        status = atcab_get_zone_size(zone, slot, &zone_size);
    641c:	aa0f      	add	r2, sp, #60	; 0x3c
    641e:	9902      	ldr	r1, [sp, #8]
    6420:	0028      	movs	r0, r5
    6422:	4b2e      	ldr	r3, [pc, #184]	; (64dc <atcab_read_bytes_zone+0x104>)
    6424:	4798      	blx	r3
    6426:	1e04      	subs	r4, r0, #0
        if (status != ATCA_SUCCESS)
    6428:	d1e6      	bne.n	63f8 <atcab_read_bytes_zone+0x20>
        if (offset + length > zone_size)
    642a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    642c:	19db      	adds	r3, r3, r7
            return ATCA_BAD_PARAM; // Can't read past the end of a zone
    642e:	34e2      	adds	r4, #226	; 0xe2
        if (offset + length > zone_size)
    6430:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6432:	4293      	cmp	r3, r2
    6434:	d8e0      	bhi.n	63f8 <atcab_read_bytes_zone+0x20>
        cur_block = offset / ATCA_BLOCK_SIZE;
    6436:	097b      	lsrs	r3, r7, #5
    6438:	4698      	mov	r8, r3
    643a:	2320      	movs	r3, #32
    643c:	469a      	mov	sl, r3
    643e:	2300      	movs	r3, #0
    6440:	2600      	movs	r6, #0
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
    6442:	46a9      	mov	r9, r5
    6444:	001d      	movs	r5, r3
    6446:	9705      	str	r7, [sp, #20]
    6448:	4657      	mov	r7, sl
    644a:	e01e      	b.n	648a <atcab_read_bytes_zone+0xb2>
    if (zone == ATCA_ZONE_DATA && slot > 15)
    644c:	290f      	cmp	r1, #15
    644e:	d8d3      	bhi.n	63f8 <atcab_read_bytes_zone+0x20>
    6450:	e7dc      	b.n	640c <atcab_read_bytes_zone+0x34>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
    6452:	4643      	mov	r3, r8
    6454:	015b      	lsls	r3, r3, #5
    6456:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6458:	1ad3      	subs	r3, r2, r3
    645a:	2b1f      	cmp	r3, #31
    645c:	d817      	bhi.n	648e <atcab_read_bytes_zone+0xb6>
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
    645e:	9b05      	ldr	r3, [sp, #20]
    6460:	199b      	adds	r3, r3, r6
    6462:	089b      	lsrs	r3, r3, #2
    6464:	2507      	movs	r5, #7
    6466:	401d      	ands	r5, r3
                read_size = ATCA_WORD_SIZE;
    6468:	3f1c      	subs	r7, #28
    646a:	e010      	b.n	648e <atcab_read_bytes_zone+0xb6>
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
    646c:	9b03      	ldr	r3, [sp, #12]
    646e:	1998      	adds	r0, r3, r6
    6470:	ab07      	add	r3, sp, #28
    6472:	469c      	mov	ip, r3
    6474:	4461      	add	r1, ip
    6476:	0022      	movs	r2, r4
    6478:	4b19      	ldr	r3, [pc, #100]	; (64e0 <atcab_read_bytes_zone+0x108>)
    647a:	4798      	blx	r3
            data_idx += copy_length;
    647c:	1936      	adds	r6, r6, r4
            if (read_size == ATCA_BLOCK_SIZE)
    647e:	2f20      	cmp	r7, #32
    6480:	d024      	beq.n	64cc <atcab_read_bytes_zone+0xf4>
                cur_offset += 1;
    6482:	3501      	adds	r5, #1
        while (data_idx < length)
    6484:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    6486:	42b3      	cmp	r3, r6
    6488:	d924      	bls.n	64d4 <atcab_read_bytes_zone+0xfc>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
    648a:	2f20      	cmp	r7, #32
    648c:	d0e1      	beq.n	6452 <atcab_read_bytes_zone+0x7a>
            status = atcab_read_zone(
    648e:	b2eb      	uxtb	r3, r5
    6490:	4642      	mov	r2, r8
    6492:	4669      	mov	r1, sp
    6494:	740a      	strb	r2, [r1, #16]
    6496:	7c0a      	ldrb	r2, [r1, #16]
    6498:	9701      	str	r7, [sp, #4]
    649a:	a907      	add	r1, sp, #28
    649c:	9100      	str	r1, [sp, #0]
    649e:	9902      	ldr	r1, [sp, #8]
    64a0:	4648      	mov	r0, r9
    64a2:	4c10      	ldr	r4, [pc, #64]	; (64e4 <atcab_read_bytes_zone+0x10c>)
    64a4:	47a0      	blx	r4
    64a6:	9004      	str	r0, [sp, #16]
            if (status != ATCA_SUCCESS)
    64a8:	2800      	cmp	r0, #0
    64aa:	d115      	bne.n	64d8 <atcab_read_bytes_zone+0x100>
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
    64ac:	4643      	mov	r3, r8
    64ae:	00db      	lsls	r3, r3, #3
    64b0:	195b      	adds	r3, r3, r5
    64b2:	009b      	lsls	r3, r3, #2
                read_buf_idx = 0;                     // Read data is within the requested chunk
    64b4:	2100      	movs	r1, #0
            if (read_offset < offset)
    64b6:	9805      	ldr	r0, [sp, #20]
    64b8:	4298      	cmp	r0, r3
    64ba:	d900      	bls.n	64be <atcab_read_bytes_zone+0xe6>
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
    64bc:	1ac1      	subs	r1, r0, r3
            if (length - data_idx < read_size - read_buf_idx)
    64be:	1a7b      	subs	r3, r7, r1
    64c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    64c2:	1b94      	subs	r4, r2, r6
    64c4:	429c      	cmp	r4, r3
    64c6:	d9d1      	bls.n	646c <atcab_read_bytes_zone+0x94>
    64c8:	001c      	movs	r4, r3
    64ca:	e7cf      	b.n	646c <atcab_read_bytes_zone+0x94>
                cur_block += 1;
    64cc:	2301      	movs	r3, #1
    64ce:	469c      	mov	ip, r3
    64d0:	44e0      	add	r8, ip
    64d2:	e7d7      	b.n	6484 <atcab_read_bytes_zone+0xac>
    64d4:	9c04      	ldr	r4, [sp, #16]
    64d6:	e78f      	b.n	63f8 <atcab_read_bytes_zone+0x20>
    64d8:	9c04      	ldr	r4, [sp, #16]
    64da:	e78d      	b.n	63f8 <atcab_read_bytes_zone+0x20>
    64dc:	0000368d 	.word	0x0000368d
    64e0:	000109c9 	.word	0x000109c9
    64e4:	0000632d 	.word	0x0000632d

000064e8 <atcab_sign_base>:
 *                        curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign_base(uint8_t mode, uint16_t key_id, uint8_t *signature)
{
    64e8:	b570      	push	{r4, r5, r6, lr}
    64ea:	b0a4      	sub	sp, #144	; 0x90
    64ec:	0006      	movs	r6, r0
    64ee:	0015      	movs	r5, r2
    ATCACommand ca_cmd = _gDevice->mCommands;
    ATCA_STATUS status = ATCA_GEN_FAIL;

    if (signature == NULL)
    {
        return ATCA_BAD_PARAM;
    64f0:	24e2      	movs	r4, #226	; 0xe2
    if (signature == NULL)
    64f2:	2a00      	cmp	r2, #0
    64f4:	d00a      	beq.n	650c <atcab_sign_base+0x24>
    ATCACommand ca_cmd = _gDevice->mCommands;
    64f6:	4b0f      	ldr	r3, [pc, #60]	; (6534 <atcab_sign_base+0x4c>)
    64f8:	681b      	ldr	r3, [r3, #0]
    64fa:	6818      	ldr	r0, [r3, #0]
    }

    do
    {
        // Build sign command
        packet.param1 = mode;
    64fc:	ab01      	add	r3, sp, #4
    64fe:	70de      	strb	r6, [r3, #3]
        packet.param2 = key_id;
    6500:	8099      	strh	r1, [r3, #4]
        if ((status = atSign(ca_cmd, &packet)) != ATCA_SUCCESS)
    6502:	0019      	movs	r1, r3
    6504:	4b0c      	ldr	r3, [pc, #48]	; (6538 <atcab_sign_base+0x50>)
    6506:	4798      	blx	r3
    6508:	1e04      	subs	r4, r0, #0
    650a:	d002      	beq.n	6512 <atcab_sign_base+0x2a>

    }
    while (0);

    return status;
}
    650c:	0020      	movs	r0, r4
    650e:	b024      	add	sp, #144	; 0x90
    6510:	bd70      	pop	{r4, r5, r6, pc}
        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
    6512:	a801      	add	r0, sp, #4
    6514:	4b09      	ldr	r3, [pc, #36]	; (653c <atcab_sign_base+0x54>)
    6516:	4798      	blx	r3
    6518:	1e04      	subs	r4, r0, #0
    651a:	d1f7      	bne.n	650c <atcab_sign_base+0x24>
        if (packet.rxsize > 4)
    651c:	238a      	movs	r3, #138	; 0x8a
    651e:	aa01      	add	r2, sp, #4
    6520:	5ad2      	ldrh	r2, [r2, r3]
    6522:	2a04      	cmp	r2, #4
    6524:	d9f2      	bls.n	650c <atcab_sign_base+0x24>
            memcpy(signature, &packet.data[ATCA_RSP_DATA_IDX], packet.rxsize - ATCA_PACKET_OVERHEAD);
    6526:	3a03      	subs	r2, #3
    6528:	210b      	movs	r1, #11
    652a:	4469      	add	r1, sp
    652c:	0028      	movs	r0, r5
    652e:	4b04      	ldr	r3, [pc, #16]	; (6540 <atcab_sign_base+0x58>)
    6530:	4798      	blx	r3
    6532:	e7eb      	b.n	650c <atcab_sign_base+0x24>
    6534:	200005d0 	.word	0x200005d0
    6538:	00005eb1 	.word	0x00005eb1
    653c:	00003719 	.word	0x00003719
    6540:	000109c9 	.word	0x000109c9

00006544 <atcab_sign>:
 *                         curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
    6544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6546:	0005      	movs	r5, r0
    6548:	000c      	movs	r4, r1
    654a:	0016      	movs	r6, r2
    uint8_t sign_source = SIGN_MODE_SOURCE_TEMPKEY;

    do
    {
        // Make sure RNG has updated its seed
        if ((status = atcab_random(NULL)) != ATCA_SUCCESS)
    654c:	2000      	movs	r0, #0
    654e:	4b0e      	ldr	r3, [pc, #56]	; (6588 <atcab_sign+0x44>)
    6550:	4798      	blx	r3
    6552:	2800      	cmp	r0, #0
    6554:	d10d      	bne.n	6572 <atcab_sign+0x2e>
        {
            break;
        }

        // Load message into device
        if (_gDevice->mCommands->dt == ATECC608A)
    6556:	4b0d      	ldr	r3, [pc, #52]	; (658c <atcab_sign+0x48>)
    6558:	681b      	ldr	r3, [r3, #0]
    655a:	681b      	ldr	r3, [r3, #0]
    655c:	781b      	ldrb	r3, [r3, #0]
    655e:	2b03      	cmp	r3, #3
    6560:	d008      	beq.n	6574 <atcab_sign+0x30>
    uint8_t sign_source = SIGN_MODE_SOURCE_TEMPKEY;
    6562:	2700      	movs	r7, #0
    uint8_t nonce_target = NONCE_MODE_TARGET_TEMPKEY;
    6564:	2000      	movs	r0, #0
        {
            // Use the Message Digest Buffer for the ATECC608A
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
            sign_source = SIGN_MODE_SOURCE_MSGDIGBUF;
        }
        if ((status = atcab_nonce_load(nonce_target, msg, 32)) != ATCA_SUCCESS)
    6566:	2220      	movs	r2, #32
    6568:	0021      	movs	r1, r4
    656a:	4b09      	ldr	r3, [pc, #36]	; (6590 <atcab_sign+0x4c>)
    656c:	4798      	blx	r3
    656e:	2800      	cmp	r0, #0
    6570:	d003      	beq.n	657a <atcab_sign+0x36>
        }
    }
    while (0);

    return status;
}
    6572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            sign_source = SIGN_MODE_SOURCE_MSGDIGBUF;
    6574:	2720      	movs	r7, #32
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
    6576:	3040      	adds	r0, #64	; 0x40
    6578:	e7f5      	b.n	6566 <atcab_sign+0x22>
        if ((status = atcab_sign_base(SIGN_MODE_EXTERNAL | sign_source, key_id, signature)) != ATCA_SUCCESS)
    657a:	3080      	adds	r0, #128	; 0x80
    657c:	4338      	orrs	r0, r7
    657e:	0032      	movs	r2, r6
    6580:	0029      	movs	r1, r5
    6582:	4b04      	ldr	r3, [pc, #16]	; (6594 <atcab_sign+0x50>)
    6584:	4798      	blx	r3
    6586:	e7f4      	b.n	6572 <atcab_sign+0x2e>
    6588:	000062c5 	.word	0x000062c5
    658c:	200005d0 	.word	0x200005d0
    6590:	00006295 	.word	0x00006295
    6594:	000064e9 	.word	0x000064e9

00006598 <atcac_sw_sha2_256>:
 * \param[out] digest     result
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha2_256(const uint8_t* data, size_t data_size, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
    6598:	b570      	push	{r4, r5, r6, lr}
    659a:	b0b0      	sub	sp, #192	; 0xc0
    659c:	0005      	movs	r5, r0
    659e:	000e      	movs	r6, r1
    65a0:	0014      	movs	r4, r2
    sw_sha256_init((sw_sha256_ctx*)ctx);
    65a2:	4668      	mov	r0, sp
    65a4:	4b06      	ldr	r3, [pc, #24]	; (65c0 <atcac_sw_sha2_256+0x28>)
    65a6:	4798      	blx	r3
    sw_sha256_update((sw_sha256_ctx*)ctx, data, (uint32_t)data_size);
    65a8:	0032      	movs	r2, r6
    65aa:	0029      	movs	r1, r5
    65ac:	4668      	mov	r0, sp
    65ae:	4b05      	ldr	r3, [pc, #20]	; (65c4 <atcac_sw_sha2_256+0x2c>)
    65b0:	4798      	blx	r3
    sw_sha256_final((sw_sha256_ctx*)ctx, digest);
    65b2:	0021      	movs	r1, r4
    65b4:	4668      	mov	r0, sp
    65b6:	4b04      	ldr	r3, [pc, #16]	; (65c8 <atcac_sw_sha2_256+0x30>)
    65b8:	4798      	blx	r3
    {
        return ret;
    }

    return ATCA_SUCCESS;
    65ba:	2000      	movs	r0, #0
    65bc:	b030      	add	sp, #192	; 0xc0
    65be:	bd70      	pop	{r4, r5, r6, pc}
    65c0:	00006779 	.word	0x00006779
    65c4:	000067dd 	.word	0x000067dd
    65c8:	00006869 	.word	0x00006869

000065cc <sw_sha256_process>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] blocks       Raw blocks to be processed
 * \param[in] block_count  Number of 64-byte blocks to process
 */
static void sw_sha256_process(sw_sha256_ctx* ctx, const uint8_t* blocks, uint32_t block_count)
{
    65cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    65ce:	46de      	mov	lr, fp
    65d0:	4657      	mov	r7, sl
    65d2:	464e      	mov	r6, r9
    65d4:	4645      	mov	r5, r8
    65d6:	b5e0      	push	{r5, r6, r7, lr}
    65d8:	b0d5      	sub	sp, #340	; 0x154
    65da:	900b      	str	r0, [sp, #44]	; 0x2c
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
    65dc:	2a00      	cmp	r2, #0
    65de:	d100      	bne.n	65e2 <sw_sha256_process+0x16>
    65e0:	e0c0      	b.n	6764 <sw_sha256_process+0x198>
    65e2:	000b      	movs	r3, r1
    65e4:	0192      	lsls	r2, r2, #6
    65e6:	1889      	adds	r1, r1, r2
    65e8:	910a      	str	r1, [sp, #40]	; 0x28
    65ea:	0002      	movs	r2, r0
    65ec:	32a8      	adds	r2, #168	; 0xa8
    65ee:	9209      	str	r2, [sp, #36]	; 0x24
            s1 = rotate_right(rotate_register[4], 6)
                 ^ rotate_right(rotate_register[4], 11)
                 ^ rotate_right(rotate_register[4], 25);
            ch = (rotate_register[4] & rotate_register[5])
                 ^ (~rotate_register[4] & rotate_register[6]);
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    65f0:	4a60      	ldr	r2, [pc, #384]	; (6774 <sw_sha256_process+0x1a8>)
    65f2:	4691      	mov	r9, r2
    65f4:	e05c      	b.n	66b0 <sw_sha256_process+0xe4>

            rotate_register[7] = rotate_register[6];
            rotate_register[6] = rotate_register[5];
    65f6:	9d02      	ldr	r5, [sp, #8]
    65f8:	9501      	str	r5, [sp, #4]
            rotate_register[5] = rotate_register[4];
    65fa:	9002      	str	r0, [sp, #8]
            rotate_register[4] = rotate_register[3] + t1;
    65fc:	4658      	mov	r0, fp
            rotate_register[3] = rotate_register[2];
            rotate_register[2] = rotate_register[1];
    65fe:	46bc      	mov	ip, r7
            rotate_register[1] = rotate_register[0];
    6600:	0027      	movs	r7, r4
            rotate_register[0] = t1 + t2;
    6602:	0014      	movs	r4, r2
                 ^ rotate_right(rotate_register[4], 11)
    6604:	0002      	movs	r2, r0
    6606:	250b      	movs	r5, #11
    6608:	41ea      	rors	r2, r5
    660a:	0005      	movs	r5, r0
    660c:	2606      	movs	r6, #6
    660e:	41f5      	rors	r5, r6
    6610:	4055      	eors	r5, r2
                 ^ rotate_right(rotate_register[4], 25);
    6612:	0002      	movs	r2, r0
    6614:	3613      	adds	r6, #19
    6616:	41f2      	rors	r2, r6
            s1 = rotate_right(rotate_register[4], 6)
    6618:	4055      	eors	r5, r2
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    661a:	464a      	mov	r2, r9
    661c:	588a      	ldr	r2, [r1, r2]
    661e:	9e04      	ldr	r6, [sp, #16]
    6620:	598e      	ldr	r6, [r1, r6]
    6622:	46b0      	mov	r8, r6
    6624:	4442      	add	r2, r8
    6626:	18ad      	adds	r5, r5, r2
            ch = (rotate_register[4] & rotate_register[5])
    6628:	9a02      	ldr	r2, [sp, #8]
    662a:	4002      	ands	r2, r0
    662c:	4690      	mov	r8, r2
    662e:	9a01      	ldr	r2, [sp, #4]
    6630:	4382      	bics	r2, r0
    6632:	4646      	mov	r6, r8
    6634:	4072      	eors	r2, r6
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    6636:	18aa      	adds	r2, r5, r2
    6638:	18d3      	adds	r3, r2, r3
            rotate_register[4] = rotate_register[3] + t1;
    663a:	9d03      	ldr	r5, [sp, #12]
    663c:	46ab      	mov	fp, r5
    663e:	449b      	add	fp, r3
                 ^ rotate_right(rotate_register[0], 13)
    6640:	0025      	movs	r5, r4
    6642:	260d      	movs	r6, #13
    6644:	41f5      	rors	r5, r6
    6646:	0022      	movs	r2, r4
    6648:	3e0b      	subs	r6, #11
    664a:	41f2      	rors	r2, r6
    664c:	406a      	eors	r2, r5
                 ^ rotate_right(rotate_register[0], 22);
    664e:	0025      	movs	r5, r4
    6650:	4656      	mov	r6, sl
    6652:	41f5      	rors	r5, r6
            s0 = rotate_right(rotate_register[0], 2)
    6654:	406a      	eors	r2, r5
                  ^ (rotate_register[0] & rotate_register[2])
    6656:	4665      	mov	r5, ip
    6658:	407d      	eors	r5, r7
    665a:	4025      	ands	r5, r4
                  ^ (rotate_register[1] & rotate_register[2]);
    665c:	4666      	mov	r6, ip
    665e:	403e      	ands	r6, r7
            maj = (rotate_register[0] & rotate_register[1])
    6660:	4075      	eors	r5, r6
            t2 = s0 + maj;
    6662:	1952      	adds	r2, r2, r5
            rotate_register[0] = t1 + t2;
    6664:	18d2      	adds	r2, r2, r3
    6666:	3104      	adds	r1, #4
            rotate_register[7] = rotate_register[6];
    6668:	9b01      	ldr	r3, [sp, #4]
            rotate_register[3] = rotate_register[2];
    666a:	4665      	mov	r5, ip
    666c:	9503      	str	r5, [sp, #12]
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
    666e:	2580      	movs	r5, #128	; 0x80
    6670:	006d      	lsls	r5, r5, #1
    6672:	42a9      	cmp	r1, r5
    6674:	d1bf      	bne.n	65f6 <sw_sha256_process+0x2a>
    6676:	003d      	movs	r5, r7
    6678:	4667      	mov	r7, ip
    667a:	9b08      	ldr	r3, [sp, #32]
    667c:	469c      	mov	ip, r3
    667e:	4659      	mov	r1, fp
    6680:	920c      	str	r2, [sp, #48]	; 0x30
    6682:	940d      	str	r4, [sp, #52]	; 0x34
    6684:	950e      	str	r5, [sp, #56]	; 0x38
    6686:	9110      	str	r1, [sp, #64]	; 0x40
    6688:	9011      	str	r0, [sp, #68]	; 0x44
    668a:	9b02      	ldr	r3, [sp, #8]
    668c:	9312      	str	r3, [sp, #72]	; 0x48
    668e:	9b01      	ldr	r3, [sp, #4]
    6690:	9313      	str	r3, [sp, #76]	; 0x4c
    6692:	970f      	str	r7, [sp, #60]	; 0x3c
    6694:	4663      	mov	r3, ip
    6696:	9905      	ldr	r1, [sp, #20]
    6698:	9807      	ldr	r0, [sp, #28]
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
        {
            ctx->hash[i] += rotate_register[i];
    669a:	c904      	ldmia	r1!, {r2}
    669c:	681c      	ldr	r4, [r3, #0]
    669e:	46a4      	mov	ip, r4
    66a0:	4462      	add	r2, ip
    66a2:	c304      	stmia	r3!, {r2}
        for (i = 0; i < 8; i++)
    66a4:	4283      	cmp	r3, r0
    66a6:	d1f8      	bne.n	669a <sw_sha256_process+0xce>
    66a8:	9b06      	ldr	r3, [sp, #24]
    for (block = 0; block < block_count; block++)
    66aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    66ac:	429a      	cmp	r2, r3
    66ae:	d059      	beq.n	6764 <sw_sha256_process+0x198>
    66b0:	a814      	add	r0, sp, #80	; 0x50
    66b2:	2240      	movs	r2, #64	; 0x40
    66b4:	4694      	mov	ip, r2
    66b6:	449c      	add	ip, r3
    66b8:	4662      	mov	r2, ip
    66ba:	4664      	mov	r4, ip
    66bc:	9206      	str	r2, [sp, #24]
{
    66be:	0002      	movs	r2, r0
            w_union.w_byte[i + 3] = cur_msg_block[i + 0];
    66c0:	7819      	ldrb	r1, [r3, #0]
    66c2:	70d1      	strb	r1, [r2, #3]
            w_union.w_byte[i + 2] = cur_msg_block[i + 1];
    66c4:	7859      	ldrb	r1, [r3, #1]
    66c6:	7091      	strb	r1, [r2, #2]
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
    66c8:	7899      	ldrb	r1, [r3, #2]
    66ca:	7051      	strb	r1, [r2, #1]
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
    66cc:	78d9      	ldrb	r1, [r3, #3]
    66ce:	7011      	strb	r1, [r2, #0]
    66d0:	3304      	adds	r3, #4
    66d2:	3204      	adds	r2, #4
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
    66d4:	42a3      	cmp	r3, r4
    66d6:	d1f3      	bne.n	66c0 <sw_sha256_process+0xf4>
            word_value = w_union.w_word[w_index - 15];
    66d8:	6842      	ldr	r2, [r0, #4]
            word_value = w_union.w_word[w_index - 2];
    66da:	6b81      	ldr	r1, [r0, #56]	; 0x38
            s0 = rotate_right(word_value, 7) ^ rotate_right(word_value, 18) ^ (word_value >> 3);
    66dc:	0013      	movs	r3, r2
    66de:	2407      	movs	r4, #7
    66e0:	41e3      	rors	r3, r4
    66e2:	0014      	movs	r4, r2
    66e4:	2512      	movs	r5, #18
    66e6:	41ec      	rors	r4, r5
    66e8:	4063      	eors	r3, r4
    66ea:	08d2      	lsrs	r2, r2, #3
    66ec:	4053      	eors	r3, r2
            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    66ee:	6802      	ldr	r2, [r0, #0]
    66f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
    66f2:	46a4      	mov	ip, r4
    66f4:	4462      	add	r2, ip
    66f6:	189b      	adds	r3, r3, r2
            s1 = rotate_right(word_value, 17) ^ rotate_right(word_value, 19) ^ (word_value >> 10);
    66f8:	000a      	movs	r2, r1
    66fa:	2411      	movs	r4, #17
    66fc:	41e2      	rors	r2, r4
    66fe:	000c      	movs	r4, r1
    6700:	3501      	adds	r5, #1
    6702:	41ec      	rors	r4, r5
    6704:	4062      	eors	r2, r4
    6706:	0a89      	lsrs	r1, r1, #10
    6708:	404a      	eors	r2, r1
            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    670a:	189b      	adds	r3, r3, r2
    670c:	6403      	str	r3, [r0, #64]	; 0x40
    670e:	3004      	adds	r0, #4
        while (w_index < SHA256_BLOCK_SIZE)
    6710:	ab44      	add	r3, sp, #272	; 0x110
    6712:	4298      	cmp	r0, r3
    6714:	d1e0      	bne.n	66d8 <sw_sha256_process+0x10c>
    6716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6718:	2288      	movs	r2, #136	; 0x88
    671a:	4690      	mov	r8, r2
    671c:	4443      	add	r3, r8
    671e:	469c      	mov	ip, r3
    6720:	ab0c      	add	r3, sp, #48	; 0x30
    6722:	9305      	str	r3, [sp, #20]
    6724:	4662      	mov	r2, ip
    6726:	9809      	ldr	r0, [sp, #36]	; 0x24
            rotate_register[i] = ctx->hash[i];
    6728:	ca02      	ldmia	r2!, {r1}
    672a:	c302      	stmia	r3!, {r1}
        for (i = 0; i < 8; i++)
    672c:	4282      	cmp	r2, r0
    672e:	d1fb      	bne.n	6728 <sw_sha256_process+0x15c>
    6730:	9207      	str	r2, [sp, #28]
    6732:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6734:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6736:	9301      	str	r3, [sp, #4]
    6738:	9b11      	ldr	r3, [sp, #68]	; 0x44
    673a:	9302      	str	r3, [sp, #8]
    673c:	9810      	ldr	r0, [sp, #64]	; 0x40
    673e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6740:	4698      	mov	r8, r3
    6742:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    6744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6746:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    6748:	2500      	movs	r5, #0
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    674a:	a914      	add	r1, sp, #80	; 0x50
    674c:	9104      	str	r1, [sp, #16]
                 ^ rotate_right(rotate_register[0], 22);
    674e:	2116      	movs	r1, #22
    6750:	468a      	mov	sl, r1
    6752:	4661      	mov	r1, ip
    6754:	9108      	str	r1, [sp, #32]
    6756:	46bc      	mov	ip, r7
    6758:	001f      	movs	r7, r3
    675a:	0013      	movs	r3, r2
    675c:	0029      	movs	r1, r5
    675e:	4642      	mov	r2, r8
    6760:	9203      	str	r2, [sp, #12]
    6762:	e74f      	b.n	6604 <sw_sha256_process+0x38>
        }
    }
}
    6764:	b055      	add	sp, #340	; 0x154
    6766:	bc3c      	pop	{r2, r3, r4, r5}
    6768:	4690      	mov	r8, r2
    676a:	4699      	mov	r9, r3
    676c:	46a2      	mov	sl, r4
    676e:	46ab      	mov	fp, r5
    6770:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6772:	46c0      	nop			; (mov r8, r8)
    6774:	00014ca0 	.word	0x00014ca0

00006778 <sw_sha256_init>:
 *
 * \param[in] ctx          SHA256 hash context
 */

void sw_sha256_init(sw_sha256_ctx* ctx)
{
    6778:	b510      	push	{r4, lr}
    677a:	0004      	movs	r4, r0
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
    677c:	22a8      	movs	r2, #168	; 0xa8
    677e:	2100      	movs	r1, #0
    6780:	4b0d      	ldr	r3, [pc, #52]	; (67b8 <sw_sha256_init+0x40>)
    6782:	4798      	blx	r3
    for (i = 0; i < 8; i++)
    {
        ctx->hash[i] = hash_init[i];
    6784:	4a0d      	ldr	r2, [pc, #52]	; (67bc <sw_sha256_init+0x44>)
    6786:	2388      	movs	r3, #136	; 0x88
    6788:	50e2      	str	r2, [r4, r3]
    678a:	4a0d      	ldr	r2, [pc, #52]	; (67c0 <sw_sha256_init+0x48>)
    678c:	3304      	adds	r3, #4
    678e:	50e2      	str	r2, [r4, r3]
    6790:	4a0c      	ldr	r2, [pc, #48]	; (67c4 <sw_sha256_init+0x4c>)
    6792:	3304      	adds	r3, #4
    6794:	50e2      	str	r2, [r4, r3]
    6796:	4a0c      	ldr	r2, [pc, #48]	; (67c8 <sw_sha256_init+0x50>)
    6798:	3304      	adds	r3, #4
    679a:	50e2      	str	r2, [r4, r3]
    679c:	4a0b      	ldr	r2, [pc, #44]	; (67cc <sw_sha256_init+0x54>)
    679e:	3304      	adds	r3, #4
    67a0:	50e2      	str	r2, [r4, r3]
    67a2:	4a0b      	ldr	r2, [pc, #44]	; (67d0 <sw_sha256_init+0x58>)
    67a4:	3304      	adds	r3, #4
    67a6:	50e2      	str	r2, [r4, r3]
    67a8:	4a0a      	ldr	r2, [pc, #40]	; (67d4 <sw_sha256_init+0x5c>)
    67aa:	3304      	adds	r3, #4
    67ac:	50e2      	str	r2, [r4, r3]
    67ae:	4a0a      	ldr	r2, [pc, #40]	; (67d8 <sw_sha256_init+0x60>)
    67b0:	3304      	adds	r3, #4
    67b2:	50e2      	str	r2, [r4, r3]
    }
}
    67b4:	bd10      	pop	{r4, pc}
    67b6:	46c0      	nop			; (mov r8, r8)
    67b8:	000109ff 	.word	0x000109ff
    67bc:	6a09e667 	.word	0x6a09e667
    67c0:	bb67ae85 	.word	0xbb67ae85
    67c4:	3c6ef372 	.word	0x3c6ef372
    67c8:	a54ff53a 	.word	0xa54ff53a
    67cc:	510e527f 	.word	0x510e527f
    67d0:	9b05688c 	.word	0x9b05688c
    67d4:	1f83d9ab 	.word	0x1f83d9ab
    67d8:	5be0cd19 	.word	0x5be0cd19

000067dc <sw_sha256_update>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] msg          Raw blocks to be processed
 * \param[in] msg_size     The size of the message passed
 */
void sw_sha256_update(sw_sha256_ctx* ctx, const uint8_t* msg, uint32_t msg_size)
{
    67dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    67de:	46d6      	mov	lr, sl
    67e0:	464f      	mov	r7, r9
    67e2:	b580      	push	{r7, lr}
    67e4:	b083      	sub	sp, #12
    67e6:	0006      	movs	r6, r0
    67e8:	000d      	movs	r5, r1
    67ea:	0014      	movs	r4, r2
    uint32_t block_count;
    uint32_t rem_size = SHA256_BLOCK_SIZE - ctx->block_size;
    67ec:	6840      	ldr	r0, [r0, #4]
    67ee:	2740      	movs	r7, #64	; 0x40
    67f0:	1a3f      	subs	r7, r7, r0
    uint32_t copy_size = msg_size > rem_size ? rem_size : msg_size;
    67f2:	4297      	cmp	r7, r2
    67f4:	d900      	bls.n	67f8 <sw_sha256_update+0x1c>
    67f6:	0017      	movs	r7, r2

    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], msg, copy_size);
    67f8:	3008      	adds	r0, #8
    67fa:	1830      	adds	r0, r6, r0
    67fc:	003a      	movs	r2, r7
    67fe:	0029      	movs	r1, r5
    6800:	4b17      	ldr	r3, [pc, #92]	; (6860 <sw_sha256_update+0x84>)
    6802:	4798      	blx	r3

    if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE)
    6804:	6873      	ldr	r3, [r6, #4]
    6806:	18e3      	adds	r3, r4, r3
    6808:	2b3f      	cmp	r3, #63	; 0x3f
    680a:	d805      	bhi.n	6818 <sw_sha256_update+0x3c>
    {
        // Not enough data to finish off the current block
        ctx->block_size += msg_size;
    680c:	6073      	str	r3, [r6, #4]

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
}
    680e:	b003      	add	sp, #12
    6810:	bc0c      	pop	{r2, r3}
    6812:	4691      	mov	r9, r2
    6814:	469a      	mov	sl, r3
    6816:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sw_sha256_process(ctx, ctx->block, 1);
    6818:	2308      	movs	r3, #8
    681a:	469c      	mov	ip, r3
    681c:	44b4      	add	ip, r6
    681e:	4663      	mov	r3, ip
    6820:	2201      	movs	r2, #1
    6822:	9301      	str	r3, [sp, #4]
    6824:	4661      	mov	r1, ip
    6826:	0030      	movs	r0, r6
    6828:	4b0e      	ldr	r3, [pc, #56]	; (6864 <sw_sha256_update+0x88>)
    682a:	469a      	mov	sl, r3
    682c:	4798      	blx	r3
    msg_size -= copy_size; // Adjust to the remaining message bytes
    682e:	1be4      	subs	r4, r4, r7
    block_count = msg_size / SHA256_BLOCK_SIZE;
    6830:	09a2      	lsrs	r2, r4, #6
    6832:	4691      	mov	r9, r2
    sw_sha256_process(ctx, &msg[copy_size], block_count);
    6834:	19e9      	adds	r1, r5, r7
    6836:	0030      	movs	r0, r6
    6838:	47d0      	blx	sl
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    683a:	464a      	mov	r2, r9
    683c:	1c53      	adds	r3, r2, #1
    683e:	019b      	lsls	r3, r3, #6
    6840:	6832      	ldr	r2, [r6, #0]
    6842:	4694      	mov	ip, r2
    6844:	4463      	add	r3, ip
    6846:	6033      	str	r3, [r6, #0]
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    6848:	233f      	movs	r3, #63	; 0x3f
    684a:	001a      	movs	r2, r3
    684c:	4022      	ands	r2, r4
    684e:	6072      	str	r2, [r6, #4]
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
    6850:	0021      	movs	r1, r4
    6852:	4399      	bics	r1, r3
    6854:	19c9      	adds	r1, r1, r7
    6856:	1869      	adds	r1, r5, r1
    6858:	9801      	ldr	r0, [sp, #4]
    685a:	4b01      	ldr	r3, [pc, #4]	; (6860 <sw_sha256_update+0x84>)
    685c:	4798      	blx	r3
    685e:	e7d6      	b.n	680e <sw_sha256_update+0x32>
    6860:	000109c9 	.word	0x000109c9
    6864:	000065cd 	.word	0x000065cd

00006868 <sw_sha256_final>:
/** \brief completes the final SHA256 calculation and returns the final digest/hash
 * \param[in]  ctx     ptr to context data structure
 * \param[out] digest  receives the computed digest of the SHA 256
 */
void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
    6868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    686a:	0005      	movs	r5, r0
    686c:	000c      	movs	r4, r1
    int i, j;
    uint32_t msg_size_bits;
    uint32_t pad_zero_count;

    // Calculate the total message size in bits
    ctx->total_msg_size += ctx->block_size;
    686e:	6840      	ldr	r0, [r0, #4]
    6870:	682b      	ldr	r3, [r5, #0]
    6872:	18c7      	adds	r7, r0, r3
    6874:	602f      	str	r7, [r5, #0]
    msg_size_bits = ctx->total_msg_size * 8;
    6876:	00ff      	lsls	r7, r7, #3

    // Calculate the number of padding zero bytes required between the 1 bit byte and the 64 bit message size in bits.
    pad_zero_count = (SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % SHA256_BLOCK_SIZE)) % SHA256_BLOCK_SIZE;
    6878:	2309      	movs	r3, #9
    687a:	425b      	negs	r3, r3
    687c:	1a1b      	subs	r3, r3, r0
    687e:	263f      	movs	r6, #63	; 0x3f
    6880:	401e      	ands	r6, r3

    // Append a single 1 bit
    ctx->block[ctx->block_size++] = 0x80;
    6882:	1c43      	adds	r3, r0, #1
    6884:	606b      	str	r3, [r5, #4]
    6886:	182b      	adds	r3, r5, r0
    6888:	2280      	movs	r2, #128	; 0x80
    688a:	721a      	strb	r2, [r3, #8]

    // Add padding zeros plus upper 4 bytes of total msg size in bits (only supporting 32bit message bit counts)
    memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
    688c:	1d32      	adds	r2, r6, #4
    688e:	3009      	adds	r0, #9
    6890:	1828      	adds	r0, r5, r0
    6892:	2100      	movs	r1, #0
    6894:	4b13      	ldr	r3, [pc, #76]	; (68e4 <sw_sha256_final+0x7c>)
    6896:	4798      	blx	r3
    ctx->block_size += pad_zero_count + 4;
    6898:	686b      	ldr	r3, [r5, #4]
    689a:	469c      	mov	ip, r3
    689c:	4466      	add	r6, ip

    // Add the total message size in bits to the end of the current block. Technically this is
    // supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
    689e:	19ab      	adds	r3, r5, r6
    68a0:	0e3a      	lsrs	r2, r7, #24
    68a2:	731a      	strb	r2, [r3, #12]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
    68a4:	0c3a      	lsrs	r2, r7, #16
    68a6:	735a      	strb	r2, [r3, #13]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
    68a8:	0a3a      	lsrs	r2, r7, #8
    68aa:	739a      	strb	r2, [r3, #14]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
    68ac:	0032      	movs	r2, r6
    68ae:	3208      	adds	r2, #8
    68b0:	606a      	str	r2, [r5, #4]
    68b2:	73df      	strb	r7, [r3, #15]

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);
    68b4:	0992      	lsrs	r2, r2, #6
    68b6:	0029      	movs	r1, r5
    68b8:	3108      	adds	r1, #8
    68ba:	0028      	movs	r0, r5
    68bc:	4b0a      	ldr	r3, [pc, #40]	; (68e8 <sw_sha256_final+0x80>)
    68be:	4798      	blx	r3
    68c0:	0028      	movs	r0, r5
    68c2:	3088      	adds	r0, #136	; 0x88
    68c4:	35a8      	adds	r5, #168	; 0xa8
    68c6:	e003      	b.n	68d0 <sw_sha256_final+0x68>
    68c8:	3004      	adds	r0, #4
    68ca:	3404      	adds	r4, #4

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
    68cc:	42a8      	cmp	r0, r5
    68ce:	d008      	beq.n	68e2 <sw_sha256_final+0x7a>
{
    68d0:	2303      	movs	r3, #3
    {
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
        {
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
    68d2:	7802      	ldrb	r2, [r0, #0]
    68d4:	54e2      	strb	r2, [r4, r3]
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
    68d6:	6802      	ldr	r2, [r0, #0]
    68d8:	0a12      	lsrs	r2, r2, #8
    68da:	6002      	str	r2, [r0, #0]
    68dc:	3b01      	subs	r3, #1
    68de:	d2f8      	bcs.n	68d2 <sw_sha256_final+0x6a>
    68e0:	e7f2      	b.n	68c8 <sw_sha256_final+0x60>
        }
    }
}
    68e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68e4:	000109ff 	.word	0x000109ff
    68e8:	000065cd 	.word	0x000065cd

000068ec <hal_iface_init>:
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;

    switch (cfg->iface_type)
    68ec:	7803      	ldrb	r3, [r0, #0]
    ATCA_STATUS status = ATCA_COMM_FAIL;
    68ee:	20f0      	movs	r0, #240	; 0xf0
    switch (cfg->iface_type)
    68f0:	2b00      	cmp	r3, #0
    68f2:	d000      	beq.n	68f6 <hal_iface_init+0xa>
        break;
    default:
        break;
    }
    return status;
}
    68f4:	4770      	bx	lr
        hal->halinit = &hal_i2c_init;
    68f6:	4b0a      	ldr	r3, [pc, #40]	; (6920 <hal_iface_init+0x34>)
    68f8:	600b      	str	r3, [r1, #0]
        hal->halpostinit = &hal_i2c_post_init;
    68fa:	4b0a      	ldr	r3, [pc, #40]	; (6924 <hal_iface_init+0x38>)
    68fc:	604b      	str	r3, [r1, #4]
        hal->halreceive = &hal_i2c_receive;
    68fe:	4b0a      	ldr	r3, [pc, #40]	; (6928 <hal_iface_init+0x3c>)
    6900:	60cb      	str	r3, [r1, #12]
        hal->halsend = &hal_i2c_send;
    6902:	4b0a      	ldr	r3, [pc, #40]	; (692c <hal_iface_init+0x40>)
    6904:	608b      	str	r3, [r1, #8]
        hal->halsleep = &hal_i2c_sleep;
    6906:	4b0a      	ldr	r3, [pc, #40]	; (6930 <hal_iface_init+0x44>)
    6908:	618b      	str	r3, [r1, #24]
        hal->halwake = &hal_i2c_wake;
    690a:	4b0a      	ldr	r3, [pc, #40]	; (6934 <hal_iface_init+0x48>)
    690c:	610b      	str	r3, [r1, #16]
        hal->halidle = &hal_i2c_idle;
    690e:	4b0a      	ldr	r3, [pc, #40]	; (6938 <hal_iface_init+0x4c>)
    6910:	614b      	str	r3, [r1, #20]
        hal->halrelease = &hal_i2c_release;
    6912:	4b0a      	ldr	r3, [pc, #40]	; (693c <hal_iface_init+0x50>)
    6914:	61cb      	str	r3, [r1, #28]
        hal->hal_data = NULL;
    6916:	2300      	movs	r3, #0
    6918:	620b      	str	r3, [r1, #32]
        status = ATCA_SUCCESS;
    691a:	2000      	movs	r0, #0
        break;
    691c:	e7ea      	b.n	68f4 <hal_iface_init+0x8>
    691e:	46c0      	nop			; (mov r8, r8)
    6920:	00006965 	.word	0x00006965
    6924:	00006ad5 	.word	0x00006ad5
    6928:	00006b29 	.word	0x00006b29
    692c:	00006ad9 	.word	0x00006ad9
    6930:	00006dd9 	.word	0x00006dd9
    6934:	00006c91 	.word	0x00006c91
    6938:	00006d89 	.word	0x00006d89
    693c:	00006e29 	.word	0x00006e29

00006940 <hal_iface_release>:
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
    6940:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_GEN_FAIL;

    switch (iface_type)
    6942:	2800      	cmp	r0, #0
    6944:	d001      	beq.n	694a <hal_iface_release+0xa>
    ATCA_STATUS status = ATCA_GEN_FAIL;
    6946:	20e1      	movs	r0, #225	; 0xe1
    default:
        break;
    }

    return status;
}
    6948:	bd10      	pop	{r4, pc}
        status = hal_i2c_release(hal_data);
    694a:	0008      	movs	r0, r1
    694c:	4b01      	ldr	r3, [pc, #4]	; (6954 <hal_iface_release+0x14>)
    694e:	4798      	blx	r3
        break;
    6950:	e7fa      	b.n	6948 <hal_iface_release+0x8>
    6952:	46c0      	nop			; (mov r8, r8)
    6954:	00006e29 	.word	0x00006e29

00006958 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    6958:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    695a:	2207      	movs	r2, #7
    695c:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    695e:	421a      	tst	r2, r3
    6960:	d1fc      	bne.n	695c <_i2c_master_wait_for_sync+0x4>
}
    6962:	4770      	bx	lr

00006964 <hal_i2c_init>:
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
    6964:	b5f0      	push	{r4, r5, r6, r7, lr}
    6966:	46c6      	mov	lr, r8
    6968:	b500      	push	{lr}
    696a:	0005      	movs	r5, r0
    696c:	000e      	movs	r6, r1
    int bus = cfg->atcai2c.bus;   // 0-based logical bus number
    696e:	794c      	ldrb	r4, [r1, #5]
    ATCAHAL_t *phal = (ATCAHAL_t*)hal;

    if (i2c_bus_ref_ct == 0)       // power up state, no i2c buses will have been used
    6970:	4b48      	ldr	r3, [pc, #288]	; (6a94 <hal_i2c_init+0x130>)
    6972:	681b      	ldr	r3, [r3, #0]
    6974:	2b00      	cmp	r3, #0
    6976:	d107      	bne.n	6988 <hal_i2c_init+0x24>
    {
        for (int i = 0; i < MAX_I2C_BUSES; i++)
        {
            i2c_hal_data[i] = NULL;
    6978:	4a47      	ldr	r2, [pc, #284]	; (6a98 <hal_i2c_init+0x134>)
    697a:	2100      	movs	r1, #0
    697c:	6011      	str	r1, [r2, #0]
    697e:	6051      	str	r1, [r2, #4]
    6980:	6091      	str	r1, [r2, #8]
    6982:	60d1      	str	r1, [r2, #12]
    6984:	6111      	str	r1, [r2, #16]
    6986:	6151      	str	r1, [r2, #20]
        }
    }

    i2c_bus_ref_ct++;  // total across buses
    6988:	3301      	adds	r3, #1
    698a:	4a42      	ldr	r2, [pc, #264]	; (6a94 <hal_i2c_init+0x130>)
    698c:	6013      	str	r3, [r2, #0]
        }

        phal->hal_data = i2c_hal_data[bus];
        return ATCA_SUCCESS;
    }
    return ATCA_COMM_FAIL;
    698e:	20f0      	movs	r0, #240	; 0xf0
    if (bus >= 0 && bus < MAX_I2C_BUSES)
    6990:	2c05      	cmp	r4, #5
    6992:	d902      	bls.n	699a <hal_i2c_init+0x36>
}
    6994:	bc04      	pop	{r2}
    6996:	4690      	mov	r8, r2
    6998:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (i2c_hal_data[bus] == NULL)
    699a:	00a3      	lsls	r3, r4, #2
    699c:	4a3e      	ldr	r2, [pc, #248]	; (6a98 <hal_i2c_init+0x134>)
    699e:	589b      	ldr	r3, [r3, r2]
    69a0:	2b00      	cmp	r3, #0
    69a2:	d008      	beq.n	69b6 <hal_i2c_init+0x52>
            i2c_hal_data[bus]->ref_ct++;
    69a4:	68da      	ldr	r2, [r3, #12]
    69a6:	3201      	adds	r2, #1
    69a8:	60da      	str	r2, [r3, #12]
        phal->hal_data = i2c_hal_data[bus];
    69aa:	00a4      	lsls	r4, r4, #2
    69ac:	4b3a      	ldr	r3, [pc, #232]	; (6a98 <hal_i2c_init+0x134>)
    69ae:	58e3      	ldr	r3, [r4, r3]
    69b0:	622b      	str	r3, [r5, #32]
        return ATCA_SUCCESS;
    69b2:	2000      	movs	r0, #0
    69b4:	e7ee      	b.n	6994 <hal_i2c_init+0x30>
            i2c_hal_data[bus] = malloc(sizeof(ATCAI2CMaster_t) );
    69b6:	38dc      	subs	r0, #220	; 0xdc
    69b8:	4b38      	ldr	r3, [pc, #224]	; (6a9c <hal_i2c_init+0x138>)
    69ba:	4798      	blx	r3
    69bc:	4680      	mov	r8, r0
    69be:	00a3      	lsls	r3, r4, #2
    69c0:	4a35      	ldr	r2, [pc, #212]	; (6a98 <hal_i2c_init+0x134>)
    69c2:	5098      	str	r0, [r3, r2]
            i2c_hal_data[bus]->ref_ct = 1;  // buses are shared, this is the first instance
    69c4:	2301      	movs	r3, #1
    69c6:	60c3      	str	r3, [r0, #12]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    69c8:	4f35      	ldr	r7, [pc, #212]	; (6aa0 <hal_i2c_init+0x13c>)
    69ca:	4b36      	ldr	r3, [pc, #216]	; (6aa4 <hal_i2c_init+0x140>)
    69cc:	607b      	str	r3, [r7, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    69ce:	2300      	movs	r3, #0
    69d0:	60bb      	str	r3, [r7, #8]
	config->generator_source = GCLK_GENERATOR_0;
    69d2:	733b      	strb	r3, [r7, #12]
	config->run_in_standby   = false;
    69d4:	763b      	strb	r3, [r7, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    69d6:	2280      	movs	r2, #128	; 0x80
    69d8:	0392      	lsls	r2, r2, #14
    69da:	613a      	str	r2, [r7, #16]
	config->buffer_timeout   = 65535;
    69dc:	2201      	movs	r2, #1
    69de:	4252      	negs	r2, r2
    69e0:	82fa      	strh	r2, [r7, #22]
	config->unknown_bus_state_timeout = 65535;
    69e2:	82ba      	strh	r2, [r7, #20]
	config->scl_low_timeout  = false;
    69e4:	3225      	adds	r2, #37	; 0x25
    69e6:	54bb      	strb	r3, [r7, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    69e8:	62bb      	str	r3, [r7, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    69ea:	3208      	adds	r2, #8
    69ec:	54bb      	strb	r3, [r7, r2]
	config->slave_scl_low_extend_timeout   = false;
    69ee:	3201      	adds	r2, #1
    69f0:	54bb      	strb	r3, [r7, r2]
	config->master_scl_low_extend_timeout  = false;
    69f2:	3201      	adds	r2, #1
    69f4:	54bb      	strb	r3, [r7, r2]
	config->sda_scl_rise_time_ns = 215;
    69f6:	33d7      	adds	r3, #215	; 0xd7
    69f8:	863b      	strh	r3, [r7, #48]	; 0x30
			config_i2c_master.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    69fa:	4b2b      	ldr	r3, [pc, #172]	; (6aa8 <hal_i2c_init+0x144>)
    69fc:	61fb      	str	r3, [r7, #28]
			config_i2c_master.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    69fe:	4b2b      	ldr	r3, [pc, #172]	; (6aac <hal_i2c_init+0x148>)
    6a00:	623b      	str	r3, [r7, #32]
            config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
    6a02:	68b0      	ldr	r0, [r6, #8]
    6a04:	21fa      	movs	r1, #250	; 0xfa
    6a06:	0089      	lsls	r1, r1, #2
    6a08:	4b29      	ldr	r3, [pc, #164]	; (6ab0 <hal_i2c_init+0x14c>)
    6a0a:	4798      	blx	r3
    6a0c:	6038      	str	r0, [r7, #0]
            switch (bus)
    6a0e:	2c05      	cmp	r4, #5
    6a10:	d809      	bhi.n	6a26 <hal_i2c_init+0xc2>
    6a12:	00a3      	lsls	r3, r4, #2
    6a14:	4a27      	ldr	r2, [pc, #156]	; (6ab4 <hal_i2c_init+0x150>)
    6a16:	58d3      	ldr	r3, [r2, r3]
    6a18:	469f      	mov	pc, r3
            case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
    6a1a:	4a21      	ldr	r2, [pc, #132]	; (6aa0 <hal_i2c_init+0x13c>)
    6a1c:	2184      	movs	r1, #132	; 0x84
    6a1e:	05c9      	lsls	r1, r1, #23
    6a20:	4640      	mov	r0, r8
    6a22:	4b25      	ldr	r3, [pc, #148]	; (6ab8 <hal_i2c_init+0x154>)
    6a24:	4798      	blx	r3
            i2c_hal_data[bus]->bus_index = bus;
    6a26:	4b1c      	ldr	r3, [pc, #112]	; (6a98 <hal_i2c_init+0x134>)
    6a28:	00a2      	lsls	r2, r4, #2
    6a2a:	58d1      	ldr	r1, [r2, r3]
    6a2c:	610c      	str	r4, [r1, #16]
            i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
    6a2e:	58d7      	ldr	r7, [r2, r3]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6a30:	683e      	ldr	r6, [r7, #0]
	_i2c_master_wait_for_sync(module);
    6a32:	0038      	movs	r0, r7
    6a34:	4b21      	ldr	r3, [pc, #132]	; (6abc <hal_i2c_init+0x158>)
    6a36:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6a38:	6833      	ldr	r3, [r6, #0]
    6a3a:	2202      	movs	r2, #2
    6a3c:	4313      	orrs	r3, r2
    6a3e:	6033      	str	r3, [r6, #0]
	uint32_t timeout_counter = 0;
    6a40:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    6a42:	2110      	movs	r1, #16
    6a44:	8b72      	ldrh	r2, [r6, #26]
    6a46:	420a      	tst	r2, r1
    6a48:	d1af      	bne.n	69aa <hal_i2c_init+0x46>
		timeout_counter++;
    6a4a:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    6a4c:	88fa      	ldrh	r2, [r7, #6]
    6a4e:	4293      	cmp	r3, r2
    6a50:	d3f8      	bcc.n	6a44 <hal_i2c_init+0xe0>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    6a52:	2310      	movs	r3, #16
    6a54:	8373      	strh	r3, [r6, #26]
    6a56:	e7a8      	b.n	69aa <hal_i2c_init+0x46>
            case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
    6a58:	4a11      	ldr	r2, [pc, #68]	; (6aa0 <hal_i2c_init+0x13c>)
    6a5a:	4919      	ldr	r1, [pc, #100]	; (6ac0 <hal_i2c_init+0x15c>)
    6a5c:	4640      	mov	r0, r8
    6a5e:	4b16      	ldr	r3, [pc, #88]	; (6ab8 <hal_i2c_init+0x154>)
    6a60:	4798      	blx	r3
    6a62:	e7e0      	b.n	6a26 <hal_i2c_init+0xc2>
            case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
    6a64:	4a0e      	ldr	r2, [pc, #56]	; (6aa0 <hal_i2c_init+0x13c>)
    6a66:	4917      	ldr	r1, [pc, #92]	; (6ac4 <hal_i2c_init+0x160>)
    6a68:	4640      	mov	r0, r8
    6a6a:	4b13      	ldr	r3, [pc, #76]	; (6ab8 <hal_i2c_init+0x154>)
    6a6c:	4798      	blx	r3
    6a6e:	e7da      	b.n	6a26 <hal_i2c_init+0xc2>
            case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    6a70:	4a0b      	ldr	r2, [pc, #44]	; (6aa0 <hal_i2c_init+0x13c>)
    6a72:	4915      	ldr	r1, [pc, #84]	; (6ac8 <hal_i2c_init+0x164>)
    6a74:	4640      	mov	r0, r8
    6a76:	4b10      	ldr	r3, [pc, #64]	; (6ab8 <hal_i2c_init+0x154>)
    6a78:	4798      	blx	r3
    6a7a:	e7d4      	b.n	6a26 <hal_i2c_init+0xc2>
            case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    6a7c:	4a08      	ldr	r2, [pc, #32]	; (6aa0 <hal_i2c_init+0x13c>)
    6a7e:	4913      	ldr	r1, [pc, #76]	; (6acc <hal_i2c_init+0x168>)
    6a80:	4640      	mov	r0, r8
    6a82:	4b0d      	ldr	r3, [pc, #52]	; (6ab8 <hal_i2c_init+0x154>)
    6a84:	4798      	blx	r3
    6a86:	e7ce      	b.n	6a26 <hal_i2c_init+0xc2>
            case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    6a88:	4a05      	ldr	r2, [pc, #20]	; (6aa0 <hal_i2c_init+0x13c>)
    6a8a:	4911      	ldr	r1, [pc, #68]	; (6ad0 <hal_i2c_init+0x16c>)
    6a8c:	4640      	mov	r0, r8
    6a8e:	4b0a      	ldr	r3, [pc, #40]	; (6ab8 <hal_i2c_init+0x154>)
    6a90:	4798      	blx	r3
    6a92:	e7c8      	b.n	6a26 <hal_i2c_init+0xc2>
    6a94:	200026ec 	.word	0x200026ec
    6a98:	20002b0c 	.word	0x20002b0c
    6a9c:	00010949 	.word	0x00010949
    6aa0:	200026b8 	.word	0x200026b8
    6aa4:	00000d48 	.word	0x00000d48
    6aa8:	00080003 	.word	0x00080003
    6aac:	00090003 	.word	0x00090003
    6ab0:	0000e565 	.word	0x0000e565
    6ab4:	00014da0 	.word	0x00014da0
    6ab8:	00000edd 	.word	0x00000edd
    6abc:	00006959 	.word	0x00006959
    6ac0:	42000400 	.word	0x42000400
    6ac4:	42000800 	.word	0x42000800
    6ac8:	42000c00 	.word	0x42000c00
    6acc:	42001000 	.word	0x42001000
    6ad0:	43000400 	.word	0x43000400

00006ad4 <hal_i2c_post_init>:
 * \return ATCA_SUCCESS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
    return ATCA_SUCCESS;
}
    6ad4:	2000      	movs	r0, #0
    6ad6:	4770      	bx	lr

00006ad8 <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
    6ad8:	b530      	push	{r4, r5, lr}
    6ada:	b085      	sub	sp, #20
    6adc:	000d      	movs	r5, r1
    6ade:	0014      	movs	r4, r2
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    6ae0:	4b0e      	ldr	r3, [pc, #56]	; (6b1c <hal_i2c_send+0x44>)
    6ae2:	4798      	blx	r3
    int bus = cfg->atcai2c.bus;
    6ae4:	7943      	ldrb	r3, [r0, #5]

    struct i2c_master_packet packet = {
    6ae6:	a901      	add	r1, sp, #4
    6ae8:	7902      	ldrb	r2, [r0, #4]
    6aea:	0852      	lsrs	r2, r2, #1
    6aec:	800a      	strh	r2, [r1, #0]
    6aee:	604d      	str	r5, [r1, #4]
    6af0:	2200      	movs	r2, #0
    6af2:	720a      	strb	r2, [r1, #8]
    6af4:	724a      	strb	r2, [r1, #9]
    6af6:	728a      	strb	r2, [r1, #10]
    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format

    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x03;   // insert the Word Address Value, Command token
    6af8:	3203      	adds	r2, #3
    6afa:	702a      	strb	r2, [r5, #0]
    txlength++;         // account for word address value byte.
    6afc:	3401      	adds	r4, #1
    packet.data_length = txlength;
    6afe:	804c      	strh	r4, [r1, #2]

    //	statusCode = i2c_master_write_packet_wait(&i2c_master_instance, &packet);
    //if ( i2c_master_write_packet_wait_no_stop( &(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    6b00:	009b      	lsls	r3, r3, #2
    6b02:	4a07      	ldr	r2, [pc, #28]	; (6b20 <hal_i2c_send+0x48>)
    6b04:	5898      	ldr	r0, [r3, r2]
    6b06:	4b07      	ldr	r3, [pc, #28]	; (6b24 <hal_i2c_send+0x4c>)
    6b08:	4798      	blx	r3
    6b0a:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    6b0c:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    6b0e:	1e5a      	subs	r2, r3, #1
    6b10:	4193      	sbcs	r3, r2
    6b12:	425b      	negs	r3, r3
    6b14:	4018      	ands	r0, r3
}
    6b16:	b005      	add	sp, #20
    6b18:	bd30      	pop	{r4, r5, pc}
    6b1a:	46c0      	nop			; (mov r8, r8)
    6b1c:	00006049 	.word	0x00006049
    6b20:	20002b0c 	.word	0x20002b0c
    6b24:	00001509 	.word	0x00001509

00006b28 <hal_i2c_receive>:
 * \param[in] rxlength  ptr to expected number of receive bytes to request
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
    6b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b2a:	b085      	sub	sp, #20
    6b2c:	000c      	movs	r4, r1
    6b2e:	0016      	movs	r6, r2
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    6b30:	4b15      	ldr	r3, [pc, #84]	; (6b88 <hal_i2c_receive+0x60>)
    6b32:	4798      	blx	r3
    int bus = cfg->atcai2c.bus;
    6b34:	7945      	ldrb	r5, [r0, #5]
    int retries = cfg->rx_retries;
    6b36:	6a81      	ldr	r1, [r0, #40]	; 0x28
    int status = !STATUS_OK;

    struct i2c_master_packet packet = {
    6b38:	ab01      	add	r3, sp, #4
    6b3a:	7902      	ldrb	r2, [r0, #4]
    6b3c:	0852      	lsrs	r2, r2, #1
    6b3e:	801a      	strh	r2, [r3, #0]
    6b40:	8832      	ldrh	r2, [r6, #0]
    6b42:	805a      	strh	r2, [r3, #2]
    6b44:	9402      	str	r4, [sp, #8]
    6b46:	2200      	movs	r2, #0
    6b48:	721a      	strb	r2, [r3, #8]
    6b4a:	725a      	strb	r2, [r3, #9]
    6b4c:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    while (retries-- > 0 && status != STATUS_OK)
    6b4e:	1e4c      	subs	r4, r1, #1
    6b50:	2900      	cmp	r1, #0
    6b52:	dd16      	ble.n	6b82 <hal_i2c_receive+0x5a>
    {
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
    6b54:	4f0d      	ldr	r7, [pc, #52]	; (6b8c <hal_i2c_receive+0x64>)
    6b56:	4e0e      	ldr	r6, [pc, #56]	; (6b90 <hal_i2c_receive+0x68>)
    6b58:	00ab      	lsls	r3, r5, #2
    6b5a:	59d8      	ldr	r0, [r3, r7]
    6b5c:	a901      	add	r1, sp, #4
    6b5e:	47b0      	blx	r6
    while (retries-- > 0 && status != STATUS_OK)
    6b60:	3c01      	subs	r4, #1
    6b62:	d308      	bcc.n	6b76 <hal_i2c_receive+0x4e>
    6b64:	2800      	cmp	r0, #0
    6b66:	d1f7      	bne.n	6b58 <hal_i2c_receive+0x30>
    if (status != STATUS_OK)
    {
        return ATCA_COMM_FAIL;
    }

    if (atCheckCrc(packet.data) != ATCA_SUCCESS)
    6b68:	9802      	ldr	r0, [sp, #8]
    6b6a:	4b0a      	ldr	r3, [pc, #40]	; (6b94 <hal_i2c_receive+0x6c>)
    6b6c:	4798      	blx	r3
    6b6e:	1e03      	subs	r3, r0, #0
    6b70:	d004      	beq.n	6b7c <hal_i2c_receive+0x54>
    {
        return ATCA_COMM_FAIL;
    6b72:	23f0      	movs	r3, #240	; 0xf0
    6b74:	e002      	b.n	6b7c <hal_i2c_receive+0x54>
        return ATCA_COMM_FAIL;
    6b76:	23f0      	movs	r3, #240	; 0xf0
    if (status != STATUS_OK)
    6b78:	2800      	cmp	r0, #0
    6b7a:	d0f5      	beq.n	6b68 <hal_i2c_receive+0x40>
    }

    return ATCA_SUCCESS;
}
    6b7c:	0018      	movs	r0, r3
    6b7e:	b005      	add	sp, #20
    6b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ATCA_COMM_FAIL;
    6b82:	23f0      	movs	r3, #240	; 0xf0
    6b84:	e7fa      	b.n	6b7c <hal_i2c_receive+0x54>
    6b86:	46c0      	nop			; (mov r8, r8)
    6b88:	00006049 	.word	0x00006049
    6b8c:	20002b0c 	.word	0x20002b0c
    6b90:	000014f5 	.word	0x000014f5
    6b94:	00005ed1 	.word	0x00005ed1

00006b98 <change_i2c_speed>:
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */

void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
    6b98:	b570      	push	{r4, r5, r6, lr}
    6b9a:	000e      	movs	r6, r1
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    6b9c:	4b2f      	ldr	r3, [pc, #188]	; (6c5c <change_i2c_speed+0xc4>)
    6b9e:	4798      	blx	r3
    int bus = cfg->atcai2c.bus;
    6ba0:	7944      	ldrb	r4, [r0, #5]

    config_i2c_master.buffer_timeout = 10000;
    6ba2:	4d2f      	ldr	r5, [pc, #188]	; (6c60 <change_i2c_speed+0xc8>)
    6ba4:	4b2f      	ldr	r3, [pc, #188]	; (6c64 <change_i2c_speed+0xcc>)
    6ba6:	82eb      	strh	r3, [r5, #22]
    config_i2c_master.baud_rate = speed / 1000;
    6ba8:	21fa      	movs	r1, #250	; 0xfa
    6baa:	0089      	lsls	r1, r1, #2
    6bac:	0030      	movs	r0, r6
    6bae:	4b2e      	ldr	r3, [pc, #184]	; (6c68 <change_i2c_speed+0xd0>)
    6bb0:	4798      	blx	r3
    6bb2:	6028      	str	r0, [r5, #0]

    i2c_master_disable(&(i2c_hal_data[bus]->i2c_master_instance));
    6bb4:	00a2      	lsls	r2, r4, #2
    6bb6:	4b2d      	ldr	r3, [pc, #180]	; (6c6c <change_i2c_speed+0xd4>)
    6bb8:	58d0      	ldr	r0, [r2, r3]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6bba:	6805      	ldr	r5, [r0, #0]
	_i2c_master_wait_for_sync(module);
    6bbc:	4b2c      	ldr	r3, [pc, #176]	; (6c70 <change_i2c_speed+0xd8>)
    6bbe:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    6bc0:	2383      	movs	r3, #131	; 0x83
    6bc2:	752b      	strb	r3, [r5, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    6bc4:	762b      	strb	r3, [r5, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6bc6:	682b      	ldr	r3, [r5, #0]
    6bc8:	2202      	movs	r2, #2
    6bca:	4393      	bics	r3, r2
    6bcc:	602b      	str	r3, [r5, #0]

    switch (bus)
    6bce:	2c05      	cmp	r4, #5
    6bd0:	d80a      	bhi.n	6be8 <change_i2c_speed+0x50>
    6bd2:	00a3      	lsls	r3, r4, #2
    6bd4:	4a27      	ldr	r2, [pc, #156]	; (6c74 <change_i2c_speed+0xdc>)
    6bd6:	58d3      	ldr	r3, [r2, r3]
    6bd8:	469f      	mov	pc, r3
    {
    case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
    6bda:	4b24      	ldr	r3, [pc, #144]	; (6c6c <change_i2c_speed+0xd4>)
    6bdc:	6818      	ldr	r0, [r3, #0]
    6bde:	4a20      	ldr	r2, [pc, #128]	; (6c60 <change_i2c_speed+0xc8>)
    6be0:	2184      	movs	r1, #132	; 0x84
    6be2:	05c9      	lsls	r1, r1, #23
    6be4:	4b24      	ldr	r3, [pc, #144]	; (6c78 <change_i2c_speed+0xe0>)
    6be6:	4798      	blx	r3
    case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    }

    i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
    6be8:	00a4      	lsls	r4, r4, #2
    6bea:	4b20      	ldr	r3, [pc, #128]	; (6c6c <change_i2c_speed+0xd4>)
    6bec:	58e5      	ldr	r5, [r4, r3]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6bee:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    6bf0:	0028      	movs	r0, r5
    6bf2:	4b1f      	ldr	r3, [pc, #124]	; (6c70 <change_i2c_speed+0xd8>)
    6bf4:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6bf6:	6823      	ldr	r3, [r4, #0]
    6bf8:	2202      	movs	r2, #2
    6bfa:	4313      	orrs	r3, r2
    6bfc:	6023      	str	r3, [r4, #0]
	uint32_t timeout_counter = 0;
    6bfe:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    6c00:	2110      	movs	r1, #16
    6c02:	8b62      	ldrh	r2, [r4, #26]
    6c04:	420a      	tst	r2, r1
    6c06:	d105      	bne.n	6c14 <change_i2c_speed+0x7c>
		timeout_counter++;
    6c08:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    6c0a:	88ea      	ldrh	r2, [r5, #6]
    6c0c:	4293      	cmp	r3, r2
    6c0e:	d3f8      	bcc.n	6c02 <change_i2c_speed+0x6a>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    6c10:	2310      	movs	r3, #16
    6c12:	8363      	strh	r3, [r4, #26]
}
    6c14:	bd70      	pop	{r4, r5, r6, pc}
    case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
    6c16:	4b15      	ldr	r3, [pc, #84]	; (6c6c <change_i2c_speed+0xd4>)
    6c18:	6858      	ldr	r0, [r3, #4]
    6c1a:	4a11      	ldr	r2, [pc, #68]	; (6c60 <change_i2c_speed+0xc8>)
    6c1c:	4917      	ldr	r1, [pc, #92]	; (6c7c <change_i2c_speed+0xe4>)
    6c1e:	4b16      	ldr	r3, [pc, #88]	; (6c78 <change_i2c_speed+0xe0>)
    6c20:	4798      	blx	r3
    6c22:	e7e1      	b.n	6be8 <change_i2c_speed+0x50>
    case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
    6c24:	4b11      	ldr	r3, [pc, #68]	; (6c6c <change_i2c_speed+0xd4>)
    6c26:	6898      	ldr	r0, [r3, #8]
    6c28:	4a0d      	ldr	r2, [pc, #52]	; (6c60 <change_i2c_speed+0xc8>)
    6c2a:	4915      	ldr	r1, [pc, #84]	; (6c80 <change_i2c_speed+0xe8>)
    6c2c:	4b12      	ldr	r3, [pc, #72]	; (6c78 <change_i2c_speed+0xe0>)
    6c2e:	4798      	blx	r3
    6c30:	e7da      	b.n	6be8 <change_i2c_speed+0x50>
    case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    6c32:	4b0e      	ldr	r3, [pc, #56]	; (6c6c <change_i2c_speed+0xd4>)
    6c34:	68d8      	ldr	r0, [r3, #12]
    6c36:	4a0a      	ldr	r2, [pc, #40]	; (6c60 <change_i2c_speed+0xc8>)
    6c38:	4912      	ldr	r1, [pc, #72]	; (6c84 <change_i2c_speed+0xec>)
    6c3a:	4b0f      	ldr	r3, [pc, #60]	; (6c78 <change_i2c_speed+0xe0>)
    6c3c:	4798      	blx	r3
    6c3e:	e7d3      	b.n	6be8 <change_i2c_speed+0x50>
    case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    6c40:	4b0a      	ldr	r3, [pc, #40]	; (6c6c <change_i2c_speed+0xd4>)
    6c42:	6918      	ldr	r0, [r3, #16]
    6c44:	4a06      	ldr	r2, [pc, #24]	; (6c60 <change_i2c_speed+0xc8>)
    6c46:	4910      	ldr	r1, [pc, #64]	; (6c88 <change_i2c_speed+0xf0>)
    6c48:	4b0b      	ldr	r3, [pc, #44]	; (6c78 <change_i2c_speed+0xe0>)
    6c4a:	4798      	blx	r3
    6c4c:	e7cc      	b.n	6be8 <change_i2c_speed+0x50>
    case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    6c4e:	4b07      	ldr	r3, [pc, #28]	; (6c6c <change_i2c_speed+0xd4>)
    6c50:	6958      	ldr	r0, [r3, #20]
    6c52:	4a03      	ldr	r2, [pc, #12]	; (6c60 <change_i2c_speed+0xc8>)
    6c54:	490d      	ldr	r1, [pc, #52]	; (6c8c <change_i2c_speed+0xf4>)
    6c56:	4b08      	ldr	r3, [pc, #32]	; (6c78 <change_i2c_speed+0xe0>)
    6c58:	4798      	blx	r3
    6c5a:	e7c5      	b.n	6be8 <change_i2c_speed+0x50>
    6c5c:	00006049 	.word	0x00006049
    6c60:	200026b8 	.word	0x200026b8
    6c64:	00002710 	.word	0x00002710
    6c68:	0000e565 	.word	0x0000e565
    6c6c:	20002b0c 	.word	0x20002b0c
    6c70:	00006959 	.word	0x00006959
    6c74:	00014db8 	.word	0x00014db8
    6c78:	00000edd 	.word	0x00000edd
    6c7c:	42000400 	.word	0x42000400
    6c80:	42000800 	.word	0x42000800
    6c84:	42000c00 	.word	0x42000c00
    6c88:	42001000 	.word	0x42001000
    6c8c:	43000400 	.word	0x43000400

00006c90 <hal_i2c_wake>:
 * \param[in] iface  interface to logical device to wakeup
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
    6c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c92:	46d6      	mov	lr, sl
    6c94:	464f      	mov	r7, r9
    6c96:	4646      	mov	r6, r8
    6c98:	b5c0      	push	{r6, r7, lr}
    6c9a:	b088      	sub	sp, #32
    6c9c:	0004      	movs	r4, r0
    6c9e:	9001      	str	r0, [sp, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    6ca0:	4b30      	ldr	r3, [pc, #192]	; (6d64 <hal_i2c_wake+0xd4>)
    6ca2:	4798      	blx	r3
    6ca4:	4681      	mov	r9, r0
    int bus = cfg->atcai2c.bus;
    6ca6:	7947      	ldrb	r7, [r0, #5]
    int retries = cfg->rx_retries;
    6ca8:	6a86      	ldr	r6, [r0, #40]	; 0x28
    uint32_t bdrt = cfg->atcai2c.baud;
    6caa:	6883      	ldr	r3, [r0, #8]
    6cac:	4698      	mov	r8, r3
    int status = !STATUS_OK;
    uint8_t data[4], expected[4] = { 0x04, 0x11, 0x33, 0x43 };
    6cae:	4b2e      	ldr	r3, [pc, #184]	; (6d68 <hal_i2c_wake+0xd8>)
    6cb0:	681b      	ldr	r3, [r3, #0]
    6cb2:	9306      	str	r3, [sp, #24]

    if (bdrt != 100000)    // if not already at 100KHz, change it
    6cb4:	4b2d      	ldr	r3, [pc, #180]	; (6d6c <hal_i2c_wake+0xdc>)
    6cb6:	4598      	cmp	r8, r3
    6cb8:	d003      	beq.n	6cc2 <hal_i2c_wake+0x32>
    {
        change_i2c_speed(iface, 100000);
    6cba:	0019      	movs	r1, r3
    6cbc:	0020      	movs	r0, r4
    6cbe:	4b2c      	ldr	r3, [pc, #176]	; (6d70 <hal_i2c_wake+0xe0>)
    6cc0:	4798      	blx	r3
    }

    // Send the wake by writing to an address of 0x00
    struct i2c_master_packet packet = {
    6cc2:	ac03      	add	r4, sp, #12
    6cc4:	2200      	movs	r2, #0
    6cc6:	2300      	movs	r3, #0
    6cc8:	8022      	strh	r2, [r4, #0]
    6cca:	8062      	strh	r2, [r4, #2]
    6ccc:	ad07      	add	r5, sp, #28
    6cce:	9504      	str	r5, [sp, #16]
    6cd0:	7223      	strb	r3, [r4, #8]
    6cd2:	7263      	strb	r3, [r4, #9]
    6cd4:	72a3      	strb	r3, [r4, #10]
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    // Send the 00 address as the wake pulse
    i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);       // part will NACK, so don't check for status
    6cd6:	00bb      	lsls	r3, r7, #2
    6cd8:	4a26      	ldr	r2, [pc, #152]	; (6d74 <hal_i2c_wake+0xe4>)
    6cda:	5898      	ldr	r0, [r3, r2]
    6cdc:	0021      	movs	r1, r4
    6cde:	4b26      	ldr	r3, [pc, #152]	; (6d78 <hal_i2c_wake+0xe8>)
    6ce0:	4798      	blx	r3

    atca_delay_us(cfg->wake_delay);                                                         // wait tWHI + tWLO which is configured based on device type and configuration structure
    6ce2:	464b      	mov	r3, r9
    6ce4:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    6ce6:	4b25      	ldr	r3, [pc, #148]	; (6d7c <hal_i2c_wake+0xec>)
    6ce8:	4798      	blx	r3

    packet.address = cfg->atcai2c.slave_address >> 1;
    6cea:	464b      	mov	r3, r9
    6cec:	791b      	ldrb	r3, [r3, #4]
    6cee:	085b      	lsrs	r3, r3, #1
    6cf0:	8023      	strh	r3, [r4, #0]
    packet.data_length = 4;
    6cf2:	2304      	movs	r3, #4
    6cf4:	8063      	strh	r3, [r4, #2]
    packet.data = data;
    6cf6:	6065      	str	r5, [r4, #4]

    while (retries-- > 0 && status != STATUS_OK)
    6cf8:	1e75      	subs	r5, r6, #1
    6cfa:	2e00      	cmp	r6, #0
    6cfc:	dd2c      	ble.n	6d58 <hal_i2c_wake+0xc8>
    {
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
    6cfe:	4b1d      	ldr	r3, [pc, #116]	; (6d74 <hal_i2c_wake+0xe4>)
    6d00:	469a      	mov	sl, r3
    6d02:	4e1f      	ldr	r6, [pc, #124]	; (6d80 <hal_i2c_wake+0xf0>)
    6d04:	00bb      	lsls	r3, r7, #2
    6d06:	4652      	mov	r2, sl
    6d08:	5898      	ldr	r0, [r3, r2]
    6d0a:	a903      	add	r1, sp, #12
    6d0c:	47b0      	blx	r6
    6d0e:	0004      	movs	r4, r0
    while (retries-- > 0 && status != STATUS_OK)
    6d10:	3d01      	subs	r5, #1
    6d12:	d30d      	bcc.n	6d30 <hal_i2c_wake+0xa0>
    6d14:	2800      	cmp	r0, #0
    6d16:	d1f5      	bne.n	6d04 <hal_i2c_wake+0x74>
    }

    // if necessary, revert baud rate to what came in.
    if (bdrt != 100000)
    6d18:	4b14      	ldr	r3, [pc, #80]	; (6d6c <hal_i2c_wake+0xdc>)
    6d1a:	4598      	cmp	r8, r3
    6d1c:	d10b      	bne.n	6d36 <hal_i2c_wake+0xa6>
    if (status != STATUS_OK)
    {
        return ATCA_COMM_FAIL;
    }

    if (memcmp(data, expected, 4) == 0)
    6d1e:	2204      	movs	r2, #4
    6d20:	a906      	add	r1, sp, #24
    6d22:	a807      	add	r0, sp, #28
    6d24:	4b17      	ldr	r3, [pc, #92]	; (6d84 <hal_i2c_wake+0xf4>)
    6d26:	4798      	blx	r3
    6d28:	2800      	cmp	r0, #0
    6d2a:	d013      	beq.n	6d54 <hal_i2c_wake+0xc4>
    {
        return ATCA_SUCCESS;
    }

    return ATCA_COMM_FAIL;
    6d2c:	20f0      	movs	r0, #240	; 0xf0
    6d2e:	e009      	b.n	6d44 <hal_i2c_wake+0xb4>
    if (bdrt != 100000)
    6d30:	4b0e      	ldr	r3, [pc, #56]	; (6d6c <hal_i2c_wake+0xdc>)
    6d32:	4598      	cmp	r8, r3
    6d34:	d003      	beq.n	6d3e <hal_i2c_wake+0xae>
        change_i2c_speed(iface, bdrt);
    6d36:	4641      	mov	r1, r8
    6d38:	9801      	ldr	r0, [sp, #4]
    6d3a:	4b0d      	ldr	r3, [pc, #52]	; (6d70 <hal_i2c_wake+0xe0>)
    6d3c:	4798      	blx	r3
        return ATCA_COMM_FAIL;
    6d3e:	20f0      	movs	r0, #240	; 0xf0
    if (status != STATUS_OK)
    6d40:	2c00      	cmp	r4, #0
    6d42:	d0ec      	beq.n	6d1e <hal_i2c_wake+0x8e>
}
    6d44:	b008      	add	sp, #32
    6d46:	bc1c      	pop	{r2, r3, r4}
    6d48:	4690      	mov	r8, r2
    6d4a:	4699      	mov	r9, r3
    6d4c:	46a2      	mov	sl, r4
    6d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int status = !STATUS_OK;
    6d50:	2401      	movs	r4, #1
    6d52:	e7f0      	b.n	6d36 <hal_i2c_wake+0xa6>
        return ATCA_SUCCESS;
    6d54:	2000      	movs	r0, #0
    6d56:	e7f5      	b.n	6d44 <hal_i2c_wake+0xb4>
    if (bdrt != 100000)
    6d58:	4b04      	ldr	r3, [pc, #16]	; (6d6c <hal_i2c_wake+0xdc>)
    6d5a:	4598      	cmp	r8, r3
    6d5c:	d1f8      	bne.n	6d50 <hal_i2c_wake+0xc0>
        return ATCA_COMM_FAIL;
    6d5e:	20f0      	movs	r0, #240	; 0xf0
    6d60:	e7f0      	b.n	6d44 <hal_i2c_wake+0xb4>
    6d62:	46c0      	nop			; (mov r8, r8)
    6d64:	00006049 	.word	0x00006049
    6d68:	00014dd0 	.word	0x00014dd0
    6d6c:	000186a0 	.word	0x000186a0
    6d70:	00006b99 	.word	0x00006b99
    6d74:	20002b0c 	.word	0x20002b0c
    6d78:	00001509 	.word	0x00001509
    6d7c:	00006e7d 	.word	0x00006e7d
    6d80:	000014f5 	.word	0x000014f5
    6d84:	000109ab 	.word	0x000109ab

00006d88 <hal_i2c_idle>:
 * \param[in] iface  interface to logical device to idle
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    6d88:	b500      	push	{lr}
    6d8a:	b085      	sub	sp, #20
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    6d8c:	4b0f      	ldr	r3, [pc, #60]	; (6dcc <hal_i2c_idle+0x44>)
    6d8e:	4798      	blx	r3
    int bus = cfg->atcai2c.bus;
    6d90:	7943      	ldrb	r3, [r0, #5]
    uint8_t data[4];

    struct i2c_master_packet packet = {
    6d92:	7902      	ldrb	r2, [r0, #4]
    6d94:	0852      	lsrs	r2, r2, #1
    6d96:	4669      	mov	r1, sp
    6d98:	800a      	strh	r2, [r1, #0]
    6d9a:	2201      	movs	r2, #1
    6d9c:	804a      	strh	r2, [r1, #2]
    6d9e:	a903      	add	r1, sp, #12
    6da0:	9101      	str	r1, [sp, #4]
    6da2:	2200      	movs	r2, #0
    6da4:	4668      	mov	r0, sp
    6da6:	7202      	strb	r2, [r0, #8]
    6da8:	7242      	strb	r2, [r0, #9]
    6daa:	7282      	strb	r2, [r0, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x02;  // idle word address value
    6dac:	3202      	adds	r2, #2
    6dae:	700a      	strb	r2, [r1, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    6db0:	009b      	lsls	r3, r3, #2
    6db2:	4a07      	ldr	r2, [pc, #28]	; (6dd0 <hal_i2c_idle+0x48>)
    6db4:	5898      	ldr	r0, [r3, r2]
    6db6:	4669      	mov	r1, sp
    6db8:	4b06      	ldr	r3, [pc, #24]	; (6dd4 <hal_i2c_idle+0x4c>)
    6dba:	4798      	blx	r3
    6dbc:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    6dbe:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    6dc0:	1e5a      	subs	r2, r3, #1
    6dc2:	4193      	sbcs	r3, r2
    6dc4:	425b      	negs	r3, r3
    6dc6:	4018      	ands	r0, r3

}
    6dc8:	b005      	add	sp, #20
    6dca:	bd00      	pop	{pc}
    6dcc:	00006049 	.word	0x00006049
    6dd0:	20002b0c 	.word	0x20002b0c
    6dd4:	00001509 	.word	0x00001509

00006dd8 <hal_i2c_sleep>:
 * \param[in] iface  interface to logical device to sleep
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    6dd8:	b500      	push	{lr}
    6dda:	b085      	sub	sp, #20
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    6ddc:	4b0f      	ldr	r3, [pc, #60]	; (6e1c <hal_i2c_sleep+0x44>)
    6dde:	4798      	blx	r3
    int bus = cfg->atcai2c.bus;
    6de0:	7943      	ldrb	r3, [r0, #5]
    uint8_t data[4];

    struct i2c_master_packet packet = {
    6de2:	7902      	ldrb	r2, [r0, #4]
    6de4:	0852      	lsrs	r2, r2, #1
    6de6:	4669      	mov	r1, sp
    6de8:	800a      	strh	r2, [r1, #0]
    6dea:	2201      	movs	r2, #1
    6dec:	804a      	strh	r2, [r1, #2]
    6dee:	a903      	add	r1, sp, #12
    6df0:	9101      	str	r1, [sp, #4]
    6df2:	2200      	movs	r2, #0
    6df4:	4668      	mov	r0, sp
    6df6:	7202      	strb	r2, [r0, #8]
    6df8:	7242      	strb	r2, [r0, #9]
    6dfa:	7282      	strb	r2, [r0, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x01;  // sleep word address value
    6dfc:	2201      	movs	r2, #1
    6dfe:	700a      	strb	r2, [r1, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    6e00:	009b      	lsls	r3, r3, #2
    6e02:	4a07      	ldr	r2, [pc, #28]	; (6e20 <hal_i2c_sleep+0x48>)
    6e04:	5898      	ldr	r0, [r3, r2]
    6e06:	4669      	mov	r1, sp
    6e08:	4b06      	ldr	r3, [pc, #24]	; (6e24 <hal_i2c_sleep+0x4c>)
    6e0a:	4798      	blx	r3
    6e0c:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    6e0e:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    6e10:	1e5a      	subs	r2, r3, #1
    6e12:	4193      	sbcs	r3, r2
    6e14:	425b      	negs	r3, r3
    6e16:	4018      	ands	r0, r3
}
    6e18:	b005      	add	sp, #20
    6e1a:	bd00      	pop	{pc}
    6e1c:	00006049 	.word	0x00006049
    6e20:	20002b0c 	.word	0x20002b0c
    6e24:	00001509 	.word	0x00001509

00006e28 <hal_i2c_release>:
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 * return ATCA_SUCCESS
 */

ATCA_STATUS hal_i2c_release(void *hal_data)
{
    6e28:	b570      	push	{r4, r5, r6, lr}
    6e2a:	0004      	movs	r4, r0
    ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;

    i2c_bus_ref_ct--;  // track total i2c bus interface instances for consistency checking and debugging
    6e2c:	4a0f      	ldr	r2, [pc, #60]	; (6e6c <hal_i2c_release+0x44>)
    6e2e:	6813      	ldr	r3, [r2, #0]
    6e30:	3b01      	subs	r3, #1
    6e32:	6013      	str	r3, [r2, #0]

    // if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
    if (hal && --(hal->ref_ct) <= 0 && i2c_hal_data[hal->bus_index] != NULL)
    6e34:	2800      	cmp	r0, #0
    6e36:	d004      	beq.n	6e42 <hal_i2c_release+0x1a>
    6e38:	68c3      	ldr	r3, [r0, #12]
    6e3a:	3b01      	subs	r3, #1
    6e3c:	60c3      	str	r3, [r0, #12]
    6e3e:	2b00      	cmp	r3, #0
    6e40:	dd01      	ble.n	6e46 <hal_i2c_release+0x1e>
        free(i2c_hal_data[hal->bus_index]);
        i2c_hal_data[hal->bus_index] = NULL;
    }

    return ATCA_SUCCESS;
}
    6e42:	2000      	movs	r0, #0
    6e44:	bd70      	pop	{r4, r5, r6, pc}
    if (hal && --(hal->ref_ct) <= 0 && i2c_hal_data[hal->bus_index] != NULL)
    6e46:	6903      	ldr	r3, [r0, #16]
    6e48:	009b      	lsls	r3, r3, #2
    6e4a:	4a09      	ldr	r2, [pc, #36]	; (6e70 <hal_i2c_release+0x48>)
    6e4c:	589b      	ldr	r3, [r3, r2]
    6e4e:	2b00      	cmp	r3, #0
    6e50:	d0f7      	beq.n	6e42 <hal_i2c_release+0x1a>
        i2c_master_reset(&(hal->i2c_master_instance));
    6e52:	4b08      	ldr	r3, [pc, #32]	; (6e74 <hal_i2c_release+0x4c>)
    6e54:	4798      	blx	r3
        free(i2c_hal_data[hal->bus_index]);
    6e56:	4d06      	ldr	r5, [pc, #24]	; (6e70 <hal_i2c_release+0x48>)
    6e58:	6923      	ldr	r3, [r4, #16]
    6e5a:	009b      	lsls	r3, r3, #2
    6e5c:	5958      	ldr	r0, [r3, r5]
    6e5e:	4b06      	ldr	r3, [pc, #24]	; (6e78 <hal_i2c_release+0x50>)
    6e60:	4798      	blx	r3
        i2c_hal_data[hal->bus_index] = NULL;
    6e62:	6923      	ldr	r3, [r4, #16]
    6e64:	009b      	lsls	r3, r3, #2
    6e66:	2200      	movs	r2, #0
    6e68:	515a      	str	r2, [r3, r5]
    6e6a:	e7ea      	b.n	6e42 <hal_i2c_release+0x1a>
    6e6c:	200026ec 	.word	0x200026ec
    6e70:	20002b0c 	.word	0x20002b0c
    6e74:	000011b9 	.word	0x000011b9
    6e78:	0001095d 	.word	0x0001095d

00006e7c <atca_delay_us>:
/** \brief This function delays for a number of microseconds.
 *
 * \param[in] delay number of 0.001 milliseconds to delay
 */
void atca_delay_us(uint32_t delay)
{
    6e7c:	b510      	push	{r4, lr}
    // use ASF supplied delay
    delay_us(delay);
    6e7e:	2800      	cmp	r0, #0
    6e80:	d103      	bne.n	6e8a <atca_delay_us+0xe>
    6e82:	2001      	movs	r0, #1
    6e84:	4b02      	ldr	r3, [pc, #8]	; (6e90 <atca_delay_us+0x14>)
    6e86:	4798      	blx	r3
}
    6e88:	bd10      	pop	{r4, pc}
    delay_us(delay);
    6e8a:	4b01      	ldr	r3, [pc, #4]	; (6e90 <atca_delay_us+0x14>)
    6e8c:	4798      	blx	r3
    6e8e:	e7fb      	b.n	6e88 <atca_delay_us+0xc>
    6e90:	00009fe9 	.word	0x00009fe9

00006e94 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
    6e94:	b510      	push	{r4, lr}
    // use ASF supplied delay
    delay_ms(delay);
    6e96:	2800      	cmp	r0, #0
    6e98:	d103      	bne.n	6ea2 <atca_delay_ms+0xe>
    6e9a:	2001      	movs	r0, #1
    6e9c:	4b02      	ldr	r3, [pc, #8]	; (6ea8 <atca_delay_ms+0x14>)
    6e9e:	4798      	blx	r3
}
    6ea0:	bd10      	pop	{r4, pc}
    delay_ms(delay);
    6ea2:	4b02      	ldr	r3, [pc, #8]	; (6eac <atca_delay_ms+0x18>)
    6ea4:	4798      	blx	r3
    6ea6:	e7fb      	b.n	6ea0 <atca_delay_ms+0xc>
    6ea8:	00009fe9 	.word	0x00009fe9
    6eac:	0000a015 	.word	0x0000a015

00006eb0 <atca_jwt_check_payload_start>:
void atca_jwt_check_payload_start(
    atca_jwt_t* jwt     /**< [in] JWT Context to use */
    )
{
    /* Rationality checks: a) must be valid, b) buf must be valid, c) must not be at the start, d) must have room */
    if (jwt && jwt->buf && jwt->cur && (jwt->cur < jwt->buflen - 1))
    6eb0:	2800      	cmp	r0, #0
    6eb2:	d014      	beq.n	6ede <atca_jwt_check_payload_start+0x2e>
    6eb4:	6802      	ldr	r2, [r0, #0]
    6eb6:	2a00      	cmp	r2, #0
    6eb8:	d011      	beq.n	6ede <atca_jwt_check_payload_start+0x2e>
    6eba:	88c3      	ldrh	r3, [r0, #6]
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	d00e      	beq.n	6ede <atca_jwt_check_payload_start+0x2e>
    6ec0:	8881      	ldrh	r1, [r0, #4]
    6ec2:	3901      	subs	r1, #1
    6ec4:	428b      	cmp	r3, r1
    6ec6:	da0a      	bge.n	6ede <atca_jwt_check_payload_start+0x2e>
    {
        /* Check the previous */
        char c = jwt->buf[jwt->cur - 1];
    6ec8:	18d1      	adds	r1, r2, r3
    6eca:	3901      	subs	r1, #1
    6ecc:	7809      	ldrb	r1, [r1, #0]
        if ('.' == c)
    6ece:	292e      	cmp	r1, #46	; 0x2e
    6ed0:	d006      	beq.n	6ee0 <atca_jwt_check_payload_start+0x30>
        {
            jwt->buf[jwt->cur++] = '{';
        }
        else if ('{' != c)
    6ed2:	297b      	cmp	r1, #123	; 0x7b
    6ed4:	d003      	beq.n	6ede <atca_jwt_check_payload_start+0x2e>
        {
            jwt->buf[jwt->cur++] = ',';
    6ed6:	1c59      	adds	r1, r3, #1
    6ed8:	80c1      	strh	r1, [r0, #6]
    6eda:	212c      	movs	r1, #44	; 0x2c
    6edc:	54d1      	strb	r1, [r2, r3]
        }
    }
}
    6ede:	4770      	bx	lr
            jwt->buf[jwt->cur++] = '{';
    6ee0:	1c59      	adds	r1, r3, #1
    6ee2:	80c1      	strh	r1, [r0, #6]
    6ee4:	217b      	movs	r1, #123	; 0x7b
    6ee6:	54d1      	strb	r1, [r2, r3]
    6ee8:	e7f9      	b.n	6ede <atca_jwt_check_payload_start+0x2e>
	...

00006eec <atca_jwt_init>:
ATCA_STATUS atca_jwt_init(
    atca_jwt_t* jwt,    /**< [in] JWT Context to initialize */
    char*       buf,    /**< [inout] Pointer to a buffer to store the token */
    uint16_t    buflen  /**< [in] Length of the buffer */
    )
{
    6eec:	b530      	push	{r4, r5, lr}
    6eee:	b085      	sub	sp, #20
    6ef0:	1e04      	subs	r4, r0, #0
    ATCA_STATUS ret = ATCA_BAD_PARAM;
    size_t tSize;

    if (jwt && buf && buflen)
    6ef2:	d027      	beq.n	6f44 <atca_jwt_init+0x58>
    6ef4:	2900      	cmp	r1, #0
    6ef6:	d027      	beq.n	6f48 <atca_jwt_init+0x5c>
    ATCA_STATUS ret = ATCA_BAD_PARAM;
    6ef8:	20e2      	movs	r0, #226	; 0xe2
    if (jwt && buf && buflen)
    6efa:	2a00      	cmp	r2, #0
    6efc:	d101      	bne.n	6f02 <atca_jwt_init+0x16>
                ret = ATCA_INVALID_SIZE;
            }
        }
    }
    return ret;
}
    6efe:	b005      	add	sp, #20
    6f00:	bd30      	pop	{r4, r5, pc}
        jwt->buf = buf;
    6f02:	6021      	str	r1, [r4, #0]
        jwt->buflen = buflen;
    6f04:	80a2      	strh	r2, [r4, #4]
        jwt->cur = 0;
    6f06:	2300      	movs	r3, #0
    6f08:	80e3      	strh	r3, [r4, #6]
        tSize = jwt->buflen;
    6f0a:	9203      	str	r2, [sp, #12]
        ret = atcab_base64encode_((const uint8_t*)g_jwt_header, strlen(g_jwt_header), jwt->buf,
    6f0c:	4b0f      	ldr	r3, [pc, #60]	; (6f4c <atca_jwt_init+0x60>)
    6f0e:	9300      	str	r3, [sp, #0]
    6f10:	ab03      	add	r3, sp, #12
    6f12:	000a      	movs	r2, r1
    6f14:	211b      	movs	r1, #27
    6f16:	480e      	ldr	r0, [pc, #56]	; (6f50 <atca_jwt_init+0x64>)
    6f18:	4d0e      	ldr	r5, [pc, #56]	; (6f54 <atca_jwt_init+0x68>)
    6f1a:	47a8      	blx	r5
        if (ATCA_SUCCESS == ret)
    6f1c:	2800      	cmp	r0, #0
    6f1e:	d1ee      	bne.n	6efe <atca_jwt_init+0x12>
            jwt->cur += (uint16_t)tSize;
    6f20:	88e3      	ldrh	r3, [r4, #6]
    6f22:	9a03      	ldr	r2, [sp, #12]
    6f24:	4694      	mov	ip, r2
    6f26:	4463      	add	r3, ip
    6f28:	b29b      	uxth	r3, r3
    6f2a:	80e3      	strh	r3, [r4, #6]
            if (jwt->cur < jwt->buflen - 1)
    6f2c:	88a2      	ldrh	r2, [r4, #4]
    6f2e:	3a01      	subs	r2, #1
    6f30:	4293      	cmp	r3, r2
    6f32:	db01      	blt.n	6f38 <atca_jwt_init+0x4c>
                ret = ATCA_INVALID_SIZE;
    6f34:	20e4      	movs	r0, #228	; 0xe4
    6f36:	e7e2      	b.n	6efe <atca_jwt_init+0x12>
                jwt->buf[jwt->cur++] = '.';
    6f38:	6822      	ldr	r2, [r4, #0]
    6f3a:	1c59      	adds	r1, r3, #1
    6f3c:	80e1      	strh	r1, [r4, #6]
    6f3e:	212e      	movs	r1, #46	; 0x2e
    6f40:	54d1      	strb	r1, [r2, r3]
    6f42:	e7dc      	b.n	6efe <atca_jwt_init+0x12>
    ATCA_STATUS ret = ATCA_BAD_PARAM;
    6f44:	20e2      	movs	r0, #226	; 0xe2
    6f46:	e7da      	b.n	6efe <atca_jwt_init+0x12>
    6f48:	20e2      	movs	r0, #226	; 0xe2
    6f4a:	e7d8      	b.n	6efe <atca_jwt_init+0x12>
    6f4c:	20000114 	.word	0x20000114
    6f50:	00014dfc 	.word	0x00014dfc
    6f54:	000037f9 	.word	0x000037f9

00006f58 <atca_jwt_finalize>:
 */
ATCA_STATUS atca_jwt_finalize(
    atca_jwt_t* jwt,    /**< [in] JWT Context to use */
    uint16_t    key_id  /**< [in] Key Id (Slot number) used to sign */
    )
{
    6f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f5a:	46ce      	mov	lr, r9
    6f5c:	b500      	push	{lr}
    6f5e:	b086      	sub	sp, #24
    6f60:	1e04      	subs	r4, r0, #0
    6f62:	9103      	str	r1, [sp, #12]
    ATCA_STATUS status;
    uint16_t i;
    size_t rem;
    size_t tSize;

    if (!jwt || !jwt->buf || !jwt->buflen || !jwt->cur)
    6f64:	d100      	bne.n	6f68 <atca_jwt_finalize+0x10>
    6f66:	e097      	b.n	7098 <atca_jwt_finalize+0x140>
    6f68:	6803      	ldr	r3, [r0, #0]
    6f6a:	2b00      	cmp	r3, #0
    6f6c:	d100      	bne.n	6f70 <atca_jwt_finalize+0x18>
    6f6e:	e095      	b.n	709c <atca_jwt_finalize+0x144>
    6f70:	8882      	ldrh	r2, [r0, #4]
    {
        return ATCA_BAD_PARAM;
    6f72:	26e2      	movs	r6, #226	; 0xe2
    if (!jwt || !jwt->buf || !jwt->buflen || !jwt->cur)
    6f74:	2a00      	cmp	r2, #0
    6f76:	d104      	bne.n	6f82 <atca_jwt_finalize+0x2a>

    /* Make sure resulting buffer is null terminated */
    jwt->buf[jwt->cur] = 0;

    return status;
}
    6f78:	0030      	movs	r0, r6
    6f7a:	b006      	add	sp, #24
    6f7c:	bc04      	pop	{r2}
    6f7e:	4691      	mov	r9, r2
    6f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!jwt || !jwt->buf || !jwt->buflen || !jwt->cur)
    6f82:	88c7      	ldrh	r7, [r0, #6]
    6f84:	2f00      	cmp	r7, #0
    6f86:	d0f7      	beq.n	6f78 <atca_jwt_finalize+0x20>
    if ('}' != jwt->buf[jwt->cur - 1])
    6f88:	19da      	adds	r2, r3, r7
    6f8a:	3a01      	subs	r2, #1
    6f8c:	7812      	ldrb	r2, [r2, #0]
    6f8e:	2a7d      	cmp	r2, #125	; 0x7d
    6f90:	d007      	beq.n	6fa2 <atca_jwt_finalize+0x4a>
        jwt->buf[jwt->cur++] = '}';
    6f92:	1c7a      	adds	r2, r7, #1
    6f94:	80c2      	strh	r2, [r0, #6]
    6f96:	227d      	movs	r2, #125	; 0x7d
    6f98:	55da      	strb	r2, [r3, r7]
    for (i = 0; i < jwt->cur; i++)
    6f9a:	88c7      	ldrh	r7, [r0, #6]
    6f9c:	2f00      	cmp	r7, #0
    6f9e:	d100      	bne.n	6fa2 <atca_jwt_finalize+0x4a>
    6fa0:	e078      	b.n	7094 <atca_jwt_finalize+0x13c>
        if ('.' == jwt->buf[i])
    6fa2:	6823      	ldr	r3, [r4, #0]
    6fa4:	781a      	ldrb	r2, [r3, #0]
    6fa6:	3301      	adds	r3, #1
    6fa8:	2500      	movs	r5, #0
    6faa:	2a2e      	cmp	r2, #46	; 0x2e
    6fac:	d070      	beq.n	7090 <atca_jwt_finalize+0x138>
    for (i = 0; i < jwt->cur; i++)
    6fae:	3501      	adds	r5, #1
    6fb0:	b2ad      	uxth	r5, r5
    6fb2:	42bd      	cmp	r5, r7
    6fb4:	d206      	bcs.n	6fc4 <atca_jwt_finalize+0x6c>
    6fb6:	3301      	adds	r3, #1
        if ('.' == jwt->buf[i])
    6fb8:	1e5a      	subs	r2, r3, #1
    6fba:	7812      	ldrb	r2, [r2, #0]
    6fbc:	2a2e      	cmp	r2, #46	; 0x2e
    6fbe:	d1f6      	bne.n	6fae <atca_jwt_finalize+0x56>
            i++;
    6fc0:	3501      	adds	r5, #1
    6fc2:	b2ad      	uxth	r5, r5
    rem = (jwt->cur - i + ATCA_SIG_SIZE) * 4;
    6fc4:	1b7b      	subs	r3, r7, r5
    6fc6:	4699      	mov	r9, r3
    6fc8:	0018      	movs	r0, r3
    6fca:	3040      	adds	r0, #64	; 0x40
    6fcc:	0080      	lsls	r0, r0, #2
    rem /= 3;
    6fce:	2103      	movs	r1, #3
    6fd0:	4b34      	ldr	r3, [pc, #208]	; (70a4 <atca_jwt_finalize+0x14c>)
    6fd2:	4798      	blx	r3
    if (rem > (size_t)(jwt->buflen - jwt->cur))
    6fd4:	88a3      	ldrh	r3, [r4, #4]
    rem += 3;
    6fd6:	3003      	adds	r0, #3
    if (rem > (size_t)(jwt->buflen - jwt->cur))
    6fd8:	1bda      	subs	r2, r3, r7
        return ATCA_INVALID_SIZE;
    6fda:	26e4      	movs	r6, #228	; 0xe4
    if (rem > (size_t)(jwt->buflen - jwt->cur))
    6fdc:	4290      	cmp	r0, r2
    6fde:	d8cb      	bhi.n	6f78 <atca_jwt_finalize+0x20>
    memmove(jwt->buf + jwt->buflen - jwt->cur, &jwt->buf[i], rem);
    6fe0:	6822      	ldr	r2, [r4, #0]
    6fe2:	1951      	adds	r1, r2, r5
    6fe4:	1bd8      	subs	r0, r3, r7
    6fe6:	1810      	adds	r0, r2, r0
    6fe8:	464a      	mov	r2, r9
    6fea:	4b2f      	ldr	r3, [pc, #188]	; (70a8 <atca_jwt_finalize+0x150>)
    6fec:	4798      	blx	r3
    tSize = jwt->buflen;
    6fee:	88a3      	ldrh	r3, [r4, #4]
    6ff0:	9305      	str	r3, [sp, #20]
    status = atcab_base64encode_((uint8_t*)(jwt->buf + jwt->buflen - jwt->cur), rem,
    6ff2:	6820      	ldr	r0, [r4, #0]
    6ff4:	1942      	adds	r2, r0, r5
    6ff6:	88e1      	ldrh	r1, [r4, #6]
    6ff8:	1a5b      	subs	r3, r3, r1
    6ffa:	18c0      	adds	r0, r0, r3
    6ffc:	4b2b      	ldr	r3, [pc, #172]	; (70ac <atca_jwt_finalize+0x154>)
    6ffe:	9300      	str	r3, [sp, #0]
    7000:	ab05      	add	r3, sp, #20
    7002:	4649      	mov	r1, r9
    7004:	4e2a      	ldr	r6, [pc, #168]	; (70b0 <atca_jwt_finalize+0x158>)
    7006:	47b0      	blx	r6
    7008:	1e06      	subs	r6, r0, #0
    if (ATCA_SUCCESS != status)
    700a:	d1b5      	bne.n	6f78 <atca_jwt_finalize+0x20>
    jwt->cur = (uint16_t)(i + tSize);
    700c:	9b05      	ldr	r3, [sp, #20]
    700e:	469c      	mov	ip, r3
    7010:	4465      	add	r5, ip
    7012:	b2a9      	uxth	r1, r5
    7014:	80e1      	strh	r1, [r4, #6]
    if (jwt->cur >= jwt->buflen - 88)
    7016:	88a3      	ldrh	r3, [r4, #4]
    7018:	001a      	movs	r2, r3
    701a:	3a58      	subs	r2, #88	; 0x58
        return ATCA_INVALID_SIZE;
    701c:	36e4      	adds	r6, #228	; 0xe4
    if (jwt->cur >= jwt->buflen - 88)
    701e:	4291      	cmp	r1, r2
    7020:	daaa      	bge.n	6f78 <atca_jwt_finalize+0x20>
    status = atcac_sw_sha2_256((const uint8_t*)jwt->buf, jwt->cur, (uint8_t*)(jwt->buf + jwt->buflen - 32));
    7022:	3b20      	subs	r3, #32
    7024:	6822      	ldr	r2, [r4, #0]
    7026:	18d2      	adds	r2, r2, r3
    7028:	6820      	ldr	r0, [r4, #0]
    702a:	4b22      	ldr	r3, [pc, #136]	; (70b4 <atca_jwt_finalize+0x15c>)
    702c:	4798      	blx	r3
    702e:	b2c6      	uxtb	r6, r0
    if (ATCA_SUCCESS != status)
    7030:	2e00      	cmp	r6, #0
    7032:	d1a1      	bne.n	6f78 <atca_jwt_finalize+0x20>
    status = atcab_sign(key_id, (const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SHA_DIGEST_SIZE),
    7034:	6823      	ldr	r3, [r4, #0]
    7036:	88a1      	ldrh	r1, [r4, #4]
                        (uint8_t*)(jwt->buf + jwt->buflen - 64));
    7038:	000a      	movs	r2, r1
    703a:	3a40      	subs	r2, #64	; 0x40
    703c:	189a      	adds	r2, r3, r2
    status = atcab_sign(key_id, (const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SHA_DIGEST_SIZE),
    703e:	3920      	subs	r1, #32
    7040:	1859      	adds	r1, r3, r1
    7042:	9803      	ldr	r0, [sp, #12]
    7044:	4b1c      	ldr	r3, [pc, #112]	; (70b8 <atca_jwt_finalize+0x160>)
    7046:	4798      	blx	r3
    7048:	1e06      	subs	r6, r0, #0
    if (ATCA_SUCCESS != status)
    704a:	d000      	beq.n	704e <atca_jwt_finalize+0xf6>
    704c:	e794      	b.n	6f78 <atca_jwt_finalize+0x20>
    jwt->buf[jwt->cur++] = '.';
    704e:	88e3      	ldrh	r3, [r4, #6]
    7050:	1c5a      	adds	r2, r3, #1
    7052:	80e2      	strh	r2, [r4, #6]
    7054:	222e      	movs	r2, #46	; 0x2e
    7056:	6821      	ldr	r1, [r4, #0]
    7058:	54ca      	strb	r2, [r1, r3]
    tSize = jwt->buflen - jwt->cur;
    705a:	88a0      	ldrh	r0, [r4, #4]
    705c:	88e2      	ldrh	r2, [r4, #6]
    705e:	1a83      	subs	r3, r0, r2
    7060:	9305      	str	r3, [sp, #20]
    atcab_base64encode_((const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SIG_SIZE), ATCA_SIG_SIZE,
    7062:	6823      	ldr	r3, [r4, #0]
    7064:	189a      	adds	r2, r3, r2
    7066:	3840      	subs	r0, #64	; 0x40
    7068:	1818      	adds	r0, r3, r0
    706a:	4b10      	ldr	r3, [pc, #64]	; (70ac <atca_jwt_finalize+0x154>)
    706c:	9300      	str	r3, [sp, #0]
    706e:	ab05      	add	r3, sp, #20
    7070:	2140      	movs	r1, #64	; 0x40
    7072:	4d0f      	ldr	r5, [pc, #60]	; (70b0 <atca_jwt_finalize+0x158>)
    7074:	47a8      	blx	r5
    jwt->cur += (uint16_t)tSize;
    7076:	88e3      	ldrh	r3, [r4, #6]
    7078:	9a05      	ldr	r2, [sp, #20]
    707a:	4694      	mov	ip, r2
    707c:	4463      	add	r3, ip
    707e:	b29b      	uxth	r3, r3
    7080:	80e3      	strh	r3, [r4, #6]
    if (jwt->cur >= jwt->buflen)
    7082:	88a2      	ldrh	r2, [r4, #4]
    7084:	429a      	cmp	r2, r3
    7086:	d90b      	bls.n	70a0 <atca_jwt_finalize+0x148>
    jwt->buf[jwt->cur] = 0;
    7088:	6822      	ldr	r2, [r4, #0]
    708a:	2100      	movs	r1, #0
    708c:	54d1      	strb	r1, [r2, r3]
    return status;
    708e:	e773      	b.n	6f78 <atca_jwt_finalize+0x20>
    for (i = 0; i < jwt->cur; i++)
    7090:	2500      	movs	r5, #0
    7092:	e795      	b.n	6fc0 <atca_jwt_finalize+0x68>
    7094:	003d      	movs	r5, r7
    7096:	e795      	b.n	6fc4 <atca_jwt_finalize+0x6c>
        return ATCA_BAD_PARAM;
    7098:	26e2      	movs	r6, #226	; 0xe2
    709a:	e76d      	b.n	6f78 <atca_jwt_finalize+0x20>
    709c:	26e2      	movs	r6, #226	; 0xe2
    709e:	e76b      	b.n	6f78 <atca_jwt_finalize+0x20>
        return ATCA_INVALID_SIZE;
    70a0:	26e4      	movs	r6, #228	; 0xe4
    70a2:	e769      	b.n	6f78 <atca_jwt_finalize+0x20>
    70a4:	0000e565 	.word	0x0000e565
    70a8:	000109db 	.word	0x000109db
    70ac:	20000114 	.word	0x20000114
    70b0:	000037f9 	.word	0x000037f9
    70b4:	00006599 	.word	0x00006599
    70b8:	00006545 	.word	0x00006545

000070bc <atca_jwt_add_claim_string>:
ATCA_STATUS atca_jwt_add_claim_string(
    atca_jwt_t* jwt,    /**< [in] JWT Context to use */
    const char* claim,  /**< [in] Name of the claim to be inserted */
    const char* value   /**< [in] Null terminated string to be insterted */
    )
{
    70bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    70be:	b083      	sub	sp, #12
    70c0:	0004      	movs	r4, r0
    70c2:	000d      	movs	r5, r1
    70c4:	0016      	movs	r6, r2
    int32_t written;
    int32_t remaining;

    if (jwt && jwt->buf && jwt->buflen && claim && value)
    70c6:	2800      	cmp	r0, #0
    70c8:	d026      	beq.n	7118 <atca_jwt_add_claim_string+0x5c>
    70ca:	6803      	ldr	r3, [r0, #0]
    70cc:	2b00      	cmp	r3, #0
    70ce:	d025      	beq.n	711c <atca_jwt_add_claim_string+0x60>
    70d0:	8883      	ldrh	r3, [r0, #4]
            return ATCA_GEN_FAIL;
        }
    }
    else
    {
        return ATCA_BAD_PARAM;
    70d2:	20e2      	movs	r0, #226	; 0xe2
    if (jwt && jwt->buf && jwt->buflen && claim && value)
    70d4:	2b00      	cmp	r3, #0
    70d6:	d101      	bne.n	70dc <atca_jwt_add_claim_string+0x20>
    }
}
    70d8:	b003      	add	sp, #12
    70da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (jwt && jwt->buf && jwt->buflen && claim && value)
    70dc:	2900      	cmp	r1, #0
    70de:	d01f      	beq.n	7120 <atca_jwt_add_claim_string+0x64>
    70e0:	2a00      	cmp	r2, #0
    70e2:	d0f9      	beq.n	70d8 <atca_jwt_add_claim_string+0x1c>
        atca_jwt_check_payload_start(jwt);
    70e4:	0020      	movs	r0, r4
    70e6:	4b0f      	ldr	r3, [pc, #60]	; (7124 <atca_jwt_add_claim_string+0x68>)
    70e8:	4798      	blx	r3
        remaining = jwt->buflen - jwt->cur;
    70ea:	88e0      	ldrh	r0, [r4, #6]
    70ec:	88a7      	ldrh	r7, [r4, #4]
    70ee:	1a3f      	subs	r7, r7, r0
        written = snprintf(&jwt->buf[jwt->cur], remaining, "\"%s\":\"%s\"", claim, value);
    70f0:	6823      	ldr	r3, [r4, #0]
    70f2:	469c      	mov	ip, r3
    70f4:	4460      	add	r0, ip
    70f6:	9600      	str	r6, [sp, #0]
    70f8:	002b      	movs	r3, r5
    70fa:	4a0b      	ldr	r2, [pc, #44]	; (7128 <atca_jwt_add_claim_string+0x6c>)
    70fc:	0039      	movs	r1, r7
    70fe:	4d0b      	ldr	r5, [pc, #44]	; (712c <atca_jwt_add_claim_string+0x70>)
    7100:	47a8      	blx	r5
    7102:	0003      	movs	r3, r0
            return ATCA_GEN_FAIL;
    7104:	20e1      	movs	r0, #225	; 0xe1
        if (0 < written && written < remaining)
    7106:	2b00      	cmp	r3, #0
    7108:	dde6      	ble.n	70d8 <atca_jwt_add_claim_string+0x1c>
    710a:	429f      	cmp	r7, r3
    710c:	dde4      	ble.n	70d8 <atca_jwt_add_claim_string+0x1c>
            jwt->cur += written;
    710e:	88e0      	ldrh	r0, [r4, #6]
    7110:	18c3      	adds	r3, r0, r3
    7112:	80e3      	strh	r3, [r4, #6]
            return ATCA_SUCCESS;
    7114:	2000      	movs	r0, #0
    7116:	e7df      	b.n	70d8 <atca_jwt_add_claim_string+0x1c>
        return ATCA_BAD_PARAM;
    7118:	20e2      	movs	r0, #226	; 0xe2
    711a:	e7dd      	b.n	70d8 <atca_jwt_add_claim_string+0x1c>
    711c:	20e2      	movs	r0, #226	; 0xe2
    711e:	e7db      	b.n	70d8 <atca_jwt_add_claim_string+0x1c>
    7120:	20e2      	movs	r0, #226	; 0xe2
    7122:	e7d9      	b.n	70d8 <atca_jwt_add_claim_string+0x1c>
    7124:	00006eb1 	.word	0x00006eb1
    7128:	00014df0 	.word	0x00014df0
    712c:	00010e21 	.word	0x00010e21

00007130 <atca_jwt_add_claim_numeric>:
ATCA_STATUS atca_jwt_add_claim_numeric(
    atca_jwt_t* jwt,    /**< [in] JWT Context to use */
    const char* claim,  /**< [in] Name of the claim to be inserted */
    int32_t     value   /**< [in] integer value to be inserted */
    )
{
    7130:	b5f0      	push	{r4, r5, r6, r7, lr}
    7132:	b083      	sub	sp, #12
    7134:	0004      	movs	r4, r0
    7136:	000d      	movs	r5, r1
    7138:	0016      	movs	r6, r2
    int32_t written;
    int32_t remaining;

    if (jwt && jwt->buf && jwt->buflen && claim)
    713a:	2800      	cmp	r0, #0
    713c:	d024      	beq.n	7188 <atca_jwt_add_claim_numeric+0x58>
    713e:	6803      	ldr	r3, [r0, #0]
    7140:	2b00      	cmp	r3, #0
    7142:	d023      	beq.n	718c <atca_jwt_add_claim_numeric+0x5c>
    7144:	8883      	ldrh	r3, [r0, #4]
            return ATCA_GEN_FAIL;
        }
    }
    else
    {
        return ATCA_BAD_PARAM;
    7146:	20e2      	movs	r0, #226	; 0xe2
    if (jwt && jwt->buf && jwt->buflen && claim)
    7148:	2b00      	cmp	r3, #0
    714a:	d101      	bne.n	7150 <atca_jwt_add_claim_numeric+0x20>
    }
}
    714c:	b003      	add	sp, #12
    714e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (jwt && jwt->buf && jwt->buflen && claim)
    7150:	2900      	cmp	r1, #0
    7152:	d0fb      	beq.n	714c <atca_jwt_add_claim_numeric+0x1c>
        atca_jwt_check_payload_start(jwt);
    7154:	0020      	movs	r0, r4
    7156:	4b0e      	ldr	r3, [pc, #56]	; (7190 <atca_jwt_add_claim_numeric+0x60>)
    7158:	4798      	blx	r3
        remaining = jwt->buflen - jwt->cur;
    715a:	88e0      	ldrh	r0, [r4, #6]
    715c:	88a7      	ldrh	r7, [r4, #4]
    715e:	1a3f      	subs	r7, r7, r0
        written = snprintf(&jwt->buf[jwt->cur], remaining, "\"%s\":%d", claim, value);
    7160:	6823      	ldr	r3, [r4, #0]
    7162:	469c      	mov	ip, r3
    7164:	4460      	add	r0, ip
    7166:	9600      	str	r6, [sp, #0]
    7168:	002b      	movs	r3, r5
    716a:	4a0a      	ldr	r2, [pc, #40]	; (7194 <atca_jwt_add_claim_numeric+0x64>)
    716c:	0039      	movs	r1, r7
    716e:	4d0a      	ldr	r5, [pc, #40]	; (7198 <atca_jwt_add_claim_numeric+0x68>)
    7170:	47a8      	blx	r5
    7172:	0003      	movs	r3, r0
            return ATCA_GEN_FAIL;
    7174:	20e1      	movs	r0, #225	; 0xe1
        if (0 < written && written < remaining)
    7176:	2b00      	cmp	r3, #0
    7178:	dde8      	ble.n	714c <atca_jwt_add_claim_numeric+0x1c>
    717a:	429f      	cmp	r7, r3
    717c:	dde6      	ble.n	714c <atca_jwt_add_claim_numeric+0x1c>
            jwt->cur += written;
    717e:	88e0      	ldrh	r0, [r4, #6]
    7180:	18c3      	adds	r3, r0, r3
    7182:	80e3      	strh	r3, [r4, #6]
            return 0;
    7184:	2000      	movs	r0, #0
    7186:	e7e1      	b.n	714c <atca_jwt_add_claim_numeric+0x1c>
        return ATCA_BAD_PARAM;
    7188:	20e2      	movs	r0, #226	; 0xe2
    718a:	e7df      	b.n	714c <atca_jwt_add_claim_numeric+0x1c>
    718c:	20e2      	movs	r0, #226	; 0xe2
    718e:	e7dd      	b.n	714c <atca_jwt_add_claim_numeric+0x1c>
    7190:	00006eb1 	.word	0x00006eb1
    7194:	00014de8 	.word	0x00014de8
    7198:	00010e21 	.word	0x00010e21

0000719c <initialise_led>:
	port_pin_set_output_level(GREEN_LED, 1);
	port_pin_set_output_level(RED_LED, 1);
}

void initialise_led(void)
{
    719c:	b570      	push	{r4, r5, r6, lr}
    719e:	b082      	sub	sp, #8
	gu8Blue = 0;
    71a0:	4e1f      	ldr	r6, [pc, #124]	; (7220 <initialise_led+0x84>)
    71a2:	2200      	movs	r2, #0
    71a4:	7032      	strb	r2, [r6, #0]
	gu8Green = 1;
    71a6:	2301      	movs	r3, #1
    71a8:	491e      	ldr	r1, [pc, #120]	; (7224 <initialise_led+0x88>)
    71aa:	700b      	strb	r3, [r1, #0]
	gu8Red = 1;
    71ac:	491e      	ldr	r1, [pc, #120]	; (7228 <initialise_led+0x8c>)
    71ae:	700b      	strb	r3, [r1, #0]
	gu8Color = LED_COLOR_BLUE;
    71b0:	491e      	ldr	r1, [pc, #120]	; (722c <initialise_led+0x90>)
    71b2:	700a      	strb	r2, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    71b4:	ac01      	add	r4, sp, #4
    71b6:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    71b8:	70a2      	strb	r2, [r4, #2]
	
	/* led port pin initialization */
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    71ba:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(BLUE_LED, &config_port_pin);
    71bc:	0021      	movs	r1, r4
    71be:	2013      	movs	r0, #19
    71c0:	4d1b      	ldr	r5, [pc, #108]	; (7230 <initialise_led+0x94>)
    71c2:	47a8      	blx	r5
	port_pin_set_config(GREEN_LED, &config_port_pin);
    71c4:	0021      	movs	r1, r4
    71c6:	200f      	movs	r0, #15
    71c8:	47a8      	blx	r5
	port_pin_set_config(RED_LED, &config_port_pin);
    71ca:	0021      	movs	r1, r4
    71cc:	200e      	movs	r0, #14
    71ce:	47a8      	blx	r5
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    71d0:	7833      	ldrb	r3, [r6, #0]
    71d2:	2b00      	cmp	r3, #0
    71d4:	d015      	beq.n	7202 <initialise_led+0x66>
		port_base->OUTSET.reg = pin_mask;
    71d6:	2280      	movs	r2, #128	; 0x80
    71d8:	0312      	lsls	r2, r2, #12
    71da:	4b16      	ldr	r3, [pc, #88]	; (7234 <initialise_led+0x98>)
    71dc:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(BLUE_LED, gu8Blue);
	port_pin_set_output_level(GREEN_LED, gu8Green);
    71de:	4b11      	ldr	r3, [pc, #68]	; (7224 <initialise_led+0x88>)
	if (level) {
    71e0:	781b      	ldrb	r3, [r3, #0]
    71e2:	2b00      	cmp	r3, #0
    71e4:	d012      	beq.n	720c <initialise_led+0x70>
		port_base->OUTSET.reg = pin_mask;
    71e6:	2280      	movs	r2, #128	; 0x80
    71e8:	0212      	lsls	r2, r2, #8
    71ea:	4b12      	ldr	r3, [pc, #72]	; (7234 <initialise_led+0x98>)
    71ec:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(RED_LED, gu8Red);
    71ee:	4b0e      	ldr	r3, [pc, #56]	; (7228 <initialise_led+0x8c>)
	if (level) {
    71f0:	781b      	ldrb	r3, [r3, #0]
    71f2:	2b00      	cmp	r3, #0
    71f4:	d10f      	bne.n	7216 <initialise_led+0x7a>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    71f6:	2280      	movs	r2, #128	; 0x80
    71f8:	01d2      	lsls	r2, r2, #7
    71fa:	4b0e      	ldr	r3, [pc, #56]	; (7234 <initialise_led+0x98>)
    71fc:	615a      	str	r2, [r3, #20]
}
    71fe:	b002      	add	sp, #8
    7200:	bd70      	pop	{r4, r5, r6, pc}
    7202:	2280      	movs	r2, #128	; 0x80
    7204:	0312      	lsls	r2, r2, #12
    7206:	4b0b      	ldr	r3, [pc, #44]	; (7234 <initialise_led+0x98>)
    7208:	615a      	str	r2, [r3, #20]
    720a:	e7e8      	b.n	71de <initialise_led+0x42>
    720c:	2280      	movs	r2, #128	; 0x80
    720e:	0212      	lsls	r2, r2, #8
    7210:	4b08      	ldr	r3, [pc, #32]	; (7234 <initialise_led+0x98>)
    7212:	615a      	str	r2, [r3, #20]
    7214:	e7eb      	b.n	71ee <initialise_led+0x52>
		port_base->OUTSET.reg = pin_mask;
    7216:	2280      	movs	r2, #128	; 0x80
    7218:	01d2      	lsls	r2, r2, #7
    721a:	4b06      	ldr	r3, [pc, #24]	; (7234 <initialise_led+0x98>)
    721c:	619a      	str	r2, [r3, #24]
    721e:	e7ee      	b.n	71fe <initialise_led+0x62>
    7220:	20002b26 	.word	0x20002b26
    7224:	20002b24 	.word	0x20002b24
    7228:	20002b28 	.word	0x20002b28
    722c:	20002b27 	.word	0x20002b27
    7230:	0000d979 	.word	0x0000d979
    7234:	40002800 	.word	0x40002800

00007238 <led_ctrl_set_color>:
}


void led_ctrl_set_color(Led_Color color, Led_Mode mode)
{
	switch(color)
    7238:	2806      	cmp	r0, #6
    723a:	d80d      	bhi.n	7258 <led_ctrl_set_color+0x20>
    723c:	0080      	lsls	r0, r0, #2
    723e:	4b42      	ldr	r3, [pc, #264]	; (7348 <led_ctrl_set_color+0x110>)
    7240:	581b      	ldr	r3, [r3, r0]
    7242:	469f      	mov	pc, r3
	{
		case LED_COLOR_BLUE:
		gu8Blue = 0;
    7244:	2300      	movs	r3, #0
    7246:	4a41      	ldr	r2, [pc, #260]	; (734c <led_ctrl_set_color+0x114>)
    7248:	7013      	strb	r3, [r2, #0]
		gu8Green = 1;
    724a:	2201      	movs	r2, #1
    724c:	4840      	ldr	r0, [pc, #256]	; (7350 <led_ctrl_set_color+0x118>)
    724e:	7002      	strb	r2, [r0, #0]
		gu8Red = 1;
    7250:	4840      	ldr	r0, [pc, #256]	; (7354 <led_ctrl_set_color+0x11c>)
    7252:	7002      	strb	r2, [r0, #0]
		gu8Color = LED_COLOR_BLUE;
    7254:	4a40      	ldr	r2, [pc, #256]	; (7358 <led_ctrl_set_color+0x120>)
    7256:	7013      	strb	r3, [r2, #0]
		default:
		break;
		
	}
	
	if (mode == LED_MODE_NONE)
    7258:	2900      	cmp	r1, #0
    725a:	d171      	bne.n	7340 <led_ctrl_set_color+0x108>
	{
		if (gu8OnOffState == 1)
    725c:	4b3f      	ldr	r3, [pc, #252]	; (735c <led_ctrl_set_color+0x124>)
    725e:	781b      	ldrb	r3, [r3, #0]
    7260:	2b01      	cmp	r3, #1
    7262:	d16f      	bne.n	7344 <led_ctrl_set_color+0x10c>
	port_pin_set_output_level(BLUE_LED, gu8Blue);
    7264:	4b39      	ldr	r3, [pc, #228]	; (734c <led_ctrl_set_color+0x114>)
	if (level) {
    7266:	781b      	ldrb	r3, [r3, #0]
    7268:	2b00      	cmp	r3, #0
    726a:	d05a      	beq.n	7322 <led_ctrl_set_color+0xea>
		port_base->OUTSET.reg = pin_mask;
    726c:	2280      	movs	r2, #128	; 0x80
    726e:	0312      	lsls	r2, r2, #12
    7270:	4b3b      	ldr	r3, [pc, #236]	; (7360 <led_ctrl_set_color+0x128>)
    7272:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(GREEN_LED, gu8Green);
    7274:	4b36      	ldr	r3, [pc, #216]	; (7350 <led_ctrl_set_color+0x118>)
	if (level) {
    7276:	781b      	ldrb	r3, [r3, #0]
    7278:	2b00      	cmp	r3, #0
    727a:	d057      	beq.n	732c <led_ctrl_set_color+0xf4>
		port_base->OUTSET.reg = pin_mask;
    727c:	2280      	movs	r2, #128	; 0x80
    727e:	0212      	lsls	r2, r2, #8
    7280:	4b37      	ldr	r3, [pc, #220]	; (7360 <led_ctrl_set_color+0x128>)
    7282:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(RED_LED, gu8Red);
    7284:	4b33      	ldr	r3, [pc, #204]	; (7354 <led_ctrl_set_color+0x11c>)
	if (level) {
    7286:	781b      	ldrb	r3, [r3, #0]
    7288:	2b00      	cmp	r3, #0
    728a:	d154      	bne.n	7336 <led_ctrl_set_color+0xfe>
		port_base->OUTCLR.reg = pin_mask;
    728c:	2280      	movs	r2, #128	; 0x80
    728e:	01d2      	lsls	r2, r2, #7
    7290:	4b33      	ldr	r3, [pc, #204]	; (7360 <led_ctrl_set_color+0x128>)
    7292:	615a      	str	r2, [r3, #20]
    7294:	e056      	b.n	7344 <led_ctrl_set_color+0x10c>
		gu8Blue = 1;
    7296:	2301      	movs	r3, #1
    7298:	4a2c      	ldr	r2, [pc, #176]	; (734c <led_ctrl_set_color+0x114>)
    729a:	7013      	strb	r3, [r2, #0]
		gu8Green = 0;
    729c:	2000      	movs	r0, #0
    729e:	4a2c      	ldr	r2, [pc, #176]	; (7350 <led_ctrl_set_color+0x118>)
    72a0:	7010      	strb	r0, [r2, #0]
		gu8Red = 1;
    72a2:	4a2c      	ldr	r2, [pc, #176]	; (7354 <led_ctrl_set_color+0x11c>)
    72a4:	7013      	strb	r3, [r2, #0]
		gu8Color = LED_COLOR_GREEN;
    72a6:	4a2c      	ldr	r2, [pc, #176]	; (7358 <led_ctrl_set_color+0x120>)
    72a8:	7013      	strb	r3, [r2, #0]
		break;
    72aa:	e7d5      	b.n	7258 <led_ctrl_set_color+0x20>
		gu8Blue = 1;
    72ac:	2301      	movs	r3, #1
    72ae:	4a27      	ldr	r2, [pc, #156]	; (734c <led_ctrl_set_color+0x114>)
    72b0:	7013      	strb	r3, [r2, #0]
		gu8Green = 1;
    72b2:	4a27      	ldr	r2, [pc, #156]	; (7350 <led_ctrl_set_color+0x118>)
    72b4:	7013      	strb	r3, [r2, #0]
		gu8Red = 0;
    72b6:	2200      	movs	r2, #0
    72b8:	4b26      	ldr	r3, [pc, #152]	; (7354 <led_ctrl_set_color+0x11c>)
    72ba:	701a      	strb	r2, [r3, #0]
		gu8Color = LED_COLOR_RED;
    72bc:	3202      	adds	r2, #2
    72be:	4b26      	ldr	r3, [pc, #152]	; (7358 <led_ctrl_set_color+0x120>)
    72c0:	701a      	strb	r2, [r3, #0]
		break;
    72c2:	e7c9      	b.n	7258 <led_ctrl_set_color+0x20>
		gu8Blue = 1;
    72c4:	2201      	movs	r2, #1
    72c6:	4b21      	ldr	r3, [pc, #132]	; (734c <led_ctrl_set_color+0x114>)
    72c8:	701a      	strb	r2, [r3, #0]
		gu8Green = 0;
    72ca:	2300      	movs	r3, #0
    72cc:	4a20      	ldr	r2, [pc, #128]	; (7350 <led_ctrl_set_color+0x118>)
    72ce:	7013      	strb	r3, [r2, #0]
		gu8Red = 0;
    72d0:	4a20      	ldr	r2, [pc, #128]	; (7354 <led_ctrl_set_color+0x11c>)
    72d2:	7013      	strb	r3, [r2, #0]
		gu8Color = LED_COLOR_YELLOW;
    72d4:	2203      	movs	r2, #3
    72d6:	4b20      	ldr	r3, [pc, #128]	; (7358 <led_ctrl_set_color+0x120>)
    72d8:	701a      	strb	r2, [r3, #0]
		break;
    72da:	e7bd      	b.n	7258 <led_ctrl_set_color+0x20>
		gu8Blue = 0;
    72dc:	2300      	movs	r3, #0
    72de:	4a1b      	ldr	r2, [pc, #108]	; (734c <led_ctrl_set_color+0x114>)
    72e0:	7013      	strb	r3, [r2, #0]
		gu8Green = 1;
    72e2:	2001      	movs	r0, #1
    72e4:	4a1a      	ldr	r2, [pc, #104]	; (7350 <led_ctrl_set_color+0x118>)
    72e6:	7010      	strb	r0, [r2, #0]
		gu8Red = 0;
    72e8:	4a1a      	ldr	r2, [pc, #104]	; (7354 <led_ctrl_set_color+0x11c>)
    72ea:	7013      	strb	r3, [r2, #0]
		gu8Color = LED_COLOR_Magneta;
    72ec:	2204      	movs	r2, #4
    72ee:	4b1a      	ldr	r3, [pc, #104]	; (7358 <led_ctrl_set_color+0x120>)
    72f0:	701a      	strb	r2, [r3, #0]
		break;
    72f2:	e7b1      	b.n	7258 <led_ctrl_set_color+0x20>
		gu8Blue = 0;
    72f4:	2300      	movs	r3, #0
    72f6:	4a15      	ldr	r2, [pc, #84]	; (734c <led_ctrl_set_color+0x114>)
    72f8:	7013      	strb	r3, [r2, #0]
		gu8Green = 0;
    72fa:	4a15      	ldr	r2, [pc, #84]	; (7350 <led_ctrl_set_color+0x118>)
    72fc:	7013      	strb	r3, [r2, #0]
		gu8Red = 1;
    72fe:	2201      	movs	r2, #1
    7300:	4b14      	ldr	r3, [pc, #80]	; (7354 <led_ctrl_set_color+0x11c>)
    7302:	701a      	strb	r2, [r3, #0]
		gu8Color = LED_COLOR_Cyan;
    7304:	3204      	adds	r2, #4
    7306:	4b14      	ldr	r3, [pc, #80]	; (7358 <led_ctrl_set_color+0x120>)
    7308:	701a      	strb	r2, [r3, #0]
		break;
    730a:	e7a5      	b.n	7258 <led_ctrl_set_color+0x20>
		gu8Blue = 1;
    730c:	2301      	movs	r3, #1
    730e:	4a0f      	ldr	r2, [pc, #60]	; (734c <led_ctrl_set_color+0x114>)
    7310:	7013      	strb	r3, [r2, #0]
		gu8Green = 1;
    7312:	4a0f      	ldr	r2, [pc, #60]	; (7350 <led_ctrl_set_color+0x118>)
    7314:	7013      	strb	r3, [r2, #0]
		gu8Red = 1;
    7316:	4a0f      	ldr	r2, [pc, #60]	; (7354 <led_ctrl_set_color+0x11c>)
    7318:	7013      	strb	r3, [r2, #0]
		gu8Color = LED_COLOR_WHTIE;
    731a:	2206      	movs	r2, #6
    731c:	4b0e      	ldr	r3, [pc, #56]	; (7358 <led_ctrl_set_color+0x120>)
    731e:	701a      	strb	r2, [r3, #0]
		break;
    7320:	e79a      	b.n	7258 <led_ctrl_set_color+0x20>
    7322:	2280      	movs	r2, #128	; 0x80
    7324:	0312      	lsls	r2, r2, #12
    7326:	4b0e      	ldr	r3, [pc, #56]	; (7360 <led_ctrl_set_color+0x128>)
    7328:	615a      	str	r2, [r3, #20]
    732a:	e7a3      	b.n	7274 <led_ctrl_set_color+0x3c>
    732c:	2280      	movs	r2, #128	; 0x80
    732e:	0212      	lsls	r2, r2, #8
    7330:	4b0b      	ldr	r3, [pc, #44]	; (7360 <led_ctrl_set_color+0x128>)
    7332:	615a      	str	r2, [r3, #20]
    7334:	e7a6      	b.n	7284 <led_ctrl_set_color+0x4c>
		port_base->OUTSET.reg = pin_mask;
    7336:	2280      	movs	r2, #128	; 0x80
    7338:	01d2      	lsls	r2, r2, #7
    733a:	4b09      	ldr	r3, [pc, #36]	; (7360 <led_ctrl_set_color+0x128>)
    733c:	619a      	str	r2, [r3, #24]
    733e:	e001      	b.n	7344 <led_ctrl_set_color+0x10c>
		turnOnLED();	// color change take effect
		return;
	}
	
	gu8LedMode = mode;
    7340:	4b08      	ldr	r3, [pc, #32]	; (7364 <led_ctrl_set_color+0x12c>)
    7342:	7019      	strb	r1, [r3, #0]
	
}
    7344:	4770      	bx	lr
    7346:	46c0      	nop			; (mov r8, r8)
    7348:	00014e18 	.word	0x00014e18
    734c:	20002b26 	.word	0x20002b26
    7350:	20002b24 	.word	0x20002b24
    7354:	20002b28 	.word	0x20002b28
    7358:	20002b27 	.word	0x20002b27
    735c:	20002b25 	.word	0x20002b25
    7360:	40002800 	.word	0x40002800
    7364:	20002b29 	.word	0x20002b29

00007368 <led_ctrl_set_mode>:

void led_ctrl_set_mode(Led_Mode mode)
{
	gu8LedMode = mode;
    7368:	4b1f      	ldr	r3, [pc, #124]	; (73e8 <led_ctrl_set_mode+0x80>)
    736a:	7018      	strb	r0, [r3, #0]
	switch (mode)
    736c:	2801      	cmp	r0, #1
    736e:	d002      	beq.n	7376 <led_ctrl_set_mode+0xe>
    7370:	2802      	cmp	r0, #2
    7372:	d00e      	beq.n	7392 <led_ctrl_set_mode+0x2a>
		
		default:
		break;
	}

}
    7374:	4770      	bx	lr
	gu8OnOffState = 0;
    7376:	2200      	movs	r2, #0
    7378:	4b1c      	ldr	r3, [pc, #112]	; (73ec <led_ctrl_set_mode+0x84>)
    737a:	701a      	strb	r2, [r3, #0]
    737c:	4b1c      	ldr	r3, [pc, #112]	; (73f0 <led_ctrl_set_mode+0x88>)
    737e:	2280      	movs	r2, #128	; 0x80
    7380:	0312      	lsls	r2, r2, #12
    7382:	619a      	str	r2, [r3, #24]
    7384:	2280      	movs	r2, #128	; 0x80
    7386:	0212      	lsls	r2, r2, #8
    7388:	619a      	str	r2, [r3, #24]
    738a:	2280      	movs	r2, #128	; 0x80
    738c:	01d2      	lsls	r2, r2, #7
    738e:	619a      	str	r2, [r3, #24]
    7390:	e7f0      	b.n	7374 <led_ctrl_set_mode+0xc>
	gu8OnOffState = 1;
    7392:	2201      	movs	r2, #1
    7394:	4b15      	ldr	r3, [pc, #84]	; (73ec <led_ctrl_set_mode+0x84>)
    7396:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(BLUE_LED, gu8Blue);
    7398:	4b16      	ldr	r3, [pc, #88]	; (73f4 <led_ctrl_set_mode+0x8c>)
	if (level) {
    739a:	781b      	ldrb	r3, [r3, #0]
    739c:	2b00      	cmp	r3, #0
    739e:	d014      	beq.n	73ca <led_ctrl_set_mode+0x62>
		port_base->OUTSET.reg = pin_mask;
    73a0:	2280      	movs	r2, #128	; 0x80
    73a2:	0312      	lsls	r2, r2, #12
    73a4:	4b12      	ldr	r3, [pc, #72]	; (73f0 <led_ctrl_set_mode+0x88>)
    73a6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(GREEN_LED, gu8Green);
    73a8:	4b13      	ldr	r3, [pc, #76]	; (73f8 <led_ctrl_set_mode+0x90>)
	if (level) {
    73aa:	781b      	ldrb	r3, [r3, #0]
    73ac:	2b00      	cmp	r3, #0
    73ae:	d011      	beq.n	73d4 <led_ctrl_set_mode+0x6c>
		port_base->OUTSET.reg = pin_mask;
    73b0:	2280      	movs	r2, #128	; 0x80
    73b2:	0212      	lsls	r2, r2, #8
    73b4:	4b0e      	ldr	r3, [pc, #56]	; (73f0 <led_ctrl_set_mode+0x88>)
    73b6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(RED_LED, gu8Red);
    73b8:	4b10      	ldr	r3, [pc, #64]	; (73fc <led_ctrl_set_mode+0x94>)
	if (level) {
    73ba:	781b      	ldrb	r3, [r3, #0]
    73bc:	2b00      	cmp	r3, #0
    73be:	d10e      	bne.n	73de <led_ctrl_set_mode+0x76>
		port_base->OUTCLR.reg = pin_mask;
    73c0:	2280      	movs	r2, #128	; 0x80
    73c2:	01d2      	lsls	r2, r2, #7
    73c4:	4b0a      	ldr	r3, [pc, #40]	; (73f0 <led_ctrl_set_mode+0x88>)
    73c6:	615a      	str	r2, [r3, #20]
}
    73c8:	e7d4      	b.n	7374 <led_ctrl_set_mode+0xc>
    73ca:	2280      	movs	r2, #128	; 0x80
    73cc:	0312      	lsls	r2, r2, #12
    73ce:	4b08      	ldr	r3, [pc, #32]	; (73f0 <led_ctrl_set_mode+0x88>)
    73d0:	615a      	str	r2, [r3, #20]
    73d2:	e7e9      	b.n	73a8 <led_ctrl_set_mode+0x40>
    73d4:	2280      	movs	r2, #128	; 0x80
    73d6:	0212      	lsls	r2, r2, #8
    73d8:	4b05      	ldr	r3, [pc, #20]	; (73f0 <led_ctrl_set_mode+0x88>)
    73da:	615a      	str	r2, [r3, #20]
    73dc:	e7ec      	b.n	73b8 <led_ctrl_set_mode+0x50>
		port_base->OUTSET.reg = pin_mask;
    73de:	2280      	movs	r2, #128	; 0x80
    73e0:	01d2      	lsls	r2, r2, #7
    73e2:	4b03      	ldr	r3, [pc, #12]	; (73f0 <led_ctrl_set_mode+0x88>)
    73e4:	619a      	str	r2, [r3, #24]
    73e6:	e7c5      	b.n	7374 <led_ctrl_set_mode+0xc>
    73e8:	20002b29 	.word	0x20002b29
    73ec:	20002b25 	.word	0x20002b25
    73f0:	40002800 	.word	0x40002800
    73f4:	20002b26 	.word	0x20002b26
    73f8:	20002b24 	.word	0x20002b24
    73fc:	20002b28 	.word	0x20002b28

00007400 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
    7400:	b5f0      	push	{r4, r5, r6, r7, lr}
    7402:	46de      	mov	lr, fp
    7404:	4657      	mov	r7, sl
    7406:	464e      	mov	r6, r9
    7408:	4645      	mov	r5, r8
    740a:	b5e0      	push	{r5, r6, r7, lr}
    740c:	b083      	sub	sp, #12
    740e:	0007      	movs	r7, r0
    7410:	4688      	mov	r8, r1
    7412:	9201      	str	r2, [sp, #4]
    int rc = MQTTCLIENT_FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
    7414:	2400      	movs	r4, #0
    7416:	2900      	cmp	r1, #0
    7418:	dd18      	ble.n	744c <sendPacket+0x4c>
    741a:	4b15      	ldr	r3, [pc, #84]	; (7470 <sendPacket+0x70>)
    741c:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
    741e:	4b15      	ldr	r3, [pc, #84]	; (7474 <sendPacket+0x74>)
    7420:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
    7422:	9801      	ldr	r0, [sp, #4]
    7424:	47d0      	blx	sl
    7426:	2800      	cmp	r0, #0
    7428:	d110      	bne.n	744c <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
    742a:	6d3e      	ldr	r6, [r7, #80]	; 0x50
    742c:	6873      	ldr	r3, [r6, #4]
    742e:	4699      	mov	r9, r3
    7430:	693b      	ldr	r3, [r7, #16]
    7432:	191d      	adds	r5, r3, r4
    7434:	9801      	ldr	r0, [sp, #4]
    7436:	47d8      	blx	fp
    7438:	0003      	movs	r3, r0
    743a:	4642      	mov	r2, r8
    743c:	0029      	movs	r1, r5
    743e:	0030      	movs	r0, r6
    7440:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
    7442:	2800      	cmp	r0, #0
    7444:	db02      	blt.n	744c <sendPacket+0x4c>
            break;
        sent += rc;
    7446:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
    7448:	45a0      	cmp	r8, r4
    744a:	dcea      	bgt.n	7422 <sendPacket+0x22>
    }
    if (sent == length)
    744c:	45a0      	cmp	r8, r4
    744e:	d10c      	bne.n	746a <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
    7450:	69b9      	ldr	r1, [r7, #24]
    7452:	0038      	movs	r0, r7
    7454:	3054      	adds	r0, #84	; 0x54
    7456:	4b08      	ldr	r3, [pc, #32]	; (7478 <sendPacket+0x78>)
    7458:	4798      	blx	r3
        rc = MQTTCLIENT_SUCCESS;
    745a:	2000      	movs	r0, #0
    }
    else
        rc = MQTTCLIENT_FAILURE;
    return rc;
}
    745c:	b003      	add	sp, #12
    745e:	bc3c      	pop	{r2, r3, r4, r5}
    7460:	4690      	mov	r8, r2
    7462:	4699      	mov	r9, r3
    7464:	46a2      	mov	sl, r4
    7466:	46ab      	mov	fp, r5
    7468:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = MQTTCLIENT_FAILURE;
    746a:	2001      	movs	r0, #1
    746c:	4240      	negs	r0, r0
    return rc;
    746e:	e7f5      	b.n	745c <sendPacket+0x5c>
    7470:	00008481 	.word	0x00008481
    7474:	00008571 	.word	0x00008571
    7478:	00008531 	.word	0x00008531

0000747c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
    747c:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
    747e:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
    7480:	2100      	movs	r1, #0
    7482:	6241      	str	r1, [r0, #36]	; 0x24
    7484:	62c1      	str	r1, [r0, #44]	; 0x2c
    7486:	6341      	str	r1, [r0, #52]	; 0x34
    7488:	63c1      	str	r1, [r0, #60]	; 0x3c
    748a:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
    748c:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
    748e:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
    7490:	9b02      	ldr	r3, [sp, #8]
    7492:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
    7494:	9b03      	ldr	r3, [sp, #12]
    7496:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
    7498:	9b04      	ldr	r3, [sp, #16]
    749a:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
    749c:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
    749e:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
    74a0:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
    74a2:	2301      	movs	r3, #1
    74a4:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
    74a6:	3054      	adds	r0, #84	; 0x54
    74a8:	4b01      	ldr	r3, [pc, #4]	; (74b0 <MQTTClientInit+0x34>)
    74aa:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
    74ac:	bd10      	pop	{r4, pc}
    74ae:	46c0      	nop			; (mov r8, r8)
    74b0:	00008475 	.word	0x00008475

000074b4 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
    74b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    74b6:	46de      	mov	lr, fp
    74b8:	4657      	mov	r7, sl
    74ba:	464e      	mov	r6, r9
    74bc:	4645      	mov	r5, r8
    74be:	b5e0      	push	{r5, r6, r7, lr}
    74c0:	b085      	sub	sp, #20
    74c2:	4682      	mov	sl, r0
    74c4:	000f      	movs	r7, r1
    74c6:	4691      	mov	r9, r2
    74c8:	0004      	movs	r4, r0
    74ca:	3424      	adds	r4, #36	; 0x24
    74cc:	234c      	movs	r3, #76	; 0x4c
    74ce:	4453      	add	r3, sl
    74d0:	4698      	mov	r8, r3
    int i;
    int rc = MQTTCLIENT_FAILURE;
    74d2:	2301      	movs	r3, #1
    74d4:	425b      	negs	r3, r3
    74d6:	9301      	str	r3, [sp, #4]
    74d8:	e056      	b.n	7588 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
    74da:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
    74dc:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
    74de:	687a      	ldr	r2, [r7, #4]
    74e0:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
    74e2:	780a      	ldrb	r2, [r1, #0]
    74e4:	2a00      	cmp	r2, #0
    74e6:	d04a      	beq.n	757e <deliverMessage+0xca>
    74e8:	42b3      	cmp	r3, r6
    74ea:	d24a      	bcs.n	7582 <deliverMessage+0xce>
    74ec:	3101      	adds	r1, #1
    74ee:	1e70      	subs	r0, r6, #1
    74f0:	e008      	b.n	7504 <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
    74f2:	2a2f      	cmp	r2, #47	; 0x2f
    74f4:	d10f      	bne.n	7516 <deliverMessage+0x62>
        curn++;
    74f6:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
    74f8:	780a      	ldrb	r2, [r1, #0]
    74fa:	2a00      	cmp	r2, #0
    74fc:	d03f      	beq.n	757e <deliverMessage+0xca>
    74fe:	429e      	cmp	r6, r3
    7500:	d93f      	bls.n	7582 <deliverMessage+0xce>
    7502:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
    7504:	781d      	ldrb	r5, [r3, #0]
    7506:	2d2f      	cmp	r5, #47	; 0x2f
    7508:	d0f3      	beq.n	74f2 <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
    750a:	2a2b      	cmp	r2, #43	; 0x2b
    750c:	d008      	beq.n	7520 <deliverMessage+0x6c>
    750e:	2a23      	cmp	r2, #35	; 0x23
    7510:	d013      	beq.n	753a <deliverMessage+0x86>
    7512:	4295      	cmp	r5, r2
    7514:	d0ef      	beq.n	74f6 <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
    7516:	429e      	cmp	r6, r3
    7518:	d133      	bne.n	7582 <deliverMessage+0xce>
    751a:	2a00      	cmp	r2, #0
    751c:	d03d      	beq.n	759a <deliverMessage+0xe6>
    751e:	e030      	b.n	7582 <deliverMessage+0xce>
            char* nextpos = curn + 1;
    7520:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
    7522:	42ae      	cmp	r6, r5
    7524:	d927      	bls.n	7576 <deliverMessage+0xc2>
    7526:	785a      	ldrb	r2, [r3, #1]
    7528:	2a2f      	cmp	r2, #47	; 0x2f
    752a:	d01f      	beq.n	756c <deliverMessage+0xb8>
                nextpos = ++curn + 1;
    752c:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
    752e:	4283      	cmp	r3, r0
    7530:	d0e1      	beq.n	74f6 <deliverMessage+0x42>
    7532:	785a      	ldrb	r2, [r3, #1]
    7534:	2a2f      	cmp	r2, #47	; 0x2f
    7536:	d1f9      	bne.n	752c <deliverMessage+0x78>
    7538:	e7dd      	b.n	74f6 <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
    753a:	1e73      	subs	r3, r6, #1
    753c:	e7db      	b.n	74f6 <deliverMessage+0x42>
                rc = MQTTCLIENT_SUCCESS;
            }
        }
    }
    
    if (rc == MQTTCLIENT_FAILURE && c->defaultMessageHandler != NULL) 
    753e:	9b01      	ldr	r3, [sp, #4]
    7540:	3301      	adds	r3, #1
    7542:	d007      	beq.n	7554 <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = MQTTCLIENT_SUCCESS;
    }   
    
    return rc;
}
    7544:	9801      	ldr	r0, [sp, #4]
    7546:	b005      	add	sp, #20
    7548:	bc3c      	pop	{r2, r3, r4, r5}
    754a:	4690      	mov	r8, r2
    754c:	4699      	mov	r9, r3
    754e:	46a2      	mov	sl, r4
    7550:	46ab      	mov	fp, r5
    7552:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == MQTTCLIENT_FAILURE && c->defaultMessageHandler != NULL) 
    7554:	4653      	mov	r3, sl
    7556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7558:	2b00      	cmp	r3, #0
    755a:	d0f3      	beq.n	7544 <deliverMessage+0x90>
    md->topicName = aTopicName;
    755c:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
    755e:	464a      	mov	r2, r9
    7560:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
    7562:	a802      	add	r0, sp, #8
    7564:	4798      	blx	r3
        rc = MQTTCLIENT_SUCCESS;
    7566:	2300      	movs	r3, #0
    7568:	9301      	str	r3, [sp, #4]
    return rc;
    756a:	e7eb      	b.n	7544 <deliverMessage+0x90>
    while (*curf && curn < curn_end)
    756c:	780a      	ldrb	r2, [r1, #0]
    756e:	2a00      	cmp	r2, #0
    7570:	d007      	beq.n	7582 <deliverMessage+0xce>
        curn++;
    7572:	002b      	movs	r3, r5
    7574:	e7c5      	b.n	7502 <deliverMessage+0x4e>
    7576:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
    7578:	780a      	ldrb	r2, [r1, #0]
    757a:	2a00      	cmp	r2, #0
    757c:	d101      	bne.n	7582 <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
    757e:	429e      	cmp	r6, r3
    7580:	d00b      	beq.n	759a <deliverMessage+0xe6>
    7582:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    7584:	4544      	cmp	r4, r8
    7586:	d0da      	beq.n	753e <deliverMessage+0x8a>
    7588:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
    758a:	6821      	ldr	r1, [r4, #0]
    758c:	2900      	cmp	r1, #0
    758e:	d0f8      	beq.n	7582 <deliverMessage+0xce>
    7590:	0038      	movs	r0, r7
    7592:	4b08      	ldr	r3, [pc, #32]	; (75b4 <deliverMessage+0x100>)
    7594:	4798      	blx	r3
    7596:	2800      	cmp	r0, #0
    7598:	d09f      	beq.n	74da <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
    759a:	465b      	mov	r3, fp
    759c:	685b      	ldr	r3, [r3, #4]
    759e:	2b00      	cmp	r3, #0
    75a0:	d0ef      	beq.n	7582 <deliverMessage+0xce>
    md->topicName = aTopicName;
    75a2:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
    75a4:	464a      	mov	r2, r9
    75a6:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
    75a8:	a802      	add	r0, sp, #8
    75aa:	4798      	blx	r3
                rc = MQTTCLIENT_SUCCESS;
    75ac:	2300      	movs	r3, #0
    75ae:	9301      	str	r3, [sp, #4]
    75b0:	e7e7      	b.n	7582 <deliverMessage+0xce>
    75b2:	46c0      	nop			; (mov r8, r8)
    75b4:	000080dd 	.word	0x000080dd

000075b8 <keepalive>:


int keepalive(MQTTClient* c)
{
    75b8:	b510      	push	{r4, lr}
    75ba:	b082      	sub	sp, #8
    75bc:	0004      	movs	r4, r0
    int rc = MQTTCLIENT_FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = MQTTCLIENT_SUCCESS;
    75be:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
    75c0:	69a3      	ldr	r3, [r4, #24]
    75c2:	2b00      	cmp	r3, #0
    75c4:	d101      	bne.n	75ca <keepalive+0x12>
        }
    }

exit:
    return rc;
}
    75c6:	b002      	add	sp, #8
    75c8:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
    75ca:	0020      	movs	r0, r4
    75cc:	3054      	adds	r0, #84	; 0x54
    75ce:	4b14      	ldr	r3, [pc, #80]	; (7620 <keepalive+0x68>)
    75d0:	4798      	blx	r3
    75d2:	2800      	cmp	r0, #0
    75d4:	d01d      	beq.n	7612 <keepalive+0x5a>
        if (!c->ping_outstanding)
    75d6:	7f23      	ldrb	r3, [r4, #28]
    75d8:	2b00      	cmp	r3, #0
    75da:	d11d      	bne.n	7618 <keepalive+0x60>
            TimerInit(&timer);
    75dc:	4668      	mov	r0, sp
    75de:	4b11      	ldr	r3, [pc, #68]	; (7624 <keepalive+0x6c>)
    75e0:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
    75e2:	21fa      	movs	r1, #250	; 0xfa
    75e4:	0089      	lsls	r1, r1, #2
    75e6:	4668      	mov	r0, sp
    75e8:	4b0f      	ldr	r3, [pc, #60]	; (7628 <keepalive+0x70>)
    75ea:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
    75ec:	68a1      	ldr	r1, [r4, #8]
    75ee:	6920      	ldr	r0, [r4, #16]
    75f0:	4b0e      	ldr	r3, [pc, #56]	; (762c <keepalive+0x74>)
    75f2:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTTCLIENT_SUCCESS) // send the ping packet
    75f4:	2800      	cmp	r0, #0
    75f6:	dd09      	ble.n	760c <keepalive+0x54>
    75f8:	466a      	mov	r2, sp
    75fa:	0001      	movs	r1, r0
    75fc:	0020      	movs	r0, r4
    75fe:	4b0c      	ldr	r3, [pc, #48]	; (7630 <keepalive+0x78>)
    7600:	4798      	blx	r3
    7602:	2800      	cmp	r0, #0
    7604:	d1df      	bne.n	75c6 <keepalive+0xe>
                c->ping_outstanding = 1;
    7606:	2301      	movs	r3, #1
    7608:	7723      	strb	r3, [r4, #28]
    760a:	e7dc      	b.n	75c6 <keepalive+0xe>
    int rc = MQTTCLIENT_FAILURE;
    760c:	2001      	movs	r0, #1
    760e:	4240      	negs	r0, r0
    7610:	e7d9      	b.n	75c6 <keepalive+0xe>
    7612:	2001      	movs	r0, #1
    7614:	4240      	negs	r0, r0
    7616:	e7d6      	b.n	75c6 <keepalive+0xe>
    7618:	2001      	movs	r0, #1
    761a:	4240      	negs	r0, r0
    return rc;
    761c:	e7d3      	b.n	75c6 <keepalive+0xe>
    761e:	46c0      	nop			; (mov r8, r8)
    7620:	00008481 	.word	0x00008481
    7624:	00008475 	.word	0x00008475
    7628:	000084cd 	.word	0x000084cd
    762c:	00007dc5 	.word	0x00007dc5
    7630:	00007401 	.word	0x00007401

00007634 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
    7634:	b5f0      	push	{r4, r5, r6, r7, lr}
    7636:	46de      	mov	lr, fp
    7638:	464f      	mov	r7, r9
    763a:	4646      	mov	r6, r8
    763c:	b5c0      	push	{r6, r7, lr}
    763e:	b090      	sub	sp, #64	; 0x40
    7640:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
    7642:	6d05      	ldr	r5, [r0, #80]	; 0x50
    7644:	682e      	ldr	r6, [r5, #0]
    7646:	6947      	ldr	r7, [r0, #20]
    7648:	9107      	str	r1, [sp, #28]
    764a:	0008      	movs	r0, r1
    764c:	4b65      	ldr	r3, [pc, #404]	; (77e4 <cycle+0x1b0>)
    764e:	4798      	blx	r3
    7650:	0003      	movs	r3, r0
    7652:	2201      	movs	r2, #1
    7654:	0039      	movs	r1, r7
    7656:	0028      	movs	r0, r5
    7658:	47b0      	blx	r6
    765a:	0005      	movs	r5, r0
    765c:	2801      	cmp	r0, #1
    765e:	d000      	beq.n	7662 <cycle+0x2e>
    7660:	e0bd      	b.n	77de <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
    7662:	9807      	ldr	r0, [sp, #28]
    7664:	4b5f      	ldr	r3, [pc, #380]	; (77e4 <cycle+0x1b0>)
    7666:	4798      	blx	r3
    7668:	9006      	str	r0, [sp, #24]
    766a:	2604      	movs	r6, #4
    *value = 0;
    766c:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
    766e:	237f      	movs	r3, #127	; 0x7f
    7670:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
    7672:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7674:	6803      	ldr	r3, [r0, #0]
    7676:	4698      	mov	r8, r3
    7678:	9b06      	ldr	r3, [sp, #24]
    767a:	2201      	movs	r2, #1
    767c:	a90c      	add	r1, sp, #48	; 0x30
    767e:	47c0      	blx	r8
        if (rc != 1)
    7680:	2801      	cmp	r0, #1
    7682:	d10e      	bne.n	76a2 <cycle+0x6e>
        *value += (i & 127) * multiplier;
    7684:	ab02      	add	r3, sp, #8
    7686:	2228      	movs	r2, #40	; 0x28
    7688:	189b      	adds	r3, r3, r2
    768a:	781b      	ldrb	r3, [r3, #0]
    768c:	465a      	mov	r2, fp
    768e:	401a      	ands	r2, r3
    7690:	436a      	muls	r2, r5
    7692:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
    7694:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
    7696:	b25b      	sxtb	r3, r3
    7698:	2b00      	cmp	r3, #0
    769a:	da02      	bge.n	76a2 <cycle+0x6e>
    769c:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    769e:	2e00      	cmp	r6, #0
    76a0:	d1e7      	bne.n	7672 <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
    76a2:	6963      	ldr	r3, [r4, #20]
    76a4:	1c58      	adds	r0, r3, #1
    76a6:	0039      	movs	r1, r7
    76a8:	4b4f      	ldr	r3, [pc, #316]	; (77e8 <cycle+0x1b4>)
    76aa:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
    76ac:	2f00      	cmp	r7, #0
    76ae:	dd10      	ble.n	76d2 <cycle+0x9e>
    76b0:	6d26      	ldr	r6, [r4, #80]	; 0x50
    76b2:	6833      	ldr	r3, [r6, #0]
    76b4:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
    76b6:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
    76b8:	6963      	ldr	r3, [r4, #20]
    76ba:	181d      	adds	r5, r3, r0
    76bc:	9807      	ldr	r0, [sp, #28]
    76be:	4b49      	ldr	r3, [pc, #292]	; (77e4 <cycle+0x1b0>)
    76c0:	4798      	blx	r3
    76c2:	0003      	movs	r3, r0
    76c4:	003a      	movs	r2, r7
    76c6:	0029      	movs	r1, r5
    76c8:	0030      	movs	r0, r6
    76ca:	47c8      	blx	r9
    76cc:	42b8      	cmp	r0, r7
    76ce:	d000      	beq.n	76d2 <cycle+0x9e>
    76d0:	e085      	b.n	77de <cycle+0x1aa>
    header.byte = c->readbuf[0];
    76d2:	6963      	ldr	r3, [r4, #20]
    76d4:	781d      	ldrb	r5, [r3, #0]
    76d6:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = MQTTCLIENT_SUCCESS;

    switch (packet_type)
    76d8:	2d05      	cmp	r5, #5
    76da:	d051      	beq.n	7780 <cycle+0x14c>
    76dc:	2d0d      	cmp	r5, #13
    76de:	d06e      	beq.n	77be <cycle+0x18a>
        rc = MQTTCLIENT_SUCCESS;
    76e0:	2600      	movs	r6, #0
    switch (packet_type)
    76e2:	2d03      	cmp	r5, #3
    76e4:	d16e      	bne.n	77c4 <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
    76e6:	68e2      	ldr	r2, [r4, #12]
    76e8:	9204      	str	r2, [sp, #16]
    76ea:	9303      	str	r3, [sp, #12]
    76ec:	ab0f      	add	r3, sp, #60	; 0x3c
    76ee:	9302      	str	r3, [sp, #8]
    76f0:	ab0e      	add	r3, sp, #56	; 0x38
    76f2:	9301      	str	r3, [sp, #4]
    76f4:	ab09      	add	r3, sp, #36	; 0x24
    76f6:	9300      	str	r3, [sp, #0]
    76f8:	ab0d      	add	r3, sp, #52	; 0x34
    76fa:	2229      	movs	r2, #41	; 0x29
    76fc:	a902      	add	r1, sp, #8
    76fe:	468c      	mov	ip, r1
    7700:	4462      	add	r2, ip
    7702:	a908      	add	r1, sp, #32
    7704:	202a      	movs	r0, #42	; 0x2a
    7706:	4460      	add	r0, ip
    7708:	4e38      	ldr	r6, [pc, #224]	; (77ec <cycle+0x1b8>)
    770a:	47b0      	blx	r6
        rc = MQTTCLIENT_SUCCESS;
    770c:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
    770e:	2801      	cmp	r0, #1
    7710:	d15b      	bne.n	77ca <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
    7712:	ae0c      	add	r6, sp, #48	; 0x30
    7714:	ab02      	add	r3, sp, #8
    7716:	7e1b      	ldrb	r3, [r3, #24]
    7718:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
    771a:	0032      	movs	r2, r6
    771c:	a909      	add	r1, sp, #36	; 0x24
    771e:	0020      	movs	r0, r4
    7720:	4b33      	ldr	r3, [pc, #204]	; (77f0 <cycle+0x1bc>)
    7722:	4798      	blx	r3
            if (msg.qos != QOS0)
    7724:	7833      	ldrb	r3, [r6, #0]
    7726:	2b00      	cmp	r3, #0
    7728:	d028      	beq.n	777c <cycle+0x148>
            {
                if (msg.qos == QOS1)
    772a:	2b01      	cmp	r3, #1
    772c:	d004      	beq.n	7738 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
    772e:	2b02      	cmp	r3, #2
    7730:	d016      	beq.n	7760 <cycle+0x12c>
    7732:	2601      	movs	r6, #1
    7734:	4276      	negs	r6, r6
    7736:	e048      	b.n	77ca <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
    7738:	ab0c      	add	r3, sp, #48	; 0x30
    773a:	889b      	ldrh	r3, [r3, #4]
    773c:	9300      	str	r3, [sp, #0]
    773e:	2300      	movs	r3, #0
    7740:	2204      	movs	r2, #4
    7742:	68a1      	ldr	r1, [r4, #8]
    7744:	6920      	ldr	r0, [r4, #16]
    7746:	4e2b      	ldr	r6, [pc, #172]	; (77f4 <cycle+0x1c0>)
    7748:	47b0      	blx	r6
    774a:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
    774c:	2900      	cmp	r1, #0
    774e:	dd12      	ble.n	7776 <cycle+0x142>
                    rc = MQTTCLIENT_FAILURE;
                else
                    rc = sendPacket(c, len, timer);
    7750:	9a07      	ldr	r2, [sp, #28]
    7752:	0020      	movs	r0, r4
    7754:	4b28      	ldr	r3, [pc, #160]	; (77f8 <cycle+0x1c4>)
    7756:	4798      	blx	r3
    7758:	0006      	movs	r6, r0
                if (rc == MQTTCLIENT_FAILURE)
    775a:	1c43      	adds	r3, r0, #1
    775c:	d132      	bne.n	77c4 <cycle+0x190>
    775e:	e034      	b.n	77ca <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
    7760:	ab0c      	add	r3, sp, #48	; 0x30
    7762:	889b      	ldrh	r3, [r3, #4]
    7764:	9300      	str	r3, [sp, #0]
    7766:	2300      	movs	r3, #0
    7768:	2205      	movs	r2, #5
    776a:	68a1      	ldr	r1, [r4, #8]
    776c:	6920      	ldr	r0, [r4, #16]
    776e:	4e21      	ldr	r6, [pc, #132]	; (77f4 <cycle+0x1c0>)
    7770:	47b0      	blx	r6
    7772:	0001      	movs	r1, r0
    7774:	e7ea      	b.n	774c <cycle+0x118>
    7776:	2601      	movs	r6, #1
    7778:	4276      	negs	r6, r6
    777a:	e026      	b.n	77ca <cycle+0x196>
        rc = MQTTCLIENT_SUCCESS;
    777c:	2600      	movs	r6, #0
    777e:	e021      	b.n	77c4 <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    7780:	68e2      	ldr	r2, [r4, #12]
    7782:	9200      	str	r2, [sp, #0]
    7784:	aa0c      	add	r2, sp, #48	; 0x30
    7786:	a908      	add	r1, sp, #32
    7788:	a809      	add	r0, sp, #36	; 0x24
    778a:	4e1c      	ldr	r6, [pc, #112]	; (77fc <cycle+0x1c8>)
    778c:	47b0      	blx	r6
    778e:	2801      	cmp	r0, #1
    7790:	d002      	beq.n	7798 <cycle+0x164>
    7792:	2601      	movs	r6, #1
    7794:	4276      	negs	r6, r6
    7796:	e01b      	b.n	77d0 <cycle+0x19c>
                rc = MQTTCLIENT_FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
    7798:	ab0c      	add	r3, sp, #48	; 0x30
    779a:	881b      	ldrh	r3, [r3, #0]
    779c:	9300      	str	r3, [sp, #0]
    779e:	2300      	movs	r3, #0
    77a0:	2206      	movs	r2, #6
    77a2:	68a1      	ldr	r1, [r4, #8]
    77a4:	6920      	ldr	r0, [r4, #16]
    77a6:	4e13      	ldr	r6, [pc, #76]	; (77f4 <cycle+0x1c0>)
    77a8:	47b0      	blx	r6
    77aa:	2800      	cmp	r0, #0
    77ac:	ddf1      	ble.n	7792 <cycle+0x15e>
                rc = MQTTCLIENT_FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != MQTTCLIENT_SUCCESS) // send the PUBREL packet
    77ae:	9a07      	ldr	r2, [sp, #28]
    77b0:	0001      	movs	r1, r0
    77b2:	0020      	movs	r0, r4
    77b4:	4b10      	ldr	r3, [pc, #64]	; (77f8 <cycle+0x1c4>)
    77b6:	4798      	blx	r3
    77b8:	1e06      	subs	r6, r0, #0
    77ba:	d1ea      	bne.n	7792 <cycle+0x15e>
    77bc:	e002      	b.n	77c4 <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
    77be:	2300      	movs	r3, #0
    77c0:	7723      	strb	r3, [r4, #28]
        rc = MQTTCLIENT_SUCCESS;
    77c2:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
    77c4:	0020      	movs	r0, r4
    77c6:	4b0e      	ldr	r3, [pc, #56]	; (7800 <cycle+0x1cc>)
    77c8:	4798      	blx	r3
exit:
    if (rc == MQTTCLIENT_SUCCESS)
    77ca:	2e00      	cmp	r6, #0
    77cc:	d100      	bne.n	77d0 <cycle+0x19c>
    77ce:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
    77d0:	0030      	movs	r0, r6
    77d2:	b010      	add	sp, #64	; 0x40
    77d4:	bc1c      	pop	{r2, r3, r4}
    77d6:	4690      	mov	r8, r2
    77d8:	4699      	mov	r9, r3
    77da:	46a3      	mov	fp, r4
    77dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77de:	4d09      	ldr	r5, [pc, #36]	; (7804 <cycle+0x1d0>)
        rc = MQTTCLIENT_SUCCESS;
    77e0:	2600      	movs	r6, #0
    77e2:	e7ef      	b.n	77c4 <cycle+0x190>
    77e4:	00008571 	.word	0x00008571
    77e8:	00007edd 	.word	0x00007edd
    77ec:	00007dd5 	.word	0x00007dd5
    77f0:	000074b5 	.word	0x000074b5
    77f4:	00008211 	.word	0x00008211
    77f8:	00007401 	.word	0x00007401
    77fc:	00007e6d 	.word	0x00007e6d
    7800:	000075b9 	.word	0x000075b9
    7804:	0000ffff 	.word	0x0000ffff

00007808 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
    7808:	b570      	push	{r4, r5, r6, lr}
    780a:	b082      	sub	sp, #8
    780c:	0005      	movs	r5, r0
    780e:	000c      	movs	r4, r1
    int rc = MQTTCLIENT_SUCCESS;
    Timer timer;

    TimerInit(&timer);
    7810:	4668      	mov	r0, sp
    7812:	4b0a      	ldr	r3, [pc, #40]	; (783c <MQTTYield+0x34>)
    7814:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
    7816:	0021      	movs	r1, r4
    7818:	4668      	mov	r0, sp
    781a:	4b09      	ldr	r3, [pc, #36]	; (7840 <MQTTYield+0x38>)
    781c:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == MQTTCLIENT_FAILURE)
    781e:	4c09      	ldr	r4, [pc, #36]	; (7844 <MQTTYield+0x3c>)
        {
            rc = MQTTCLIENT_FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
    7820:	4e09      	ldr	r6, [pc, #36]	; (7848 <MQTTYield+0x40>)
        if (cycle(c, &timer) == MQTTCLIENT_FAILURE)
    7822:	4669      	mov	r1, sp
    7824:	0028      	movs	r0, r5
    7826:	47a0      	blx	r4
    7828:	1c43      	adds	r3, r0, #1
    782a:	d004      	beq.n	7836 <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
    782c:	4668      	mov	r0, sp
    782e:	47b0      	blx	r6
    7830:	2800      	cmp	r0, #0
    7832:	d0f6      	beq.n	7822 <MQTTYield+0x1a>
    int rc = MQTTCLIENT_SUCCESS;
    7834:	2000      	movs	r0, #0
        
    return rc;
}
    7836:	b002      	add	sp, #8
    7838:	bd70      	pop	{r4, r5, r6, pc}
    783a:	46c0      	nop			; (mov r8, r8)
    783c:	00008475 	.word	0x00008475
    7840:	000084cd 	.word	0x000084cd
    7844:	00007635 	.word	0x00007635
    7848:	00008481 	.word	0x00008481

0000784c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
    784c:	b5f0      	push	{r4, r5, r6, r7, lr}
    784e:	b083      	sub	sp, #12
    7850:	9001      	str	r0, [sp, #4]
    7852:	000e      	movs	r6, r1
    7854:	9200      	str	r2, [sp, #0]
    int rc = MQTTCLIENT_FAILURE;
    7856:	2401      	movs	r4, #1
    7858:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
    785a:	4f08      	ldr	r7, [pc, #32]	; (787c <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
    785c:	4d08      	ldr	r5, [pc, #32]	; (7880 <waitfor+0x34>)
        if (TimerIsExpired(timer))
    785e:	9800      	ldr	r0, [sp, #0]
    7860:	47b8      	blx	r7
    7862:	2800      	cmp	r0, #0
    7864:	d106      	bne.n	7874 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
    7866:	9900      	ldr	r1, [sp, #0]
    7868:	9801      	ldr	r0, [sp, #4]
    786a:	47a8      	blx	r5
    786c:	0004      	movs	r4, r0
    786e:	42b0      	cmp	r0, r6
    7870:	d1f5      	bne.n	785e <waitfor+0x12>
    7872:	0034      	movs	r4, r6
    
    return rc;
}
    7874:	0020      	movs	r0, r4
    7876:	b003      	add	sp, #12
    7878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    787a:	46c0      	nop			; (mov r8, r8)
    787c:	00008481 	.word	0x00008481
    7880:	00007635 	.word	0x00007635

00007884 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
    7884:	b530      	push	{r4, r5, lr}
    7886:	b09b      	sub	sp, #108	; 0x6c
    7888:	0004      	movs	r4, r0
    788a:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = MQTTCLIENT_FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
    788c:	2258      	movs	r2, #88	; 0x58
    788e:	4928      	ldr	r1, [pc, #160]	; (7930 <MQTTConnect+0xac>)
    7890:	a802      	add	r0, sp, #8
    7892:	4b28      	ldr	r3, [pc, #160]	; (7934 <MQTTConnect+0xb0>)
    7894:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
    7896:	6a23      	ldr	r3, [r4, #32]
    7898:	2b00      	cmp	r3, #0
    789a:	d13f      	bne.n	791c <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
    789c:	a818      	add	r0, sp, #96	; 0x60
    789e:	4b26      	ldr	r3, [pc, #152]	; (7938 <MQTTConnect+0xb4>)
    78a0:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
    78a2:	6861      	ldr	r1, [r4, #4]
    78a4:	a818      	add	r0, sp, #96	; 0x60
    78a6:	4b25      	ldr	r3, [pc, #148]	; (793c <MQTTConnect+0xb8>)
    78a8:	4798      	blx	r3

    if (options == 0)
    78aa:	2d00      	cmp	r5, #0
    78ac:	d015      	beq.n	78da <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
    78ae:	8b29      	ldrh	r1, [r5, #24]
    78b0:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
    78b2:	0020      	movs	r0, r4
    78b4:	3054      	adds	r0, #84	; 0x54
    78b6:	4b22      	ldr	r3, [pc, #136]	; (7940 <MQTTConnect+0xbc>)
    78b8:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
    78ba:	002a      	movs	r2, r5
    78bc:	68a1      	ldr	r1, [r4, #8]
    78be:	6920      	ldr	r0, [r4, #16]
    78c0:	4b20      	ldr	r3, [pc, #128]	; (7944 <MQTTConnect+0xc0>)
    78c2:	4798      	blx	r3
    78c4:	2800      	cmp	r0, #0
    78c6:	dd2c      	ble.n	7922 <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTTCLIENT_SUCCESS)  // send the connect packet
    78c8:	aa18      	add	r2, sp, #96	; 0x60
    78ca:	0001      	movs	r1, r0
    78cc:	0020      	movs	r0, r4
    78ce:	4b1e      	ldr	r3, [pc, #120]	; (7948 <MQTTConnect+0xc4>)
    78d0:	4798      	blx	r3
    78d2:	2800      	cmp	r0, #0
    78d4:	d003      	beq.n	78de <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
    78d6:	b01b      	add	sp, #108	; 0x6c
    78d8:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
    78da:	ad02      	add	r5, sp, #8
    78dc:	e7e7      	b.n	78ae <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
    78de:	aa18      	add	r2, sp, #96	; 0x60
    78e0:	2102      	movs	r1, #2
    78e2:	0020      	movs	r0, r4
    78e4:	4b19      	ldr	r3, [pc, #100]	; (794c <MQTTConnect+0xc8>)
    78e6:	4798      	blx	r3
    78e8:	2802      	cmp	r0, #2
    78ea:	d11d      	bne.n	7928 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
    78ec:	466b      	mov	r3, sp
    78ee:	1d99      	adds	r1, r3, #6
    78f0:	23ff      	movs	r3, #255	; 0xff
    78f2:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
    78f4:	466b      	mov	r3, sp
    78f6:	1dd8      	adds	r0, r3, #7
    78f8:	2300      	movs	r3, #0
    78fa:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
    78fc:	68e3      	ldr	r3, [r4, #12]
    78fe:	6962      	ldr	r2, [r4, #20]
    7900:	4d13      	ldr	r5, [pc, #76]	; (7950 <MQTTConnect+0xcc>)
    7902:	47a8      	blx	r5
    7904:	2801      	cmp	r0, #1
    7906:	d002      	beq.n	790e <MQTTConnect+0x8a>
            rc = MQTTCLIENT_FAILURE;
    7908:	2001      	movs	r0, #1
    790a:	4240      	negs	r0, r0
    790c:	e7e3      	b.n	78d6 <MQTTConnect+0x52>
            rc = connack_rc;
    790e:	466b      	mov	r3, sp
    7910:	7998      	ldrb	r0, [r3, #6]
    if (rc == MQTTCLIENT_SUCCESS)
    7912:	2800      	cmp	r0, #0
    7914:	d1df      	bne.n	78d6 <MQTTConnect+0x52>
        c->isconnected = 1;
    7916:	2301      	movs	r3, #1
    7918:	6223      	str	r3, [r4, #32]
    return rc;
    791a:	e7dc      	b.n	78d6 <MQTTConnect+0x52>
    int rc = MQTTCLIENT_FAILURE;
    791c:	2001      	movs	r0, #1
    791e:	4240      	negs	r0, r0
    7920:	e7d9      	b.n	78d6 <MQTTConnect+0x52>
    7922:	2001      	movs	r0, #1
    7924:	4240      	negs	r0, r0
    7926:	e7d6      	b.n	78d6 <MQTTConnect+0x52>
        rc = MQTTCLIENT_FAILURE;
    7928:	2001      	movs	r0, #1
    792a:	4240      	negs	r0, r0
    792c:	e7d3      	b.n	78d6 <MQTTConnect+0x52>
    792e:	46c0      	nop			; (mov r8, r8)
    7930:	00014e34 	.word	0x00014e34
    7934:	000109c9 	.word	0x000109c9
    7938:	00008475 	.word	0x00008475
    793c:	000084cd 	.word	0x000084cd
    7940:	00008531 	.word	0x00008531
    7944:	00007bf1 	.word	0x00007bf1
    7948:	00007401 	.word	0x00007401
    794c:	0000784d 	.word	0x0000784d
    7950:	00007d39 	.word	0x00007d39

00007954 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{ 
    7954:	b5f0      	push	{r4, r5, r6, r7, lr}
    7956:	b091      	sub	sp, #68	; 0x44
    7958:	0004      	movs	r4, r0
    795a:	000f      	movs	r7, r1
    795c:	9305      	str	r3, [sp, #20]
    int rc = MQTTCLIENT_FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
    795e:	2300      	movs	r3, #0
    7960:	930c      	str	r3, [sp, #48]	; 0x30
    7962:	930d      	str	r3, [sp, #52]	; 0x34
    topic.cstring = (char *)topicFilter;
    7964:	910b      	str	r1, [sp, #44]	; 0x2c
    int qos_val = qos;
    7966:	920a      	str	r2, [sp, #40]	; 0x28
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
    7968:	6a03      	ldr	r3, [r0, #32]
    796a:	2b00      	cmp	r3, #0
    796c:	d05c      	beq.n	7a28 <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
    796e:	a80e      	add	r0, sp, #56	; 0x38
    7970:	4b32      	ldr	r3, [pc, #200]	; (7a3c <MQTTSubscribe+0xe8>)
    7972:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
    7974:	6861      	ldr	r1, [r4, #4]
    7976:	a80e      	add	r0, sp, #56	; 0x38
    7978:	4b31      	ldr	r3, [pc, #196]	; (7a40 <MQTTSubscribe+0xec>)
    797a:	4798      	blx	r3
    
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &qos_val);
    797c:	6920      	ldr	r0, [r4, #16]
    797e:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    7980:	6823      	ldr	r3, [r4, #0]
    7982:	4a30      	ldr	r2, [pc, #192]	; (7a44 <MQTTSubscribe+0xf0>)
    7984:	4293      	cmp	r3, r2
    7986:	d017      	beq.n	79b8 <MQTTSubscribe+0x64>
    7988:	3301      	adds	r3, #1
    798a:	6023      	str	r3, [r4, #0]
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &qos_val);
    798c:	b29b      	uxth	r3, r3
    798e:	aa0a      	add	r2, sp, #40	; 0x28
    7990:	9202      	str	r2, [sp, #8]
    7992:	aa0b      	add	r2, sp, #44	; 0x2c
    7994:	9201      	str	r2, [sp, #4]
    7996:	2201      	movs	r2, #1
    7998:	9200      	str	r2, [sp, #0]
    799a:	2200      	movs	r2, #0
    799c:	4e2a      	ldr	r6, [pc, #168]	; (7a48 <MQTTSubscribe+0xf4>)
    799e:	47b0      	blx	r6
    if (len <= 0)
    79a0:	2800      	cmp	r0, #0
    79a2:	dd44      	ble.n	7a2e <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTTCLIENT_SUCCESS) // send the subscribe packet
    79a4:	aa0e      	add	r2, sp, #56	; 0x38
    79a6:	0001      	movs	r1, r0
    79a8:	0020      	movs	r0, r4
    79aa:	4b28      	ldr	r3, [pc, #160]	; (7a4c <MQTTSubscribe+0xf8>)
    79ac:	4798      	blx	r3
    79ae:	1e06      	subs	r6, r0, #0
    79b0:	d004      	beq.n	79bc <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
    79b2:	0030      	movs	r0, r6
    79b4:	b011      	add	sp, #68	; 0x44
    79b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    79b8:	2301      	movs	r3, #1
    79ba:	e7e6      	b.n	798a <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
    79bc:	aa0e      	add	r2, sp, #56	; 0x38
    79be:	2109      	movs	r1, #9
    79c0:	0020      	movs	r0, r4
    79c2:	4b23      	ldr	r3, [pc, #140]	; (7a50 <MQTTSubscribe+0xfc>)
    79c4:	4798      	blx	r3
    79c6:	2809      	cmp	r0, #9
    79c8:	d134      	bne.n	7a34 <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
    79ca:	2300      	movs	r3, #0
    79cc:	9308      	str	r3, [sp, #32]
    79ce:	3b01      	subs	r3, #1
    79d0:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
    79d2:	68e3      	ldr	r3, [r4, #12]
    79d4:	9301      	str	r3, [sp, #4]
    79d6:	6963      	ldr	r3, [r4, #20]
    79d8:	9300      	str	r3, [sp, #0]
    79da:	ab09      	add	r3, sp, #36	; 0x24
    79dc:	aa08      	add	r2, sp, #32
    79de:	2101      	movs	r1, #1
    79e0:	300d      	adds	r0, #13
    79e2:	ad02      	add	r5, sp, #8
    79e4:	46ac      	mov	ip, r5
    79e6:	4460      	add	r0, ip
    79e8:	4d1a      	ldr	r5, [pc, #104]	; (7a54 <MQTTSubscribe+0x100>)
    79ea:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != MQTTCLIENT_SUCCESS) // send the subscribe packet
    79ec:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
    79ee:	2801      	cmp	r0, #1
    79f0:	d00e      	beq.n	7a10 <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
    79f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    79f4:	2b00      	cmp	r3, #0
    79f6:	d010      	beq.n	7a1a <MQTTSubscribe+0xc6>
    79f8:	0022      	movs	r2, r4
    79fa:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    79fc:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
    79fe:	6810      	ldr	r0, [r2, #0]
    7a00:	2800      	cmp	r0, #0
    7a02:	d00b      	beq.n	7a1c <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    7a04:	3301      	adds	r3, #1
    7a06:	3208      	adds	r2, #8
    7a08:	2b05      	cmp	r3, #5
    7a0a:	d1f8      	bne.n	79fe <MQTTSubscribe+0xaa>
    7a0c:	000e      	movs	r6, r1
    7a0e:	e7d0      	b.n	79b2 <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
    7a10:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
    7a12:	2980      	cmp	r1, #128	; 0x80
    7a14:	d1ed      	bne.n	79f2 <MQTTSubscribe+0x9e>
    7a16:	000e      	movs	r6, r1
    7a18:	e7cb      	b.n	79b2 <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
    7a1a:	0033      	movs	r3, r6
    7a1c:	00db      	lsls	r3, r3, #3
    7a1e:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
    7a20:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = messageHandler;
    7a22:	9b05      	ldr	r3, [sp, #20]
    7a24:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
    7a26:	e7c4      	b.n	79b2 <MQTTSubscribe+0x5e>
    int rc = MQTTCLIENT_FAILURE;  
    7a28:	2601      	movs	r6, #1
    7a2a:	4276      	negs	r6, r6
    7a2c:	e7c1      	b.n	79b2 <MQTTSubscribe+0x5e>
    7a2e:	2601      	movs	r6, #1
    7a30:	4276      	negs	r6, r6
    7a32:	e7be      	b.n	79b2 <MQTTSubscribe+0x5e>
        rc = MQTTCLIENT_FAILURE;
    7a34:	2601      	movs	r6, #1
    7a36:	4276      	negs	r6, r6
    return rc;
    7a38:	e7bb      	b.n	79b2 <MQTTSubscribe+0x5e>
    7a3a:	46c0      	nop			; (mov r8, r8)
    7a3c:	00008475 	.word	0x00008475
    7a40:	000084cd 	.word	0x000084cd
    7a44:	0000ffff 	.word	0x0000ffff
    7a48:	000082a9 	.word	0x000082a9
    7a4c:	00007401 	.word	0x00007401
    7a50:	0000784d 	.word	0x0000784d
    7a54:	0000835d 	.word	0x0000835d

00007a58 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
    7a58:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a5a:	b08f      	sub	sp, #60	; 0x3c
    7a5c:	0005      	movs	r5, r0
    7a5e:	0014      	movs	r4, r2
    int rc = MQTTCLIENT_FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
    7a60:	2300      	movs	r3, #0
    7a62:	930a      	str	r3, [sp, #40]	; 0x28
    7a64:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
    7a66:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
    7a68:	6a03      	ldr	r3, [r0, #32]
    7a6a:	2b00      	cmp	r3, #0
    7a6c:	d062      	beq.n	7b34 <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
    7a6e:	a80c      	add	r0, sp, #48	; 0x30
    7a70:	4b36      	ldr	r3, [pc, #216]	; (7b4c <MQTTPublish+0xf4>)
    7a72:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
    7a74:	6869      	ldr	r1, [r5, #4]
    7a76:	a80c      	add	r0, sp, #48	; 0x30
    7a78:	4b35      	ldr	r3, [pc, #212]	; (7b50 <MQTTPublish+0xf8>)
    7a7a:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
    7a7c:	7823      	ldrb	r3, [r4, #0]
    7a7e:	3b01      	subs	r3, #1
    7a80:	2b01      	cmp	r3, #1
    7a82:	d921      	bls.n	7ac8 <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
    7a84:	7823      	ldrb	r3, [r4, #0]
    7a86:	68e2      	ldr	r2, [r4, #12]
    7a88:	9206      	str	r2, [sp, #24]
    7a8a:	68a2      	ldr	r2, [r4, #8]
    7a8c:	9205      	str	r2, [sp, #20]
    7a8e:	aa09      	add	r2, sp, #36	; 0x24
    7a90:	a902      	add	r1, sp, #8
    7a92:	cac1      	ldmia	r2!, {r0, r6, r7}
    7a94:	c1c1      	stmia	r1!, {r0, r6, r7}
    7a96:	88a2      	ldrh	r2, [r4, #4]
    7a98:	9201      	str	r2, [sp, #4]
    7a9a:	7862      	ldrb	r2, [r4, #1]
    7a9c:	9200      	str	r2, [sp, #0]
    7a9e:	2200      	movs	r2, #0
    7aa0:	68a9      	ldr	r1, [r5, #8]
    7aa2:	6928      	ldr	r0, [r5, #16]
    7aa4:	4e2b      	ldr	r6, [pc, #172]	; (7b54 <MQTTPublish+0xfc>)
    7aa6:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
    7aa8:	2800      	cmp	r0, #0
    7aaa:	dd46      	ble.n	7b3a <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTTCLIENT_SUCCESS) // send the subscribe packet
    7aac:	aa0c      	add	r2, sp, #48	; 0x30
    7aae:	0001      	movs	r1, r0
    7ab0:	0028      	movs	r0, r5
    7ab2:	4b29      	ldr	r3, [pc, #164]	; (7b58 <MQTTPublish+0x100>)
    7ab4:	4798      	blx	r3
    7ab6:	2800      	cmp	r0, #0
    7ab8:	d104      	bne.n	7ac4 <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
    7aba:	7823      	ldrb	r3, [r4, #0]
    7abc:	2b01      	cmp	r3, #1
    7abe:	d00d      	beq.n	7adc <MQTTPublish+0x84>
                rc = MQTTCLIENT_FAILURE;
        }
        else
            rc = MQTTCLIENT_FAILURE;
    }
    else if (message->qos == QOS2)
    7ac0:	2b02      	cmp	r3, #2
    7ac2:	d021      	beq.n	7b08 <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
    7ac4:	b00f      	add	sp, #60	; 0x3c
    7ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    7ac8:	682b      	ldr	r3, [r5, #0]
    7aca:	4a24      	ldr	r2, [pc, #144]	; (7b5c <MQTTPublish+0x104>)
    7acc:	4293      	cmp	r3, r2
    7ace:	d003      	beq.n	7ad8 <MQTTPublish+0x80>
    7ad0:	3301      	adds	r3, #1
    7ad2:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
    7ad4:	80a3      	strh	r3, [r4, #4]
    7ad6:	e7d5      	b.n	7a84 <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    7ad8:	2301      	movs	r3, #1
    7ada:	e7fa      	b.n	7ad2 <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
    7adc:	aa0c      	add	r2, sp, #48	; 0x30
    7ade:	2104      	movs	r1, #4
    7ae0:	0028      	movs	r0, r5
    7ae2:	4b1f      	ldr	r3, [pc, #124]	; (7b60 <MQTTPublish+0x108>)
    7ae4:	4798      	blx	r3
    7ae6:	2804      	cmp	r0, #4
    7ae8:	d12a      	bne.n	7b40 <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    7aea:	696b      	ldr	r3, [r5, #20]
    7aec:	68ea      	ldr	r2, [r5, #12]
    7aee:	9200      	str	r2, [sp, #0]
    7af0:	2222      	movs	r2, #34	; 0x22
    7af2:	446a      	add	r2, sp
    7af4:	a908      	add	r1, sp, #32
    7af6:	301d      	adds	r0, #29
    7af8:	4468      	add	r0, sp
    7afa:	4c1a      	ldr	r4, [pc, #104]	; (7b64 <MQTTPublish+0x10c>)
    7afc:	47a0      	blx	r4
    7afe:	3801      	subs	r0, #1
    7b00:	1e43      	subs	r3, r0, #1
    7b02:	4198      	sbcs	r0, r3
    7b04:	4240      	negs	r0, r0
    7b06:	e7dd      	b.n	7ac4 <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
    7b08:	aa0c      	add	r2, sp, #48	; 0x30
    7b0a:	2107      	movs	r1, #7
    7b0c:	0028      	movs	r0, r5
    7b0e:	4b14      	ldr	r3, [pc, #80]	; (7b60 <MQTTPublish+0x108>)
    7b10:	4798      	blx	r3
    7b12:	2807      	cmp	r0, #7
    7b14:	d117      	bne.n	7b46 <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    7b16:	696b      	ldr	r3, [r5, #20]
    7b18:	68ea      	ldr	r2, [r5, #12]
    7b1a:	9200      	str	r2, [sp, #0]
    7b1c:	2222      	movs	r2, #34	; 0x22
    7b1e:	446a      	add	r2, sp
    7b20:	a908      	add	r1, sp, #32
    7b22:	301a      	adds	r0, #26
    7b24:	4468      	add	r0, sp
    7b26:	4c0f      	ldr	r4, [pc, #60]	; (7b64 <MQTTPublish+0x10c>)
    7b28:	47a0      	blx	r4
    7b2a:	3801      	subs	r0, #1
    7b2c:	1e43      	subs	r3, r0, #1
    7b2e:	4198      	sbcs	r0, r3
    7b30:	4240      	negs	r0, r0
    7b32:	e7c7      	b.n	7ac4 <MQTTPublish+0x6c>
    int rc = MQTTCLIENT_FAILURE;
    7b34:	2001      	movs	r0, #1
    7b36:	4240      	negs	r0, r0
    7b38:	e7c4      	b.n	7ac4 <MQTTPublish+0x6c>
    7b3a:	2001      	movs	r0, #1
    7b3c:	4240      	negs	r0, r0
    7b3e:	e7c1      	b.n	7ac4 <MQTTPublish+0x6c>
            rc = MQTTCLIENT_FAILURE;
    7b40:	2001      	movs	r0, #1
    7b42:	4240      	negs	r0, r0
    7b44:	e7be      	b.n	7ac4 <MQTTPublish+0x6c>
            rc = MQTTCLIENT_FAILURE;
    7b46:	2001      	movs	r0, #1
    7b48:	4240      	negs	r0, r0
    return rc;
    7b4a:	e7bb      	b.n	7ac4 <MQTTPublish+0x6c>
    7b4c:	00008475 	.word	0x00008475
    7b50:	000084cd 	.word	0x000084cd
    7b54:	00008149 	.word	0x00008149
    7b58:	00007401 	.word	0x00007401
    7b5c:	0000ffff 	.word	0x0000ffff
    7b60:	0000784d 	.word	0x0000784d
    7b64:	00007e6d 	.word	0x00007e6d

00007b68 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
    7b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b6a:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
    7b6c:	7a03      	ldrb	r3, [r0, #8]
    7b6e:	2b03      	cmp	r3, #3
    7b70:	d024      	beq.n	7bbc <MQTTSerialize_connectLength+0x54>
	int len = 0;
    7b72:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
    7b74:	2b04      	cmp	r3, #4
    7b76:	d01f      	beq.n	7bb8 <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
    7b78:	68e0      	ldr	r0, [r4, #12]
    7b7a:	6921      	ldr	r1, [r4, #16]
    7b7c:	6962      	ldr	r2, [r4, #20]
    7b7e:	4b1b      	ldr	r3, [pc, #108]	; (7bec <MQTTSerialize_connectLength+0x84>)
    7b80:	4798      	blx	r3
    7b82:	1c85      	adds	r5, r0, #2
    7b84:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
    7b86:	7ee3      	ldrb	r3, [r4, #27]
    7b88:	2b00      	cmp	r3, #0
    7b8a:	d119      	bne.n	7bc0 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
    7b8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7b8e:	2b00      	cmp	r3, #0
    7b90:	d024      	beq.n	7bdc <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
    7b92:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7b94:	6c61      	ldr	r1, [r4, #68]	; 0x44
    7b96:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7b98:	4b14      	ldr	r3, [pc, #80]	; (7bec <MQTTSerialize_connectLength+0x84>)
    7b9a:	4798      	blx	r3
    7b9c:	3002      	adds	r0, #2
    7b9e:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
    7ba0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7ba2:	2b00      	cmp	r3, #0
    7ba4:	d01e      	beq.n	7be4 <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
    7ba6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    7ba8:	6d21      	ldr	r1, [r4, #80]	; 0x50
    7baa:	6d62      	ldr	r2, [r4, #84]	; 0x54
    7bac:	4b0f      	ldr	r3, [pc, #60]	; (7bec <MQTTSerialize_connectLength+0x84>)
    7bae:	4798      	blx	r3
    7bb0:	3002      	adds	r0, #2
    7bb2:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
    7bb4:	0028      	movs	r0, r5
    7bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
    7bb8:	360a      	adds	r6, #10
    7bba:	e7dd      	b.n	7b78 <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
    7bbc:	260c      	movs	r6, #12
    7bbe:	e7db      	b.n	7b78 <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
    7bc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7bc2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7bc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7bc6:	4f09      	ldr	r7, [pc, #36]	; (7bec <MQTTSerialize_connectLength+0x84>)
    7bc8:	47b8      	blx	r7
    7bca:	0006      	movs	r6, r0
    7bcc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    7bce:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7bd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    7bd2:	47b8      	blx	r7
    7bd4:	1836      	adds	r6, r6, r0
    7bd6:	3604      	adds	r6, #4
    7bd8:	19ad      	adds	r5, r5, r6
    7bda:	e7d7      	b.n	7b8c <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
    7bdc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7bde:	2b00      	cmp	r3, #0
    7be0:	d1d7      	bne.n	7b92 <MQTTSerialize_connectLength+0x2a>
    7be2:	e7dd      	b.n	7ba0 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
    7be4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7be6:	2b00      	cmp	r3, #0
    7be8:	d1dd      	bne.n	7ba6 <MQTTSerialize_connectLength+0x3e>
    7bea:	e7e3      	b.n	7bb4 <MQTTSerialize_connectLength+0x4c>
    7bec:	000080c1 	.word	0x000080c1

00007bf0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
    7bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bf2:	b083      	sub	sp, #12
    7bf4:	0006      	movs	r6, r0
    7bf6:	000f      	movs	r7, r1
    7bf8:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
    7bfa:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
    7bfc:	0010      	movs	r0, r2
    7bfe:	4b45      	ldr	r3, [pc, #276]	; (7d14 <MQTTSerialize_connect+0x124>)
    7c00:	4798      	blx	r3
    7c02:	0004      	movs	r4, r0
    7c04:	4b44      	ldr	r3, [pc, #272]	; (7d18 <MQTTSerialize_connect+0x128>)
    7c06:	4798      	blx	r3
    7c08:	42b8      	cmp	r0, r7
    7c0a:	dd00      	ble.n	7c0e <MQTTSerialize_connect+0x1e>
    7c0c:	e07f      	b.n	7d0e <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
    7c0e:	2110      	movs	r1, #16
    7c10:	a801      	add	r0, sp, #4
    7c12:	4b42      	ldr	r3, [pc, #264]	; (7d1c <MQTTSerialize_connect+0x12c>)
    7c14:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
    7c16:	0021      	movs	r1, r4
    7c18:	9801      	ldr	r0, [sp, #4]
    7c1a:	4b41      	ldr	r3, [pc, #260]	; (7d20 <MQTTSerialize_connect+0x130>)
    7c1c:	4798      	blx	r3
    7c1e:	9b01      	ldr	r3, [sp, #4]
    7c20:	469c      	mov	ip, r3
    7c22:	4460      	add	r0, ip
    7c24:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
    7c26:	7a2b      	ldrb	r3, [r5, #8]
    7c28:	2b04      	cmp	r3, #4
    7c2a:	d045      	beq.n	7cb8 <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
    7c2c:	493d      	ldr	r1, [pc, #244]	; (7d24 <MQTTSerialize_connect+0x134>)
    7c2e:	a801      	add	r0, sp, #4
    7c30:	4b3d      	ldr	r3, [pc, #244]	; (7d28 <MQTTSerialize_connect+0x138>)
    7c32:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
    7c34:	2103      	movs	r1, #3
    7c36:	a801      	add	r0, sp, #4
    7c38:	4b38      	ldr	r3, [pc, #224]	; (7d1c <MQTTSerialize_connect+0x12c>)
    7c3a:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
    7c3c:	7ea9      	ldrb	r1, [r5, #26]
    7c3e:	2301      	movs	r3, #1
    7c40:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
    7c42:	7eea      	ldrb	r2, [r5, #27]
    7c44:	1e50      	subs	r0, r2, #1
    7c46:	4182      	sbcs	r2, r0
    7c48:	b2d2      	uxtb	r2, r2
    7c4a:	4013      	ands	r3, r2
    7c4c:	009b      	lsls	r3, r3, #2
    7c4e:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
    7c50:	4319      	orrs	r1, r3
    7c52:	2b00      	cmp	r3, #0
    7c54:	d00b      	beq.n	7c6e <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
    7c56:	233d      	movs	r3, #61	; 0x3d
    7c58:	5cea      	ldrb	r2, [r5, r3]
    7c5a:	3b3a      	subs	r3, #58	; 0x3a
    7c5c:	4013      	ands	r3, r2
    7c5e:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
    7c60:	223c      	movs	r2, #60	; 0x3c
    7c62:	5ca8      	ldrb	r0, [r5, r2]
    7c64:	3a3b      	subs	r2, #59	; 0x3b
    7c66:	4002      	ands	r2, r0
    7c68:	0152      	lsls	r2, r2, #5
    7c6a:	4319      	orrs	r1, r3
    7c6c:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
    7c6e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    7c70:	2b00      	cmp	r3, #0
    7c72:	d02a      	beq.n	7cca <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
    7c74:	2380      	movs	r3, #128	; 0x80
    7c76:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
    7c78:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    7c7a:	2b00      	cmp	r3, #0
    7c7c:	d029      	beq.n	7cd2 <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
    7c7e:	2340      	movs	r3, #64	; 0x40
    7c80:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
    7c82:	b2cc      	uxtb	r4, r1
    7c84:	0021      	movs	r1, r4
    7c86:	a801      	add	r0, sp, #4
    7c88:	4b24      	ldr	r3, [pc, #144]	; (7d1c <MQTTSerialize_connect+0x12c>)
    7c8a:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
    7c8c:	8b29      	ldrh	r1, [r5, #24]
    7c8e:	a801      	add	r0, sp, #4
    7c90:	4b26      	ldr	r3, [pc, #152]	; (7d2c <MQTTSerialize_connect+0x13c>)
    7c92:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
    7c94:	68e9      	ldr	r1, [r5, #12]
    7c96:	692a      	ldr	r2, [r5, #16]
    7c98:	696b      	ldr	r3, [r5, #20]
    7c9a:	a801      	add	r0, sp, #4
    7c9c:	4f24      	ldr	r7, [pc, #144]	; (7d30 <MQTTSerialize_connect+0x140>)
    7c9e:	47b8      	blx	r7
	if (options->willFlag)
    7ca0:	7eeb      	ldrb	r3, [r5, #27]
    7ca2:	2b00      	cmp	r3, #0
    7ca4:	d119      	bne.n	7cda <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
    7ca6:	b263      	sxtb	r3, r4
    7ca8:	2b00      	cmp	r3, #0
    7caa:	db22      	blt.n	7cf2 <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
    7cac:	0663      	lsls	r3, r4, #25
    7cae:	d427      	bmi.n	7d00 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
    7cb0:	9b01      	ldr	r3, [sp, #4]
    7cb2:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
    7cb4:	b003      	add	sp, #12
    7cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
    7cb8:	491e      	ldr	r1, [pc, #120]	; (7d34 <MQTTSerialize_connect+0x144>)
    7cba:	a801      	add	r0, sp, #4
    7cbc:	4b1a      	ldr	r3, [pc, #104]	; (7d28 <MQTTSerialize_connect+0x138>)
    7cbe:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
    7cc0:	2104      	movs	r1, #4
    7cc2:	a801      	add	r0, sp, #4
    7cc4:	4b15      	ldr	r3, [pc, #84]	; (7d1c <MQTTSerialize_connect+0x12c>)
    7cc6:	4798      	blx	r3
    7cc8:	e7b8      	b.n	7c3c <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
    7cca:	6cab      	ldr	r3, [r5, #72]	; 0x48
    7ccc:	2b00      	cmp	r3, #0
    7cce:	d1d1      	bne.n	7c74 <MQTTSerialize_connect+0x84>
    7cd0:	e7d2      	b.n	7c78 <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
    7cd2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    7cd4:	2b00      	cmp	r3, #0
    7cd6:	d1d2      	bne.n	7c7e <MQTTSerialize_connect+0x8e>
    7cd8:	e7d3      	b.n	7c82 <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
    7cda:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7cdc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7cde:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    7ce0:	a801      	add	r0, sp, #4
    7ce2:	4f13      	ldr	r7, [pc, #76]	; (7d30 <MQTTSerialize_connect+0x140>)
    7ce4:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
    7ce6:	6b29      	ldr	r1, [r5, #48]	; 0x30
    7ce8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    7cea:	6bab      	ldr	r3, [r5, #56]	; 0x38
    7cec:	a801      	add	r0, sp, #4
    7cee:	47b8      	blx	r7
    7cf0:	e7d9      	b.n	7ca6 <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
    7cf2:	6c29      	ldr	r1, [r5, #64]	; 0x40
    7cf4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    7cf6:	6cab      	ldr	r3, [r5, #72]	; 0x48
    7cf8:	a801      	add	r0, sp, #4
    7cfa:	4f0d      	ldr	r7, [pc, #52]	; (7d30 <MQTTSerialize_connect+0x140>)
    7cfc:	47b8      	blx	r7
    7cfe:	e7d5      	b.n	7cac <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
    7d00:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    7d02:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    7d04:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    7d06:	a801      	add	r0, sp, #4
    7d08:	4c09      	ldr	r4, [pc, #36]	; (7d30 <MQTTSerialize_connect+0x140>)
    7d0a:	47a0      	blx	r4
    7d0c:	e7d0      	b.n	7cb0 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    7d0e:	2002      	movs	r0, #2
    7d10:	4240      	negs	r0, r0
	return rc;
    7d12:	e7cf      	b.n	7cb4 <MQTTSerialize_connect+0xc4>
    7d14:	00007b69 	.word	0x00007b69
    7d18:	00007f65 	.word	0x00007f65
    7d1c:	00007fc7 	.word	0x00007fc7
    7d20:	00007edd 	.word	0x00007edd
    7d24:	00014e94 	.word	0x00014e94
    7d28:	00007ffd 	.word	0x00007ffd
    7d2c:	00007fd3 	.word	0x00007fd3
    7d30:	00008035 	.word	0x00008035
    7d34:	00014e8c 	.word	0x00014e8c

00007d38 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
    7d38:	b570      	push	{r4, r5, r6, lr}
    7d3a:	b082      	sub	sp, #8
    7d3c:	0005      	movs	r5, r0
    7d3e:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    7d40:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    7d42:	a801      	add	r0, sp, #4
    7d44:	4b0e      	ldr	r3, [pc, #56]	; (7d80 <MQTTDeserialize_connack+0x48>)
    7d46:	4798      	blx	r3
	if (header.bits.type != CONNACK)
    7d48:	23f0      	movs	r3, #240	; 0xf0
    7d4a:	4003      	ands	r3, r0
	int rc = 0;
    7d4c:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
    7d4e:	2b20      	cmp	r3, #32
    7d50:	d001      	beq.n	7d56 <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    7d52:	b002      	add	sp, #8
    7d54:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    7d56:	4669      	mov	r1, sp
    7d58:	9801      	ldr	r0, [sp, #4]
    7d5a:	4b0a      	ldr	r3, [pc, #40]	; (7d84 <MQTTDeserialize_connack+0x4c>)
    7d5c:	4798      	blx	r3
    7d5e:	9b01      	ldr	r3, [sp, #4]
    7d60:	181b      	adds	r3, r3, r0
    7d62:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
    7d64:	9b00      	ldr	r3, [sp, #0]
    7d66:	2b01      	cmp	r3, #1
    7d68:	ddf3      	ble.n	7d52 <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
    7d6a:	a801      	add	r0, sp, #4
    7d6c:	4e04      	ldr	r6, [pc, #16]	; (7d80 <MQTTDeserialize_connack+0x48>)
    7d6e:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
    7d70:	0600      	lsls	r0, r0, #24
    7d72:	0fc0      	lsrs	r0, r0, #31
    7d74:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
    7d76:	a801      	add	r0, sp, #4
    7d78:	47b0      	blx	r6
    7d7a:	7020      	strb	r0, [r4, #0]
	rc = 1;
    7d7c:	2001      	movs	r0, #1
    7d7e:	e7e8      	b.n	7d52 <MQTTDeserialize_connack+0x1a>
    7d80:	00007fbb 	.word	0x00007fbb
    7d84:	00007f8d 	.word	0x00007f8d

00007d88 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
    7d88:	b510      	push	{r4, lr}
    7d8a:	b082      	sub	sp, #8
    7d8c:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
    7d8e:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
    7d90:	2901      	cmp	r1, #1
    7d92:	dd0f      	ble.n	7db4 <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
    7d94:	210f      	movs	r1, #15
    7d96:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
    7d98:	0109      	lsls	r1, r1, #4
    7d9a:	a801      	add	r0, sp, #4
    7d9c:	4b07      	ldr	r3, [pc, #28]	; (7dbc <MQTTSerialize_zero+0x34>)
    7d9e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
    7da0:	2100      	movs	r1, #0
    7da2:	9801      	ldr	r0, [sp, #4]
    7da4:	4b06      	ldr	r3, [pc, #24]	; (7dc0 <MQTTSerialize_zero+0x38>)
    7da6:	4798      	blx	r3
    7da8:	9b01      	ldr	r3, [sp, #4]
    7daa:	469c      	mov	ip, r3
    7dac:	4460      	add	r0, ip
	rc = ptr - buf;
    7dae:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    7db0:	b002      	add	sp, #8
    7db2:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    7db4:	2002      	movs	r0, #2
    7db6:	4240      	negs	r0, r0
	return rc;
    7db8:	e7fa      	b.n	7db0 <MQTTSerialize_zero+0x28>
    7dba:	46c0      	nop			; (mov r8, r8)
    7dbc:	00007fc7 	.word	0x00007fc7
    7dc0:	00007edd 	.word	0x00007edd

00007dc4 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
    7dc4:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
    7dc6:	220c      	movs	r2, #12
    7dc8:	4b01      	ldr	r3, [pc, #4]	; (7dd0 <MQTTSerialize_pingreq+0xc>)
    7dca:	4798      	blx	r3
}
    7dcc:	bd10      	pop	{r4, pc}
    7dce:	46c0      	nop			; (mov r8, r8)
    7dd0:	00007d89 	.word	0x00007d89

00007dd4 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
    7dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7dd6:	b085      	sub	sp, #20
    7dd8:	0005      	movs	r5, r0
    7dda:	000e      	movs	r6, r1
    7ddc:	0014      	movs	r4, r2
    7dde:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    7de0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7de2:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
    7de4:	2300      	movs	r3, #0
    7de6:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    7de8:	a803      	add	r0, sp, #12
    7dea:	4b1c      	ldr	r3, [pc, #112]	; (7e5c <MQTTDeserialize_publish+0x88>)
    7dec:	4798      	blx	r3
    7dee:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
    7df0:	22f0      	movs	r2, #240	; 0xf0
    7df2:	4010      	ands	r0, r2
	int rc = 0;
    7df4:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
    7df6:	2830      	cmp	r0, #48	; 0x30
    7df8:	d002      	beq.n	7e00 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    7dfa:	0038      	movs	r0, r7
    7dfc:	b005      	add	sp, #20
    7dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
    7e00:	071a      	lsls	r2, r3, #28
    7e02:	0fd2      	lsrs	r2, r2, #31
    7e04:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
    7e06:	075a      	lsls	r2, r3, #29
    7e08:	0f92      	lsrs	r2, r2, #30
    7e0a:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
    7e0c:	07db      	lsls	r3, r3, #31
    7e0e:	0fdb      	lsrs	r3, r3, #31
    7e10:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    7e12:	a902      	add	r1, sp, #8
    7e14:	9803      	ldr	r0, [sp, #12]
    7e16:	4b12      	ldr	r3, [pc, #72]	; (7e60 <MQTTDeserialize_publish+0x8c>)
    7e18:	4798      	blx	r3
    7e1a:	0007      	movs	r7, r0
    7e1c:	9b03      	ldr	r3, [sp, #12]
    7e1e:	181c      	adds	r4, r3, r0
    7e20:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
    7e22:	9b02      	ldr	r3, [sp, #8]
    7e24:	469c      	mov	ip, r3
    7e26:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
    7e28:	0022      	movs	r2, r4
    7e2a:	a903      	add	r1, sp, #12
    7e2c:	980a      	ldr	r0, [sp, #40]	; 0x28
    7e2e:	4b0d      	ldr	r3, [pc, #52]	; (7e64 <MQTTDeserialize_publish+0x90>)
    7e30:	4798      	blx	r3
    7e32:	2800      	cmp	r0, #0
    7e34:	d0e1      	beq.n	7dfa <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
    7e36:	9b03      	ldr	r3, [sp, #12]
    7e38:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
    7e3a:	d4de      	bmi.n	7dfa <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
    7e3c:	6833      	ldr	r3, [r6, #0]
    7e3e:	2b00      	cmp	r3, #0
    7e40:	dd04      	ble.n	7e4c <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
    7e42:	a803      	add	r0, sp, #12
    7e44:	4b08      	ldr	r3, [pc, #32]	; (7e68 <MQTTDeserialize_publish+0x94>)
    7e46:	4798      	blx	r3
    7e48:	9b01      	ldr	r3, [sp, #4]
    7e4a:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
    7e4c:	9b03      	ldr	r3, [sp, #12]
    7e4e:	1ae4      	subs	r4, r4, r3
    7e50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7e52:	6014      	str	r4, [r2, #0]
	*payload = curdata;
    7e54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7e56:	6013      	str	r3, [r2, #0]
	rc = 1;
    7e58:	2701      	movs	r7, #1
    7e5a:	e7ce      	b.n	7dfa <MQTTDeserialize_publish+0x26>
    7e5c:	00007fbb 	.word	0x00007fbb
    7e60:	00007f8d 	.word	0x00007f8d
    7e64:	00008081 	.word	0x00008081
    7e68:	00007fa9 	.word	0x00007fa9

00007e6c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
    7e6c:	b570      	push	{r4, r5, r6, lr}
    7e6e:	b082      	sub	sp, #8
    7e70:	0005      	movs	r5, r0
    7e72:	000e      	movs	r6, r1
    7e74:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    7e76:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    7e78:	a801      	add	r0, sp, #4
    7e7a:	4b0c      	ldr	r3, [pc, #48]	; (7eac <MQTTDeserialize_ack+0x40>)
    7e7c:	4798      	blx	r3
	*dup = header.bits.dup;
    7e7e:	0703      	lsls	r3, r0, #28
    7e80:	0fdb      	lsrs	r3, r3, #31
    7e82:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
    7e84:	0600      	lsls	r0, r0, #24
    7e86:	0f00      	lsrs	r0, r0, #28
    7e88:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    7e8a:	4669      	mov	r1, sp
    7e8c:	9801      	ldr	r0, [sp, #4]
    7e8e:	4b08      	ldr	r3, [pc, #32]	; (7eb0 <MQTTDeserialize_ack+0x44>)
    7e90:	4798      	blx	r3
    7e92:	9b01      	ldr	r3, [sp, #4]
    7e94:	181b      	adds	r3, r3, r0
    7e96:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
    7e98:	9b00      	ldr	r3, [sp, #0]
    7e9a:	2b01      	cmp	r3, #1
    7e9c:	dd04      	ble.n	7ea8 <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
    7e9e:	a801      	add	r0, sp, #4
    7ea0:	4b04      	ldr	r3, [pc, #16]	; (7eb4 <MQTTDeserialize_ack+0x48>)
    7ea2:	4798      	blx	r3
    7ea4:	8020      	strh	r0, [r4, #0]

	rc = 1;
    7ea6:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    7ea8:	b002      	add	sp, #8
    7eaa:	bd70      	pop	{r4, r5, r6, pc}
    7eac:	00007fbb 	.word	0x00007fbb
    7eb0:	00007f8d 	.word	0x00007f8d
    7eb4:	00007fa9 	.word	0x00007fa9

00007eb8 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
    7eb8:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
    7eba:	2900      	cmp	r1, #0
    7ebc:	dd0a      	ble.n	7ed4 <bufchar+0x1c>
    7ebe:	4b06      	ldr	r3, [pc, #24]	; (7ed8 <bufchar+0x20>)
    7ec0:	681b      	ldr	r3, [r3, #0]
    7ec2:	185d      	adds	r5, r3, r1
    7ec4:	002c      	movs	r4, r5
		*c = *bufptr++;
    7ec6:	781a      	ldrb	r2, [r3, #0]
    7ec8:	7002      	strb	r2, [r0, #0]
    7eca:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
    7ecc:	42a3      	cmp	r3, r4
    7ece:	d1fa      	bne.n	7ec6 <bufchar+0xe>
    7ed0:	4b01      	ldr	r3, [pc, #4]	; (7ed8 <bufchar+0x20>)
    7ed2:	601d      	str	r5, [r3, #0]
	return count;
}
    7ed4:	0008      	movs	r0, r1
    7ed6:	bd30      	pop	{r4, r5, pc}
    7ed8:	200026f0 	.word	0x200026f0

00007edc <MQTTPacket_encode>:
{
    7edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ede:	b083      	sub	sp, #12
    7ee0:	2500      	movs	r5, #0
		char d = length % 128;
    7ee2:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
    7ee4:	2780      	movs	r7, #128	; 0x80
    7ee6:	427f      	negs	r7, r7
    7ee8:	9501      	str	r5, [sp, #4]
		char d = length % 128;
    7eea:	17ca      	asrs	r2, r1, #31
    7eec:	0e54      	lsrs	r4, r2, #25
    7eee:	190b      	adds	r3, r1, r4
    7ef0:	4033      	ands	r3, r6
    7ef2:	1b1b      	subs	r3, r3, r4
    7ef4:	b2db      	uxtb	r3, r3
		length /= 128;
    7ef6:	4032      	ands	r2, r6
    7ef8:	1851      	adds	r1, r2, r1
    7efa:	11c9      	asrs	r1, r1, #7
		if (length > 0)
    7efc:	2900      	cmp	r1, #0
    7efe:	dd03      	ble.n	7f08 <MQTTPacket_encode+0x2c>
			d |= 0x80;
    7f00:	433b      	orrs	r3, r7
		buf[rc++] = d;
    7f02:	5543      	strb	r3, [r0, r5]
    7f04:	3501      	adds	r5, #1
    7f06:	e7ef      	b.n	7ee8 <MQTTPacket_encode+0xc>
    7f08:	5543      	strb	r3, [r0, r5]
    7f0a:	9801      	ldr	r0, [sp, #4]
    7f0c:	3001      	adds	r0, #1
}
    7f0e:	b003      	add	sp, #12
    7f10:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007f12 <MQTTPacket_decode>:
{
    7f12:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f14:	46ce      	mov	lr, r9
    7f16:	4647      	mov	r7, r8
    7f18:	b580      	push	{r7, lr}
    7f1a:	b083      	sub	sp, #12
    7f1c:	4680      	mov	r8, r0
    7f1e:	000f      	movs	r7, r1
	*value = 0;
    7f20:	2300      	movs	r3, #0
    7f22:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    7f24:	2401      	movs	r4, #1
	int multiplier = 1;
    7f26:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
    7f28:	466b      	mov	r3, sp
    7f2a:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
    7f2c:	237f      	movs	r3, #127	; 0x7f
    7f2e:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
    7f30:	2101      	movs	r1, #1
    7f32:	0028      	movs	r0, r5
    7f34:	47c0      	blx	r8
		if (rc != 1)
    7f36:	2801      	cmp	r0, #1
    7f38:	d10e      	bne.n	7f58 <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
    7f3a:	782b      	ldrb	r3, [r5, #0]
    7f3c:	464a      	mov	r2, r9
    7f3e:	401a      	ands	r2, r3
    7f40:	4372      	muls	r2, r6
    7f42:	6839      	ldr	r1, [r7, #0]
    7f44:	468c      	mov	ip, r1
    7f46:	4462      	add	r2, ip
    7f48:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
    7f4a:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
    7f4c:	b25b      	sxtb	r3, r3
    7f4e:	2b00      	cmp	r3, #0
    7f50:	da02      	bge.n	7f58 <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    7f52:	3401      	adds	r4, #1
    7f54:	2c05      	cmp	r4, #5
    7f56:	d1eb      	bne.n	7f30 <MQTTPacket_decode+0x1e>
}
    7f58:	0020      	movs	r0, r4
    7f5a:	b003      	add	sp, #12
    7f5c:	bc0c      	pop	{r2, r3}
    7f5e:	4690      	mov	r8, r2
    7f60:	4699      	mov	r9, r3
    7f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007f64 <MQTTPacket_len>:
{
    7f64:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
    7f66:	1c42      	adds	r2, r0, #1
		rem_len += 1;
    7f68:	3002      	adds	r0, #2
	if (rem_len < 128)
    7f6a:	2a7f      	cmp	r2, #127	; 0x7f
    7f6c:	dd07      	ble.n	7f7e <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
    7f6e:	4905      	ldr	r1, [pc, #20]	; (7f84 <MQTTPacket_len+0x20>)
		rem_len += 2;
    7f70:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
    7f72:	428a      	cmp	r2, r1
    7f74:	dd03      	ble.n	7f7e <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
    7f76:	4904      	ldr	r1, [pc, #16]	; (7f88 <MQTTPacket_len+0x24>)
		rem_len += 4;
    7f78:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
    7f7a:	428a      	cmp	r2, r1
    7f7c:	dd00      	ble.n	7f80 <MQTTPacket_len+0x1c>
}
    7f7e:	4770      	bx	lr
		rem_len += 3;
    7f80:	1d18      	adds	r0, r3, #4
    7f82:	e7fc      	b.n	7f7e <MQTTPacket_len+0x1a>
    7f84:	00003fff 	.word	0x00003fff
    7f88:	001ffffe 	.word	0x001ffffe

00007f8c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
    7f8c:	b510      	push	{r4, lr}
	bufptr = buf;
    7f8e:	4b03      	ldr	r3, [pc, #12]	; (7f9c <MQTTPacket_decodeBuf+0x10>)
    7f90:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
    7f92:	4803      	ldr	r0, [pc, #12]	; (7fa0 <MQTTPacket_decodeBuf+0x14>)
    7f94:	4b03      	ldr	r3, [pc, #12]	; (7fa4 <MQTTPacket_decodeBuf+0x18>)
    7f96:	4798      	blx	r3
}
    7f98:	bd10      	pop	{r4, pc}
    7f9a:	46c0      	nop			; (mov r8, r8)
    7f9c:	200026f0 	.word	0x200026f0
    7fa0:	00007eb9 	.word	0x00007eb9
    7fa4:	00007f13 	.word	0x00007f13

00007fa8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
    7fa8:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
    7faa:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
    7fac:	7813      	ldrb	r3, [r2, #0]
    7fae:	021b      	lsls	r3, r3, #8
    7fb0:	7850      	ldrb	r0, [r2, #1]
    7fb2:	1818      	adds	r0, r3, r0
	*pptr += 2;
    7fb4:	3202      	adds	r2, #2
    7fb6:	600a      	str	r2, [r1, #0]
	return len;
}
    7fb8:	4770      	bx	lr

00007fba <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
    7fba:	0002      	movs	r2, r0
	char c = **pptr;
    7fbc:	6803      	ldr	r3, [r0, #0]
    7fbe:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
    7fc0:	3301      	adds	r3, #1
    7fc2:	6013      	str	r3, [r2, #0]
	return c;
}
    7fc4:	4770      	bx	lr

00007fc6 <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
    7fc6:	6803      	ldr	r3, [r0, #0]
    7fc8:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
    7fca:	6803      	ldr	r3, [r0, #0]
    7fcc:	3301      	adds	r3, #1
    7fce:	6003      	str	r3, [r0, #0]
}
    7fd0:	4770      	bx	lr

00007fd2 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
    7fd2:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
    7fd4:	17ca      	asrs	r2, r1, #31
    7fd6:	23ff      	movs	r3, #255	; 0xff
    7fd8:	001c      	movs	r4, r3
    7fda:	4014      	ands	r4, r2
    7fdc:	1864      	adds	r4, r4, r1
    7fde:	1224      	asrs	r4, r4, #8
    7fe0:	6805      	ldr	r5, [r0, #0]
    7fe2:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
    7fe4:	6804      	ldr	r4, [r0, #0]
    7fe6:	1c65      	adds	r5, r4, #1
    7fe8:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
    7fea:	0e12      	lsrs	r2, r2, #24
    7fec:	1889      	adds	r1, r1, r2
    7fee:	400b      	ands	r3, r1
    7ff0:	1a9b      	subs	r3, r3, r2
    7ff2:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
    7ff4:	6803      	ldr	r3, [r0, #0]
    7ff6:	3301      	adds	r3, #1
    7ff8:	6003      	str	r3, [r0, #0]
}
    7ffa:	bd30      	pop	{r4, r5, pc}

00007ffc <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
    7ffc:	b570      	push	{r4, r5, r6, lr}
    7ffe:	0004      	movs	r4, r0
    8000:	000e      	movs	r6, r1
	int len = strlen(string);
    8002:	0008      	movs	r0, r1
    8004:	4b08      	ldr	r3, [pc, #32]	; (8028 <writeCString+0x2c>)
    8006:	4798      	blx	r3
    8008:	0005      	movs	r5, r0
	writeInt(pptr, len);
    800a:	0001      	movs	r1, r0
    800c:	0020      	movs	r0, r4
    800e:	4b07      	ldr	r3, [pc, #28]	; (802c <writeCString+0x30>)
    8010:	4798      	blx	r3
	memcpy(*pptr, string, len);
    8012:	002a      	movs	r2, r5
    8014:	0031      	movs	r1, r6
    8016:	6820      	ldr	r0, [r4, #0]
    8018:	4b05      	ldr	r3, [pc, #20]	; (8030 <writeCString+0x34>)
    801a:	4798      	blx	r3
	*pptr += len;
    801c:	6823      	ldr	r3, [r4, #0]
    801e:	469c      	mov	ip, r3
    8020:	4465      	add	r5, ip
    8022:	6025      	str	r5, [r4, #0]
}
    8024:	bd70      	pop	{r4, r5, r6, pc}
    8026:	46c0      	nop			; (mov r8, r8)
    8028:	00010fa7 	.word	0x00010fa7
    802c:	00007fd3 	.word	0x00007fd3
    8030:	000109c9 	.word	0x000109c9

00008034 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
    8034:	b530      	push	{r4, r5, lr}
    8036:	b085      	sub	sp, #20
    8038:	0005      	movs	r5, r0
    803a:	9101      	str	r1, [sp, #4]
    803c:	9303      	str	r3, [sp, #12]
    803e:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
    8040:	dc06      	bgt.n	8050 <writeMQTTString+0x1c>
    8042:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
    8044:	2900      	cmp	r1, #0
    8046:	d010      	beq.n	806a <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
    8048:	4b0a      	ldr	r3, [pc, #40]	; (8074 <writeMQTTString+0x40>)
    804a:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
    804c:	b005      	add	sp, #20
    804e:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
    8050:	0011      	movs	r1, r2
    8052:	4b09      	ldr	r3, [pc, #36]	; (8078 <writeMQTTString+0x44>)
    8054:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
    8056:	0022      	movs	r2, r4
    8058:	9903      	ldr	r1, [sp, #12]
    805a:	6828      	ldr	r0, [r5, #0]
    805c:	4b07      	ldr	r3, [pc, #28]	; (807c <writeMQTTString+0x48>)
    805e:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
    8060:	682b      	ldr	r3, [r5, #0]
    8062:	469c      	mov	ip, r3
    8064:	4464      	add	r4, ip
    8066:	602c      	str	r4, [r5, #0]
    8068:	e7f0      	b.n	804c <writeMQTTString+0x18>
		writeInt(pptr, 0);
    806a:	2100      	movs	r1, #0
    806c:	4b02      	ldr	r3, [pc, #8]	; (8078 <writeMQTTString+0x44>)
    806e:	4798      	blx	r3
}
    8070:	e7ec      	b.n	804c <writeMQTTString+0x18>
    8072:	46c0      	nop			; (mov r8, r8)
    8074:	00007ffd 	.word	0x00007ffd
    8078:	00007fd3 	.word	0x00007fd3
    807c:	000109c9 	.word	0x000109c9

00008080 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
    8080:	b570      	push	{r4, r5, r6, lr}
    8082:	0005      	movs	r5, r0
    8084:	000c      	movs	r4, r1
    8086:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
    8088:	680b      	ldr	r3, [r1, #0]
    808a:	1ad3      	subs	r3, r2, r3
    808c:	2b01      	cmp	r3, #1
    808e:	dd12      	ble.n	80b6 <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
    8090:	0008      	movs	r0, r1
    8092:	4b0a      	ldr	r3, [pc, #40]	; (80bc <readMQTTLenString+0x3c>)
    8094:	4798      	blx	r3
    8096:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    8098:	6822      	ldr	r2, [r4, #0]
    809a:	1811      	adds	r1, r2, r0
	int rc = 0;
    809c:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    809e:	428e      	cmp	r6, r1
    80a0:	d305      	bcc.n	80ae <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
    80a2:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
    80a4:	6823      	ldr	r3, [r4, #0]
    80a6:	469c      	mov	ip, r3
    80a8:	4460      	add	r0, ip
    80aa:	6020      	str	r0, [r4, #0]
			rc = 1;
    80ac:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
    80ae:	2200      	movs	r2, #0
    80b0:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
    80b2:	0018      	movs	r0, r3
    80b4:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
    80b6:	2300      	movs	r3, #0
    80b8:	e7f9      	b.n	80ae <readMQTTLenString+0x2e>
    80ba:	46c0      	nop			; (mov r8, r8)
    80bc:	00007fa9 	.word	0x00007fa9

000080c0 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    80c0:	b500      	push	{lr}
    80c2:	b085      	sub	sp, #20
    80c4:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
    80c6:	2800      	cmp	r0, #0
    80c8:	d003      	beq.n	80d2 <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
    80ca:	4b03      	ldr	r3, [pc, #12]	; (80d8 <MQTTstrlen+0x18>)
    80cc:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
    80ce:	b005      	add	sp, #20
    80d0:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
    80d2:	9802      	ldr	r0, [sp, #8]
	return rc;
    80d4:	e7fb      	b.n	80ce <MQTTstrlen+0xe>
    80d6:	46c0      	nop			; (mov r8, r8)
    80d8:	00010fa7 	.word	0x00010fa7

000080dc <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
    80dc:	b570      	push	{r4, r5, r6, lr}
    80de:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
    80e0:	6806      	ldr	r6, [r0, #0]
    80e2:	2e00      	cmp	r6, #0
    80e4:	d00b      	beq.n	80fe <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
    80e6:	0030      	movs	r0, r6
    80e8:	4b0b      	ldr	r3, [pc, #44]	; (8118 <MQTTPacket_equals+0x3c>)
    80ea:	4798      	blx	r3
    80ec:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
    80ee:	0028      	movs	r0, r5
    80f0:	4b09      	ldr	r3, [pc, #36]	; (8118 <MQTTPacket_equals+0x3c>)
    80f2:	4798      	blx	r3
    80f4:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    80f6:	4284      	cmp	r4, r0
    80f8:	d004      	beq.n	8104 <MQTTPacket_equals+0x28>
}
    80fa:	0018      	movs	r0, r3
    80fc:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
    80fe:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
    8100:	6844      	ldr	r4, [r0, #4]
    8102:	e7f4      	b.n	80ee <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    8104:	0022      	movs	r2, r4
    8106:	0029      	movs	r1, r5
    8108:	0030      	movs	r0, r6
    810a:	4b04      	ldr	r3, [pc, #16]	; (811c <MQTTPacket_equals+0x40>)
    810c:	4798      	blx	r3
    810e:	4243      	negs	r3, r0
    8110:	4143      	adcs	r3, r0
    8112:	b2db      	uxtb	r3, r3
    8114:	e7f1      	b.n	80fa <MQTTPacket_equals+0x1e>
    8116:	46c0      	nop			; (mov r8, r8)
    8118:	00010fa7 	.word	0x00010fa7
    811c:	00010fb5 	.word	0x00010fb5

00008120 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
    8120:	b510      	push	{r4, lr}
    8122:	b084      	sub	sp, #16
    8124:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
    8126:	0008      	movs	r0, r1
    8128:	0011      	movs	r1, r2
    812a:	001a      	movs	r2, r3
    812c:	4b05      	ldr	r3, [pc, #20]	; (8144 <MQTTSerialize_publishLength+0x24>)
    812e:	4798      	blx	r3
    8130:	3002      	adds	r0, #2
    8132:	9b06      	ldr	r3, [sp, #24]
    8134:	469c      	mov	ip, r3
    8136:	4460      	add	r0, ip
	if (qos > 0)
    8138:	2c00      	cmp	r4, #0
    813a:	dd00      	ble.n	813e <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
    813c:	3002      	adds	r0, #2
	return len;
}
    813e:	b004      	add	sp, #16
    8140:	bd10      	pop	{r4, pc}
    8142:	46c0      	nop			; (mov r8, r8)
    8144:	000080c1 	.word	0x000080c1

00008148 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
    8148:	b5f0      	push	{r4, r5, r6, r7, lr}
    814a:	46de      	mov	lr, fp
    814c:	4657      	mov	r7, sl
    814e:	464e      	mov	r6, r9
    8150:	b5c0      	push	{r6, r7, lr}
    8152:	b084      	sub	sp, #16
    8154:	0007      	movs	r7, r0
    8156:	468b      	mov	fp, r1
    8158:	4692      	mov	sl, r2
    815a:	001e      	movs	r6, r3
    815c:	ab0c      	add	r3, sp, #48	; 0x30
    815e:	781b      	ldrb	r3, [r3, #0]
    8160:	4699      	mov	r9, r3
    8162:	ab0d      	add	r3, sp, #52	; 0x34
    8164:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
    8166:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    8168:	9b12      	ldr	r3, [sp, #72]	; 0x48
    816a:	9300      	str	r3, [sp, #0]
    816c:	990e      	ldr	r1, [sp, #56]	; 0x38
    816e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8170:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8172:	0030      	movs	r0, r6
    8174:	4d1f      	ldr	r5, [pc, #124]	; (81f4 <MQTTSerialize_publish+0xac>)
    8176:	47a8      	blx	r5
    8178:	0005      	movs	r5, r0
    817a:	4b1f      	ldr	r3, [pc, #124]	; (81f8 <MQTTSerialize_publish+0xb0>)
    817c:	4798      	blx	r3
    817e:	4558      	cmp	r0, fp
    8180:	dc34      	bgt.n	81ec <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
    8182:	2201      	movs	r2, #1
    8184:	4653      	mov	r3, sl
    8186:	4013      	ands	r3, r2
    8188:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
    818a:	2103      	movs	r1, #3
    818c:	4031      	ands	r1, r6
    818e:	0048      	lsls	r0, r1, #1
    8190:	2130      	movs	r1, #48	; 0x30
    8192:	4319      	orrs	r1, r3
    8194:	4301      	orrs	r1, r0
	header.bits.retain = retained;
    8196:	464b      	mov	r3, r9
    8198:	4013      	ands	r3, r2
    819a:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
    819c:	4319      	orrs	r1, r3
    819e:	a803      	add	r0, sp, #12
    81a0:	4b16      	ldr	r3, [pc, #88]	; (81fc <MQTTSerialize_publish+0xb4>)
    81a2:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    81a4:	0029      	movs	r1, r5
    81a6:	9803      	ldr	r0, [sp, #12]
    81a8:	4b15      	ldr	r3, [pc, #84]	; (8200 <MQTTSerialize_publish+0xb8>)
    81aa:	4798      	blx	r3
    81ac:	9b03      	ldr	r3, [sp, #12]
    81ae:	469c      	mov	ip, r3
    81b0:	4460      	add	r0, ip
    81b2:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
    81b4:	990e      	ldr	r1, [sp, #56]	; 0x38
    81b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    81b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    81ba:	a803      	add	r0, sp, #12
    81bc:	4d11      	ldr	r5, [pc, #68]	; (8204 <MQTTSerialize_publish+0xbc>)
    81be:	47a8      	blx	r5

	if (qos > 0)
    81c0:	2e00      	cmp	r6, #0
    81c2:	dd03      	ble.n	81cc <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
    81c4:	0021      	movs	r1, r4
    81c6:	a803      	add	r0, sp, #12
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <MQTTSerialize_publish+0xc0>)
    81ca:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
    81cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    81ce:	9911      	ldr	r1, [sp, #68]	; 0x44
    81d0:	9803      	ldr	r0, [sp, #12]
    81d2:	4b0e      	ldr	r3, [pc, #56]	; (820c <MQTTSerialize_publish+0xc4>)
    81d4:	4798      	blx	r3
	ptr += payloadlen;
    81d6:	9b03      	ldr	r3, [sp, #12]
    81d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    81da:	4694      	mov	ip, r2
    81dc:	4463      	add	r3, ip

	rc = ptr - buf;
    81de:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    81e0:	b004      	add	sp, #16
    81e2:	bc1c      	pop	{r2, r3, r4}
    81e4:	4691      	mov	r9, r2
    81e6:	469a      	mov	sl, r3
    81e8:	46a3      	mov	fp, r4
    81ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    81ec:	2002      	movs	r0, #2
    81ee:	4240      	negs	r0, r0
	return rc;
    81f0:	e7f6      	b.n	81e0 <MQTTSerialize_publish+0x98>
    81f2:	46c0      	nop			; (mov r8, r8)
    81f4:	00008121 	.word	0x00008121
    81f8:	00007f65 	.word	0x00007f65
    81fc:	00007fc7 	.word	0x00007fc7
    8200:	00007edd 	.word	0x00007edd
    8204:	00008035 	.word	0x00008035
    8208:	00007fd3 	.word	0x00007fd3
    820c:	000109c9 	.word	0x000109c9

00008210 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
    8210:	b530      	push	{r4, r5, lr}
    8212:	b083      	sub	sp, #12
    8214:	0004      	movs	r4, r0
    8216:	a806      	add	r0, sp, #24
    8218:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
    821a:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
    821c:	2903      	cmp	r1, #3
    821e:	dd1e      	ble.n	825e <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
    8220:	210f      	movs	r1, #15
    8222:	4011      	ands	r1, r2
	header.bits.dup = dup;
    8224:	2001      	movs	r0, #1
    8226:	4003      	ands	r3, r0
    8228:	00db      	lsls	r3, r3, #3
    822a:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
    822c:	3a06      	subs	r2, #6
    822e:	4250      	negs	r0, r2
    8230:	4142      	adcs	r2, r0
    8232:	0052      	lsls	r2, r2, #1
    8234:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
    8236:	4311      	orrs	r1, r2
    8238:	a801      	add	r0, sp, #4
    823a:	4b0a      	ldr	r3, [pc, #40]	; (8264 <MQTTSerialize_ack+0x54>)
    823c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
    823e:	2102      	movs	r1, #2
    8240:	9801      	ldr	r0, [sp, #4]
    8242:	4b09      	ldr	r3, [pc, #36]	; (8268 <MQTTSerialize_ack+0x58>)
    8244:	4798      	blx	r3
    8246:	9b01      	ldr	r3, [sp, #4]
    8248:	469c      	mov	ip, r3
    824a:	4460      	add	r0, ip
    824c:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
    824e:	0029      	movs	r1, r5
    8250:	a801      	add	r0, sp, #4
    8252:	4b06      	ldr	r3, [pc, #24]	; (826c <MQTTSerialize_ack+0x5c>)
    8254:	4798      	blx	r3
	rc = ptr - buf;
    8256:	9b01      	ldr	r3, [sp, #4]
    8258:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    825a:	b003      	add	sp, #12
    825c:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    825e:	2002      	movs	r0, #2
    8260:	4240      	negs	r0, r0
	return rc;
    8262:	e7fa      	b.n	825a <MQTTSerialize_ack+0x4a>
    8264:	00007fc7 	.word	0x00007fc7
    8268:	00007edd 	.word	0x00007edd
    826c:	00007fd3 	.word	0x00007fd3

00008270 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
    8270:	b5f0      	push	{r4, r5, r6, r7, lr}
    8272:	46c6      	mov	lr, r8
    8274:	b500      	push	{lr}
    8276:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
    8278:	dd12      	ble.n	82a0 <MQTTSerialize_subscribeLength+0x30>
    827a:	000c      	movs	r4, r1
    827c:	2602      	movs	r6, #2
    827e:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
    8280:	4b08      	ldr	r3, [pc, #32]	; (82a4 <MQTTSerialize_subscribeLength+0x34>)
    8282:	4698      	mov	r8, r3
    8284:	6820      	ldr	r0, [r4, #0]
    8286:	6861      	ldr	r1, [r4, #4]
    8288:	68a2      	ldr	r2, [r4, #8]
    828a:	47c0      	blx	r8
    828c:	3003      	adds	r0, #3
    828e:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
    8290:	3501      	adds	r5, #1
    8292:	340c      	adds	r4, #12
    8294:	42af      	cmp	r7, r5
    8296:	d1f5      	bne.n	8284 <MQTTSerialize_subscribeLength+0x14>
	return len;
}
    8298:	0030      	movs	r0, r6
    829a:	bc04      	pop	{r2}
    829c:	4690      	mov	r8, r2
    829e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
    82a0:	2602      	movs	r6, #2
	return len;
    82a2:	e7f9      	b.n	8298 <MQTTSerialize_subscribeLength+0x28>
    82a4:	000080c1 	.word	0x000080c1

000082a8 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
    82a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    82aa:	46d6      	mov	lr, sl
    82ac:	464f      	mov	r7, r9
    82ae:	4646      	mov	r6, r8
    82b0:	b5c0      	push	{r6, r7, lr}
    82b2:	b084      	sub	sp, #16
    82b4:	4682      	mov	sl, r0
    82b6:	000e      	movs	r6, r1
    82b8:	0015      	movs	r5, r2
    82ba:	9301      	str	r3, [sp, #4]
    82bc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
    82be:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
    82c0:	990d      	ldr	r1, [sp, #52]	; 0x34
    82c2:	0038      	movs	r0, r7
    82c4:	4b1f      	ldr	r3, [pc, #124]	; (8344 <MQTTSerialize_subscribe+0x9c>)
    82c6:	4798      	blx	r3
    82c8:	0004      	movs	r4, r0
    82ca:	4b1f      	ldr	r3, [pc, #124]	; (8348 <MQTTSerialize_subscribe+0xa0>)
    82cc:	4798      	blx	r3
    82ce:	42b0      	cmp	r0, r6
    82d0:	dc34      	bgt.n	833c <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
    82d2:	2101      	movs	r1, #1
    82d4:	4029      	ands	r1, r5
    82d6:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
    82d8:	2180      	movs	r1, #128	; 0x80
    82da:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
    82dc:	2302      	movs	r3, #2
    82de:	4319      	orrs	r1, r3
    82e0:	a803      	add	r0, sp, #12
    82e2:	4b1a      	ldr	r3, [pc, #104]	; (834c <MQTTSerialize_subscribe+0xa4>)
    82e4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    82e6:	0021      	movs	r1, r4
    82e8:	9803      	ldr	r0, [sp, #12]
    82ea:	4b19      	ldr	r3, [pc, #100]	; (8350 <MQTTSerialize_subscribe+0xa8>)
    82ec:	4798      	blx	r3
    82ee:	9a03      	ldr	r2, [sp, #12]
    82f0:	4694      	mov	ip, r2
    82f2:	4460      	add	r0, ip
    82f4:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
    82f6:	9901      	ldr	r1, [sp, #4]
    82f8:	a803      	add	r0, sp, #12
    82fa:	4b16      	ldr	r3, [pc, #88]	; (8354 <MQTTSerialize_subscribe+0xac>)
    82fc:	4798      	blx	r3

	for (i = 0; i < count; ++i)
    82fe:	2f00      	cmp	r7, #0
    8300:	dd13      	ble.n	832a <MQTTSerialize_subscribe+0x82>
    8302:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    8304:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    8306:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
    8308:	4b13      	ldr	r3, [pc, #76]	; (8358 <MQTTSerialize_subscribe+0xb0>)
    830a:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
    830c:	4b0f      	ldr	r3, [pc, #60]	; (834c <MQTTSerialize_subscribe+0xa4>)
    830e:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
    8310:	6821      	ldr	r1, [r4, #0]
    8312:	6862      	ldr	r2, [r4, #4]
    8314:	68a3      	ldr	r3, [r4, #8]
    8316:	a803      	add	r0, sp, #12
    8318:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
    831a:	ce02      	ldmia	r6!, {r1}
    831c:	b2c9      	uxtb	r1, r1
    831e:	a803      	add	r0, sp, #12
    8320:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
    8322:	3501      	adds	r5, #1
    8324:	340c      	adds	r4, #12
    8326:	42af      	cmp	r7, r5
    8328:	d1f2      	bne.n	8310 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
    832a:	9b03      	ldr	r3, [sp, #12]
    832c:	4652      	mov	r2, sl
    832e:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    8330:	b004      	add	sp, #16
    8332:	bc1c      	pop	{r2, r3, r4}
    8334:	4690      	mov	r8, r2
    8336:	4699      	mov	r9, r3
    8338:	46a2      	mov	sl, r4
    833a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    833c:	2002      	movs	r0, #2
    833e:	4240      	negs	r0, r0
	return rc;
    8340:	e7f6      	b.n	8330 <MQTTSerialize_subscribe+0x88>
    8342:	46c0      	nop			; (mov r8, r8)
    8344:	00008271 	.word	0x00008271
    8348:	00007f65 	.word	0x00007f65
    834c:	00007fc7 	.word	0x00007fc7
    8350:	00007edd 	.word	0x00007edd
    8354:	00007fd3 	.word	0x00007fd3
    8358:	00008035 	.word	0x00008035

0000835c <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
    835c:	b5f0      	push	{r4, r5, r6, r7, lr}
    835e:	46ce      	mov	lr, r9
    8360:	4647      	mov	r7, r8
    8362:	b580      	push	{r7, lr}
    8364:	b083      	sub	sp, #12
    8366:	0004      	movs	r4, r0
    8368:	000e      	movs	r6, r1
    836a:	0015      	movs	r5, r2
    836c:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    836e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8370:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    8372:	a801      	add	r0, sp, #4
    8374:	4b1e      	ldr	r3, [pc, #120]	; (83f0 <MQTTDeserialize_suback+0x94>)
    8376:	4798      	blx	r3
	if (header.bits.type != SUBACK)
    8378:	23f0      	movs	r3, #240	; 0xf0
    837a:	4003      	ands	r3, r0
	int rc = 0;
    837c:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
    837e:	2b90      	cmp	r3, #144	; 0x90
    8380:	d004      	beq.n	838c <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    8382:	b003      	add	sp, #12
    8384:	bc0c      	pop	{r2, r3}
    8386:	4690      	mov	r8, r2
    8388:	4699      	mov	r9, r3
    838a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    838c:	4669      	mov	r1, sp
    838e:	9801      	ldr	r0, [sp, #4]
    8390:	4b18      	ldr	r3, [pc, #96]	; (83f4 <MQTTDeserialize_suback+0x98>)
    8392:	4798      	blx	r3
    8394:	9b01      	ldr	r3, [sp, #4]
    8396:	181b      	adds	r3, r3, r0
    8398:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
    839a:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
    839c:	2a01      	cmp	r2, #1
    839e:	ddf0      	ble.n	8382 <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
    83a0:	4698      	mov	r8, r3
    83a2:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
    83a4:	a801      	add	r0, sp, #4
    83a6:	4b14      	ldr	r3, [pc, #80]	; (83f8 <MQTTDeserialize_suback+0x9c>)
    83a8:	4798      	blx	r3
    83aa:	8020      	strh	r0, [r4, #0]
	*count = 0;
    83ac:	2300      	movs	r3, #0
    83ae:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
    83b0:	9b01      	ldr	r3, [sp, #4]
    83b2:	4598      	cmp	r8, r3
    83b4:	d916      	bls.n	83e4 <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
    83b6:	2e00      	cmp	r6, #0
    83b8:	db16      	blt.n	83e8 <MQTTDeserialize_suback+0x8c>
    83ba:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
    83bc:	4a0c      	ldr	r2, [pc, #48]	; (83f0 <MQTTDeserialize_suback+0x94>)
    83be:	4691      	mov	r9, r2
    83c0:	1c5a      	adds	r2, r3, #1
    83c2:	602a      	str	r2, [r5, #0]
    83c4:	009b      	lsls	r3, r3, #2
    83c6:	18fc      	adds	r4, r7, r3
    83c8:	a801      	add	r0, sp, #4
    83ca:	47c8      	blx	r9
    83cc:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
    83ce:	9b01      	ldr	r3, [sp, #4]
    83d0:	4598      	cmp	r8, r3
    83d2:	d905      	bls.n	83e0 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
    83d4:	682b      	ldr	r3, [r5, #0]
    83d6:	42b3      	cmp	r3, r6
    83d8:	ddf2      	ble.n	83c0 <MQTTDeserialize_suback+0x64>
			rc = -1;
    83da:	2001      	movs	r0, #1
    83dc:	4240      	negs	r0, r0
	return rc;
    83de:	e7d0      	b.n	8382 <MQTTDeserialize_suback+0x26>
	rc = 1;
    83e0:	2001      	movs	r0, #1
    83e2:	e7ce      	b.n	8382 <MQTTDeserialize_suback+0x26>
    83e4:	2001      	movs	r0, #1
    83e6:	e7cc      	b.n	8382 <MQTTDeserialize_suback+0x26>
			rc = -1;
    83e8:	2001      	movs	r0, #1
    83ea:	4240      	negs	r0, r0
    83ec:	e7c9      	b.n	8382 <MQTTDeserialize_suback+0x26>
    83ee:	46c0      	nop			; (mov r8, r8)
    83f0:	00007fbb 	.word	0x00007fbb
    83f4:	00007f8d 	.word	0x00007f8d
    83f8:	00007fa9 	.word	0x00007fa9

000083fc <mqtt_packet_read>:
 * \param timeout_ms[in]            The timeout
 *
 * \return    The MQTT status
 */
int mqtt_packet_read(Network *network, unsigned char *read_buffer, int length, int timeout_ms)
{
    83fc:	b510      	push	{r4, lr}
    83fe:	0008      	movs	r0, r1
    8400:	0011      	movs	r1, r2
    return wifi_read_data(read_buffer, length, timeout_ms);
    8402:	001a      	movs	r2, r3
    8404:	4b01      	ldr	r3, [pc, #4]	; (840c <mqtt_packet_read+0x10>)
    8406:	4798      	blx	r3
}
    8408:	bd10      	pop	{r4, pc}
    840a:	46c0      	nop			; (mov r8, r8)
    840c:	00004469 	.word	0x00004469

00008410 <mqtt_packet_write>:
 * \param timeout_ms[in]            The timeout
 *
 * \return    The MQTT status
 */
int mqtt_packet_write(Network *network, unsigned char *send_buffer, int length, int timeout_ms)
{
    8410:	b510      	push	{r4, lr}
    8412:	0008      	movs	r0, r1
    8414:	0011      	movs	r1, r2
    return wifi_send_data(send_buffer, length, timeout_ms);
    8416:	001a      	movs	r2, r3
    8418:	4b01      	ldr	r3, [pc, #4]	; (8420 <mqtt_packet_write+0x10>)
    841a:	4798      	blx	r3
}
    841c:	bd10      	pop	{r4, pc}
    841e:	46c0      	nop			; (mov r8, r8)
    8420:	00004555 	.word	0x00004555

00008424 <get_time_of_day>:
 * \return  Whether the function was successful
 *            0  - The function was successful
 *            -1 - The function was not successful
 */
static int get_time_of_day(struct timeval *time)
{
    8424:	b570      	push	{r4, r5, r6, lr}
    8426:	1e04      	subs	r4, r0, #0
	if (time == NULL)
    8428:	d012      	beq.n	8450 <get_time_of_day+0x2c>
    {
        return -1;
    }
        
	time->tv_sec =  (g_timer_val / 1000);
    842a:	4b0b      	ldr	r3, [pc, #44]	; (8458 <get_time_of_day+0x34>)
    842c:	681d      	ldr	r5, [r3, #0]
    842e:	21fa      	movs	r1, #250	; 0xfa
    8430:	0089      	lsls	r1, r1, #2
    8432:	0028      	movs	r0, r5
    8434:	4b09      	ldr	r3, [pc, #36]	; (845c <get_time_of_day+0x38>)
    8436:	4798      	blx	r3
    8438:	6020      	str	r0, [r4, #0]
	time->tv_usec = ((g_timer_val % 1000) * 1000);
    843a:	21fa      	movs	r1, #250	; 0xfa
    843c:	0089      	lsls	r1, r1, #2
    843e:	0028      	movs	r0, r5
    8440:	4b07      	ldr	r3, [pc, #28]	; (8460 <get_time_of_day+0x3c>)
    8442:	4798      	blx	r3
    8444:	23fa      	movs	r3, #250	; 0xfa
    8446:	009b      	lsls	r3, r3, #2
    8448:	4359      	muls	r1, r3
    844a:	6061      	str	r1, [r4, #4]

	return 0;
    844c:	2000      	movs	r0, #0
}
    844e:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
    8450:	2001      	movs	r0, #1
    8452:	4240      	negs	r0, r0
    8454:	e7fb      	b.n	844e <get_time_of_day+0x2a>
    8456:	46c0      	nop			; (mov r8, r8)
    8458:	200026f4 	.word	0x200026f4
    845c:	0000e565 	.word	0x0000e565
    8460:	0000e671 	.word	0x0000e671

00008464 <TimerCallback>:
    g_timer_val += TIMER_UPDATE_PERIOD;
    8464:	4a02      	ldr	r2, [pc, #8]	; (8470 <TimerCallback+0xc>)
    8466:	6813      	ldr	r3, [r2, #0]
    8468:	3364      	adds	r3, #100	; 0x64
    846a:	6013      	str	r3, [r2, #0]
}
    846c:	4770      	bx	lr
    846e:	46c0      	nop			; (mov r8, r8)
    8470:	200026f4 	.word	0x200026f4

00008474 <TimerInit>:
 *
 * \param[out] timer       The timer to be initialized
 */
void TimerInit(Timer *timer)
{
    if (timer == NULL)
    8474:	2800      	cmp	r0, #0
    8476:	d002      	beq.n	847e <TimerInit+0xa>
    {
        return;
    }
    
	timer->end_time.tv_sec  = 0;
    8478:	2300      	movs	r3, #0
    847a:	6003      	str	r3, [r0, #0]
	timer->end_time.tv_usec = 0;
    847c:	6043      	str	r3, [r0, #4]
}
    847e:	4770      	bx	lr

00008480 <TimerIsExpired>:
 * \return  Whether the timer has expired
 *            True  - The timer has expired
 *            False - The timer has not expired
 */
char TimerIsExpired(Timer *timer)
{
    8480:	b510      	push	{r4, lr}
    8482:	b082      	sub	sp, #8
    8484:	1e04      	subs	r4, r0, #0
	struct timeval time_now;
	struct timeval time_result;

    if (timer == NULL)
    8486:	d01b      	beq.n	84c0 <TimerIsExpired+0x40>
    {
        return true;
    }

	get_time_of_day(&time_now);
    8488:	4668      	mov	r0, sp
    848a:	4b0e      	ldr	r3, [pc, #56]	; (84c4 <TimerIsExpired+0x44>)
    848c:	4798      	blx	r3
    
	timer_subtract(&timer->end_time, &time_now, &time_result);
    848e:	6823      	ldr	r3, [r4, #0]
    8490:	9a00      	ldr	r2, [sp, #0]
    8492:	1a9a      	subs	r2, r3, r2
    8494:	6863      	ldr	r3, [r4, #4]
    8496:	9801      	ldr	r0, [sp, #4]
    8498:	1a1b      	subs	r3, r3, r0
    849a:	d40a      	bmi.n	84b2 <TimerIsExpired+0x32>

	return (time_result.tv_sec < 0 || (time_result.tv_sec == 0 && time_result.tv_usec <= 0));
    849c:	2a00      	cmp	r2, #0
    849e:	db0d      	blt.n	84bc <TimerIsExpired+0x3c>
    84a0:	2000      	movs	r0, #0
    84a2:	2a00      	cmp	r2, #0
    84a4:	d102      	bne.n	84ac <TimerIsExpired+0x2c>
    84a6:	1e58      	subs	r0, r3, #1
    84a8:	4318      	orrs	r0, r3
    84aa:	0fc0      	lsrs	r0, r0, #31
    84ac:	b2c0      	uxtb	r0, r0
}
    84ae:	b002      	add	sp, #8
    84b0:	bd10      	pop	{r4, pc}
	timer_subtract(&timer->end_time, &time_now, &time_result);
    84b2:	3a01      	subs	r2, #1
    84b4:	4904      	ldr	r1, [pc, #16]	; (84c8 <TimerIsExpired+0x48>)
    84b6:	468c      	mov	ip, r1
    84b8:	4463      	add	r3, ip
    84ba:	e7ef      	b.n	849c <TimerIsExpired+0x1c>
	return (time_result.tv_sec < 0 || (time_result.tv_sec == 0 && time_result.tv_usec <= 0));
    84bc:	2001      	movs	r0, #1
    84be:	e7f5      	b.n	84ac <TimerIsExpired+0x2c>
        return true;
    84c0:	2001      	movs	r0, #1
    84c2:	e7f4      	b.n	84ae <TimerIsExpired+0x2e>
    84c4:	00008425 	.word	0x00008425
    84c8:	000f4240 	.word	0x000f4240

000084cc <TimerCountdownMS>:
 * \param[out] timer       The timer set to expire in the specified number of
 *                         milliseconds
 * \param[in] timeout_ms   The timer expiration (in milliseconds)
 */
void TimerCountdownMS(Timer *timer, unsigned int timeout_ms)
{
    84cc:	b570      	push	{r4, r5, r6, lr}
    84ce:	b082      	sub	sp, #8
    84d0:	0004      	movs	r4, r0
    84d2:	000e      	movs	r6, r1
	struct timeval time_now;
    struct timeval time_interval = {timeout_ms / 1000, (int)((timeout_ms % 1000) * 1000)};

    if (timer == NULL)
    84d4:	2800      	cmp	r0, #0
    84d6:	d01e      	beq.n	8516 <TimerCountdownMS+0x4a>
    {
        return;
    }

	get_time_of_day(&time_now);
    84d8:	4668      	mov	r0, sp
    84da:	4b10      	ldr	r3, [pc, #64]	; (851c <TimerCountdownMS+0x50>)
    84dc:	4798      	blx	r3
    struct timeval time_interval = {timeout_ms / 1000, (int)((timeout_ms % 1000) * 1000)};
    84de:	21fa      	movs	r1, #250	; 0xfa
    84e0:	0089      	lsls	r1, r1, #2
    84e2:	0030      	movs	r0, r6
    84e4:	4b0e      	ldr	r3, [pc, #56]	; (8520 <TimerCountdownMS+0x54>)
    84e6:	4798      	blx	r3
    
	timer_add(&time_now, &time_interval, &timer->end_time);
    84e8:	9b00      	ldr	r3, [sp, #0]
    84ea:	18c5      	adds	r5, r0, r3
    84ec:	6025      	str	r5, [r4, #0]
    struct timeval time_interval = {timeout_ms / 1000, (int)((timeout_ms % 1000) * 1000)};
    84ee:	21fa      	movs	r1, #250	; 0xfa
    84f0:	0089      	lsls	r1, r1, #2
    84f2:	0030      	movs	r0, r6
    84f4:	4b0b      	ldr	r3, [pc, #44]	; (8524 <TimerCountdownMS+0x58>)
    84f6:	4798      	blx	r3
    84f8:	23fa      	movs	r3, #250	; 0xfa
    84fa:	009b      	lsls	r3, r3, #2
    84fc:	4359      	muls	r1, r3
	timer_add(&time_now, &time_interval, &timer->end_time);
    84fe:	9b01      	ldr	r3, [sp, #4]
    8500:	18c9      	adds	r1, r1, r3
    8502:	6061      	str	r1, [r4, #4]
    8504:	4b08      	ldr	r3, [pc, #32]	; (8528 <TimerCountdownMS+0x5c>)
    8506:	4299      	cmp	r1, r3
    8508:	dd05      	ble.n	8516 <TimerCountdownMS+0x4a>
    850a:	3501      	adds	r5, #1
    850c:	6025      	str	r5, [r4, #0]
    850e:	4b07      	ldr	r3, [pc, #28]	; (852c <TimerCountdownMS+0x60>)
    8510:	469c      	mov	ip, r3
    8512:	4461      	add	r1, ip
    8514:	6061      	str	r1, [r4, #4]
}
    8516:	b002      	add	sp, #8
    8518:	bd70      	pop	{r4, r5, r6, pc}
    851a:	46c0      	nop			; (mov r8, r8)
    851c:	00008425 	.word	0x00008425
    8520:	0000e565 	.word	0x0000e565
    8524:	0000e671 	.word	0x0000e671
    8528:	000f423f 	.word	0x000f423f
    852c:	fff0bdc0 	.word	0xfff0bdc0

00008530 <TimerCountdown>:
 * \param[out] timer       The timer set to expire in the specified number of
 *                         seconds
 * \param[in] timeout_ms   The timer expiration (in seconds)
 */
void TimerCountdown(Timer *timer, unsigned int timeout)
{
    8530:	b530      	push	{r4, r5, lr}
    8532:	b083      	sub	sp, #12
    8534:	0005      	movs	r5, r0
    8536:	000c      	movs	r4, r1
	struct timeval time_now;
	struct timeval time_interval = {timeout, 0};

    if (timer == NULL)
    8538:	2800      	cmp	r0, #0
    853a:	d011      	beq.n	8560 <TimerCountdown+0x30>
    {
        return;
    }

	get_time_of_day(&time_now);
    853c:	4668      	mov	r0, sp
    853e:	4b09      	ldr	r3, [pc, #36]	; (8564 <TimerCountdown+0x34>)
    8540:	4798      	blx	r3

	timer_add(&time_now, &time_interval, &timer->end_time);
    8542:	9b00      	ldr	r3, [sp, #0]
    8544:	469c      	mov	ip, r3
    8546:	4464      	add	r4, ip
    8548:	602c      	str	r4, [r5, #0]
    854a:	9b01      	ldr	r3, [sp, #4]
    854c:	606b      	str	r3, [r5, #4]
    854e:	4a06      	ldr	r2, [pc, #24]	; (8568 <TimerCountdown+0x38>)
    8550:	4293      	cmp	r3, r2
    8552:	dd05      	ble.n	8560 <TimerCountdown+0x30>
    8554:	1c61      	adds	r1, r4, #1
    8556:	6029      	str	r1, [r5, #0]
    8558:	4a04      	ldr	r2, [pc, #16]	; (856c <TimerCountdown+0x3c>)
    855a:	4694      	mov	ip, r2
    855c:	4463      	add	r3, ip
    855e:	606b      	str	r3, [r5, #4]
}
    8560:	b003      	add	sp, #12
    8562:	bd30      	pop	{r4, r5, pc}
    8564:	00008425 	.word	0x00008425
    8568:	000f423f 	.word	0x000f423f
    856c:	fff0bdc0 	.word	0xfff0bdc0

00008570 <TimerLeftMS>:
 * \param[out] timer       The timer to be set to checked
 *
 * \return  The number of milliseconds left on the countdown timer
 */
int TimerLeftMS(Timer *timer)
{
    8570:	b510      	push	{r4, lr}
    8572:	b082      	sub	sp, #8
    8574:	1e04      	subs	r4, r0, #0
	int result_ms = 0;
	struct timeval time_now;
    struct timeval time_result;

    if (timer == NULL)
    8576:	d019      	beq.n	85ac <TimerLeftMS+0x3c>
    {
        return 0;
    }

	get_time_of_day(&time_now);
    8578:	4668      	mov	r0, sp
    857a:	4b0e      	ldr	r3, [pc, #56]	; (85b4 <TimerLeftMS+0x44>)
    857c:	4798      	blx	r3
    
	timer_subtract(&timer->end_time, &time_now, &time_result);
    857e:	6823      	ldr	r3, [r4, #0]
    8580:	9a00      	ldr	r2, [sp, #0]
    8582:	1a9b      	subs	r3, r3, r2
    8584:	6860      	ldr	r0, [r4, #4]
    8586:	9a01      	ldr	r2, [sp, #4]
    8588:	1a80      	subs	r0, r0, r2
    858a:	d40a      	bmi.n	85a2 <TimerLeftMS+0x32>
	if(time_result.tv_sec >= 0)
    858c:	2b00      	cmp	r3, #0
    858e:	db0f      	blt.n	85b0 <TimerLeftMS+0x40>
    {
		result_ms = (int)((time_result.tv_sec * 1000) + (time_result.tv_usec / 1000));
    8590:	21fa      	movs	r1, #250	; 0xfa
    8592:	0089      	lsls	r1, r1, #2
    8594:	434b      	muls	r3, r1
    8596:	001c      	movs	r4, r3
    8598:	4b07      	ldr	r3, [pc, #28]	; (85b8 <TimerLeftMS+0x48>)
    859a:	4798      	blx	r3
    859c:	1820      	adds	r0, r4, r0
	}

	return result_ms;
}
    859e:	b002      	add	sp, #8
    85a0:	bd10      	pop	{r4, pc}
	timer_subtract(&timer->end_time, &time_now, &time_result);
    85a2:	3b01      	subs	r3, #1
    85a4:	4a05      	ldr	r2, [pc, #20]	; (85bc <TimerLeftMS+0x4c>)
    85a6:	4694      	mov	ip, r2
    85a8:	4460      	add	r0, ip
    85aa:	e7ef      	b.n	858c <TimerLeftMS+0x1c>
        return 0;
    85ac:	2000      	movs	r0, #0
    85ae:	e7f6      	b.n	859e <TimerLeftMS+0x2e>
	int result_ms = 0;
    85b0:	2000      	movs	r0, #0
    85b2:	e7f4      	b.n	859e <TimerLeftMS+0x2e>
    85b4:	00008425 	.word	0x00008425
    85b8:	0000e679 	.word	0x0000e679
    85bc:	000f4240 	.word	0x000f4240

000085c0 <json_value_init_string_no_copy>:
    parson_free(array->items);
    parson_free(array);
}

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string) {
    85c0:	b510      	push	{r4, lr}
    85c2:	0004      	movs	r4, r0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
    85c4:	4b04      	ldr	r3, [pc, #16]	; (85d8 <json_value_init_string_no_copy+0x18>)
    85c6:	681b      	ldr	r3, [r3, #0]
    85c8:	2010      	movs	r0, #16
    85ca:	4798      	blx	r3
    if (!new_value)
    85cc:	2800      	cmp	r0, #0
    85ce:	d002      	beq.n	85d6 <json_value_init_string_no_copy+0x16>
        return NULL;
    new_value->type = JSONString;
    85d0:	2302      	movs	r3, #2
    85d2:	6003      	str	r3, [r0, #0]
    new_value->value.string = string;
    85d4:	6084      	str	r4, [r0, #8]
    return new_value;
}
    85d6:	bd10      	pop	{r4, pc}
    85d8:	200002b8 	.word	0x200002b8

000085dc <is_utf16_hex>:
static int is_utf16_hex(const unsigned char *s) {
    85dc:	b510      	push	{r4, lr}
    85de:	0004      	movs	r4, r0
    return isxdigit(s[0]) && isxdigit(s[1]) && isxdigit(s[2]) && isxdigit(s[3]);
    85e0:	4b12      	ldr	r3, [pc, #72]	; (862c <is_utf16_hex+0x50>)
    85e2:	4798      	blx	r3
    85e4:	7823      	ldrb	r3, [r4, #0]
    85e6:	18c0      	adds	r0, r0, r3
    85e8:	7843      	ldrb	r3, [r0, #1]
    85ea:	2244      	movs	r2, #68	; 0x44
    85ec:	2000      	movs	r0, #0
    85ee:	421a      	tst	r2, r3
    85f0:	d100      	bne.n	85f4 <is_utf16_hex+0x18>
}
    85f2:	bd10      	pop	{r4, pc}
    return isxdigit(s[0]) && isxdigit(s[1]) && isxdigit(s[2]) && isxdigit(s[3]);
    85f4:	4b0d      	ldr	r3, [pc, #52]	; (862c <is_utf16_hex+0x50>)
    85f6:	4798      	blx	r3
    85f8:	7863      	ldrb	r3, [r4, #1]
    85fa:	18c0      	adds	r0, r0, r3
    85fc:	7843      	ldrb	r3, [r0, #1]
    85fe:	2244      	movs	r2, #68	; 0x44
    8600:	2000      	movs	r0, #0
    8602:	421a      	tst	r2, r3
    8604:	d0f5      	beq.n	85f2 <is_utf16_hex+0x16>
    8606:	4b09      	ldr	r3, [pc, #36]	; (862c <is_utf16_hex+0x50>)
    8608:	4798      	blx	r3
    860a:	78a3      	ldrb	r3, [r4, #2]
    860c:	18c0      	adds	r0, r0, r3
    860e:	7843      	ldrb	r3, [r0, #1]
    8610:	2244      	movs	r2, #68	; 0x44
    8612:	2000      	movs	r0, #0
    8614:	421a      	tst	r2, r3
    8616:	d0ec      	beq.n	85f2 <is_utf16_hex+0x16>
    8618:	4b04      	ldr	r3, [pc, #16]	; (862c <is_utf16_hex+0x50>)
    861a:	4798      	blx	r3
    861c:	78e3      	ldrb	r3, [r4, #3]
    861e:	18c0      	adds	r0, r0, r3
    8620:	7843      	ldrb	r3, [r0, #1]
    8622:	2044      	movs	r0, #68	; 0x44
    8624:	4018      	ands	r0, r3
    8626:	1e43      	subs	r3, r0, #1
    8628:	4198      	sbcs	r0, r3
    862a:	e7e2      	b.n	85f2 <is_utf16_hex+0x16>
    862c:	00010855 	.word	0x00010855

00008630 <json_object_resize>:
static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
    8630:	b5f0      	push	{r4, r5, r6, r7, lr}
    8632:	46c6      	mov	lr, r8
    8634:	b500      	push	{lr}
    8636:	0004      	movs	r4, r0
    8638:	000d      	movs	r5, r1
    if ((object->names == NULL && object->values != NULL) ||
    863a:	6803      	ldr	r3, [r0, #0]
    863c:	2b00      	cmp	r3, #0
    863e:	d028      	beq.n	8692 <json_object_resize+0x62>
        (object->names != NULL && object->values == NULL) ||
    8640:	6843      	ldr	r3, [r0, #4]
    8642:	2b00      	cmp	r3, #0
    8644:	d035      	beq.n	86b2 <json_object_resize+0x82>
    8646:	2d00      	cmp	r5, #0
    8648:	d036      	beq.n	86b8 <json_object_resize+0x88>
    temp_names = (char**)parson_malloc(new_capacity * sizeof(char*));
    864a:	00af      	lsls	r7, r5, #2
    864c:	4b1d      	ldr	r3, [pc, #116]	; (86c4 <json_object_resize+0x94>)
    864e:	681b      	ldr	r3, [r3, #0]
    8650:	0038      	movs	r0, r7
    8652:	4798      	blx	r3
    8654:	1e06      	subs	r6, r0, #0
    if (temp_names == NULL)
    8656:	d032      	beq.n	86be <json_object_resize+0x8e>
    temp_values = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
    8658:	4b1a      	ldr	r3, [pc, #104]	; (86c4 <json_object_resize+0x94>)
    865a:	681b      	ldr	r3, [r3, #0]
    865c:	0038      	movs	r0, r7
    865e:	4798      	blx	r3
    8660:	4680      	mov	r8, r0
    if (object->names != NULL && object->values != NULL && object->count > 0) {
    8662:	6821      	ldr	r1, [r4, #0]
    8664:	2900      	cmp	r1, #0
    8666:	d005      	beq.n	8674 <json_object_resize+0x44>
    8668:	6863      	ldr	r3, [r4, #4]
    866a:	2b00      	cmp	r3, #0
    866c:	d002      	beq.n	8674 <json_object_resize+0x44>
    866e:	68a2      	ldr	r2, [r4, #8]
    8670:	2a00      	cmp	r2, #0
    8672:	d114      	bne.n	869e <json_object_resize+0x6e>
    parson_free(object->names);
    8674:	4f14      	ldr	r7, [pc, #80]	; (86c8 <json_object_resize+0x98>)
    8676:	6820      	ldr	r0, [r4, #0]
    8678:	683b      	ldr	r3, [r7, #0]
    867a:	4798      	blx	r3
    parson_free(object->values);
    867c:	683b      	ldr	r3, [r7, #0]
    867e:	6860      	ldr	r0, [r4, #4]
    8680:	4798      	blx	r3
    object->names = temp_names;
    8682:	6026      	str	r6, [r4, #0]
    object->values = temp_values;
    8684:	4643      	mov	r3, r8
    8686:	6063      	str	r3, [r4, #4]
    object->capacity = new_capacity;
    8688:	60e5      	str	r5, [r4, #12]
    return JSONSuccess;
    868a:	2000      	movs	r0, #0
}
    868c:	bc04      	pop	{r2}
    868e:	4690      	mov	r8, r2
    8690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((object->names == NULL && object->values != NULL) ||
    8692:	6843      	ldr	r3, [r0, #4]
    8694:	2b00      	cmp	r3, #0
    8696:	d0d6      	beq.n	8646 <json_object_resize+0x16>
            return JSONFailure; /* Shouldn't happen */
    8698:	2001      	movs	r0, #1
    869a:	4240      	negs	r0, r0
    869c:	e7f6      	b.n	868c <json_object_resize+0x5c>
        memcpy(temp_names, object->names, object->count * sizeof(char*));
    869e:	0092      	lsls	r2, r2, #2
    86a0:	0030      	movs	r0, r6
    86a2:	4f0a      	ldr	r7, [pc, #40]	; (86cc <json_object_resize+0x9c>)
    86a4:	47b8      	blx	r7
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
    86a6:	68a3      	ldr	r3, [r4, #8]
    86a8:	009a      	lsls	r2, r3, #2
    86aa:	6861      	ldr	r1, [r4, #4]
    86ac:	4640      	mov	r0, r8
    86ae:	47b8      	blx	r7
    86b0:	e7e0      	b.n	8674 <json_object_resize+0x44>
            return JSONFailure; /* Shouldn't happen */
    86b2:	2001      	movs	r0, #1
    86b4:	4240      	negs	r0, r0
    86b6:	e7e9      	b.n	868c <json_object_resize+0x5c>
    86b8:	2001      	movs	r0, #1
    86ba:	4240      	negs	r0, r0
    86bc:	e7e6      	b.n	868c <json_object_resize+0x5c>
        return JSONFailure;
    86be:	2001      	movs	r0, #1
    86c0:	4240      	negs	r0, r0
    86c2:	e7e3      	b.n	868c <json_object_resize+0x5c>
    86c4:	200002b8 	.word	0x200002b8
    86c8:	200002b4 	.word	0x200002b4
    86cc:	000109c9 	.word	0x000109c9

000086d0 <json_array_resize>:
static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
    86d0:	b570      	push	{r4, r5, r6, lr}
    86d2:	0004      	movs	r4, r0
    86d4:	1e0d      	subs	r5, r1, #0
    if (new_capacity == 0) {
    86d6:	d017      	beq.n	8708 <json_array_resize+0x38>
    new_items = parson_malloc(new_capacity * sizeof(JSON_Value*));
    86d8:	0088      	lsls	r0, r1, #2
    86da:	4b0e      	ldr	r3, [pc, #56]	; (8714 <json_array_resize+0x44>)
    86dc:	681b      	ldr	r3, [r3, #0]
    86de:	4798      	blx	r3
    86e0:	1e06      	subs	r6, r0, #0
    if (new_items == NULL) {
    86e2:	d014      	beq.n	870e <json_array_resize+0x3e>
    if (array->items != NULL && array->count > 0) {
    86e4:	6821      	ldr	r1, [r4, #0]
    86e6:	2900      	cmp	r1, #0
    86e8:	d002      	beq.n	86f0 <json_array_resize+0x20>
    86ea:	6862      	ldr	r2, [r4, #4]
    86ec:	2a00      	cmp	r2, #0
    86ee:	d107      	bne.n	8700 <json_array_resize+0x30>
    parson_free(array->items);
    86f0:	4b09      	ldr	r3, [pc, #36]	; (8718 <json_array_resize+0x48>)
    86f2:	681b      	ldr	r3, [r3, #0]
    86f4:	6820      	ldr	r0, [r4, #0]
    86f6:	4798      	blx	r3
    array->items = new_items;
    86f8:	6026      	str	r6, [r4, #0]
    array->capacity = new_capacity;
    86fa:	60a5      	str	r5, [r4, #8]
    return JSONSuccess;
    86fc:	2000      	movs	r0, #0
}
    86fe:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
    8700:	0092      	lsls	r2, r2, #2
    8702:	4b06      	ldr	r3, [pc, #24]	; (871c <json_array_resize+0x4c>)
    8704:	4798      	blx	r3
    8706:	e7f3      	b.n	86f0 <json_array_resize+0x20>
        return JSONFailure;
    8708:	2001      	movs	r0, #1
    870a:	4240      	negs	r0, r0
    870c:	e7f7      	b.n	86fe <json_array_resize+0x2e>
        return JSONFailure;
    870e:	2001      	movs	r0, #1
    8710:	4240      	negs	r0, r0
    8712:	e7f4      	b.n	86fe <json_array_resize+0x2e>
    8714:	200002b8 	.word	0x200002b8
    8718:	200002b4 	.word	0x200002b4
    871c:	000109c9 	.word	0x000109c9

00008720 <json_array_add>:
static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
    8720:	b570      	push	{r4, r5, r6, lr}
    8722:	0004      	movs	r4, r0
    8724:	000d      	movs	r5, r1
    if (array->count >= array->capacity) {
    8726:	6881      	ldr	r1, [r0, #8]
    8728:	6843      	ldr	r3, [r0, #4]
    872a:	428b      	cmp	r3, r1
    872c:	d30c      	bcc.n	8748 <json_array_add+0x28>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
    872e:	0049      	lsls	r1, r1, #1
    8730:	290f      	cmp	r1, #15
    8732:	d200      	bcs.n	8736 <json_array_add+0x16>
    8734:	210f      	movs	r1, #15
        if (new_capacity > ARRAY_MAX_CAPACITY)
    8736:	23f0      	movs	r3, #240	; 0xf0
    8738:	025b      	lsls	r3, r3, #9
    873a:	4299      	cmp	r1, r3
    873c:	d80d      	bhi.n	875a <json_array_add+0x3a>
        if (json_array_resize(array, new_capacity) == JSONFailure)
    873e:	0020      	movs	r0, r4
    8740:	4b07      	ldr	r3, [pc, #28]	; (8760 <json_array_add+0x40>)
    8742:	4798      	blx	r3
    8744:	1c43      	adds	r3, r0, #1
    8746:	d007      	beq.n	8758 <json_array_add+0x38>
    array->items[array->count] = value;
    8748:	6863      	ldr	r3, [r4, #4]
    874a:	009b      	lsls	r3, r3, #2
    874c:	6822      	ldr	r2, [r4, #0]
    874e:	509d      	str	r5, [r3, r2]
    array->count++;
    8750:	6863      	ldr	r3, [r4, #4]
    8752:	3301      	adds	r3, #1
    8754:	6063      	str	r3, [r4, #4]
    return JSONSuccess;
    8756:	2000      	movs	r0, #0
}
    8758:	bd70      	pop	{r4, r5, r6, pc}
            return JSONFailure;
    875a:	2001      	movs	r0, #1
    875c:	4240      	negs	r0, r0
    875e:	e7fb      	b.n	8758 <json_array_add+0x38>
    8760:	000086d1 	.word	0x000086d1

00008764 <get_quoted_string>:
    return NULL;
}

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string) {
    8764:	b5f0      	push	{r4, r5, r6, r7, lr}
    8766:	46de      	mov	lr, fp
    8768:	4657      	mov	r7, sl
    876a:	b580      	push	{r7, lr}
    876c:	b085      	sub	sp, #20
    const char *string_start = *string;
    876e:	6805      	ldr	r5, [r0, #0]
    SKIP_CHAR(string);
    8770:	1c6c      	adds	r4, r5, #1
    8772:	6004      	str	r4, [r0, #0]
    while (**string != '\"') {
    8774:	786b      	ldrb	r3, [r5, #1]
    8776:	2b22      	cmp	r3, #34	; 0x22
    8778:	d015      	beq.n	87a6 <get_quoted_string+0x42>
        if (**string == '\0')
    877a:	2b00      	cmp	r3, #0
    877c:	d100      	bne.n	8780 <get_quoted_string+0x1c>
    877e:	e105      	b.n	898c <get_quoted_string+0x228>
    8780:	0022      	movs	r2, r4
    8782:	e008      	b.n	8796 <get_quoted_string+0x32>
        SKIP_CHAR(string);
    8784:	6803      	ldr	r3, [r0, #0]
    8786:	1c5a      	adds	r2, r3, #1
    8788:	6002      	str	r2, [r0, #0]
    while (**string != '\"') {
    878a:	785b      	ldrb	r3, [r3, #1]
    878c:	2b22      	cmp	r3, #34	; 0x22
    878e:	d00b      	beq.n	87a8 <get_quoted_string+0x44>
        if (**string == '\0')
    8790:	2b00      	cmp	r3, #0
    8792:	d100      	bne.n	8796 <get_quoted_string+0x32>
    8794:	e0fa      	b.n	898c <get_quoted_string+0x228>
        if (**string == '\\') {
    8796:	2b5c      	cmp	r3, #92	; 0x5c
    8798:	d1f4      	bne.n	8784 <get_quoted_string+0x20>
            SKIP_CHAR(string);
    879a:	1c53      	adds	r3, r2, #1
    879c:	6003      	str	r3, [r0, #0]
            if (**string == '\0')
    879e:	7853      	ldrb	r3, [r2, #1]
    87a0:	2b00      	cmp	r3, #0
    87a2:	d1ef      	bne.n	8784 <get_quoted_string+0x20>
    87a4:	e002      	b.n	87ac <get_quoted_string+0x48>
    while (**string != '\"') {
    87a6:	0022      	movs	r2, r4
    SKIP_CHAR(string);
    87a8:	3201      	adds	r2, #1
    87aa:	6002      	str	r2, [r0, #0]
    size_t string_len = 0;
    skip_quotes(string);
    if (**string == '\0')
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	7803      	ldrb	r3, [r0, #0]
        return NULL;
    87b0:	2700      	movs	r7, #0
    if (**string == '\0')
    87b2:	2b00      	cmp	r3, #0
    87b4:	d100      	bne.n	87b8 <get_quoted_string+0x54>
    87b6:	e0ea      	b.n	898e <get_quoted_string+0x22a>
    string_len = *string - string_start - 2; /* length without quotes */
    87b8:	1b40      	subs	r0, r0, r5
    87ba:	1e86      	subs	r6, r0, #2
    size_t initial_size = (len + 1) * sizeof(char);
    87bc:	3801      	subs	r0, #1
    char *output = (char*)parson_malloc(initial_size);
    87be:	4b77      	ldr	r3, [pc, #476]	; (899c <get_quoted_string+0x238>)
    87c0:	681b      	ldr	r3, [r3, #0]
    87c2:	4798      	blx	r3
    87c4:	9001      	str	r0, [sp, #4]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
    87c6:	786b      	ldrb	r3, [r5, #1]
    87c8:	2b00      	cmp	r3, #0
    87ca:	d100      	bne.n	87ce <get_quoted_string+0x6a>
    87cc:	e0c1      	b.n	8952 <get_quoted_string+0x1ee>
    87ce:	0025      	movs	r5, r4
    87d0:	2e00      	cmp	r6, #0
    87d2:	d100      	bne.n	87d6 <get_quoted_string+0x72>
    87d4:	e0d2      	b.n	897c <get_quoted_string+0x218>
    87d6:	0007      	movs	r7, r0
    87d8:	e016      	b.n	8808 <get_quoted_string+0xa4>
            input_ptr++;
    87da:	1c60      	adds	r0, r4, #1
            switch (*input_ptr) {
    87dc:	7863      	ldrb	r3, [r4, #1]
    87de:	3b22      	subs	r3, #34	; 0x22
    87e0:	b2da      	uxtb	r2, r3
    87e2:	2a53      	cmp	r2, #83	; 0x53
    87e4:	d900      	bls.n	87e8 <get_quoted_string+0x84>
    87e6:	e0cb      	b.n	8980 <get_quoted_string+0x21c>
    87e8:	0093      	lsls	r3, r2, #2
    87ea:	4a6d      	ldr	r2, [pc, #436]	; (89a0 <get_quoted_string+0x23c>)
    87ec:	58d3      	ldr	r3, [r2, r3]
    87ee:	469f      	mov	pc, r3
                case '\"': *output_ptr = '\"'; break;
    87f0:	2322      	movs	r3, #34	; 0x22
    87f2:	703b      	strb	r3, [r7, #0]
        output_ptr++;
    87f4:	3701      	adds	r7, #1
        input_ptr++;
    87f6:	1c44      	adds	r4, r0, #1
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
    87f8:	7843      	ldrb	r3, [r0, #1]
    87fa:	2b00      	cmp	r3, #0
    87fc:	d100      	bne.n	8800 <get_quoted_string+0x9c>
    87fe:	e0a9      	b.n	8954 <get_quoted_string+0x1f0>
    8800:	1b62      	subs	r2, r4, r5
    8802:	4296      	cmp	r6, r2
    8804:	d800      	bhi.n	8808 <get_quoted_string+0xa4>
    8806:	e0a5      	b.n	8954 <get_quoted_string+0x1f0>
        if (*input_ptr == '\\') {
    8808:	2b5c      	cmp	r3, #92	; 0x5c
    880a:	d0e6      	beq.n	87da <get_quoted_string+0x76>
        } else if ((unsigned char)*input_ptr < 0x20) {
    880c:	2b1f      	cmp	r3, #31
    880e:	d800      	bhi.n	8812 <get_quoted_string+0xae>
    8810:	e0b6      	b.n	8980 <get_quoted_string+0x21c>
            *output_ptr = *input_ptr;
    8812:	703b      	strb	r3, [r7, #0]
    8814:	0020      	movs	r0, r4
    8816:	e7ed      	b.n	87f4 <get_quoted_string+0x90>
                case '\\': *output_ptr = '\\'; break;
    8818:	235c      	movs	r3, #92	; 0x5c
    881a:	703b      	strb	r3, [r7, #0]
    881c:	e7ea      	b.n	87f4 <get_quoted_string+0x90>
                case '/':  *output_ptr = '/';  break;
    881e:	232f      	movs	r3, #47	; 0x2f
    8820:	703b      	strb	r3, [r7, #0]
    8822:	e7e7      	b.n	87f4 <get_quoted_string+0x90>
                case 'b':  *output_ptr = '\b'; break;
    8824:	2308      	movs	r3, #8
    8826:	703b      	strb	r3, [r7, #0]
    8828:	e7e4      	b.n	87f4 <get_quoted_string+0x90>
                case 'f':  *output_ptr = '\f'; break;
    882a:	230c      	movs	r3, #12
    882c:	703b      	strb	r3, [r7, #0]
    882e:	e7e1      	b.n	87f4 <get_quoted_string+0x90>
                case 'n':  *output_ptr = '\n'; break;
    8830:	230a      	movs	r3, #10
    8832:	703b      	strb	r3, [r7, #0]
    8834:	e7de      	b.n	87f4 <get_quoted_string+0x90>
                case 'r':  *output_ptr = '\r'; break;
    8836:	230d      	movs	r3, #13
    8838:	703b      	strb	r3, [r7, #0]
    883a:	e7db      	b.n	87f4 <get_quoted_string+0x90>
                case 't':  *output_ptr = '\t'; break;
    883c:	2309      	movs	r3, #9
    883e:	703b      	strb	r3, [r7, #0]
    8840:	e7d8      	b.n	87f4 <get_quoted_string+0x90>
    unprocessed_ptr++; /* skips u */
    8842:	1ca3      	adds	r3, r4, #2
    8844:	469a      	mov	sl, r3
    if (!is_utf16_hex((const unsigned char*)unprocessed_ptr) || sscanf(unprocessed_ptr, "%4x", &cp) == EOF)
    8846:	0018      	movs	r0, r3
    8848:	4b56      	ldr	r3, [pc, #344]	; (89a4 <get_quoted_string+0x240>)
    884a:	4798      	blx	r3
    884c:	2800      	cmp	r0, #0
    884e:	d100      	bne.n	8852 <get_quoted_string+0xee>
    8850:	e096      	b.n	8980 <get_quoted_string+0x21c>
    8852:	aa02      	add	r2, sp, #8
    8854:	4954      	ldr	r1, [pc, #336]	; (89a8 <get_quoted_string+0x244>)
    8856:	4650      	mov	r0, sl
    8858:	4b54      	ldr	r3, [pc, #336]	; (89ac <get_quoted_string+0x248>)
    885a:	4798      	blx	r3
    885c:	1c43      	adds	r3, r0, #1
    885e:	d100      	bne.n	8862 <get_quoted_string+0xfe>
    8860:	e08e      	b.n	8980 <get_quoted_string+0x21c>
    if (cp < 0x80) {
    8862:	9b02      	ldr	r3, [sp, #8]
    8864:	469b      	mov	fp, r3
    8866:	2b7f      	cmp	r3, #127	; 0x7f
    8868:	d803      	bhi.n	8872 <get_quoted_string+0x10e>
        *processed_ptr = cp; /* 0xxxxxxx */
    886a:	703b      	strb	r3, [r7, #0]
    unprocessed_ptr += 3;
    886c:	4650      	mov	r0, sl
    886e:	3003      	adds	r0, #3
    8870:	e7c0      	b.n	87f4 <get_quoted_string+0x90>
    } else if (cp < 0x800) {
    8872:	4b4f      	ldr	r3, [pc, #316]	; (89b0 <get_quoted_string+0x24c>)
    8874:	459b      	cmp	fp, r3
    8876:	d80f      	bhi.n	8898 <get_quoted_string+0x134>
        *processed_ptr++ = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
    8878:	465b      	mov	r3, fp
    887a:	055a      	lsls	r2, r3, #21
    887c:	0ed2      	lsrs	r2, r2, #27
    887e:	2340      	movs	r3, #64	; 0x40
    8880:	425b      	negs	r3, r3
    8882:	4313      	orrs	r3, r2
    8884:	703b      	strb	r3, [r7, #0]
        *processed_ptr   = ((cp     ) & 0x3F) | 0x80; /* 10xxxxxx */
    8886:	223f      	movs	r2, #63	; 0x3f
    8888:	9b02      	ldr	r3, [sp, #8]
    888a:	401a      	ands	r2, r3
    888c:	2380      	movs	r3, #128	; 0x80
    888e:	425b      	negs	r3, r3
    8890:	4313      	orrs	r3, r2
    8892:	707b      	strb	r3, [r7, #1]
        *processed_ptr++ = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
    8894:	3701      	adds	r7, #1
    8896:	e7e9      	b.n	886c <get_quoted_string+0x108>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
    8898:	4b46      	ldr	r3, [pc, #280]	; (89b4 <get_quoted_string+0x250>)
    889a:	445b      	add	r3, fp
    889c:	4a44      	ldr	r2, [pc, #272]	; (89b0 <get_quoted_string+0x24c>)
    889e:	4293      	cmp	r3, r2
    88a0:	d914      	bls.n	88cc <get_quoted_string+0x168>
        *processed_ptr++ = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
    88a2:	465b      	mov	r3, fp
    88a4:	041a      	lsls	r2, r3, #16
    88a6:	0f12      	lsrs	r2, r2, #28
    88a8:	2320      	movs	r3, #32
    88aa:	425b      	negs	r3, r3
    88ac:	4313      	orrs	r3, r2
    88ae:	703b      	strb	r3, [r7, #0]
        *processed_ptr++ = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
    88b0:	9b02      	ldr	r3, [sp, #8]
    88b2:	099b      	lsrs	r3, r3, #6
    88b4:	213f      	movs	r1, #63	; 0x3f
    88b6:	400b      	ands	r3, r1
    88b8:	2280      	movs	r2, #128	; 0x80
    88ba:	4252      	negs	r2, r2
    88bc:	4313      	orrs	r3, r2
    88be:	707b      	strb	r3, [r7, #1]
        *processed_ptr   = ((cp     )  & 0x3F) | 0x80; /* 10xxxxxx */
    88c0:	9b02      	ldr	r3, [sp, #8]
    88c2:	4019      	ands	r1, r3
    88c4:	430a      	orrs	r2, r1
    88c6:	70ba      	strb	r2, [r7, #2]
        *processed_ptr++ = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
    88c8:	3702      	adds	r7, #2
    88ca:	e7cf      	b.n	886c <get_quoted_string+0x108>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
    88cc:	4a3a      	ldr	r2, [pc, #232]	; (89b8 <get_quoted_string+0x254>)
    88ce:	4293      	cmp	r3, r2
    88d0:	d856      	bhi.n	8980 <get_quoted_string+0x21c>
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u' || /* starts with \u? */
    88d2:	79a3      	ldrb	r3, [r4, #6]
    88d4:	2b5c      	cmp	r3, #92	; 0x5c
    88d6:	d153      	bne.n	8980 <get_quoted_string+0x21c>
    88d8:	3b54      	subs	r3, #84	; 0x54
    88da:	469a      	mov	sl, r3
    88dc:	44a2      	add	sl, r4
    88de:	79e3      	ldrb	r3, [r4, #7]
    88e0:	2b75      	cmp	r3, #117	; 0x75
    88e2:	d14d      	bne.n	8980 <get_quoted_string+0x21c>
            !is_utf16_hex((const unsigned char*)unprocessed_ptr)          ||
    88e4:	4650      	mov	r0, sl
    88e6:	4b2f      	ldr	r3, [pc, #188]	; (89a4 <get_quoted_string+0x240>)
    88e8:	4798      	blx	r3
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u' || /* starts with \u? */
    88ea:	2800      	cmp	r0, #0
    88ec:	d048      	beq.n	8980 <get_quoted_string+0x21c>
            sscanf(unprocessed_ptr, "%4x", &trail) == EOF           ||
    88ee:	aa03      	add	r2, sp, #12
    88f0:	492d      	ldr	r1, [pc, #180]	; (89a8 <get_quoted_string+0x244>)
    88f2:	4650      	mov	r0, sl
    88f4:	4b2d      	ldr	r3, [pc, #180]	; (89ac <get_quoted_string+0x248>)
    88f6:	4798      	blx	r3
            !is_utf16_hex((const unsigned char*)unprocessed_ptr)          ||
    88f8:	1c43      	adds	r3, r0, #1
    88fa:	d041      	beq.n	8980 <get_quoted_string+0x21c>
            trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
    88fc:	9a03      	ldr	r2, [sp, #12]
            sscanf(unprocessed_ptr, "%4x", &trail) == EOF           ||
    88fe:	4b2f      	ldr	r3, [pc, #188]	; (89bc <get_quoted_string+0x258>)
    8900:	18d1      	adds	r1, r2, r3
    8902:	4b2d      	ldr	r3, [pc, #180]	; (89b8 <get_quoted_string+0x254>)
    8904:	4299      	cmp	r1, r3
    8906:	d83b      	bhi.n	8980 <get_quoted_string+0x21c>
        cp = ((((lead-0xD800)&0x3FF)<<10)|((trail-0xDC00)&0x3FF))+0x010000;
    8908:	465b      	mov	r3, fp
    890a:	029b      	lsls	r3, r3, #10
    890c:	492c      	ldr	r1, [pc, #176]	; (89c0 <get_quoted_string+0x25c>)
    890e:	400b      	ands	r3, r1
    8910:	0592      	lsls	r2, r2, #22
    8912:	0d92      	lsrs	r2, r2, #22
    8914:	4313      	orrs	r3, r2
    8916:	2280      	movs	r2, #128	; 0x80
    8918:	0252      	lsls	r2, r2, #9
    891a:	4694      	mov	ip, r2
    891c:	4463      	add	r3, ip
    891e:	9302      	str	r3, [sp, #8]
        *processed_ptr++ = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
    8920:	02db      	lsls	r3, r3, #11
    8922:	0f5b      	lsrs	r3, r3, #29
    8924:	2210      	movs	r2, #16
    8926:	4252      	negs	r2, r2
    8928:	4313      	orrs	r3, r2
    892a:	703b      	strb	r3, [r7, #0]
        *processed_ptr++ = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
    892c:	9b02      	ldr	r3, [sp, #8]
    892e:	0b1b      	lsrs	r3, r3, #12
    8930:	324f      	adds	r2, #79	; 0x4f
    8932:	4013      	ands	r3, r2
    8934:	2180      	movs	r1, #128	; 0x80
    8936:	4249      	negs	r1, r1
    8938:	430b      	orrs	r3, r1
    893a:	707b      	strb	r3, [r7, #1]
        *processed_ptr++ = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
    893c:	9b02      	ldr	r3, [sp, #8]
    893e:	099b      	lsrs	r3, r3, #6
    8940:	4013      	ands	r3, r2
    8942:	430b      	orrs	r3, r1
    8944:	70bb      	strb	r3, [r7, #2]
        *processed_ptr   = (((cp     )  & 0x3F) | 0x80); /* 10xxxxxx */
    8946:	9b02      	ldr	r3, [sp, #8]
    8948:	401a      	ands	r2, r3
    894a:	4311      	orrs	r1, r2
    894c:	70f9      	strb	r1, [r7, #3]
        *processed_ptr++ = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
    894e:	3703      	adds	r7, #3
    8950:	e78c      	b.n	886c <get_quoted_string+0x108>
    char *output_ptr = output;
    8952:	9f01      	ldr	r7, [sp, #4]
    *output_ptr = '\0';
    8954:	2300      	movs	r3, #0
    8956:	703b      	strb	r3, [r7, #0]
    final_size = (size_t)(output_ptr-output) + 1;
    8958:	9d01      	ldr	r5, [sp, #4]
    895a:	1b7c      	subs	r4, r7, r5
    895c:	3401      	adds	r4, #1
    resized_output = (char*)parson_malloc(final_size);
    895e:	4b0f      	ldr	r3, [pc, #60]	; (899c <get_quoted_string+0x238>)
    8960:	681b      	ldr	r3, [r3, #0]
    8962:	0020      	movs	r0, r4
    8964:	4798      	blx	r3
    8966:	1e07      	subs	r7, r0, #0
    if (resized_output == NULL)
    8968:	d00a      	beq.n	8980 <get_quoted_string+0x21c>
    memcpy(resized_output, output, final_size);
    896a:	0022      	movs	r2, r4
    896c:	0029      	movs	r1, r5
    896e:	4b15      	ldr	r3, [pc, #84]	; (89c4 <get_quoted_string+0x260>)
    8970:	4798      	blx	r3
    parson_free(output);
    8972:	4b15      	ldr	r3, [pc, #84]	; (89c8 <get_quoted_string+0x264>)
    8974:	681b      	ldr	r3, [r3, #0]
    8976:	0028      	movs	r0, r5
    8978:	4798      	blx	r3
    897a:	e008      	b.n	898e <get_quoted_string+0x22a>
    char *output_ptr = output;
    897c:	9f01      	ldr	r7, [sp, #4]
    897e:	e7e9      	b.n	8954 <get_quoted_string+0x1f0>
    parson_free(output);
    8980:	4b11      	ldr	r3, [pc, #68]	; (89c8 <get_quoted_string+0x264>)
    8982:	681b      	ldr	r3, [r3, #0]
    8984:	9801      	ldr	r0, [sp, #4]
    8986:	4798      	blx	r3
    return NULL;
    8988:	2700      	movs	r7, #0
    898a:	e000      	b.n	898e <get_quoted_string+0x22a>
        return NULL;
    898c:	2700      	movs	r7, #0
    return process_string(string_start + 1, string_len);
}
    898e:	0038      	movs	r0, r7
    8990:	b005      	add	sp, #20
    8992:	bc0c      	pop	{r2, r3}
    8994:	4692      	mov	sl, r2
    8996:	469b      	mov	fp, r3
    8998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    899a:	46c0      	nop			; (mov r8, r8)
    899c:	200002b8 	.word	0x200002b8
    89a0:	00014e9c 	.word	0x00014e9c
    89a4:	000085dd 	.word	0x000085dd
    89a8:	00015154 	.word	0x00015154
    89ac:	00010e85 	.word	0x00010e85
    89b0:	000007ff 	.word	0x000007ff
    89b4:	ffff2800 	.word	0xffff2800
    89b8:	000003ff 	.word	0x000003ff
    89bc:	ffff2400 	.word	0xffff2400
    89c0:	000ffc00 	.word	0x000ffc00
    89c4:	000109c9 	.word	0x000109c9
    89c8:	200002b4 	.word	0x200002b4

000089cc <parson_strndup>:
static char * parson_strndup(const char *string, size_t n) {
    89cc:	b570      	push	{r4, r5, r6, lr}
    89ce:	0006      	movs	r6, r0
    89d0:	000d      	movs	r5, r1
    char *output_string = (char*)parson_malloc(n + 1);
    89d2:	1c48      	adds	r0, r1, #1
    89d4:	4b06      	ldr	r3, [pc, #24]	; (89f0 <parson_strndup+0x24>)
    89d6:	681b      	ldr	r3, [r3, #0]
    89d8:	4798      	blx	r3
    89da:	1e04      	subs	r4, r0, #0
    if (!output_string)
    89dc:	d005      	beq.n	89ea <parson_strndup+0x1e>
    output_string[n] = '\0';
    89de:	2300      	movs	r3, #0
    89e0:	5543      	strb	r3, [r0, r5]
    strncpy(output_string, string, n);
    89e2:	002a      	movs	r2, r5
    89e4:	0031      	movs	r1, r6
    89e6:	4b03      	ldr	r3, [pc, #12]	; (89f4 <parson_strndup+0x28>)
    89e8:	4798      	blx	r3
}
    89ea:	0020      	movs	r0, r4
    89ec:	bd70      	pop	{r4, r5, r6, pc}
    89ee:	46c0      	nop			; (mov r8, r8)
    89f0:	200002b8 	.word	0x200002b8
    89f4:	00010fd7 	.word	0x00010fd7

000089f8 <parson_strdup>:
static char * parson_strdup(const char *string) {
    89f8:	b510      	push	{r4, lr}
    89fa:	0004      	movs	r4, r0
    return parson_strndup(string, strlen(string));
    89fc:	4b03      	ldr	r3, [pc, #12]	; (8a0c <parson_strdup+0x14>)
    89fe:	4798      	blx	r3
    8a00:	0001      	movs	r1, r0
    8a02:	0020      	movs	r0, r4
    8a04:	4b02      	ldr	r3, [pc, #8]	; (8a10 <parson_strdup+0x18>)
    8a06:	4798      	blx	r3
}
    8a08:	bd10      	pop	{r4, pc}
    8a0a:	46c0      	nop			; (mov r8, r8)
    8a0c:	00010fa7 	.word	0x00010fa7
    8a10:	000089cd 	.word	0x000089cd

00008a14 <json_object_nget_value>:
static JSON_Value * json_object_nget_value(const JSON_Object *object, const char *name, size_t n) {
    8a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a16:	46de      	mov	lr, fp
    8a18:	4647      	mov	r7, r8
    8a1a:	b580      	push	{r7, lr}
    8a1c:	b083      	sub	sp, #12
    8a1e:	0005      	movs	r5, r0
    8a20:	9101      	str	r1, [sp, #4]
    8a22:	4693      	mov	fp, r2
    for (i = 0; i < json_object_get_count(object); i++) {
    8a24:	2400      	movs	r4, #0
        name_length = strlen(object->names[i]);
    8a26:	4b11      	ldr	r3, [pc, #68]	; (8a6c <json_object_nget_value+0x58>)
    8a28:	4698      	mov	r8, r3
    for (i = 0; i < json_object_get_count(object); i++) {
    8a2a:	e000      	b.n	8a2e <json_object_nget_value+0x1a>
    8a2c:	3401      	adds	r4, #1
int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
    return object ? object->count : 0;
    8a2e:	2d00      	cmp	r5, #0
    8a30:	d015      	beq.n	8a5e <json_object_nget_value+0x4a>
    for (i = 0; i < json_object_get_count(object); i++) {
    8a32:	68ab      	ldr	r3, [r5, #8]
    8a34:	429c      	cmp	r4, r3
    8a36:	d210      	bcs.n	8a5a <json_object_nget_value+0x46>
    8a38:	00a7      	lsls	r7, r4, #2
        name_length = strlen(object->names[i]);
    8a3a:	682b      	ldr	r3, [r5, #0]
    8a3c:	59de      	ldr	r6, [r3, r7]
    8a3e:	0030      	movs	r0, r6
    8a40:	47c0      	blx	r8
        if (name_length != n)
    8a42:	4558      	cmp	r0, fp
    8a44:	d1f2      	bne.n	8a2c <json_object_nget_value+0x18>
        if (strncmp(object->names[i], name, n) == 0)
    8a46:	0002      	movs	r2, r0
    8a48:	9901      	ldr	r1, [sp, #4]
    8a4a:	0030      	movs	r0, r6
    8a4c:	4b08      	ldr	r3, [pc, #32]	; (8a70 <json_object_nget_value+0x5c>)
    8a4e:	4798      	blx	r3
    8a50:	2800      	cmp	r0, #0
    8a52:	d1eb      	bne.n	8a2c <json_object_nget_value+0x18>
            return object->values[i];
    8a54:	686b      	ldr	r3, [r5, #4]
    8a56:	59d8      	ldr	r0, [r3, r7]
    8a58:	e002      	b.n	8a60 <json_object_nget_value+0x4c>
    return NULL;
    8a5a:	2000      	movs	r0, #0
    8a5c:	e000      	b.n	8a60 <json_object_nget_value+0x4c>
    8a5e:	2000      	movs	r0, #0
}
    8a60:	b003      	add	sp, #12
    8a62:	bc0c      	pop	{r2, r3}
    8a64:	4690      	mov	r8, r2
    8a66:	469b      	mov	fp, r3
    8a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a6a:	46c0      	nop			; (mov r8, r8)
    8a6c:	00010fa7 	.word	0x00010fa7
    8a70:	00010fb5 	.word	0x00010fb5

00008a74 <json_object_get_value>:
JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
    8a74:	b570      	push	{r4, r5, r6, lr}
    8a76:	0005      	movs	r5, r0
    8a78:	000c      	movs	r4, r1
    if (object == NULL || name == NULL)
    8a7a:	2800      	cmp	r0, #0
    8a7c:	d00a      	beq.n	8a94 <json_object_get_value+0x20>
    8a7e:	2900      	cmp	r1, #0
    8a80:	d00a      	beq.n	8a98 <json_object_get_value+0x24>
    return json_object_nget_value(object, name, strlen(name));
    8a82:	0008      	movs	r0, r1
    8a84:	4b05      	ldr	r3, [pc, #20]	; (8a9c <json_object_get_value+0x28>)
    8a86:	4798      	blx	r3
    8a88:	0002      	movs	r2, r0
    8a8a:	0021      	movs	r1, r4
    8a8c:	0028      	movs	r0, r5
    8a8e:	4b04      	ldr	r3, [pc, #16]	; (8aa0 <json_object_get_value+0x2c>)
    8a90:	4798      	blx	r3
}
    8a92:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
    8a94:	2000      	movs	r0, #0
    8a96:	e7fc      	b.n	8a92 <json_object_get_value+0x1e>
    8a98:	2000      	movs	r0, #0
    8a9a:	e7fa      	b.n	8a92 <json_object_get_value+0x1e>
    8a9c:	00010fa7 	.word	0x00010fa7
    8aa0:	00008a15 	.word	0x00008a15

00008aa4 <json_object_add>:
static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {
    8aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8aa6:	46c6      	mov	lr, r8
    8aa8:	b500      	push	{lr}
    8aaa:	0004      	movs	r4, r0
    8aac:	000d      	movs	r5, r1
    8aae:	0017      	movs	r7, r2
    if (object == NULL || name == NULL || value == NULL) {
    8ab0:	2800      	cmp	r0, #0
    8ab2:	d031      	beq.n	8b18 <json_object_add+0x74>
    8ab4:	2900      	cmp	r1, #0
    8ab6:	d032      	beq.n	8b1e <json_object_add+0x7a>
    8ab8:	2a00      	cmp	r2, #0
    8aba:	d033      	beq.n	8b24 <json_object_add+0x80>
    if (object->count >= object->capacity) {
    8abc:	68c1      	ldr	r1, [r0, #12]
    8abe:	6883      	ldr	r3, [r0, #8]
    8ac0:	428b      	cmp	r3, r1
    8ac2:	d30c      	bcc.n	8ade <json_object_add+0x3a>
        size_t new_capacity = MAX(object->capacity * 2, STARTING_CAPACITY);
    8ac4:	0049      	lsls	r1, r1, #1
    8ac6:	290f      	cmp	r1, #15
    8ac8:	d200      	bcs.n	8acc <json_object_add+0x28>
    8aca:	210f      	movs	r1, #15
        if (new_capacity > OBJECT_MAX_CAPACITY)
    8acc:	23f0      	movs	r3, #240	; 0xf0
    8ace:	009b      	lsls	r3, r3, #2
    8ad0:	4299      	cmp	r1, r3
    8ad2:	d82a      	bhi.n	8b2a <json_object_add+0x86>
        if (json_object_resize(object, new_capacity) == JSONFailure)
    8ad4:	0020      	movs	r0, r4
    8ad6:	4b19      	ldr	r3, [pc, #100]	; (8b3c <json_object_add+0x98>)
    8ad8:	4798      	blx	r3
    8ada:	1c43      	adds	r3, r0, #1
    8adc:	d019      	beq.n	8b12 <json_object_add+0x6e>
    if (json_object_get_value(object, name) != NULL)
    8ade:	0029      	movs	r1, r5
    8ae0:	0020      	movs	r0, r4
    8ae2:	4b17      	ldr	r3, [pc, #92]	; (8b40 <json_object_add+0x9c>)
    8ae4:	4798      	blx	r3
    8ae6:	2800      	cmp	r0, #0
    8ae8:	d122      	bne.n	8b30 <json_object_add+0x8c>
    object->names[index] = parson_strdup(name);
    8aea:	68a3      	ldr	r3, [r4, #8]
    8aec:	009e      	lsls	r6, r3, #2
    8aee:	6823      	ldr	r3, [r4, #0]
    8af0:	4698      	mov	r8, r3
    8af2:	44b0      	add	r8, r6
    8af4:	0028      	movs	r0, r5
    8af6:	4b13      	ldr	r3, [pc, #76]	; (8b44 <json_object_add+0xa0>)
    8af8:	4798      	blx	r3
    8afa:	4643      	mov	r3, r8
    8afc:	6018      	str	r0, [r3, #0]
    if (object->names[index] == NULL)
    8afe:	6823      	ldr	r3, [r4, #0]
    8b00:	599b      	ldr	r3, [r3, r6]
    8b02:	2b00      	cmp	r3, #0
    8b04:	d017      	beq.n	8b36 <json_object_add+0x92>
    object->values[index] = value;
    8b06:	6863      	ldr	r3, [r4, #4]
    8b08:	519f      	str	r7, [r3, r6]
    object->count++;
    8b0a:	68a3      	ldr	r3, [r4, #8]
    8b0c:	3301      	adds	r3, #1
    8b0e:	60a3      	str	r3, [r4, #8]
    return JSONSuccess;
    8b10:	2000      	movs	r0, #0
}
    8b12:	bc04      	pop	{r2}
    8b14:	4690      	mov	r8, r2
    8b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return JSONFailure;
    8b18:	2001      	movs	r0, #1
    8b1a:	4240      	negs	r0, r0
    8b1c:	e7f9      	b.n	8b12 <json_object_add+0x6e>
    8b1e:	2001      	movs	r0, #1
    8b20:	4240      	negs	r0, r0
    8b22:	e7f6      	b.n	8b12 <json_object_add+0x6e>
    8b24:	2001      	movs	r0, #1
    8b26:	4240      	negs	r0, r0
    8b28:	e7f3      	b.n	8b12 <json_object_add+0x6e>
            return JSONFailure;
    8b2a:	2001      	movs	r0, #1
    8b2c:	4240      	negs	r0, r0
    8b2e:	e7f0      	b.n	8b12 <json_object_add+0x6e>
        return JSONFailure;
    8b30:	2001      	movs	r0, #1
    8b32:	4240      	negs	r0, r0
    8b34:	e7ed      	b.n	8b12 <json_object_add+0x6e>
        return JSONFailure;
    8b36:	2001      	movs	r0, #1
    8b38:	4240      	negs	r0, r0
    8b3a:	e7ea      	b.n	8b12 <json_object_add+0x6e>
    8b3c:	00008631 	.word	0x00008631
    8b40:	00008a75 	.word	0x00008a75
    8b44:	000089f9 	.word	0x000089f9

00008b48 <json_array_get_value>:
        return NULL;
    return object->names[index];
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
    8b48:	1e03      	subs	r3, r0, #0
int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
    return array ? array->count : 0;
    8b4a:	d007      	beq.n	8b5c <json_array_get_value+0x14>
        return NULL;
    8b4c:	2000      	movs	r0, #0
    if (index >= json_array_get_count(array))
    8b4e:	685a      	ldr	r2, [r3, #4]
    8b50:	4291      	cmp	r1, r2
    8b52:	d202      	bcs.n	8b5a <json_array_get_value+0x12>
    return array->items[index];
    8b54:	681b      	ldr	r3, [r3, #0]
    8b56:	0089      	lsls	r1, r1, #2
    8b58:	58c8      	ldr	r0, [r1, r3]
}
    8b5a:	4770      	bx	lr
        return NULL;
    8b5c:	2000      	movs	r0, #0
    8b5e:	e7fc      	b.n	8b5a <json_array_get_value+0x12>

00008b60 <json_array_get_count>:
    return array ? array->count : 0;
    8b60:	2800      	cmp	r0, #0
    8b62:	d001      	beq.n	8b68 <json_array_get_count+0x8>
    8b64:	6840      	ldr	r0, [r0, #4]
}
    8b66:	4770      	bx	lr
    return array ? array->count : 0;
    8b68:	2000      	movs	r0, #0
    8b6a:	e7fc      	b.n	8b66 <json_array_get_count+0x6>

00008b6c <json_value_get_object>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
    return value ? value->type : JSONError;
    8b6c:	2800      	cmp	r0, #0
    8b6e:	d004      	beq.n	8b7a <json_value_get_object+0xe>
}

JSON_Object * json_value_get_object(const JSON_Value *value) {
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
    8b70:	6803      	ldr	r3, [r0, #0]
    8b72:	2b04      	cmp	r3, #4
    8b74:	d103      	bne.n	8b7e <json_value_get_object+0x12>
    8b76:	6880      	ldr	r0, [r0, #8]
}
    8b78:	4770      	bx	lr
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
    8b7a:	2000      	movs	r0, #0
    8b7c:	e7fc      	b.n	8b78 <json_value_get_object+0xc>
    8b7e:	2000      	movs	r0, #0
    8b80:	e7fa      	b.n	8b78 <json_value_get_object+0xc>
	...

00008b84 <json_object_get_object>:
JSON_Object * json_object_get_object(const JSON_Object *object, const char *name) {
    8b84:	b510      	push	{r4, lr}
    return json_value_get_object(json_object_get_value(object, name));
    8b86:	4b02      	ldr	r3, [pc, #8]	; (8b90 <json_object_get_object+0xc>)
    8b88:	4798      	blx	r3
    8b8a:	4b02      	ldr	r3, [pc, #8]	; (8b94 <json_object_get_object+0x10>)
    8b8c:	4798      	blx	r3
}
    8b8e:	bd10      	pop	{r4, pc}
    8b90:	00008a75 	.word	0x00008a75
    8b94:	00008b6d 	.word	0x00008b6d

00008b98 <json_value_get_array>:
    return value ? value->type : JSONError;
    8b98:	2800      	cmp	r0, #0
    8b9a:	d004      	beq.n	8ba6 <json_value_get_array+0xe>

JSON_Array * json_value_get_array(const JSON_Value *value) {
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
    8b9c:	6803      	ldr	r3, [r0, #0]
    8b9e:	2b05      	cmp	r3, #5
    8ba0:	d103      	bne.n	8baa <json_value_get_array+0x12>
    8ba2:	6880      	ldr	r0, [r0, #8]
}
    8ba4:	4770      	bx	lr
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
    8ba6:	2000      	movs	r0, #0
    8ba8:	e7fc      	b.n	8ba4 <json_value_get_array+0xc>
    8baa:	2000      	movs	r0, #0
    8bac:	e7fa      	b.n	8ba4 <json_value_get_array+0xc>
	...

00008bb0 <json_object_get_array>:
JSON_Array * json_object_get_array(const JSON_Object *object, const char *name) {
    8bb0:	b510      	push	{r4, lr}
    return json_value_get_array(json_object_get_value(object, name));
    8bb2:	4b02      	ldr	r3, [pc, #8]	; (8bbc <json_object_get_array+0xc>)
    8bb4:	4798      	blx	r3
    8bb6:	4b02      	ldr	r3, [pc, #8]	; (8bc0 <json_object_get_array+0x10>)
    8bb8:	4798      	blx	r3
}
    8bba:	bd10      	pop	{r4, pc}
    8bbc:	00008a75 	.word	0x00008a75
    8bc0:	00008b99 	.word	0x00008b99

00008bc4 <json_array_get_array>:
JSON_Array * json_array_get_array(const JSON_Array *array, size_t index) {
    8bc4:	b510      	push	{r4, lr}
    return json_value_get_array(json_array_get_value(array, index));
    8bc6:	4b02      	ldr	r3, [pc, #8]	; (8bd0 <json_array_get_array+0xc>)
    8bc8:	4798      	blx	r3
    8bca:	4b02      	ldr	r3, [pc, #8]	; (8bd4 <json_array_get_array+0x10>)
    8bcc:	4798      	blx	r3
}
    8bce:	bd10      	pop	{r4, pc}
    8bd0:	00008b49 	.word	0x00008b49
    8bd4:	00008b99 	.word	0x00008b99

00008bd8 <json_value_get_number>:
    return value ? value->type : JSONError;
    8bd8:	2800      	cmp	r0, #0
    8bda:	d008      	beq.n	8bee <json_value_get_number+0x16>
const char * json_value_get_string(const JSON_Value *value) {
    return json_value_get_type(value) == JSONString ? value->value.string : NULL;
}

double json_value_get_number(const JSON_Value *value) {
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
    8bdc:	6803      	ldr	r3, [r0, #0]
    8bde:	2b03      	cmp	r3, #3
    8be0:	d002      	beq.n	8be8 <json_value_get_number+0x10>
    8be2:	2000      	movs	r0, #0
    8be4:	2100      	movs	r1, #0
}
    8be6:	4770      	bx	lr
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
    8be8:	68c1      	ldr	r1, [r0, #12]
    8bea:	6880      	ldr	r0, [r0, #8]
    8bec:	e7fb      	b.n	8be6 <json_value_get_number+0xe>
    8bee:	2000      	movs	r0, #0
    8bf0:	2100      	movs	r1, #0
    8bf2:	e7f8      	b.n	8be6 <json_value_get_number+0xe>

00008bf4 <json_object_get_number>:
double json_object_get_number(const JSON_Object *object, const char *name) {
    8bf4:	b510      	push	{r4, lr}
    return json_value_get_number(json_object_get_value(object, name));
    8bf6:	4b02      	ldr	r3, [pc, #8]	; (8c00 <json_object_get_number+0xc>)
    8bf8:	4798      	blx	r3
    8bfa:	4b02      	ldr	r3, [pc, #8]	; (8c04 <json_object_get_number+0x10>)
    8bfc:	4798      	blx	r3
}
    8bfe:	bd10      	pop	{r4, pc}
    8c00:	00008a75 	.word	0x00008a75
    8c04:	00008bd9 	.word	0x00008bd9

00008c08 <json_array_get_number>:
double json_array_get_number(const JSON_Array *array, size_t index) {
    8c08:	b510      	push	{r4, lr}
    return json_value_get_number(json_array_get_value(array, index));
    8c0a:	4b02      	ldr	r3, [pc, #8]	; (8c14 <json_array_get_number+0xc>)
    8c0c:	4798      	blx	r3
    8c0e:	4b02      	ldr	r3, [pc, #8]	; (8c18 <json_array_get_number+0x10>)
    8c10:	4798      	blx	r3
}
    8c12:	bd10      	pop	{r4, pc}
    8c14:	00008b49 	.word	0x00008b49
    8c18:	00008bd9 	.word	0x00008bd9

00008c1c <json_value_free>:

int json_value_get_boolean(const JSON_Value *value) {
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
}

void json_value_free(JSON_Value *value) {
    8c1c:	b570      	push	{r4, r5, r6, lr}
    8c1e:	1e05      	subs	r5, r0, #0
    return value ? value->type : JSONError;
    8c20:	d006      	beq.n	8c30 <json_value_free+0x14>
    switch (json_value_get_type(value)) {
    8c22:	6803      	ldr	r3, [r0, #0]
    8c24:	2b04      	cmp	r3, #4
    8c26:	d008      	beq.n	8c3a <json_value_free+0x1e>
    8c28:	2b05      	cmp	r3, #5
    8c2a:	d02f      	beq.n	8c8c <json_value_free+0x70>
    8c2c:	2b02      	cmp	r3, #2
    8c2e:	d026      	beq.n	8c7e <json_value_free+0x62>
            json_array_free(value->value.array);
            break;
        default:
            break;
    }
    parson_free(value);
    8c30:	4b22      	ldr	r3, [pc, #136]	; (8cbc <json_value_free+0xa0>)
    8c32:	681b      	ldr	r3, [r3, #0]
    8c34:	0028      	movs	r0, r5
    8c36:	4798      	blx	r3
}
    8c38:	bd70      	pop	{r4, r5, r6, pc}
            json_object_free(value->value.object);
    8c3a:	6884      	ldr	r4, [r0, #8]
    while(object->count--) {
    8c3c:	68a2      	ldr	r2, [r4, #8]
    8c3e:	1e53      	subs	r3, r2, #1
    8c40:	60a3      	str	r3, [r4, #8]
    8c42:	2a00      	cmp	r2, #0
    8c44:	d010      	beq.n	8c68 <json_value_free+0x4c>
        parson_free(object->names[object->count]);
    8c46:	4e1d      	ldr	r6, [pc, #116]	; (8cbc <json_value_free+0xa0>)
    8c48:	009b      	lsls	r3, r3, #2
    8c4a:	6822      	ldr	r2, [r4, #0]
    8c4c:	5898      	ldr	r0, [r3, r2]
    8c4e:	6833      	ldr	r3, [r6, #0]
    8c50:	4798      	blx	r3
        json_value_free(object->values[object->count]);
    8c52:	68a3      	ldr	r3, [r4, #8]
    8c54:	009b      	lsls	r3, r3, #2
    8c56:	6862      	ldr	r2, [r4, #4]
    8c58:	5898      	ldr	r0, [r3, r2]
    8c5a:	f7ff ffdf 	bl	8c1c <json_value_free>
    while(object->count--) {
    8c5e:	68a2      	ldr	r2, [r4, #8]
    8c60:	1e53      	subs	r3, r2, #1
    8c62:	60a3      	str	r3, [r4, #8]
    8c64:	2a00      	cmp	r2, #0
    8c66:	d1ef      	bne.n	8c48 <json_value_free+0x2c>
    parson_free(object->names);
    8c68:	4e14      	ldr	r6, [pc, #80]	; (8cbc <json_value_free+0xa0>)
    8c6a:	6820      	ldr	r0, [r4, #0]
    8c6c:	6833      	ldr	r3, [r6, #0]
    8c6e:	4798      	blx	r3
    parson_free(object->values);
    8c70:	6860      	ldr	r0, [r4, #4]
    8c72:	6833      	ldr	r3, [r6, #0]
    8c74:	4798      	blx	r3
    parson_free(object);
    8c76:	6833      	ldr	r3, [r6, #0]
    8c78:	0020      	movs	r0, r4
    8c7a:	4798      	blx	r3
    8c7c:	e7d8      	b.n	8c30 <json_value_free+0x14>
            if (value->value.string) { parson_free(value->value.string); }
    8c7e:	6880      	ldr	r0, [r0, #8]
    8c80:	2800      	cmp	r0, #0
    8c82:	d0d5      	beq.n	8c30 <json_value_free+0x14>
    8c84:	4b0d      	ldr	r3, [pc, #52]	; (8cbc <json_value_free+0xa0>)
    8c86:	681b      	ldr	r3, [r3, #0]
    8c88:	4798      	blx	r3
    8c8a:	e7d1      	b.n	8c30 <json_value_free+0x14>
            json_array_free(value->value.array);
    8c8c:	6884      	ldr	r4, [r0, #8]
    while (array->count--)
    8c8e:	6862      	ldr	r2, [r4, #4]
    8c90:	1e53      	subs	r3, r2, #1
    8c92:	6063      	str	r3, [r4, #4]
    8c94:	2a00      	cmp	r2, #0
    8c96:	d009      	beq.n	8cac <json_value_free+0x90>
        json_value_free(array->items[array->count]);
    8c98:	009b      	lsls	r3, r3, #2
    8c9a:	6822      	ldr	r2, [r4, #0]
    8c9c:	5898      	ldr	r0, [r3, r2]
    8c9e:	f7ff ffbd 	bl	8c1c <json_value_free>
    while (array->count--)
    8ca2:	6862      	ldr	r2, [r4, #4]
    8ca4:	1e53      	subs	r3, r2, #1
    8ca6:	6063      	str	r3, [r4, #4]
    8ca8:	2a00      	cmp	r2, #0
    8caa:	d1f5      	bne.n	8c98 <json_value_free+0x7c>
    parson_free(array->items);
    8cac:	4e03      	ldr	r6, [pc, #12]	; (8cbc <json_value_free+0xa0>)
    8cae:	6820      	ldr	r0, [r4, #0]
    8cb0:	6833      	ldr	r3, [r6, #0]
    8cb2:	4798      	blx	r3
    parson_free(array);
    8cb4:	6833      	ldr	r3, [r6, #0]
    8cb6:	0020      	movs	r0, r4
    8cb8:	4798      	blx	r3
    8cba:	e7b9      	b.n	8c30 <json_value_free+0x14>
    8cbc:	200002b4 	.word	0x200002b4

00008cc0 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
    8cc0:	b510      	push	{r4, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
    8cc2:	4b0f      	ldr	r3, [pc, #60]	; (8d00 <json_value_init_object+0x40>)
    8cc4:	681b      	ldr	r3, [r3, #0]
    8cc6:	2010      	movs	r0, #16
    8cc8:	4798      	blx	r3
    8cca:	1e04      	subs	r4, r0, #0
    if (!new_value)
    8ccc:	d00d      	beq.n	8cea <json_value_init_object+0x2a>
        return NULL;
    new_value->type = JSONObject;
    8cce:	2304      	movs	r3, #4
    8cd0:	6003      	str	r3, [r0, #0]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
    8cd2:	4b0b      	ldr	r3, [pc, #44]	; (8d00 <json_value_init_object+0x40>)
    8cd4:	681b      	ldr	r3, [r3, #0]
    8cd6:	2010      	movs	r0, #16
    8cd8:	4798      	blx	r3
    if (!new_obj)
    8cda:	2800      	cmp	r0, #0
    8cdc:	d007      	beq.n	8cee <json_value_init_object+0x2e>
    new_obj->names = (char**)NULL;
    8cde:	2300      	movs	r3, #0
    8ce0:	6003      	str	r3, [r0, #0]
    new_obj->values = (JSON_Value**)NULL;
    8ce2:	6043      	str	r3, [r0, #4]
    new_obj->capacity = 0;
    8ce4:	60c3      	str	r3, [r0, #12]
    new_obj->count = 0;
    8ce6:	6083      	str	r3, [r0, #8]
    new_value->value.object = json_object_init();
    8ce8:	60a0      	str	r0, [r4, #8]
    if (!new_value->value.object) {
        parson_free(new_value);
        return NULL;
    }
    return new_value;
}
    8cea:	0020      	movs	r0, r4
    8cec:	bd10      	pop	{r4, pc}
    new_value->value.object = json_object_init();
    8cee:	2300      	movs	r3, #0
    8cf0:	60a3      	str	r3, [r4, #8]
        parson_free(new_value);
    8cf2:	4b04      	ldr	r3, [pc, #16]	; (8d04 <json_value_init_object+0x44>)
    8cf4:	681b      	ldr	r3, [r3, #0]
    8cf6:	0020      	movs	r0, r4
    8cf8:	4798      	blx	r3
        return NULL;
    8cfa:	2400      	movs	r4, #0
    8cfc:	e7f5      	b.n	8cea <json_value_init_object+0x2a>
    8cfe:	46c0      	nop			; (mov r8, r8)
    8d00:	200002b8 	.word	0x200002b8
    8d04:	200002b4 	.word	0x200002b4

00008d08 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
    8d08:	b510      	push	{r4, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
    8d0a:	4b0e      	ldr	r3, [pc, #56]	; (8d44 <json_value_init_array+0x3c>)
    8d0c:	681b      	ldr	r3, [r3, #0]
    8d0e:	2010      	movs	r0, #16
    8d10:	4798      	blx	r3
    8d12:	1e04      	subs	r4, r0, #0
    if (!new_value)
    8d14:	d00c      	beq.n	8d30 <json_value_init_array+0x28>
        return NULL;
    new_value->type = JSONArray;
    8d16:	2305      	movs	r3, #5
    8d18:	6003      	str	r3, [r0, #0]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
    8d1a:	4b0a      	ldr	r3, [pc, #40]	; (8d44 <json_value_init_array+0x3c>)
    8d1c:	681b      	ldr	r3, [r3, #0]
    8d1e:	200c      	movs	r0, #12
    8d20:	4798      	blx	r3
    if (!new_array)
    8d22:	2800      	cmp	r0, #0
    8d24:	d006      	beq.n	8d34 <json_value_init_array+0x2c>
    new_array->items = (JSON_Value**)NULL;
    8d26:	2300      	movs	r3, #0
    8d28:	6003      	str	r3, [r0, #0]
    new_array->capacity = 0;
    8d2a:	6083      	str	r3, [r0, #8]
    new_array->count = 0;
    8d2c:	6043      	str	r3, [r0, #4]
    new_value->value.array = json_array_init();
    8d2e:	60a0      	str	r0, [r4, #8]
    if (!new_value->value.array) {
        parson_free(new_value);
        return NULL;
    }
    return new_value;
}
    8d30:	0020      	movs	r0, r4
    8d32:	bd10      	pop	{r4, pc}
    new_value->value.array = json_array_init();
    8d34:	2300      	movs	r3, #0
    8d36:	60a3      	str	r3, [r4, #8]
        parson_free(new_value);
    8d38:	4b03      	ldr	r3, [pc, #12]	; (8d48 <json_value_init_array+0x40>)
    8d3a:	681b      	ldr	r3, [r3, #0]
    8d3c:	0020      	movs	r0, r4
    8d3e:	4798      	blx	r3
        return NULL;
    8d40:	2400      	movs	r4, #0
    8d42:	e7f5      	b.n	8d30 <json_value_init_array+0x28>
    8d44:	200002b8 	.word	0x200002b8
    8d48:	200002b4 	.word	0x200002b4

00008d4c <json_value_init_number>:
    if (value == NULL)
        parson_free(copy);
    return value;
}

JSON_Value * json_value_init_number(double number) {
    8d4c:	b570      	push	{r4, r5, r6, lr}
    8d4e:	0004      	movs	r4, r0
    8d50:	000d      	movs	r5, r1
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
    8d52:	4b05      	ldr	r3, [pc, #20]	; (8d68 <json_value_init_number+0x1c>)
    8d54:	681b      	ldr	r3, [r3, #0]
    8d56:	2010      	movs	r0, #16
    8d58:	4798      	blx	r3
    if (!new_value)
    8d5a:	2800      	cmp	r0, #0
    8d5c:	d003      	beq.n	8d66 <json_value_init_number+0x1a>
        return NULL;
    new_value->type = JSONNumber;
    8d5e:	2303      	movs	r3, #3
    8d60:	6003      	str	r3, [r0, #0]
    new_value->value.number = number;
    8d62:	6084      	str	r4, [r0, #8]
    8d64:	60c5      	str	r5, [r0, #12]
    return new_value;
}
    8d66:	bd70      	pop	{r4, r5, r6, pc}
    8d68:	200002b8 	.word	0x200002b8

00008d6c <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
    8d6c:	b510      	push	{r4, lr}
    8d6e:	0004      	movs	r4, r0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
    8d70:	4b05      	ldr	r3, [pc, #20]	; (8d88 <json_value_init_boolean+0x1c>)
    8d72:	681b      	ldr	r3, [r3, #0]
    8d74:	2010      	movs	r0, #16
    8d76:	4798      	blx	r3
    if (!new_value)
    8d78:	2800      	cmp	r0, #0
    8d7a:	d004      	beq.n	8d86 <json_value_init_boolean+0x1a>
        return NULL;
    new_value->type = JSONBoolean;
    8d7c:	2306      	movs	r3, #6
    8d7e:	6003      	str	r3, [r0, #0]
    new_value->value.boolean = boolean ? 1 : 0;
    8d80:	1e63      	subs	r3, r4, #1
    8d82:	419c      	sbcs	r4, r3
    8d84:	6084      	str	r4, [r0, #8]
    return new_value;
}
    8d86:	bd10      	pop	{r4, pc}
    8d88:	200002b8 	.word	0x200002b8

00008d8c <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
    8d8c:	b510      	push	{r4, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
    8d8e:	4b04      	ldr	r3, [pc, #16]	; (8da0 <json_value_init_null+0x14>)
    8d90:	681b      	ldr	r3, [r3, #0]
    8d92:	2010      	movs	r0, #16
    8d94:	4798      	blx	r3
    if (!new_value)
    8d96:	2800      	cmp	r0, #0
    8d98:	d001      	beq.n	8d9e <json_value_init_null+0x12>
        return NULL;
    new_value->type = JSONNull;
    8d9a:	2301      	movs	r3, #1
    8d9c:	6003      	str	r3, [r0, #0]
    return new_value;
}
    8d9e:	bd10      	pop	{r4, pc}
    8da0:	200002b8 	.word	0x200002b8

00008da4 <parse_value>:
static JSON_Value * parse_value(const char **string, size_t nesting) {
    8da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8da6:	46de      	mov	lr, fp
    8da8:	4657      	mov	r7, sl
    8daa:	4646      	mov	r6, r8
    8dac:	b5c0      	push	{r6, r7, lr}
    8dae:	b086      	sub	sp, #24
    8db0:	0007      	movs	r7, r0
    8db2:	4688      	mov	r8, r1
    if (nesting > MAX_NESTING)
    8db4:	2913      	cmp	r1, #19
    8db6:	d900      	bls.n	8dba <parse_value+0x16>
    8db8:	e1d6      	b.n	9168 <parse_value+0x3c4>
    SKIP_WHITESPACES(string);
    8dba:	4cb9      	ldr	r4, [pc, #740]	; (90a0 <parse_value+0x2fc>)
    8dbc:	2608      	movs	r6, #8
    8dbe:	e001      	b.n	8dc4 <parse_value+0x20>
    8dc0:	3501      	adds	r5, #1
    8dc2:	603d      	str	r5, [r7, #0]
    8dc4:	47a0      	blx	r4
    8dc6:	683d      	ldr	r5, [r7, #0]
    8dc8:	782b      	ldrb	r3, [r5, #0]
    8dca:	18c0      	adds	r0, r0, r3
    8dcc:	7842      	ldrb	r2, [r0, #1]
    8dce:	4216      	tst	r6, r2
    8dd0:	d1f6      	bne.n	8dc0 <parse_value+0x1c>
    switch (**string) {
    8dd2:	3b22      	subs	r3, #34	; 0x22
    8dd4:	b2da      	uxtb	r2, r3
    8dd6:	2a59      	cmp	r2, #89	; 0x59
    8dd8:	d900      	bls.n	8ddc <parse_value+0x38>
    8dda:	e1c8      	b.n	916e <parse_value+0x3ca>
    8ddc:	0093      	lsls	r3, r2, #2
    8dde:	4ab1      	ldr	r2, [pc, #708]	; (90a4 <parse_value+0x300>)
    8de0:	58d3      	ldr	r3, [r2, r3]
    8de2:	469f      	mov	pc, r3
            return parse_object_value(string, nesting + 1);
    8de4:	4643      	mov	r3, r8
    8de6:	3301      	adds	r3, #1
    8de8:	9303      	str	r3, [sp, #12]
    JSON_Value *output_value = json_value_init_object(), *new_value = NULL;
    8dea:	4baf      	ldr	r3, [pc, #700]	; (90a8 <parse_value+0x304>)
    8dec:	4798      	blx	r3
    8dee:	0004      	movs	r4, r0
    8df0:	9002      	str	r0, [sp, #8]
    JSON_Object *output_object = json_value_get_object(output_value);
    8df2:	4bae      	ldr	r3, [pc, #696]	; (90ac <parse_value+0x308>)
    8df4:	4798      	blx	r3
    8df6:	9000      	str	r0, [sp, #0]
    if (output_value == NULL)
    8df8:	2c00      	cmp	r4, #0
    8dfa:	d100      	bne.n	8dfe <parse_value+0x5a>
    8dfc:	e128      	b.n	9050 <parse_value+0x2ac>
    SKIP_CHAR(string);
    8dfe:	683b      	ldr	r3, [r7, #0]
    8e00:	3301      	adds	r3, #1
    8e02:	603b      	str	r3, [r7, #0]
    SKIP_WHITESPACES(string);
    8e04:	4da6      	ldr	r5, [pc, #664]	; (90a0 <parse_value+0x2fc>)
    8e06:	2408      	movs	r4, #8
    8e08:	e001      	b.n	8e0e <parse_value+0x6a>
    8e0a:	3301      	adds	r3, #1
    8e0c:	603b      	str	r3, [r7, #0]
    8e0e:	47a8      	blx	r5
    8e10:	683b      	ldr	r3, [r7, #0]
    8e12:	781a      	ldrb	r2, [r3, #0]
    8e14:	1880      	adds	r0, r0, r2
    8e16:	7841      	ldrb	r1, [r0, #1]
    8e18:	420c      	tst	r4, r1
    8e1a:	d1f6      	bne.n	8e0a <parse_value+0x66>
    if (**string == '}') { /* empty object */
    8e1c:	2a7d      	cmp	r2, #125	; 0x7d
    8e1e:	d005      	beq.n	8e2c <parse_value+0x88>
        new_key = get_quoted_string(string);
    8e20:	4ba3      	ldr	r3, [pc, #652]	; (90b0 <parse_value+0x30c>)
    8e22:	469a      	mov	sl, r3
        SKIP_WHITESPACES(string);
    8e24:	4e9e      	ldr	r6, [pc, #632]	; (90a0 <parse_value+0x2fc>)
        if(json_object_add(output_object, new_key, new_value) == JSONFailure) {
    8e26:	4ba3      	ldr	r3, [pc, #652]	; (90b4 <parse_value+0x310>)
    8e28:	4698      	mov	r8, r3
    8e2a:	e05c      	b.n	8ee6 <parse_value+0x142>
        SKIP_CHAR(string);
    8e2c:	3301      	adds	r3, #1
    8e2e:	603b      	str	r3, [r7, #0]
    8e30:	e10e      	b.n	9050 <parse_value+0x2ac>
        SKIP_WHITESPACES(string);
    8e32:	3301      	adds	r3, #1
    8e34:	603b      	str	r3, [r7, #0]
    8e36:	47b0      	blx	r6
    8e38:	683b      	ldr	r3, [r7, #0]
    8e3a:	781a      	ldrb	r2, [r3, #0]
    8e3c:	1880      	adds	r0, r0, r2
    8e3e:	7841      	ldrb	r1, [r0, #1]
    8e40:	420d      	tst	r5, r1
    8e42:	d1f6      	bne.n	8e32 <parse_value+0x8e>
        if (new_key == NULL || **string != ':') {
    8e44:	2c00      	cmp	r4, #0
    8e46:	d016      	beq.n	8e76 <parse_value+0xd2>
    8e48:	2a3a      	cmp	r2, #58	; 0x3a
    8e4a:	d114      	bne.n	8e76 <parse_value+0xd2>
        SKIP_CHAR(string);
    8e4c:	3301      	adds	r3, #1
    8e4e:	603b      	str	r3, [r7, #0]
        new_value = parse_value(string, nesting);
    8e50:	9903      	ldr	r1, [sp, #12]
    8e52:	0038      	movs	r0, r7
    8e54:	f7ff ffa6 	bl	8da4 <parse_value>
    8e58:	1e05      	subs	r5, r0, #0
        if (new_value == NULL) {
    8e5a:	d012      	beq.n	8e82 <parse_value+0xde>
        if(json_object_add(output_object, new_key, new_value) == JSONFailure) {
    8e5c:	0002      	movs	r2, r0
    8e5e:	0021      	movs	r1, r4
    8e60:	9800      	ldr	r0, [sp, #0]
    8e62:	47c0      	blx	r8
    8e64:	1c43      	adds	r3, r0, #1
    8e66:	d015      	beq.n	8e94 <parse_value+0xf0>
        parson_free(new_key);
    8e68:	4b93      	ldr	r3, [pc, #588]	; (90b8 <parse_value+0x314>)
    8e6a:	681b      	ldr	r3, [r3, #0]
    8e6c:	0020      	movs	r0, r4
    8e6e:	4798      	blx	r3
        SKIP_WHITESPACES(string);
    8e70:	4d8b      	ldr	r5, [pc, #556]	; (90a0 <parse_value+0x2fc>)
    8e72:	2408      	movs	r4, #8
    8e74:	e01d      	b.n	8eb2 <parse_value+0x10e>
            json_value_free(output_value);
    8e76:	9802      	ldr	r0, [sp, #8]
    8e78:	4b90      	ldr	r3, [pc, #576]	; (90bc <parse_value+0x318>)
    8e7a:	4798      	blx	r3
            return NULL;
    8e7c:	2300      	movs	r3, #0
    8e7e:	9302      	str	r3, [sp, #8]
    8e80:	e0e6      	b.n	9050 <parse_value+0x2ac>
            parson_free(new_key);
    8e82:	4b8d      	ldr	r3, [pc, #564]	; (90b8 <parse_value+0x314>)
    8e84:	681b      	ldr	r3, [r3, #0]
    8e86:	0020      	movs	r0, r4
    8e88:	4798      	blx	r3
            json_value_free(output_value);
    8e8a:	9802      	ldr	r0, [sp, #8]
    8e8c:	4b8b      	ldr	r3, [pc, #556]	; (90bc <parse_value+0x318>)
    8e8e:	4798      	blx	r3
            return NULL;
    8e90:	9502      	str	r5, [sp, #8]
    8e92:	e0dd      	b.n	9050 <parse_value+0x2ac>
            parson_free(new_key);
    8e94:	4f88      	ldr	r7, [pc, #544]	; (90b8 <parse_value+0x314>)
    8e96:	0020      	movs	r0, r4
    8e98:	683b      	ldr	r3, [r7, #0]
    8e9a:	4798      	blx	r3
            parson_free(new_value);
    8e9c:	683b      	ldr	r3, [r7, #0]
    8e9e:	0028      	movs	r0, r5
    8ea0:	4798      	blx	r3
            json_value_free(output_value);
    8ea2:	9802      	ldr	r0, [sp, #8]
    8ea4:	4b85      	ldr	r3, [pc, #532]	; (90bc <parse_value+0x318>)
    8ea6:	4798      	blx	r3
            return NULL;
    8ea8:	2300      	movs	r3, #0
    8eaa:	9302      	str	r3, [sp, #8]
    8eac:	e0d0      	b.n	9050 <parse_value+0x2ac>
        SKIP_WHITESPACES(string);
    8eae:	3301      	adds	r3, #1
    8eb0:	603b      	str	r3, [r7, #0]
    8eb2:	47a8      	blx	r5
    8eb4:	683b      	ldr	r3, [r7, #0]
    8eb6:	781a      	ldrb	r2, [r3, #0]
    8eb8:	1880      	adds	r0, r0, r2
    8eba:	7841      	ldrb	r1, [r0, #1]
    8ebc:	420c      	tst	r4, r1
    8ebe:	d1f6      	bne.n	8eae <parse_value+0x10a>
        if (**string != ',')
    8ec0:	2a2c      	cmp	r2, #44	; 0x2c
    8ec2:	d104      	bne.n	8ece <parse_value+0x12a>
        SKIP_CHAR(string);
    8ec4:	3301      	adds	r3, #1
    8ec6:	603b      	str	r3, [r7, #0]
        SKIP_WHITESPACES(string);
    8ec8:	4d75      	ldr	r5, [pc, #468]	; (90a0 <parse_value+0x2fc>)
    8eca:	2408      	movs	r4, #8
    8ecc:	e004      	b.n	8ed8 <parse_value+0x134>
    SKIP_WHITESPACES(string);
    8ece:	4d74      	ldr	r5, [pc, #464]	; (90a0 <parse_value+0x2fc>)
    8ed0:	2408      	movs	r4, #8
    8ed2:	e013      	b.n	8efc <parse_value+0x158>
        SKIP_WHITESPACES(string);
    8ed4:	3301      	adds	r3, #1
    8ed6:	603b      	str	r3, [r7, #0]
    8ed8:	47a8      	blx	r5
    8eda:	683b      	ldr	r3, [r7, #0]
    8edc:	781a      	ldrb	r2, [r3, #0]
    8ede:	1880      	adds	r0, r0, r2
    8ee0:	7842      	ldrb	r2, [r0, #1]
    8ee2:	4214      	tst	r4, r2
    8ee4:	d1f6      	bne.n	8ed4 <parse_value+0x130>
    while (**string != '\0') {
    8ee6:	683b      	ldr	r3, [r7, #0]
    8ee8:	781b      	ldrb	r3, [r3, #0]
    8eea:	2b00      	cmp	r3, #0
    8eec:	d0ef      	beq.n	8ece <parse_value+0x12a>
        new_key = get_quoted_string(string);
    8eee:	0038      	movs	r0, r7
    8ef0:	47d0      	blx	sl
    8ef2:	0004      	movs	r4, r0
        SKIP_WHITESPACES(string);
    8ef4:	2508      	movs	r5, #8
    8ef6:	e79e      	b.n	8e36 <parse_value+0x92>
    SKIP_WHITESPACES(string);
    8ef8:	3301      	adds	r3, #1
    8efa:	603b      	str	r3, [r7, #0]
    8efc:	47a8      	blx	r5
    8efe:	683b      	ldr	r3, [r7, #0]
    8f00:	781a      	ldrb	r2, [r3, #0]
    8f02:	1880      	adds	r0, r0, r2
    8f04:	7841      	ldrb	r1, [r0, #1]
    8f06:	420c      	tst	r4, r1
    8f08:	d1f6      	bne.n	8ef8 <parse_value+0x154>
    if (**string != '}' || /* Trim object after parsing is over */
    8f0a:	2a7d      	cmp	r2, #125	; 0x7d
    8f0c:	d10e      	bne.n	8f2c <parse_value+0x188>
    return object ? object->count : 0;
    8f0e:	9b00      	ldr	r3, [sp, #0]
    8f10:	2b00      	cmp	r3, #0
    8f12:	d009      	beq.n	8f28 <parse_value+0x184>
    8f14:	6899      	ldr	r1, [r3, #8]
        json_object_resize(output_object, json_object_get_count(output_object)) == JSONFailure) {
    8f16:	9800      	ldr	r0, [sp, #0]
    8f18:	4b69      	ldr	r3, [pc, #420]	; (90c0 <parse_value+0x31c>)
    8f1a:	4798      	blx	r3
    if (**string != '}' || /* Trim object after parsing is over */
    8f1c:	1c43      	adds	r3, r0, #1
    8f1e:	d005      	beq.n	8f2c <parse_value+0x188>
    SKIP_CHAR(string);
    8f20:	683b      	ldr	r3, [r7, #0]
    8f22:	3301      	adds	r3, #1
    8f24:	603b      	str	r3, [r7, #0]
    8f26:	e093      	b.n	9050 <parse_value+0x2ac>
    return object ? object->count : 0;
    8f28:	2100      	movs	r1, #0
    8f2a:	e7f4      	b.n	8f16 <parse_value+0x172>
            json_value_free(output_value);
    8f2c:	9802      	ldr	r0, [sp, #8]
    8f2e:	4b63      	ldr	r3, [pc, #396]	; (90bc <parse_value+0x318>)
    8f30:	4798      	blx	r3
            return NULL;
    8f32:	2300      	movs	r3, #0
    8f34:	9302      	str	r3, [sp, #8]
    8f36:	e08b      	b.n	9050 <parse_value+0x2ac>
            return parse_array_value(string, nesting + 1);
    8f38:	4643      	mov	r3, r8
    8f3a:	3301      	adds	r3, #1
    8f3c:	9303      	str	r3, [sp, #12]
    JSON_Value *output_value = json_value_init_array(), *new_array_value = NULL;
    8f3e:	4b61      	ldr	r3, [pc, #388]	; (90c4 <parse_value+0x320>)
    8f40:	4798      	blx	r3
    8f42:	0004      	movs	r4, r0
    8f44:	9002      	str	r0, [sp, #8]
    JSON_Array *output_array = json_value_get_array(output_value);
    8f46:	4b60      	ldr	r3, [pc, #384]	; (90c8 <parse_value+0x324>)
    8f48:	4798      	blx	r3
    8f4a:	9000      	str	r0, [sp, #0]
    if (!output_value)
    8f4c:	2c00      	cmp	r4, #0
    8f4e:	d100      	bne.n	8f52 <parse_value+0x1ae>
    8f50:	e07e      	b.n	9050 <parse_value+0x2ac>
    SKIP_CHAR(string);
    8f52:	683b      	ldr	r3, [r7, #0]
    8f54:	3301      	adds	r3, #1
    8f56:	603b      	str	r3, [r7, #0]
    SKIP_WHITESPACES(string);
    8f58:	4c51      	ldr	r4, [pc, #324]	; (90a0 <parse_value+0x2fc>)
    8f5a:	2508      	movs	r5, #8
    8f5c:	e001      	b.n	8f62 <parse_value+0x1be>
    8f5e:	3301      	adds	r3, #1
    8f60:	603b      	str	r3, [r7, #0]
    8f62:	47a0      	blx	r4
    8f64:	683b      	ldr	r3, [r7, #0]
    8f66:	781a      	ldrb	r2, [r3, #0]
    8f68:	1880      	adds	r0, r0, r2
    8f6a:	7841      	ldrb	r1, [r0, #1]
    8f6c:	420d      	tst	r5, r1
    8f6e:	d1f6      	bne.n	8f5e <parse_value+0x1ba>
    if (**string == ']') { /* empty array */
    8f70:	2a5d      	cmp	r2, #93	; 0x5d
    8f72:	d004      	beq.n	8f7e <parse_value+0x1da>
        if(json_array_add(output_array, new_array_value) == JSONFailure) {
    8f74:	4b55      	ldr	r3, [pc, #340]	; (90cc <parse_value+0x328>)
    8f76:	469b      	mov	fp, r3
        SKIP_WHITESPACES(string);
    8f78:	4e49      	ldr	r6, [pc, #292]	; (90a0 <parse_value+0x2fc>)
        SKIP_WHITESPACES(string);
    8f7a:	0034      	movs	r4, r6
    8f7c:	e02c      	b.n	8fd8 <parse_value+0x234>
        SKIP_CHAR(string);
    8f7e:	3301      	adds	r3, #1
    8f80:	603b      	str	r3, [r7, #0]
    8f82:	e065      	b.n	9050 <parse_value+0x2ac>
            json_value_free(output_value);
    8f84:	9802      	ldr	r0, [sp, #8]
    8f86:	4b4d      	ldr	r3, [pc, #308]	; (90bc <parse_value+0x318>)
    8f88:	4798      	blx	r3
            return NULL;
    8f8a:	9502      	str	r5, [sp, #8]
    8f8c:	e060      	b.n	9050 <parse_value+0x2ac>
            parson_free(new_array_value);
    8f8e:	4b4a      	ldr	r3, [pc, #296]	; (90b8 <parse_value+0x314>)
    8f90:	681b      	ldr	r3, [r3, #0]
    8f92:	0028      	movs	r0, r5
    8f94:	4798      	blx	r3
            json_value_free(output_value);
    8f96:	9802      	ldr	r0, [sp, #8]
    8f98:	4b48      	ldr	r3, [pc, #288]	; (90bc <parse_value+0x318>)
    8f9a:	4798      	blx	r3
            return NULL;
    8f9c:	2300      	movs	r3, #0
    8f9e:	9302      	str	r3, [sp, #8]
    8fa0:	e056      	b.n	9050 <parse_value+0x2ac>
        SKIP_WHITESPACES(string);
    8fa2:	3301      	adds	r3, #1
    8fa4:	603b      	str	r3, [r7, #0]
    8fa6:	47b0      	blx	r6
    8fa8:	683b      	ldr	r3, [r7, #0]
    8faa:	781a      	ldrb	r2, [r3, #0]
    8fac:	1880      	adds	r0, r0, r2
    8fae:	7841      	ldrb	r1, [r0, #1]
    8fb0:	420d      	tst	r5, r1
    8fb2:	d1f6      	bne.n	8fa2 <parse_value+0x1fe>
        if (**string != ',')
    8fb4:	2a2c      	cmp	r2, #44	; 0x2c
    8fb6:	d103      	bne.n	8fc0 <parse_value+0x21c>
        SKIP_CHAR(string);
    8fb8:	3301      	adds	r3, #1
    8fba:	603b      	str	r3, [r7, #0]
        SKIP_WHITESPACES(string);
    8fbc:	2508      	movs	r5, #8
    8fbe:	e004      	b.n	8fca <parse_value+0x226>
    SKIP_WHITESPACES(string);
    8fc0:	4d37      	ldr	r5, [pc, #220]	; (90a0 <parse_value+0x2fc>)
    8fc2:	2408      	movs	r4, #8
    8fc4:	e01b      	b.n	8ffe <parse_value+0x25a>
        SKIP_WHITESPACES(string);
    8fc6:	3301      	adds	r3, #1
    8fc8:	603b      	str	r3, [r7, #0]
    8fca:	47a0      	blx	r4
    8fcc:	683b      	ldr	r3, [r7, #0]
    8fce:	781a      	ldrb	r2, [r3, #0]
    8fd0:	1880      	adds	r0, r0, r2
    8fd2:	7842      	ldrb	r2, [r0, #1]
    8fd4:	4215      	tst	r5, r2
    8fd6:	d1f6      	bne.n	8fc6 <parse_value+0x222>
    while (**string != '\0') {
    8fd8:	683b      	ldr	r3, [r7, #0]
    8fda:	781b      	ldrb	r3, [r3, #0]
    8fdc:	2b00      	cmp	r3, #0
    8fde:	d0ef      	beq.n	8fc0 <parse_value+0x21c>
        new_array_value = parse_value(string, nesting);
    8fe0:	9903      	ldr	r1, [sp, #12]
    8fe2:	0038      	movs	r0, r7
    8fe4:	f7ff fede 	bl	8da4 <parse_value>
    8fe8:	1e05      	subs	r5, r0, #0
        if (!new_array_value) {
    8fea:	d0cb      	beq.n	8f84 <parse_value+0x1e0>
        if(json_array_add(output_array, new_array_value) == JSONFailure) {
    8fec:	0001      	movs	r1, r0
    8fee:	9800      	ldr	r0, [sp, #0]
    8ff0:	47d8      	blx	fp
    8ff2:	1c43      	adds	r3, r0, #1
    8ff4:	d0cb      	beq.n	8f8e <parse_value+0x1ea>
        SKIP_WHITESPACES(string);
    8ff6:	2508      	movs	r5, #8
    8ff8:	e7d5      	b.n	8fa6 <parse_value+0x202>
    SKIP_WHITESPACES(string);
    8ffa:	3301      	adds	r3, #1
    8ffc:	603b      	str	r3, [r7, #0]
    8ffe:	47a8      	blx	r5
    9000:	683b      	ldr	r3, [r7, #0]
    9002:	781a      	ldrb	r2, [r3, #0]
    9004:	1880      	adds	r0, r0, r2
    9006:	7841      	ldrb	r1, [r0, #1]
    9008:	420c      	tst	r4, r1
    900a:	d1f6      	bne.n	8ffa <parse_value+0x256>
    if (**string != ']' || /* Trim array after parsing is over */
    900c:	2a5d      	cmp	r2, #93	; 0x5d
    900e:	d10e      	bne.n	902e <parse_value+0x28a>
    return array ? array->count : 0;
    9010:	9b00      	ldr	r3, [sp, #0]
    9012:	2b00      	cmp	r3, #0
    9014:	d009      	beq.n	902a <parse_value+0x286>
    9016:	6859      	ldr	r1, [r3, #4]
        json_array_resize(output_array, json_array_get_count(output_array)) == JSONFailure) {
    9018:	9800      	ldr	r0, [sp, #0]
    901a:	4b2d      	ldr	r3, [pc, #180]	; (90d0 <parse_value+0x32c>)
    901c:	4798      	blx	r3
    if (**string != ']' || /* Trim array after parsing is over */
    901e:	1c43      	adds	r3, r0, #1
    9020:	d005      	beq.n	902e <parse_value+0x28a>
    SKIP_CHAR(string);
    9022:	683b      	ldr	r3, [r7, #0]
    9024:	3301      	adds	r3, #1
    9026:	603b      	str	r3, [r7, #0]
    9028:	e012      	b.n	9050 <parse_value+0x2ac>
    return array ? array->count : 0;
    902a:	2100      	movs	r1, #0
    902c:	e7f4      	b.n	9018 <parse_value+0x274>
            json_value_free(output_value);
    902e:	9802      	ldr	r0, [sp, #8]
    9030:	4b22      	ldr	r3, [pc, #136]	; (90bc <parse_value+0x318>)
    9032:	4798      	blx	r3
            return NULL;
    9034:	2300      	movs	r3, #0
    9036:	9302      	str	r3, [sp, #8]
    9038:	e00a      	b.n	9050 <parse_value+0x2ac>
    char *new_string = get_quoted_string(string);
    903a:	0038      	movs	r0, r7
    903c:	4b1c      	ldr	r3, [pc, #112]	; (90b0 <parse_value+0x30c>)
    903e:	4798      	blx	r3
    9040:	1e04      	subs	r4, r0, #0
    if (new_string == NULL)
    9042:	d100      	bne.n	9046 <parse_value+0x2a2>
    9044:	e096      	b.n	9174 <parse_value+0x3d0>
    value = json_value_init_string_no_copy(new_string);
    9046:	4b23      	ldr	r3, [pc, #140]	; (90d4 <parse_value+0x330>)
    9048:	4798      	blx	r3
    904a:	9002      	str	r0, [sp, #8]
    if (value == NULL) {
    904c:	2800      	cmp	r0, #0
    904e:	d006      	beq.n	905e <parse_value+0x2ba>
}
    9050:	9802      	ldr	r0, [sp, #8]
    9052:	b006      	add	sp, #24
    9054:	bc1c      	pop	{r2, r3, r4}
    9056:	4690      	mov	r8, r2
    9058:	469a      	mov	sl, r3
    905a:	46a3      	mov	fp, r4
    905c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        parson_free(new_string);
    905e:	4b16      	ldr	r3, [pc, #88]	; (90b8 <parse_value+0x314>)
    9060:	681b      	ldr	r3, [r3, #0]
    9062:	0020      	movs	r0, r4
    9064:	4798      	blx	r3
    9066:	e7f3      	b.n	9050 <parse_value+0x2ac>
    if (strncmp("true", *string, true_token_size) == 0) {
    9068:	2204      	movs	r2, #4
    906a:	0029      	movs	r1, r5
    906c:	481a      	ldr	r0, [pc, #104]	; (90d8 <parse_value+0x334>)
    906e:	4b1b      	ldr	r3, [pc, #108]	; (90dc <parse_value+0x338>)
    9070:	4798      	blx	r3
    9072:	2800      	cmp	r0, #0
    9074:	d00c      	beq.n	9090 <parse_value+0x2ec>
    } else if (strncmp("false", *string, false_token_size) == 0) {
    9076:	2205      	movs	r2, #5
    9078:	0029      	movs	r1, r5
    907a:	4819      	ldr	r0, [pc, #100]	; (90e0 <parse_value+0x33c>)
    907c:	4b17      	ldr	r3, [pc, #92]	; (90dc <parse_value+0x338>)
    907e:	4798      	blx	r3
    9080:	2800      	cmp	r0, #0
    9082:	d17a      	bne.n	917a <parse_value+0x3d6>
        *string += false_token_size;
    9084:	3505      	adds	r5, #5
    9086:	603d      	str	r5, [r7, #0]
        return json_value_init_boolean(0);
    9088:	4b16      	ldr	r3, [pc, #88]	; (90e4 <parse_value+0x340>)
    908a:	4798      	blx	r3
    908c:	9002      	str	r0, [sp, #8]
    908e:	e7df      	b.n	9050 <parse_value+0x2ac>
        *string += true_token_size;
    9090:	3504      	adds	r5, #4
    9092:	603d      	str	r5, [r7, #0]
        return json_value_init_boolean(1);
    9094:	3001      	adds	r0, #1
    9096:	4b13      	ldr	r3, [pc, #76]	; (90e4 <parse_value+0x340>)
    9098:	4798      	blx	r3
    909a:	9002      	str	r0, [sp, #8]
    909c:	e7d8      	b.n	9050 <parse_value+0x2ac>
    909e:	46c0      	nop			; (mov r8, r8)
    90a0:	00010855 	.word	0x00010855
    90a4:	00014fec 	.word	0x00014fec
    90a8:	00008cc1 	.word	0x00008cc1
    90ac:	00008b6d 	.word	0x00008b6d
    90b0:	00008765 	.word	0x00008765
    90b4:	00008aa5 	.word	0x00008aa5
    90b8:	200002b4 	.word	0x200002b4
    90bc:	00008c1d 	.word	0x00008c1d
    90c0:	00008631 	.word	0x00008631
    90c4:	00008d09 	.word	0x00008d09
    90c8:	00008b99 	.word	0x00008b99
    90cc:	00008721 	.word	0x00008721
    90d0:	000086d1 	.word	0x000086d1
    90d4:	000085c1 	.word	0x000085c1
    90d8:	00015170 	.word	0x00015170
    90dc:	00010fb5 	.word	0x00010fb5
    90e0:	00015178 	.word	0x00015178
    90e4:	00008d6d 	.word	0x00008d6d
    double number = strtod(*string, &end);
    90e8:	a905      	add	r1, sp, #20
    90ea:	0028      	movs	r0, r5
    90ec:	4b2a      	ldr	r3, [pc, #168]	; (9198 <parse_value+0x3f4>)
    90ee:	4798      	blx	r3
    90f0:	9000      	str	r0, [sp, #0]
    90f2:	9101      	str	r1, [sp, #4]
    if (is_decimal(*string, end - *string)) {
    90f4:	683c      	ldr	r4, [r7, #0]
    90f6:	9b05      	ldr	r3, [sp, #20]
    90f8:	4698      	mov	r8, r3
    90fa:	1b1d      	subs	r5, r3, r4
    if (length > 1 && string[0] == '0' && string[1] != '.')
    90fc:	2d01      	cmp	r5, #1
    90fe:	d902      	bls.n	9106 <parse_value+0x362>
    9100:	7823      	ldrb	r3, [r4, #0]
    9102:	2b30      	cmp	r3, #48	; 0x30
    9104:	d01c      	beq.n	9140 <parse_value+0x39c>
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.')
    9106:	2d02      	cmp	r5, #2
    9108:	d90b      	bls.n	9122 <parse_value+0x37e>
    910a:	2202      	movs	r2, #2
    910c:	4923      	ldr	r1, [pc, #140]	; (919c <parse_value+0x3f8>)
    910e:	0020      	movs	r0, r4
    9110:	4b23      	ldr	r3, [pc, #140]	; (91a0 <parse_value+0x3fc>)
    9112:	4798      	blx	r3
    9114:	2800      	cmp	r0, #0
    9116:	d104      	bne.n	9122 <parse_value+0x37e>
    9118:	78a3      	ldrb	r3, [r4, #2]
        output_value = NULL;
    911a:	2200      	movs	r2, #0
    911c:	9202      	str	r2, [sp, #8]
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.')
    911e:	2b2e      	cmp	r3, #46	; 0x2e
    9120:	d196      	bne.n	9050 <parse_value+0x2ac>
    9122:	1e6e      	subs	r6, r5, #1
    9124:	19a6      	adds	r6, r4, r6
    9126:	3c01      	subs	r4, #1
        if (strchr("xX", string[length]))
    9128:	4d1e      	ldr	r5, [pc, #120]	; (91a4 <parse_value+0x400>)
    while (length--)
    912a:	42a6      	cmp	r6, r4
    912c:	d02b      	beq.n	9186 <parse_value+0x3e2>
        if (strchr("xX", string[length]))
    912e:	7831      	ldrb	r1, [r6, #0]
    9130:	481d      	ldr	r0, [pc, #116]	; (91a8 <parse_value+0x404>)
    9132:	47a8      	blx	r5
    9134:	3e01      	subs	r6, #1
    9136:	2800      	cmp	r0, #0
    9138:	d0f7      	beq.n	912a <parse_value+0x386>
        output_value = NULL;
    913a:	2300      	movs	r3, #0
    913c:	9302      	str	r3, [sp, #8]
            return parse_number_value(string);
    913e:	e787      	b.n	9050 <parse_value+0x2ac>
    if (length > 1 && string[0] == '0' && string[1] != '.')
    9140:	7863      	ldrb	r3, [r4, #1]
        output_value = NULL;
    9142:	2200      	movs	r2, #0
    9144:	9202      	str	r2, [sp, #8]
    if (length > 1 && string[0] == '0' && string[1] != '.')
    9146:	2b2e      	cmp	r3, #46	; 0x2e
    9148:	d000      	beq.n	914c <parse_value+0x3a8>
    914a:	e781      	b.n	9050 <parse_value+0x2ac>
    914c:	e7db      	b.n	9106 <parse_value+0x362>
    if (strncmp("null", *string, token_size) == 0) {
    914e:	2204      	movs	r2, #4
    9150:	0029      	movs	r1, r5
    9152:	4816      	ldr	r0, [pc, #88]	; (91ac <parse_value+0x408>)
    9154:	4b12      	ldr	r3, [pc, #72]	; (91a0 <parse_value+0x3fc>)
    9156:	4798      	blx	r3
    9158:	2800      	cmp	r0, #0
    915a:	d111      	bne.n	9180 <parse_value+0x3dc>
        *string += token_size;
    915c:	3504      	adds	r5, #4
    915e:	603d      	str	r5, [r7, #0]
        return json_value_init_null();
    9160:	4b13      	ldr	r3, [pc, #76]	; (91b0 <parse_value+0x40c>)
    9162:	4798      	blx	r3
    9164:	9002      	str	r0, [sp, #8]
    9166:	e773      	b.n	9050 <parse_value+0x2ac>
        return NULL;
    9168:	2300      	movs	r3, #0
    916a:	9302      	str	r3, [sp, #8]
    916c:	e770      	b.n	9050 <parse_value+0x2ac>
            return NULL;
    916e:	2300      	movs	r3, #0
    9170:	9302      	str	r3, [sp, #8]
    9172:	e76d      	b.n	9050 <parse_value+0x2ac>
        return NULL;
    9174:	2300      	movs	r3, #0
    9176:	9302      	str	r3, [sp, #8]
    9178:	e76a      	b.n	9050 <parse_value+0x2ac>
    return NULL;
    917a:	2300      	movs	r3, #0
    917c:	9302      	str	r3, [sp, #8]
    917e:	e767      	b.n	9050 <parse_value+0x2ac>
    return NULL;
    9180:	2300      	movs	r3, #0
    9182:	9302      	str	r3, [sp, #8]
    9184:	e764      	b.n	9050 <parse_value+0x2ac>
        *string = end;
    9186:	4643      	mov	r3, r8
    9188:	603b      	str	r3, [r7, #0]
        output_value = json_value_init_number(number);
    918a:	9800      	ldr	r0, [sp, #0]
    918c:	9901      	ldr	r1, [sp, #4]
    918e:	4b09      	ldr	r3, [pc, #36]	; (91b4 <parse_value+0x410>)
    9190:	4798      	blx	r3
    9192:	9002      	str	r0, [sp, #8]
    9194:	e75c      	b.n	9050 <parse_value+0x2ac>
    9196:	46c0      	nop			; (mov r8, r8)
    9198:	00011c41 	.word	0x00011c41
    919c:	00015190 	.word	0x00015190
    91a0:	00010fb5 	.word	0x00010fb5
    91a4:	00010f8b 	.word	0x00010f8b
    91a8:	00015194 	.word	0x00015194
    91ac:	00015188 	.word	0x00015188
    91b0:	00008d8d 	.word	0x00008d8d
    91b4:	00008d4d 	.word	0x00008d4d

000091b8 <json_parse_string>:
JSON_Value * json_parse_string(const char *string) {
    91b8:	b530      	push	{r4, r5, lr}
    91ba:	b083      	sub	sp, #12
    91bc:	9001      	str	r0, [sp, #4]
    if (string == NULL)
    91be:	2800      	cmp	r0, #0
    91c0:	d015      	beq.n	91ee <json_parse_string+0x36>
    SKIP_WHITESPACES(&string);
    91c2:	4d0d      	ldr	r5, [pc, #52]	; (91f8 <json_parse_string+0x40>)
    91c4:	2408      	movs	r4, #8
    91c6:	e001      	b.n	91cc <json_parse_string+0x14>
    91c8:	3301      	adds	r3, #1
    91ca:	9301      	str	r3, [sp, #4]
    91cc:	47a8      	blx	r5
    91ce:	9b01      	ldr	r3, [sp, #4]
    91d0:	781a      	ldrb	r2, [r3, #0]
    91d2:	1880      	adds	r0, r0, r2
    91d4:	7841      	ldrb	r1, [r0, #1]
    91d6:	420c      	tst	r4, r1
    91d8:	d1f6      	bne.n	91c8 <json_parse_string+0x10>
    if (*string != '{' && *string != '[')
    91da:	2320      	movs	r3, #32
    91dc:	439a      	bics	r2, r3
    91de:	2a5b      	cmp	r2, #91	; 0x5b
    91e0:	d107      	bne.n	91f2 <json_parse_string+0x3a>
    return parse_value((const char**)&string, 0);
    91e2:	2100      	movs	r1, #0
    91e4:	a801      	add	r0, sp, #4
    91e6:	4b05      	ldr	r3, [pc, #20]	; (91fc <json_parse_string+0x44>)
    91e8:	4798      	blx	r3
}
    91ea:	b003      	add	sp, #12
    91ec:	bd30      	pop	{r4, r5, pc}
        return NULL;
    91ee:	2000      	movs	r0, #0
    91f0:	e7fb      	b.n	91ea <json_parse_string+0x32>
        return NULL;
    91f2:	2000      	movs	r0, #0
    91f4:	e7f9      	b.n	91ea <json_parse_string+0x32>
    91f6:	46c0      	nop			; (mov r8, r8)
    91f8:	00010855 	.word	0x00010855
    91fc:	00008da5 	.word	0x00008da5

00009200 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    9200:	b570      	push	{r4, r5, r6, lr}
    9202:	b082      	sub	sp, #8
    9204:	0005      	movs	r5, r0
    9206:	000e      	movs	r6, r1
	uint16_t temp = 0;
    9208:	2200      	movs	r2, #0
    920a:	466b      	mov	r3, sp
    920c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    920e:	4c06      	ldr	r4, [pc, #24]	; (9228 <usart_serial_getchar+0x28>)
    9210:	466b      	mov	r3, sp
    9212:	1d99      	adds	r1, r3, #6
    9214:	0028      	movs	r0, r5
    9216:	47a0      	blx	r4
    9218:	2800      	cmp	r0, #0
    921a:	d1f9      	bne.n	9210 <usart_serial_getchar+0x10>

	*c = temp;
    921c:	466b      	mov	r3, sp
    921e:	3306      	adds	r3, #6
    9220:	881b      	ldrh	r3, [r3, #0]
    9222:	7033      	strb	r3, [r6, #0]
}
    9224:	b002      	add	sp, #8
    9226:	bd70      	pop	{r4, r5, r6, pc}
    9228:	000096c9 	.word	0x000096c9

0000922c <usart_serial_putchar>:
{
    922c:	b570      	push	{r4, r5, r6, lr}
    922e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    9230:	b28c      	uxth	r4, r1
    9232:	4e03      	ldr	r6, [pc, #12]	; (9240 <usart_serial_putchar+0x14>)
    9234:	0021      	movs	r1, r4
    9236:	0028      	movs	r0, r5
    9238:	47b0      	blx	r6
    923a:	2800      	cmp	r0, #0
    923c:	d1fa      	bne.n	9234 <usart_serial_putchar+0x8>
}
    923e:	bd70      	pop	{r4, r5, r6, pc}
    9240:	0000969d 	.word	0x0000969d

00009244 <configure_console>:
#include "sensorBoard_console.h"
/** UART module for debug. */
static struct usart_module cdc_uart_module;

void configure_console(void)
{
    9244:	b5f0      	push	{r4, r5, r6, r7, lr}
    9246:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    9248:	2380      	movs	r3, #128	; 0x80
    924a:	05db      	lsls	r3, r3, #23
    924c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    924e:	2300      	movs	r3, #0
    9250:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    9252:	22ff      	movs	r2, #255	; 0xff
    9254:	4669      	mov	r1, sp
    9256:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    9258:	2200      	movs	r2, #0
    925a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    925c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    925e:	2401      	movs	r4, #1
    9260:	2124      	movs	r1, #36	; 0x24
    9262:	4668      	mov	r0, sp
    9264:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    9266:	3101      	adds	r1, #1
    9268:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    926a:	3101      	adds	r1, #1
    926c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    926e:	3101      	adds	r1, #1
    9270:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    9272:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    9274:	3105      	adds	r1, #5
    9276:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    9278:	3101      	adds	r1, #1
    927a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    927c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    927e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    9280:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    9282:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    9284:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    9286:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    9288:	2313      	movs	r3, #19
    928a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    928c:	7742      	strb	r2, [r0, #29]
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    928e:	2380      	movs	r3, #128	; 0x80
    9290:	035b      	lsls	r3, r3, #13
    9292:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    9294:	4b1a      	ldr	r3, [pc, #104]	; (9300 <configure_console+0xbc>)
    9296:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    9298:	4b1a      	ldr	r3, [pc, #104]	; (9304 <configure_console+0xc0>)
    929a:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    929c:	2301      	movs	r3, #1
    929e:	425b      	negs	r3, r3
    92a0:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    92a2:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    92a4:	23e1      	movs	r3, #225	; 0xe1
    92a6:	025b      	lsls	r3, r3, #9
    92a8:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    92aa:	4d17      	ldr	r5, [pc, #92]	; (9308 <configure_console+0xc4>)
    92ac:	4b17      	ldr	r3, [pc, #92]	; (930c <configure_console+0xc8>)
    92ae:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    92b0:	4a17      	ldr	r2, [pc, #92]	; (9310 <configure_console+0xcc>)
    92b2:	4b18      	ldr	r3, [pc, #96]	; (9314 <configure_console+0xd0>)
    92b4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    92b6:	4a18      	ldr	r2, [pc, #96]	; (9318 <configure_console+0xd4>)
    92b8:	4b18      	ldr	r3, [pc, #96]	; (931c <configure_console+0xd8>)
    92ba:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    92bc:	466a      	mov	r2, sp
    92be:	4918      	ldr	r1, [pc, #96]	; (9320 <configure_console+0xdc>)
    92c0:	0028      	movs	r0, r5
    92c2:	4b18      	ldr	r3, [pc, #96]	; (9324 <configure_console+0xe0>)
    92c4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    92c6:	4f18      	ldr	r7, [pc, #96]	; (9328 <configure_console+0xe4>)
    92c8:	683b      	ldr	r3, [r7, #0]
    92ca:	6898      	ldr	r0, [r3, #8]
    92cc:	2100      	movs	r1, #0
    92ce:	4e17      	ldr	r6, [pc, #92]	; (932c <configure_console+0xe8>)
    92d0:	47b0      	blx	r6
	setbuf(stdin, NULL);
    92d2:	683b      	ldr	r3, [r7, #0]
    92d4:	6858      	ldr	r0, [r3, #4]
    92d6:	2100      	movs	r1, #0
    92d8:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    92da:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    92dc:	0030      	movs	r0, r6
    92de:	4b14      	ldr	r3, [pc, #80]	; (9330 <configure_console+0xec>)
    92e0:	4798      	blx	r3
    92e2:	231f      	movs	r3, #31
    92e4:	4018      	ands	r0, r3
    92e6:	4084      	lsls	r4, r0
    92e8:	4b12      	ldr	r3, [pc, #72]	; (9334 <configure_console+0xf0>)
    92ea:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    92ec:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    92ee:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    92f0:	2b00      	cmp	r3, #0
    92f2:	d1fc      	bne.n	92ee <configure_console+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    92f4:	6833      	ldr	r3, [r6, #0]
    92f6:	2202      	movs	r2, #2
    92f8:	4313      	orrs	r3, r2
    92fa:	6033      	str	r3, [r6, #0]

	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE, &usart_conf);
	usart_enable(&cdc_uart_module);
}
    92fc:	b011      	add	sp, #68	; 0x44
    92fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9300:	00160002 	.word	0x00160002
    9304:	00170002 	.word	0x00170002
    9308:	200026f8 	.word	0x200026f8
    930c:	20002b00 	.word	0x20002b00
    9310:	0000922d 	.word	0x0000922d
    9314:	20002afc 	.word	0x20002afc
    9318:	00009201 	.word	0x00009201
    931c:	20002af8 	.word	0x20002af8
    9320:	42000c00 	.word	0x42000c00
    9324:	00009339 	.word	0x00009339
    9328:	200002c8 	.word	0x200002c8
    932c:	00010cb5 	.word	0x00010cb5
    9330:	00009e59 	.word	0x00009e59
    9334:	e000e100 	.word	0xe000e100

00009338 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    9338:	b5f0      	push	{r4, r5, r6, r7, lr}
    933a:	46de      	mov	lr, fp
    933c:	4657      	mov	r7, sl
    933e:	464e      	mov	r6, r9
    9340:	4645      	mov	r5, r8
    9342:	b5e0      	push	{r5, r6, r7, lr}
    9344:	b091      	sub	sp, #68	; 0x44
    9346:	0005      	movs	r5, r0
    9348:	000c      	movs	r4, r1
    934a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    934c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    934e:	0008      	movs	r0, r1
    9350:	4bc4      	ldr	r3, [pc, #784]	; (9664 <usart_init+0x32c>)
    9352:	4798      	blx	r3
    9354:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    9356:	2805      	cmp	r0, #5
    9358:	d00d      	beq.n	9376 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    935a:	0007      	movs	r7, r0
    935c:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    935e:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    9360:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    9362:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    9364:	07c9      	lsls	r1, r1, #31
    9366:	d509      	bpl.n	937c <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    9368:	b011      	add	sp, #68	; 0x44
    936a:	bc3c      	pop	{r2, r3, r4, r5}
    936c:	4690      	mov	r8, r2
    936e:	4699      	mov	r9, r3
    9370:	46a2      	mov	sl, r4
    9372:	46ab      	mov	fp, r5
    9374:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    9376:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    9378:	2301      	movs	r3, #1
    937a:	e7f1      	b.n	9360 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    937c:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    937e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    9380:	0789      	lsls	r1, r1, #30
    9382:	d4f1      	bmi.n	9368 <usart_init+0x30>
	if (sercom_index == 5) {
    9384:	2a05      	cmp	r2, #5
    9386:	d047      	beq.n	9418 <usart_init+0xe0>
			MCLK->APBCMASK.reg |= mask;
    9388:	49b7      	ldr	r1, [pc, #732]	; (9668 <usart_init+0x330>)
    938a:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    938c:	2201      	movs	r2, #1
    938e:	409a      	lsls	r2, r3
    9390:	0013      	movs	r3, r2
    9392:	4303      	orrs	r3, r0
    9394:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    9396:	a90f      	add	r1, sp, #60	; 0x3c
    9398:	232d      	movs	r3, #45	; 0x2d
    939a:	4698      	mov	r8, r3
    939c:	5cf3      	ldrb	r3, [r6, r3]
    939e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    93a0:	b2ff      	uxtb	r7, r7
    93a2:	0038      	movs	r0, r7
    93a4:	4bb1      	ldr	r3, [pc, #708]	; (966c <usart_init+0x334>)
    93a6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    93a8:	0038      	movs	r0, r7
    93aa:	4bb1      	ldr	r3, [pc, #708]	; (9670 <usart_init+0x338>)
    93ac:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    93ae:	4643      	mov	r3, r8
    93b0:	5cf0      	ldrb	r0, [r6, r3]
    93b2:	2100      	movs	r1, #0
    93b4:	4baf      	ldr	r3, [pc, #700]	; (9674 <usart_init+0x33c>)
    93b6:	4798      	blx	r3
	module->character_size = config->character_size;
    93b8:	7af3      	ldrb	r3, [r6, #11]
    93ba:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    93bc:	2324      	movs	r3, #36	; 0x24
    93be:	5cf3      	ldrb	r3, [r6, r3]
    93c0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    93c2:	2325      	movs	r3, #37	; 0x25
    93c4:	5cf3      	ldrb	r3, [r6, r3]
    93c6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    93c8:	7ef3      	ldrb	r3, [r6, #27]
    93ca:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    93cc:	7f33      	ldrb	r3, [r6, #28]
    93ce:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    93d0:	682b      	ldr	r3, [r5, #0]
    93d2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    93d4:	0018      	movs	r0, r3
    93d6:	4ba3      	ldr	r3, [pc, #652]	; (9664 <usart_init+0x32c>)
    93d8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    93da:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    93dc:	2200      	movs	r2, #0
    93de:	230e      	movs	r3, #14
    93e0:	a906      	add	r1, sp, #24
    93e2:	468c      	mov	ip, r1
    93e4:	4463      	add	r3, ip
    93e6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    93e8:	8a32      	ldrh	r2, [r6, #16]
    93ea:	9202      	str	r2, [sp, #8]
    93ec:	2380      	movs	r3, #128	; 0x80
    93ee:	01db      	lsls	r3, r3, #7
    93f0:	429a      	cmp	r2, r3
    93f2:	d100      	bne.n	93f6 <usart_init+0xbe>
    93f4:	e0a9      	b.n	954a <usart_init+0x212>
    93f6:	d917      	bls.n	9428 <usart_init+0xf0>
    93f8:	23c0      	movs	r3, #192	; 0xc0
    93fa:	01db      	lsls	r3, r3, #7
    93fc:	9a02      	ldr	r2, [sp, #8]
    93fe:	429a      	cmp	r2, r3
    9400:	d100      	bne.n	9404 <usart_init+0xcc>
    9402:	e09d      	b.n	9540 <usart_init+0x208>
    9404:	2380      	movs	r3, #128	; 0x80
    9406:	021b      	lsls	r3, r3, #8
    9408:	429a      	cmp	r2, r3
    940a:	d000      	beq.n	940e <usart_init+0xd6>
    940c:	e125      	b.n	965a <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    940e:	2303      	movs	r3, #3
    9410:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    9412:	2300      	movs	r3, #0
    9414:	9307      	str	r3, [sp, #28]
    9416:	e010      	b.n	943a <usart_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    9418:	4993      	ldr	r1, [pc, #588]	; (9668 <usart_init+0x330>)
    941a:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    941c:	3a04      	subs	r2, #4
    941e:	409a      	lsls	r2, r3
    9420:	0013      	movs	r3, r2
    9422:	4303      	orrs	r3, r0
    9424:	620b      	str	r3, [r1, #32]
    9426:	e7b6      	b.n	9396 <usart_init+0x5e>
	switch (config->sample_rate) {
    9428:	2380      	movs	r3, #128	; 0x80
    942a:	019b      	lsls	r3, r3, #6
    942c:	429a      	cmp	r2, r3
    942e:	d000      	beq.n	9432 <usart_init+0xfa>
    9430:	e113      	b.n	965a <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    9432:	2310      	movs	r3, #16
    9434:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    9436:	3b0f      	subs	r3, #15
    9438:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    943a:	6833      	ldr	r3, [r6, #0]
    943c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    943e:	68f3      	ldr	r3, [r6, #12]
    9440:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    9442:	6973      	ldr	r3, [r6, #20]
    9444:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    9446:	7e33      	ldrb	r3, [r6, #24]
    9448:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    944a:	2326      	movs	r3, #38	; 0x26
    944c:	5cf3      	ldrb	r3, [r6, r3]
    944e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    9450:	6873      	ldr	r3, [r6, #4]
    9452:	4699      	mov	r9, r3
	switch (transfer_mode)
    9454:	2b00      	cmp	r3, #0
    9456:	d100      	bne.n	945a <usart_init+0x122>
    9458:	e09f      	b.n	959a <usart_init+0x262>
    945a:	2380      	movs	r3, #128	; 0x80
    945c:	055b      	lsls	r3, r3, #21
    945e:	4599      	cmp	r9, r3
    9460:	d104      	bne.n	946c <usart_init+0x134>
			if (!config->use_external_clock) {
    9462:	2327      	movs	r3, #39	; 0x27
    9464:	5cf3      	ldrb	r3, [r6, r3]
    9466:	2b00      	cmp	r3, #0
    9468:	d100      	bne.n	946c <usart_init+0x134>
    946a:	e084      	b.n	9576 <usart_init+0x23e>
	if(config->encoding_format_enable) {
    946c:	7e73      	ldrb	r3, [r6, #25]
    946e:	2b00      	cmp	r3, #0
    9470:	d002      	beq.n	9478 <usart_init+0x140>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    9472:	7eb3      	ldrb	r3, [r6, #26]
    9474:	4642      	mov	r2, r8
    9476:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    9478:	682a      	ldr	r2, [r5, #0]
    947a:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    947c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    947e:	2b00      	cmp	r3, #0
    9480:	d1fc      	bne.n	947c <usart_init+0x144>
	usart_hw->BAUD.reg = baud;
    9482:	330e      	adds	r3, #14
    9484:	aa06      	add	r2, sp, #24
    9486:	4694      	mov	ip, r2
    9488:	4463      	add	r3, ip
    948a:	881b      	ldrh	r3, [r3, #0]
    948c:	4642      	mov	r2, r8
    948e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    9490:	9b05      	ldr	r3, [sp, #20]
    9492:	9a03      	ldr	r2, [sp, #12]
    9494:	4313      	orrs	r3, r2
    9496:	9a04      	ldr	r2, [sp, #16]
    9498:	4313      	orrs	r3, r2
    949a:	464a      	mov	r2, r9
    949c:	4313      	orrs	r3, r2
    949e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    94a0:	465b      	mov	r3, fp
    94a2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    94a4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    94a6:	4653      	mov	r3, sl
    94a8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    94aa:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    94ac:	2327      	movs	r3, #39	; 0x27
    94ae:	5cf3      	ldrb	r3, [r6, r3]
    94b0:	2b00      	cmp	r3, #0
    94b2:	d101      	bne.n	94b8 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    94b4:	3304      	adds	r3, #4
    94b6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    94b8:	7e73      	ldrb	r3, [r6, #25]
    94ba:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    94bc:	7f32      	ldrb	r2, [r6, #28]
    94be:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    94c0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    94c2:	7f72      	ldrb	r2, [r6, #29]
    94c4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    94c6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    94c8:	2224      	movs	r2, #36	; 0x24
    94ca:	5cb2      	ldrb	r2, [r6, r2]
    94cc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    94ce:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    94d0:	2225      	movs	r2, #37	; 0x25
    94d2:	5cb2      	ldrb	r2, [r6, r2]
    94d4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    94d6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    94d8:	7ab1      	ldrb	r1, [r6, #10]
    94da:	7af2      	ldrb	r2, [r6, #11]
    94dc:	4311      	orrs	r1, r2
    94de:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    94e0:	8933      	ldrh	r3, [r6, #8]
    94e2:	2bff      	cmp	r3, #255	; 0xff
    94e4:	d07d      	beq.n	95e2 <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    94e6:	2280      	movs	r2, #128	; 0x80
    94e8:	0452      	lsls	r2, r2, #17
    94ea:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    94ec:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    94ee:	232c      	movs	r3, #44	; 0x2c
    94f0:	5cf3      	ldrb	r3, [r6, r3]
    94f2:	2b00      	cmp	r3, #0
    94f4:	d103      	bne.n	94fe <usart_init+0x1c6>
    94f6:	4b60      	ldr	r3, [pc, #384]	; (9678 <usart_init+0x340>)
    94f8:	789b      	ldrb	r3, [r3, #2]
    94fa:	079b      	lsls	r3, r3, #30
    94fc:	d501      	bpl.n	9502 <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    94fe:	2380      	movs	r3, #128	; 0x80
    9500:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    9502:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    9504:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    9506:	2b00      	cmp	r3, #0
    9508:	d1fc      	bne.n	9504 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    950a:	4643      	mov	r3, r8
    950c:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    950e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    9510:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    9512:	2b00      	cmp	r3, #0
    9514:	d1fc      	bne.n	9510 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    9516:	4643      	mov	r3, r8
    9518:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    951a:	ab0e      	add	r3, sp, #56	; 0x38
    951c:	2280      	movs	r2, #128	; 0x80
    951e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9520:	2200      	movs	r2, #0
    9522:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    9524:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    9526:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    9528:	6b33      	ldr	r3, [r6, #48]	; 0x30
    952a:	930a      	str	r3, [sp, #40]	; 0x28
    952c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    952e:	930b      	str	r3, [sp, #44]	; 0x2c
    9530:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    9532:	930c      	str	r3, [sp, #48]	; 0x30
    9534:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    9536:	9302      	str	r3, [sp, #8]
    9538:	930d      	str	r3, [sp, #52]	; 0x34
    953a:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    953c:	ae0a      	add	r6, sp, #40	; 0x28
    953e:	e05e      	b.n	95fe <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    9540:	2308      	movs	r3, #8
    9542:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    9544:	3b07      	subs	r3, #7
    9546:	9307      	str	r3, [sp, #28]
    9548:	e777      	b.n	943a <usart_init+0x102>
	ctrla = (uint32_t)config->data_order |
    954a:	6833      	ldr	r3, [r6, #0]
    954c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    954e:	68f3      	ldr	r3, [r6, #12]
    9550:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    9552:	6973      	ldr	r3, [r6, #20]
    9554:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    9556:	7e33      	ldrb	r3, [r6, #24]
    9558:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    955a:	2326      	movs	r3, #38	; 0x26
    955c:	5cf3      	ldrb	r3, [r6, r3]
    955e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    9560:	6873      	ldr	r3, [r6, #4]
    9562:	4699      	mov	r9, r3
	switch (transfer_mode)
    9564:	2b00      	cmp	r3, #0
    9566:	d014      	beq.n	9592 <usart_init+0x25a>
    9568:	2380      	movs	r3, #128	; 0x80
    956a:	055b      	lsls	r3, r3, #21
    956c:	4599      	cmp	r9, r3
    956e:	d100      	bne.n	9572 <usart_init+0x23a>
    9570:	e777      	b.n	9462 <usart_init+0x12a>
	enum status_code status_code = STATUS_OK;
    9572:	2000      	movs	r0, #0
    9574:	e020      	b.n	95b8 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    9576:	6a33      	ldr	r3, [r6, #32]
    9578:	001f      	movs	r7, r3
    957a:	b2c0      	uxtb	r0, r0
    957c:	4b3f      	ldr	r3, [pc, #252]	; (967c <usart_init+0x344>)
    957e:	4798      	blx	r3
    9580:	0001      	movs	r1, r0
    9582:	220e      	movs	r2, #14
    9584:	ab06      	add	r3, sp, #24
    9586:	469c      	mov	ip, r3
    9588:	4462      	add	r2, ip
    958a:	0038      	movs	r0, r7
    958c:	4b3c      	ldr	r3, [pc, #240]	; (9680 <usart_init+0x348>)
    958e:	4798      	blx	r3
    9590:	e012      	b.n	95b8 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    9592:	2308      	movs	r3, #8
    9594:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    9596:	2300      	movs	r3, #0
    9598:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    959a:	2327      	movs	r3, #39	; 0x27
    959c:	5cf3      	ldrb	r3, [r6, r3]
    959e:	2b00      	cmp	r3, #0
    95a0:	d00e      	beq.n	95c0 <usart_init+0x288>
				status_code =
    95a2:	9b06      	ldr	r3, [sp, #24]
    95a4:	9300      	str	r3, [sp, #0]
    95a6:	9b07      	ldr	r3, [sp, #28]
    95a8:	220e      	movs	r2, #14
    95aa:	a906      	add	r1, sp, #24
    95ac:	468c      	mov	ip, r1
    95ae:	4462      	add	r2, ip
    95b0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    95b2:	6a30      	ldr	r0, [r6, #32]
    95b4:	4f33      	ldr	r7, [pc, #204]	; (9684 <usart_init+0x34c>)
    95b6:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    95b8:	2800      	cmp	r0, #0
    95ba:	d000      	beq.n	95be <usart_init+0x286>
    95bc:	e6d4      	b.n	9368 <usart_init+0x30>
    95be:	e755      	b.n	946c <usart_init+0x134>
						_sercom_get_async_baud_val(config->baudrate,
    95c0:	6a33      	ldr	r3, [r6, #32]
    95c2:	001f      	movs	r7, r3
    95c4:	b2c0      	uxtb	r0, r0
    95c6:	4b2d      	ldr	r3, [pc, #180]	; (967c <usart_init+0x344>)
    95c8:	4798      	blx	r3
    95ca:	0001      	movs	r1, r0
				status_code =
    95cc:	9b06      	ldr	r3, [sp, #24]
    95ce:	9300      	str	r3, [sp, #0]
    95d0:	9b07      	ldr	r3, [sp, #28]
    95d2:	220e      	movs	r2, #14
    95d4:	a806      	add	r0, sp, #24
    95d6:	4684      	mov	ip, r0
    95d8:	4462      	add	r2, ip
    95da:	0038      	movs	r0, r7
    95dc:	4f29      	ldr	r7, [pc, #164]	; (9684 <usart_init+0x34c>)
    95de:	47b8      	blx	r7
    95e0:	e7ea      	b.n	95b8 <usart_init+0x280>
		if(config->lin_slave_enable) {
    95e2:	7ef3      	ldrb	r3, [r6, #27]
    95e4:	2b00      	cmp	r3, #0
    95e6:	d082      	beq.n	94ee <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    95e8:	2380      	movs	r3, #128	; 0x80
    95ea:	04db      	lsls	r3, r3, #19
    95ec:	431f      	orrs	r7, r3
    95ee:	e77e      	b.n	94ee <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    95f0:	0020      	movs	r0, r4
    95f2:	4b25      	ldr	r3, [pc, #148]	; (9688 <usart_init+0x350>)
    95f4:	4798      	blx	r3
    95f6:	e007      	b.n	9608 <usart_init+0x2d0>
    95f8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    95fa:	2f04      	cmp	r7, #4
    95fc:	d00d      	beq.n	961a <usart_init+0x2e2>
    95fe:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    9600:	00bb      	lsls	r3, r7, #2
    9602:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    9604:	2800      	cmp	r0, #0
    9606:	d0f3      	beq.n	95f0 <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    9608:	1c43      	adds	r3, r0, #1
    960a:	d0f5      	beq.n	95f8 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    960c:	a90e      	add	r1, sp, #56	; 0x38
    960e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    9610:	0c00      	lsrs	r0, r0, #16
    9612:	b2c0      	uxtb	r0, r0
    9614:	4b1d      	ldr	r3, [pc, #116]	; (968c <usart_init+0x354>)
    9616:	4798      	blx	r3
    9618:	e7ee      	b.n	95f8 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    961a:	2300      	movs	r3, #0
    961c:	60eb      	str	r3, [r5, #12]
    961e:	612b      	str	r3, [r5, #16]
    9620:	616b      	str	r3, [r5, #20]
    9622:	61ab      	str	r3, [r5, #24]
    9624:	61eb      	str	r3, [r5, #28]
    9626:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    9628:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    962a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    962c:	2200      	movs	r2, #0
    962e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    9630:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    9632:	3330      	adds	r3, #48	; 0x30
    9634:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    9636:	3301      	adds	r3, #1
    9638:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    963a:	3301      	adds	r3, #1
    963c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    963e:	3301      	adds	r3, #1
    9640:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    9642:	6828      	ldr	r0, [r5, #0]
    9644:	4b07      	ldr	r3, [pc, #28]	; (9664 <usart_init+0x32c>)
    9646:	4798      	blx	r3
    9648:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    964a:	4911      	ldr	r1, [pc, #68]	; (9690 <usart_init+0x358>)
    964c:	4b11      	ldr	r3, [pc, #68]	; (9694 <usart_init+0x35c>)
    964e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    9650:	00a4      	lsls	r4, r4, #2
    9652:	4b11      	ldr	r3, [pc, #68]	; (9698 <usart_init+0x360>)
    9654:	50e5      	str	r5, [r4, r3]
	return status_code;
    9656:	2000      	movs	r0, #0
    9658:	e686      	b.n	9368 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    965a:	2310      	movs	r3, #16
    965c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    965e:	2300      	movs	r3, #0
    9660:	9307      	str	r3, [sp, #28]
    9662:	e6ea      	b.n	943a <usart_init+0x102>
    9664:	000048fd 	.word	0x000048fd
    9668:	40000400 	.word	0x40000400
    966c:	0000e17d 	.word	0x0000e17d
    9670:	0000e10d 	.word	0x0000e10d
    9674:	0000473d 	.word	0x0000473d
    9678:	41002000 	.word	0x41002000
    967c:	0000e1a1 	.word	0x0000e1a1
    9680:	0000467f 	.word	0x0000467f
    9684:	000046a9 	.word	0x000046a9
    9688:	00004789 	.word	0x00004789
    968c:	0000e279 	.word	0x0000e279
    9690:	00009739 	.word	0x00009739
    9694:	00009e1d 	.word	0x00009e1d
    9698:	20002b2c 	.word	0x20002b2c

0000969c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    969c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    969e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    96a0:	2a00      	cmp	r2, #0
    96a2:	d101      	bne.n	96a8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    96a4:	0018      	movs	r0, r3
    96a6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    96a8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    96aa:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    96ac:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    96ae:	2a00      	cmp	r2, #0
    96b0:	d1f8      	bne.n	96a4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    96b2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    96b4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    96b6:	2a00      	cmp	r2, #0
    96b8:	d1fc      	bne.n	96b4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    96ba:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    96bc:	2102      	movs	r1, #2
    96be:	7e1a      	ldrb	r2, [r3, #24]
    96c0:	420a      	tst	r2, r1
    96c2:	d0fc      	beq.n	96be <usart_write_wait+0x22>
	return STATUS_OK;
    96c4:	2300      	movs	r3, #0
    96c6:	e7ed      	b.n	96a4 <usart_write_wait+0x8>

000096c8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    96c8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    96ca:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    96cc:	2a00      	cmp	r2, #0
    96ce:	d101      	bne.n	96d4 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    96d0:	0018      	movs	r0, r3
    96d2:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    96d4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    96d6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    96d8:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    96da:	2a00      	cmp	r2, #0
    96dc:	d1f8      	bne.n	96d0 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    96de:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    96e0:	7e10      	ldrb	r0, [r2, #24]
    96e2:	0740      	lsls	r0, r0, #29
    96e4:	d5f4      	bpl.n	96d0 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    96e6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    96e8:	2b00      	cmp	r3, #0
    96ea:	d1fc      	bne.n	96e6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    96ec:	8b53      	ldrh	r3, [r2, #26]
    96ee:	b2db      	uxtb	r3, r3
	if (error_code) {
    96f0:	0698      	lsls	r0, r3, #26
    96f2:	d01d      	beq.n	9730 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    96f4:	0798      	lsls	r0, r3, #30
    96f6:	d503      	bpl.n	9700 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    96f8:	2302      	movs	r3, #2
    96fa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    96fc:	3318      	adds	r3, #24
    96fe:	e7e7      	b.n	96d0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    9700:	0758      	lsls	r0, r3, #29
    9702:	d503      	bpl.n	970c <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    9704:	2304      	movs	r3, #4
    9706:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    9708:	331a      	adds	r3, #26
    970a:	e7e1      	b.n	96d0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    970c:	07d8      	lsls	r0, r3, #31
    970e:	d503      	bpl.n	9718 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    9710:	2301      	movs	r3, #1
    9712:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    9714:	3312      	adds	r3, #18
    9716:	e7db      	b.n	96d0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    9718:	06d8      	lsls	r0, r3, #27
    971a:	d503      	bpl.n	9724 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    971c:	2310      	movs	r3, #16
    971e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    9720:	3332      	adds	r3, #50	; 0x32
    9722:	e7d5      	b.n	96d0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    9724:	069b      	lsls	r3, r3, #26
    9726:	d503      	bpl.n	9730 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    9728:	2320      	movs	r3, #32
    972a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    972c:	3321      	adds	r3, #33	; 0x21
    972e:	e7cf      	b.n	96d0 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    9730:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    9732:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    9734:	2300      	movs	r3, #0
    9736:	e7cb      	b.n	96d0 <usart_read_wait+0x8>

00009738 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    9738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    973a:	0080      	lsls	r0, r0, #2
    973c:	4b62      	ldr	r3, [pc, #392]	; (98c8 <_usart_interrupt_handler+0x190>)
    973e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    9740:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    9742:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    9744:	2b00      	cmp	r3, #0
    9746:	d1fc      	bne.n	9742 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    9748:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    974a:	7da6      	ldrb	r6, [r4, #22]
    974c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    974e:	2330      	movs	r3, #48	; 0x30
    9750:	5ceb      	ldrb	r3, [r5, r3]
    9752:	2231      	movs	r2, #49	; 0x31
    9754:	5caf      	ldrb	r7, [r5, r2]
    9756:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    9758:	07f3      	lsls	r3, r6, #31
    975a:	d522      	bpl.n	97a2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    975c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    975e:	b29b      	uxth	r3, r3
    9760:	2b00      	cmp	r3, #0
    9762:	d01c      	beq.n	979e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    9764:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    9766:	7813      	ldrb	r3, [r2, #0]
    9768:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    976a:	1c51      	adds	r1, r2, #1
    976c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    976e:	7969      	ldrb	r1, [r5, #5]
    9770:	2901      	cmp	r1, #1
    9772:	d00e      	beq.n	9792 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    9774:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    9776:	05db      	lsls	r3, r3, #23
    9778:	0ddb      	lsrs	r3, r3, #23
    977a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    977c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    977e:	3b01      	subs	r3, #1
    9780:	b29b      	uxth	r3, r3
    9782:	85eb      	strh	r3, [r5, #46]	; 0x2e
    9784:	2b00      	cmp	r3, #0
    9786:	d10c      	bne.n	97a2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    9788:	3301      	adds	r3, #1
    978a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    978c:	3301      	adds	r3, #1
    978e:	75a3      	strb	r3, [r4, #22]
    9790:	e007      	b.n	97a2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    9792:	7851      	ldrb	r1, [r2, #1]
    9794:	0209      	lsls	r1, r1, #8
    9796:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    9798:	3202      	adds	r2, #2
    979a:	62aa      	str	r2, [r5, #40]	; 0x28
    979c:	e7eb      	b.n	9776 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    979e:	2301      	movs	r3, #1
    97a0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    97a2:	07b3      	lsls	r3, r6, #30
    97a4:	d506      	bpl.n	97b4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    97a6:	2302      	movs	r3, #2
    97a8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    97aa:	2200      	movs	r2, #0
    97ac:	3331      	adds	r3, #49	; 0x31
    97ae:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    97b0:	07fb      	lsls	r3, r7, #31
    97b2:	d41a      	bmi.n	97ea <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    97b4:	0773      	lsls	r3, r6, #29
    97b6:	d565      	bpl.n	9884 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    97b8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    97ba:	b29b      	uxth	r3, r3
    97bc:	2b00      	cmp	r3, #0
    97be:	d05f      	beq.n	9880 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    97c0:	8b63      	ldrh	r3, [r4, #26]
    97c2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    97c4:	071a      	lsls	r2, r3, #28
    97c6:	d414      	bmi.n	97f2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    97c8:	223f      	movs	r2, #63	; 0x3f
    97ca:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    97cc:	2b00      	cmp	r3, #0
    97ce:	d034      	beq.n	983a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    97d0:	079a      	lsls	r2, r3, #30
    97d2:	d511      	bpl.n	97f8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    97d4:	221a      	movs	r2, #26
    97d6:	2332      	movs	r3, #50	; 0x32
    97d8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    97da:	3b30      	subs	r3, #48	; 0x30
    97dc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    97de:	077b      	lsls	r3, r7, #29
    97e0:	d550      	bpl.n	9884 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    97e2:	0028      	movs	r0, r5
    97e4:	696b      	ldr	r3, [r5, #20]
    97e6:	4798      	blx	r3
    97e8:	e04c      	b.n	9884 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    97ea:	0028      	movs	r0, r5
    97ec:	68eb      	ldr	r3, [r5, #12]
    97ee:	4798      	blx	r3
    97f0:	e7e0      	b.n	97b4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    97f2:	2237      	movs	r2, #55	; 0x37
    97f4:	4013      	ands	r3, r2
    97f6:	e7e9      	b.n	97cc <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    97f8:	075a      	lsls	r2, r3, #29
    97fa:	d505      	bpl.n	9808 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    97fc:	221e      	movs	r2, #30
    97fe:	2332      	movs	r3, #50	; 0x32
    9800:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    9802:	3b2e      	subs	r3, #46	; 0x2e
    9804:	8363      	strh	r3, [r4, #26]
    9806:	e7ea      	b.n	97de <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    9808:	07da      	lsls	r2, r3, #31
    980a:	d505      	bpl.n	9818 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    980c:	2213      	movs	r2, #19
    980e:	2332      	movs	r3, #50	; 0x32
    9810:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    9812:	3b31      	subs	r3, #49	; 0x31
    9814:	8363      	strh	r3, [r4, #26]
    9816:	e7e2      	b.n	97de <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    9818:	06da      	lsls	r2, r3, #27
    981a:	d505      	bpl.n	9828 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    981c:	2242      	movs	r2, #66	; 0x42
    981e:	2332      	movs	r3, #50	; 0x32
    9820:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    9822:	3b22      	subs	r3, #34	; 0x22
    9824:	8363      	strh	r3, [r4, #26]
    9826:	e7da      	b.n	97de <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    9828:	2220      	movs	r2, #32
    982a:	421a      	tst	r2, r3
    982c:	d0d7      	beq.n	97de <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    982e:	3221      	adds	r2, #33	; 0x21
    9830:	2332      	movs	r3, #50	; 0x32
    9832:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    9834:	3b12      	subs	r3, #18
    9836:	8363      	strh	r3, [r4, #26]
    9838:	e7d1      	b.n	97de <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    983a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    983c:	05db      	lsls	r3, r3, #23
    983e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    9840:	b2da      	uxtb	r2, r3
    9842:	6a69      	ldr	r1, [r5, #36]	; 0x24
    9844:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    9846:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    9848:	1c51      	adds	r1, r2, #1
    984a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    984c:	7969      	ldrb	r1, [r5, #5]
    984e:	2901      	cmp	r1, #1
    9850:	d010      	beq.n	9874 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    9852:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    9854:	3b01      	subs	r3, #1
    9856:	b29b      	uxth	r3, r3
    9858:	85ab      	strh	r3, [r5, #44]	; 0x2c
    985a:	2b00      	cmp	r3, #0
    985c:	d112      	bne.n	9884 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    985e:	3304      	adds	r3, #4
    9860:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    9862:	2200      	movs	r2, #0
    9864:	332e      	adds	r3, #46	; 0x2e
    9866:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    9868:	07bb      	lsls	r3, r7, #30
    986a:	d50b      	bpl.n	9884 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    986c:	0028      	movs	r0, r5
    986e:	692b      	ldr	r3, [r5, #16]
    9870:	4798      	blx	r3
    9872:	e007      	b.n	9884 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    9874:	0a1b      	lsrs	r3, r3, #8
    9876:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    9878:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    987a:	3301      	adds	r3, #1
    987c:	626b      	str	r3, [r5, #36]	; 0x24
    987e:	e7e8      	b.n	9852 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    9880:	2304      	movs	r3, #4
    9882:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    9884:	06f3      	lsls	r3, r6, #27
    9886:	d504      	bpl.n	9892 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    9888:	2310      	movs	r3, #16
    988a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    988c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    988e:	06fb      	lsls	r3, r7, #27
    9890:	d40e      	bmi.n	98b0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    9892:	06b3      	lsls	r3, r6, #26
    9894:	d504      	bpl.n	98a0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    9896:	2320      	movs	r3, #32
    9898:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    989a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    989c:	073b      	lsls	r3, r7, #28
    989e:	d40b      	bmi.n	98b8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    98a0:	0733      	lsls	r3, r6, #28
    98a2:	d504      	bpl.n	98ae <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    98a4:	2308      	movs	r3, #8
    98a6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    98a8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    98aa:	06bb      	lsls	r3, r7, #26
    98ac:	d408      	bmi.n	98c0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    98ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    98b0:	0028      	movs	r0, r5
    98b2:	69eb      	ldr	r3, [r5, #28]
    98b4:	4798      	blx	r3
    98b6:	e7ec      	b.n	9892 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    98b8:	0028      	movs	r0, r5
    98ba:	69ab      	ldr	r3, [r5, #24]
    98bc:	4798      	blx	r3
    98be:	e7ef      	b.n	98a0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    98c0:	6a2b      	ldr	r3, [r5, #32]
    98c2:	0028      	movs	r0, r5
    98c4:	4798      	blx	r3
}
    98c6:	e7f2      	b.n	98ae <_usart_interrupt_handler+0x176>
    98c8:	20002b2c 	.word	0x20002b2c

000098cc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    98cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    98ce:	46c6      	mov	lr, r8
    98d0:	b500      	push	{lr}
    98d2:	b088      	sub	sp, #32
    98d4:	0005      	movs	r5, r0
    98d6:	000c      	movs	r4, r1
    98d8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    98da:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    98dc:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    98de:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    98e0:	079b      	lsls	r3, r3, #30
    98e2:	d503      	bpl.n	98ec <spi_init+0x20>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    98e4:	b008      	add	sp, #32
    98e6:	bc04      	pop	{r2}
    98e8:	4690      	mov	r8, r2
    98ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    98ec:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    98ee:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    98f0:	07db      	lsls	r3, r3, #31
    98f2:	d4f7      	bmi.n	98e4 <spi_init+0x18>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    98f4:	0008      	movs	r0, r1
    98f6:	4b75      	ldr	r3, [pc, #468]	; (9acc <spi_init+0x200>)
    98f8:	4798      	blx	r3
	if (sercom_index == 5) {
    98fa:	2805      	cmp	r0, #5
    98fc:	d100      	bne.n	9900 <spi_init+0x34>
    98fe:	e0dd      	b.n	9abc <spi_init+0x1f0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    9900:	0007      	movs	r7, r0
    9902:	3712      	adds	r7, #18
			MCLK->APBCMASK.reg |= mask;
    9904:	4a72      	ldr	r2, [pc, #456]	; (9ad0 <spi_init+0x204>)
    9906:	69d1      	ldr	r1, [r2, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    9908:	2301      	movs	r3, #1
    990a:	4083      	lsls	r3, r0
    990c:	430b      	orrs	r3, r1
    990e:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    9910:	a907      	add	r1, sp, #28
    9912:	2324      	movs	r3, #36	; 0x24
    9914:	4698      	mov	r8, r3
    9916:	5cf3      	ldrb	r3, [r6, r3]
    9918:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    991a:	b2ff      	uxtb	r7, r7
    991c:	0038      	movs	r0, r7
    991e:	4b6d      	ldr	r3, [pc, #436]	; (9ad4 <spi_init+0x208>)
    9920:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    9922:	0038      	movs	r0, r7
    9924:	4b6c      	ldr	r3, [pc, #432]	; (9ad8 <spi_init+0x20c>)
    9926:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    9928:	4643      	mov	r3, r8
    992a:	5cf0      	ldrb	r0, [r6, r3]
    992c:	2100      	movs	r1, #0
    992e:	4b6b      	ldr	r3, [pc, #428]	; (9adc <spi_init+0x210>)
    9930:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    9932:	7833      	ldrb	r3, [r6, #0]
    9934:	2b01      	cmp	r3, #1
    9936:	d03f      	beq.n	99b8 <spi_init+0xec>
	if (config->mode == SPI_MODE_SLAVE) {
    9938:	7833      	ldrb	r3, [r6, #0]
    993a:	2b00      	cmp	r3, #0
    993c:	d103      	bne.n	9946 <spi_init+0x7a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    993e:	6823      	ldr	r3, [r4, #0]
    9940:	2208      	movs	r2, #8
    9942:	4313      	orrs	r3, r2
    9944:	6023      	str	r3, [r4, #0]
    9946:	002b      	movs	r3, r5
    9948:	330c      	adds	r3, #12
    994a:	0029      	movs	r1, r5
    994c:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    994e:	2200      	movs	r2, #0
    9950:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    9952:	4299      	cmp	r1, r3
    9954:	d1fc      	bne.n	9950 <spi_init+0x84>
	module->tx_buffer_ptr              = NULL;
    9956:	2300      	movs	r3, #0
    9958:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    995a:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    995c:	2400      	movs	r4, #0
    995e:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    9960:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    9962:	3336      	adds	r3, #54	; 0x36
    9964:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    9966:	3301      	adds	r3, #1
    9968:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    996a:	3301      	adds	r3, #1
    996c:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    996e:	3b35      	subs	r3, #53	; 0x35
    9970:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    9972:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    9974:	6828      	ldr	r0, [r5, #0]
    9976:	4b55      	ldr	r3, [pc, #340]	; (9acc <spi_init+0x200>)
    9978:	4798      	blx	r3
    997a:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    997c:	4958      	ldr	r1, [pc, #352]	; (9ae0 <spi_init+0x214>)
    997e:	4b59      	ldr	r3, [pc, #356]	; (9ae4 <spi_init+0x218>)
    9980:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    9982:	00bf      	lsls	r7, r7, #2
    9984:	4b58      	ldr	r3, [pc, #352]	; (9ae8 <spi_init+0x21c>)
    9986:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9988:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    998a:	ab02      	add	r3, sp, #8
    998c:	2280      	movs	r2, #128	; 0x80
    998e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9990:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9992:	3a7f      	subs	r2, #127	; 0x7f
    9994:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    9996:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    9998:	7833      	ldrb	r3, [r6, #0]
    999a:	2b00      	cmp	r3, #0
    999c:	d102      	bne.n	99a4 <spi_init+0xd8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    999e:	2200      	movs	r2, #0
    99a0:	ab02      	add	r3, sp, #8
    99a2:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    99a4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    99a6:	9303      	str	r3, [sp, #12]
    99a8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    99aa:	9304      	str	r3, [sp, #16]
    99ac:	6b33      	ldr	r3, [r6, #48]	; 0x30
    99ae:	9305      	str	r3, [sp, #20]
    99b0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    99b2:	9306      	str	r3, [sp, #24]
    99b4:	2400      	movs	r4, #0
    99b6:	e00b      	b.n	99d0 <spi_init+0x104>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    99b8:	6823      	ldr	r3, [r4, #0]
    99ba:	220c      	movs	r2, #12
    99bc:	4313      	orrs	r3, r2
    99be:	6023      	str	r3, [r4, #0]
    99c0:	e7ba      	b.n	9938 <spi_init+0x6c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    99c2:	0038      	movs	r0, r7
    99c4:	4b49      	ldr	r3, [pc, #292]	; (9aec <spi_init+0x220>)
    99c6:	4798      	blx	r3
    99c8:	e00a      	b.n	99e0 <spi_init+0x114>
    99ca:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    99cc:	2c04      	cmp	r4, #4
    99ce:	d010      	beq.n	99f2 <spi_init+0x126>
    99d0:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    99d2:	00a3      	lsls	r3, r4, #2
    99d4:	466a      	mov	r2, sp
    99d6:	200c      	movs	r0, #12
    99d8:	1812      	adds	r2, r2, r0
    99da:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    99dc:	2800      	cmp	r0, #0
    99de:	d0f0      	beq.n	99c2 <spi_init+0xf6>
		if (current_pinmux != PINMUX_UNUSED) {
    99e0:	1c43      	adds	r3, r0, #1
    99e2:	d0f2      	beq.n	99ca <spi_init+0xfe>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    99e4:	a902      	add	r1, sp, #8
    99e6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    99e8:	0c00      	lsrs	r0, r0, #16
    99ea:	b2c0      	uxtb	r0, r0
    99ec:	4b40      	ldr	r3, [pc, #256]	; (9af0 <spi_init+0x224>)
    99ee:	4798      	blx	r3
    99f0:	e7eb      	b.n	99ca <spi_init+0xfe>
	module->mode             = config->mode;
    99f2:	7833      	ldrb	r3, [r6, #0]
    99f4:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    99f6:	7c33      	ldrb	r3, [r6, #16]
    99f8:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    99fa:	7cb3      	ldrb	r3, [r6, #18]
    99fc:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    99fe:	7d33      	ldrb	r3, [r6, #20]
    9a00:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    9a02:	2200      	movs	r2, #0
    9a04:	466b      	mov	r3, sp
    9a06:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    9a08:	7833      	ldrb	r3, [r6, #0]
    9a0a:	2b01      	cmp	r3, #1
    9a0c:	d012      	beq.n	9a34 <spi_init+0x168>
	if (config->mode == SPI_MODE_SLAVE) {
    9a0e:	7833      	ldrb	r3, [r6, #0]
    9a10:	2b00      	cmp	r3, #0
    9a12:	d126      	bne.n	9a62 <spi_init+0x196>
		ctrla = config->mode_specific.slave.frame_format;
    9a14:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    9a16:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    9a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    9a1a:	7ff1      	ldrb	r1, [r6, #31]
    9a1c:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    9a1e:	7fb4      	ldrb	r4, [r6, #30]
    9a20:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    9a22:	4319      	orrs	r1, r3
    9a24:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    9a26:	2320      	movs	r3, #32
    9a28:	5cf3      	ldrb	r3, [r6, r3]
    9a2a:	2b00      	cmp	r3, #0
    9a2c:	d01b      	beq.n	9a66 <spi_init+0x19a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    9a2e:	2340      	movs	r3, #64	; 0x40
    9a30:	431a      	orrs	r2, r3
    9a32:	e018      	b.n	9a66 <spi_init+0x19a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    9a34:	6828      	ldr	r0, [r5, #0]
    9a36:	4b25      	ldr	r3, [pc, #148]	; (9acc <spi_init+0x200>)
    9a38:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    9a3a:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    9a3c:	b2c0      	uxtb	r0, r0
    9a3e:	4b2d      	ldr	r3, [pc, #180]	; (9af4 <spi_init+0x228>)
    9a40:	4798      	blx	r3
    9a42:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    9a44:	466b      	mov	r3, sp
    9a46:	1d9a      	adds	r2, r3, #6
    9a48:	69b0      	ldr	r0, [r6, #24]
    9a4a:	4b2b      	ldr	r3, [pc, #172]	; (9af8 <spi_init+0x22c>)
    9a4c:	4798      	blx	r3
    9a4e:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    9a50:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    9a52:	2b00      	cmp	r3, #0
    9a54:	d000      	beq.n	9a58 <spi_init+0x18c>
    9a56:	e745      	b.n	98e4 <spi_init+0x18>
		spi_module->BAUD.reg = (uint8_t)baud;
    9a58:	466b      	mov	r3, sp
    9a5a:	3306      	adds	r3, #6
    9a5c:	781b      	ldrb	r3, [r3, #0]
    9a5e:	733b      	strb	r3, [r7, #12]
    9a60:	e7d5      	b.n	9a0e <spi_init+0x142>
	uint32_t ctrlb = 0;
    9a62:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    9a64:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    9a66:	6873      	ldr	r3, [r6, #4]
    9a68:	68b1      	ldr	r1, [r6, #8]
    9a6a:	430b      	orrs	r3, r1
    9a6c:	68f1      	ldr	r1, [r6, #12]
    9a6e:	430b      	orrs	r3, r1
    9a70:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    9a72:	7c31      	ldrb	r1, [r6, #16]
    9a74:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    9a76:	7c71      	ldrb	r1, [r6, #17]
    9a78:	2900      	cmp	r1, #0
    9a7a:	d103      	bne.n	9a84 <spi_init+0x1b8>
    9a7c:	491f      	ldr	r1, [pc, #124]	; (9afc <spi_init+0x230>)
    9a7e:	7889      	ldrb	r1, [r1, #2]
    9a80:	0789      	lsls	r1, r1, #30
    9a82:	d501      	bpl.n	9a88 <spi_init+0x1bc>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    9a84:	2180      	movs	r1, #128	; 0x80
    9a86:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    9a88:	7cb1      	ldrb	r1, [r6, #18]
    9a8a:	2900      	cmp	r1, #0
    9a8c:	d002      	beq.n	9a94 <spi_init+0x1c8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    9a8e:	2180      	movs	r1, #128	; 0x80
    9a90:	0289      	lsls	r1, r1, #10
    9a92:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    9a94:	7cf1      	ldrb	r1, [r6, #19]
    9a96:	2900      	cmp	r1, #0
    9a98:	d002      	beq.n	9aa0 <spi_init+0x1d4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    9a9a:	2180      	movs	r1, #128	; 0x80
    9a9c:	0089      	lsls	r1, r1, #2
    9a9e:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    9aa0:	7d31      	ldrb	r1, [r6, #20]
    9aa2:	2900      	cmp	r1, #0
    9aa4:	d002      	beq.n	9aac <spi_init+0x1e0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    9aa6:	2180      	movs	r1, #128	; 0x80
    9aa8:	0189      	lsls	r1, r1, #6
    9aaa:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    9aac:	6839      	ldr	r1, [r7, #0]
    9aae:	430b      	orrs	r3, r1
    9ab0:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    9ab2:	687b      	ldr	r3, [r7, #4]
    9ab4:	431a      	orrs	r2, r3
    9ab6:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    9ab8:	2000      	movs	r0, #0
    9aba:	e713      	b.n	98e4 <spi_init+0x18>
			MCLK->APBDMASK.reg |= mask;
    9abc:	4a04      	ldr	r2, [pc, #16]	; (9ad0 <spi_init+0x204>)
    9abe:	6a13      	ldr	r3, [r2, #32]
    9ac0:	2102      	movs	r1, #2
    9ac2:	430b      	orrs	r3, r1
    9ac4:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    9ac6:	2718      	movs	r7, #24
    9ac8:	e722      	b.n	9910 <spi_init+0x44>
    9aca:	46c0      	nop			; (mov r8, r8)
    9acc:	000048fd 	.word	0x000048fd
    9ad0:	40000400 	.word	0x40000400
    9ad4:	0000e17d 	.word	0x0000e17d
    9ad8:	0000e10d 	.word	0x0000e10d
    9adc:	0000473d 	.word	0x0000473d
    9ae0:	00009bf5 	.word	0x00009bf5
    9ae4:	00009e1d 	.word	0x00009e1d
    9ae8:	20002b2c 	.word	0x20002b2c
    9aec:	00004789 	.word	0x00004789
    9af0:	0000e279 	.word	0x0000e279
    9af4:	0000e1a1 	.word	0x0000e1a1
    9af8:	0000467f 	.word	0x0000467f
    9afc:	41002000 	.word	0x41002000

00009b00 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    9b00:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    9b02:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    9b04:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    9b06:	2c01      	cmp	r4, #1
    9b08:	d001      	beq.n	9b0e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    9b0a:	0018      	movs	r0, r3
    9b0c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    9b0e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    9b10:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    9b12:	2c00      	cmp	r4, #0
    9b14:	d1f9      	bne.n	9b0a <spi_select_slave+0xa>
		if (select) {
    9b16:	2a00      	cmp	r2, #0
    9b18:	d058      	beq.n	9bcc <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    9b1a:	784b      	ldrb	r3, [r1, #1]
    9b1c:	2b00      	cmp	r3, #0
    9b1e:	d044      	beq.n	9baa <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    9b20:	6803      	ldr	r3, [r0, #0]
    9b22:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    9b24:	07db      	lsls	r3, r3, #31
    9b26:	d410      	bmi.n	9b4a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    9b28:	780a      	ldrb	r2, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    9b2a:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    9b2c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9b2e:	2900      	cmp	r1, #0
    9b30:	d104      	bne.n	9b3c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    9b32:	0953      	lsrs	r3, r2, #5
    9b34:	01db      	lsls	r3, r3, #7
    9b36:	492e      	ldr	r1, [pc, #184]	; (9bf0 <spi_select_slave+0xf0>)
    9b38:	468c      	mov	ip, r1
    9b3a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9b3c:	211f      	movs	r1, #31
    9b3e:	4011      	ands	r1, r2
    9b40:	2201      	movs	r2, #1
    9b42:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    9b44:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    9b46:	2305      	movs	r3, #5
    9b48:	e7df      	b.n	9b0a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    9b4a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    9b4c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    9b4e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9b50:	2c00      	cmp	r4, #0
    9b52:	d104      	bne.n	9b5e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    9b54:	0953      	lsrs	r3, r2, #5
    9b56:	01db      	lsls	r3, r3, #7
    9b58:	4c25      	ldr	r4, [pc, #148]	; (9bf0 <spi_select_slave+0xf0>)
    9b5a:	46a4      	mov	ip, r4
    9b5c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9b5e:	241f      	movs	r4, #31
    9b60:	4014      	ands	r4, r2
    9b62:	2201      	movs	r2, #1
    9b64:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    9b66:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9b68:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    9b6a:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    9b6c:	07d2      	lsls	r2, r2, #31
    9b6e:	d501      	bpl.n	9b74 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    9b70:	788a      	ldrb	r2, [r1, #2]
    9b72:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    9b74:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    9b76:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    9b78:	2a00      	cmp	r2, #0
    9b7a:	d1c6      	bne.n	9b0a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    9b7c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    9b7e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    9b80:	7e13      	ldrb	r3, [r2, #24]
    9b82:	420b      	tst	r3, r1
    9b84:	d0fc      	beq.n	9b80 <spi_select_slave+0x80>
    9b86:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    9b88:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    9b8a:	0749      	lsls	r1, r1, #29
    9b8c:	d5bd      	bpl.n	9b0a <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    9b8e:	8b53      	ldrh	r3, [r2, #26]
    9b90:	075b      	lsls	r3, r3, #29
    9b92:	d501      	bpl.n	9b98 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    9b94:	2304      	movs	r3, #4
    9b96:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9b98:	7983      	ldrb	r3, [r0, #6]
    9b9a:	2b01      	cmp	r3, #1
    9b9c:	d002      	beq.n	9ba4 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    9b9e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    9ba0:	2300      	movs	r3, #0
    9ba2:	e7b2      	b.n	9b0a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    9ba4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    9ba6:	2300      	movs	r3, #0
    9ba8:	e7af      	b.n	9b0a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    9baa:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    9bac:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9bae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9bb0:	2900      	cmp	r1, #0
    9bb2:	d104      	bne.n	9bbe <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    9bb4:	0953      	lsrs	r3, r2, #5
    9bb6:	01db      	lsls	r3, r3, #7
    9bb8:	490d      	ldr	r1, [pc, #52]	; (9bf0 <spi_select_slave+0xf0>)
    9bba:	468c      	mov	ip, r1
    9bbc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9bbe:	211f      	movs	r1, #31
    9bc0:	4011      	ands	r1, r2
    9bc2:	2201      	movs	r2, #1
    9bc4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    9bc6:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    9bc8:	2300      	movs	r3, #0
    9bca:	e79e      	b.n	9b0a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    9bcc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    9bce:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9bd0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9bd2:	2900      	cmp	r1, #0
    9bd4:	d104      	bne.n	9be0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    9bd6:	0953      	lsrs	r3, r2, #5
    9bd8:	01db      	lsls	r3, r3, #7
    9bda:	4905      	ldr	r1, [pc, #20]	; (9bf0 <spi_select_slave+0xf0>)
    9bdc:	468c      	mov	ip, r1
    9bde:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9be0:	211f      	movs	r1, #31
    9be2:	4011      	ands	r1, r2
    9be4:	2201      	movs	r2, #1
    9be6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    9be8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    9bea:	2300      	movs	r3, #0
    9bec:	e78d      	b.n	9b0a <spi_select_slave+0xa>
    9bee:	46c0      	nop			; (mov r8, r8)
    9bf0:	40002800 	.word	0x40002800

00009bf4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    9bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    9bf6:	0080      	lsls	r0, r0, #2
    9bf8:	4b85      	ldr	r3, [pc, #532]	; (9e10 <_spi_interrupt_handler+0x21c>)
    9bfa:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9bfc:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    9bfe:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    9c00:	5ce3      	ldrb	r3, [r4, r3]
    9c02:	2236      	movs	r2, #54	; 0x36
    9c04:	5ca7      	ldrb	r7, [r4, r2]
    9c06:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    9c08:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    9c0a:	7db5      	ldrb	r5, [r6, #22]
    9c0c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    9c0e:	07eb      	lsls	r3, r5, #31
    9c10:	d52e      	bpl.n	9c70 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    9c12:	7963      	ldrb	r3, [r4, #5]
    9c14:	2b01      	cmp	r3, #1
    9c16:	d025      	beq.n	9c64 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    9c18:	2b00      	cmp	r3, #0
    9c1a:	d129      	bne.n	9c70 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    9c1c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    9c1e:	2b00      	cmp	r3, #0
    9c20:	d026      	beq.n	9c70 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9c22:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    9c24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    9c26:	7813      	ldrb	r3, [r2, #0]
    9c28:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    9c2a:	1c50      	adds	r0, r2, #1
    9c2c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9c2e:	79a0      	ldrb	r0, [r4, #6]
    9c30:	2801      	cmp	r0, #1
    9c32:	d100      	bne.n	9c36 <_spi_interrupt_handler+0x42>
    9c34:	e069      	b.n	9d0a <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    9c36:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    9c38:	05db      	lsls	r3, r3, #23
    9c3a:	0ddb      	lsrs	r3, r3, #23
    9c3c:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    9c3e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    9c40:	3b01      	subs	r3, #1
    9c42:	b29b      	uxth	r3, r3
    9c44:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    9c46:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    9c48:	b29b      	uxth	r3, r3
    9c4a:	2b00      	cmp	r3, #0
    9c4c:	d110      	bne.n	9c70 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    9c4e:	3301      	adds	r3, #1
    9c50:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    9c52:	7a63      	ldrb	r3, [r4, #9]
    9c54:	2b01      	cmp	r3, #1
    9c56:	d10b      	bne.n	9c70 <_spi_interrupt_handler+0x7c>
    9c58:	79e3      	ldrb	r3, [r4, #7]
    9c5a:	2b00      	cmp	r3, #0
    9c5c:	d108      	bne.n	9c70 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    9c5e:	3302      	adds	r3, #2
    9c60:	75b3      	strb	r3, [r6, #22]
    9c62:	e005      	b.n	9c70 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    9c64:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    9c66:	2b00      	cmp	r3, #0
    9c68:	d03e      	beq.n	9ce8 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    9c6a:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    9c6c:	2b00      	cmp	r3, #0
    9c6e:	d1d8      	bne.n	9c22 <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    9c70:	076b      	lsls	r3, r5, #29
    9c72:	d511      	bpl.n	9c98 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    9c74:	8b73      	ldrh	r3, [r6, #26]
    9c76:	075b      	lsls	r3, r3, #29
    9c78:	d551      	bpl.n	9d1e <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    9c7a:	7a63      	ldrb	r3, [r4, #9]
    9c7c:	2b01      	cmp	r3, #1
    9c7e:	d008      	beq.n	9c92 <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    9c80:	221e      	movs	r2, #30
    9c82:	2338      	movs	r3, #56	; 0x38
    9c84:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    9c86:	3b35      	subs	r3, #53	; 0x35
    9c88:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    9c8a:	3302      	adds	r3, #2
    9c8c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    9c8e:	073b      	lsls	r3, r7, #28
    9c90:	d441      	bmi.n	9d16 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    9c92:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    9c94:	2304      	movs	r3, #4
    9c96:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    9c98:	07ab      	lsls	r3, r5, #30
    9c9a:	d515      	bpl.n	9cc8 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    9c9c:	7963      	ldrb	r3, [r4, #5]
    9c9e:	2b00      	cmp	r3, #0
    9ca0:	d10e      	bne.n	9cc0 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    9ca2:	3307      	adds	r3, #7
    9ca4:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    9ca6:	3b05      	subs	r3, #5
    9ca8:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    9caa:	3301      	adds	r3, #1
    9cac:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    9cae:	2300      	movs	r3, #0
    9cb0:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    9cb2:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    9cb4:	3338      	adds	r3, #56	; 0x38
    9cb6:	2200      	movs	r2, #0
    9cb8:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    9cba:	06fb      	lsls	r3, r7, #27
    9cbc:	d500      	bpl.n	9cc0 <_spi_interrupt_handler+0xcc>
    9cbe:	e07f      	b.n	9dc0 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    9cc0:	7963      	ldrb	r3, [r4, #5]
    9cc2:	2b01      	cmp	r3, #1
    9cc4:	d100      	bne.n	9cc8 <_spi_interrupt_handler+0xd4>
    9cc6:	e07f      	b.n	9dc8 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    9cc8:	072b      	lsls	r3, r5, #28
    9cca:	d508      	bpl.n	9cde <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    9ccc:	7963      	ldrb	r3, [r4, #5]
    9cce:	2b00      	cmp	r3, #0
    9cd0:	d105      	bne.n	9cde <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    9cd2:	3308      	adds	r3, #8
    9cd4:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    9cd6:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    9cd8:	06bb      	lsls	r3, r7, #26
    9cda:	d500      	bpl.n	9cde <_spi_interrupt_handler+0xea>
    9cdc:	e08a      	b.n	9df4 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    9cde:	b26d      	sxtb	r5, r5
    9ce0:	2d00      	cmp	r5, #0
    9ce2:	da00      	bge.n	9ce6 <_spi_interrupt_handler+0xf2>
    9ce4:	e08a      	b.n	9dfc <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    9ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    9ce8:	4b4a      	ldr	r3, [pc, #296]	; (9e14 <_spi_interrupt_handler+0x220>)
    9cea:	881b      	ldrh	r3, [r3, #0]
    9cec:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    9cee:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    9cf0:	3b01      	subs	r3, #1
    9cf2:	b29b      	uxth	r3, r3
    9cf4:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    9cf6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    9cf8:	b29b      	uxth	r3, r3
    9cfa:	2b00      	cmp	r3, #0
    9cfc:	d101      	bne.n	9d02 <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    9cfe:	3301      	adds	r3, #1
    9d00:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    9d02:	7963      	ldrb	r3, [r4, #5]
		if (0
    9d04:	2b01      	cmp	r3, #1
    9d06:	d0b0      	beq.n	9c6a <_spi_interrupt_handler+0x76>
    9d08:	e786      	b.n	9c18 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    9d0a:	7850      	ldrb	r0, [r2, #1]
    9d0c:	0200      	lsls	r0, r0, #8
    9d0e:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    9d10:	3202      	adds	r2, #2
    9d12:	62e2      	str	r2, [r4, #44]	; 0x2c
    9d14:	e790      	b.n	9c38 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    9d16:	0020      	movs	r0, r4
    9d18:	69a3      	ldr	r3, [r4, #24]
    9d1a:	4798      	blx	r3
    9d1c:	e7b9      	b.n	9c92 <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    9d1e:	7a63      	ldrb	r3, [r4, #9]
    9d20:	2b01      	cmp	r3, #1
    9d22:	d027      	beq.n	9d74 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9d24:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    9d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9d28:	05db      	lsls	r3, r3, #23
    9d2a:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    9d2c:	b2da      	uxtb	r2, r3
    9d2e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    9d30:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    9d32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9d34:	1c51      	adds	r1, r2, #1
    9d36:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9d38:	79a1      	ldrb	r1, [r4, #6]
    9d3a:	2901      	cmp	r1, #1
    9d3c:	d033      	beq.n	9da6 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    9d3e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    9d40:	3b01      	subs	r3, #1
    9d42:	b29b      	uxth	r3, r3
    9d44:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    9d46:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    9d48:	b29b      	uxth	r3, r3
    9d4a:	2b00      	cmp	r3, #0
    9d4c:	d1a4      	bne.n	9c98 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    9d4e:	2200      	movs	r2, #0
    9d50:	3338      	adds	r3, #56	; 0x38
    9d52:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    9d54:	3b34      	subs	r3, #52	; 0x34
    9d56:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    9d58:	7a63      	ldrb	r3, [r4, #9]
    9d5a:	2b02      	cmp	r3, #2
    9d5c:	d029      	beq.n	9db2 <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    9d5e:	7a63      	ldrb	r3, [r4, #9]
    9d60:	2b00      	cmp	r3, #0
    9d62:	d000      	beq.n	9d66 <_spi_interrupt_handler+0x172>
    9d64:	e798      	b.n	9c98 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    9d66:	07bb      	lsls	r3, r7, #30
    9d68:	d400      	bmi.n	9d6c <_spi_interrupt_handler+0x178>
    9d6a:	e795      	b.n	9c98 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    9d6c:	0020      	movs	r0, r4
    9d6e:	6923      	ldr	r3, [r4, #16]
    9d70:	4798      	blx	r3
    9d72:	e791      	b.n	9c98 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9d74:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    9d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    9d78:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    9d7a:	3b01      	subs	r3, #1
    9d7c:	b29b      	uxth	r3, r3
    9d7e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    9d80:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    9d82:	b29b      	uxth	r3, r3
    9d84:	2b00      	cmp	r3, #0
    9d86:	d000      	beq.n	9d8a <_spi_interrupt_handler+0x196>
    9d88:	e786      	b.n	9c98 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    9d8a:	3304      	adds	r3, #4
    9d8c:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    9d8e:	2200      	movs	r2, #0
    9d90:	3334      	adds	r3, #52	; 0x34
    9d92:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    9d94:	3b35      	subs	r3, #53	; 0x35
    9d96:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    9d98:	07fb      	lsls	r3, r7, #31
    9d9a:	d400      	bmi.n	9d9e <_spi_interrupt_handler+0x1aa>
    9d9c:	e77c      	b.n	9c98 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    9d9e:	0020      	movs	r0, r4
    9da0:	68e3      	ldr	r3, [r4, #12]
    9da2:	4798      	blx	r3
    9da4:	e778      	b.n	9c98 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    9da6:	0a1b      	lsrs	r3, r3, #8
    9da8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    9daa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9dac:	3301      	adds	r3, #1
    9dae:	62a3      	str	r3, [r4, #40]	; 0x28
    9db0:	e7c5      	b.n	9d3e <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    9db2:	077b      	lsls	r3, r7, #29
    9db4:	d400      	bmi.n	9db8 <_spi_interrupt_handler+0x1c4>
    9db6:	e76f      	b.n	9c98 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    9db8:	0020      	movs	r0, r4
    9dba:	6963      	ldr	r3, [r4, #20]
    9dbc:	4798      	blx	r3
    9dbe:	e76b      	b.n	9c98 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    9dc0:	0020      	movs	r0, r4
    9dc2:	69e3      	ldr	r3, [r4, #28]
    9dc4:	4798      	blx	r3
    9dc6:	e77b      	b.n	9cc0 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    9dc8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    9dca:	2b01      	cmp	r3, #1
    9dcc:	d000      	beq.n	9dd0 <_spi_interrupt_handler+0x1dc>
    9dce:	e786      	b.n	9cde <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    9dd0:	79e3      	ldrb	r3, [r4, #7]
    9dd2:	2b00      	cmp	r3, #0
    9dd4:	d000      	beq.n	9dd8 <_spi_interrupt_handler+0x1e4>
    9dd6:	e782      	b.n	9cde <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    9dd8:	3302      	adds	r3, #2
    9dda:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    9ddc:	3301      	adds	r3, #1
    9dde:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    9de0:	2200      	movs	r2, #0
    9de2:	3335      	adds	r3, #53	; 0x35
    9de4:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    9de6:	07fb      	lsls	r3, r7, #31
    9de8:	d400      	bmi.n	9dec <_spi_interrupt_handler+0x1f8>
    9dea:	e76d      	b.n	9cc8 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    9dec:	0020      	movs	r0, r4
    9dee:	68e3      	ldr	r3, [r4, #12]
    9df0:	4798      	blx	r3
    9df2:	e769      	b.n	9cc8 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    9df4:	0020      	movs	r0, r4
    9df6:	6a23      	ldr	r3, [r4, #32]
    9df8:	4798      	blx	r3
    9dfa:	e770      	b.n	9cde <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    9dfc:	2380      	movs	r3, #128	; 0x80
    9dfe:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    9e00:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    9e02:	067b      	lsls	r3, r7, #25
    9e04:	d400      	bmi.n	9e08 <_spi_interrupt_handler+0x214>
    9e06:	e76e      	b.n	9ce6 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    9e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9e0a:	0020      	movs	r0, r4
    9e0c:	4798      	blx	r3
}
    9e0e:	e76a      	b.n	9ce6 <_spi_interrupt_handler+0xf2>
    9e10:	20002b2c 	.word	0x20002b2c
    9e14:	20002b2a 	.word	0x20002b2a

00009e18 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    9e18:	4770      	bx	lr
	...

00009e1c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    9e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    9e1e:	4b0a      	ldr	r3, [pc, #40]	; (9e48 <_sercom_set_handler+0x2c>)
    9e20:	781b      	ldrb	r3, [r3, #0]
    9e22:	2b00      	cmp	r3, #0
    9e24:	d10c      	bne.n	9e40 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    9e26:	4f09      	ldr	r7, [pc, #36]	; (9e4c <_sercom_set_handler+0x30>)
    9e28:	4e09      	ldr	r6, [pc, #36]	; (9e50 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    9e2a:	4d0a      	ldr	r5, [pc, #40]	; (9e54 <_sercom_set_handler+0x38>)
    9e2c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    9e2e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    9e30:	195a      	adds	r2, r3, r5
    9e32:	6014      	str	r4, [r2, #0]
    9e34:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    9e36:	2b18      	cmp	r3, #24
    9e38:	d1f9      	bne.n	9e2e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    9e3a:	2201      	movs	r2, #1
    9e3c:	4b02      	ldr	r3, [pc, #8]	; (9e48 <_sercom_set_handler+0x2c>)
    9e3e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    9e40:	0080      	lsls	r0, r0, #2
    9e42:	4b02      	ldr	r3, [pc, #8]	; (9e4c <_sercom_set_handler+0x30>)
    9e44:	50c1      	str	r1, [r0, r3]
}
    9e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e48:	2000272c 	.word	0x2000272c
    9e4c:	20002730 	.word	0x20002730
    9e50:	00009e19 	.word	0x00009e19
    9e54:	20002b2c 	.word	0x20002b2c

00009e58 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    9e58:	b500      	push	{lr}
    9e5a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    9e5c:	2308      	movs	r3, #8
    9e5e:	466a      	mov	r2, sp
    9e60:	7013      	strb	r3, [r2, #0]
    9e62:	3301      	adds	r3, #1
    9e64:	7053      	strb	r3, [r2, #1]
    9e66:	3301      	adds	r3, #1
    9e68:	7093      	strb	r3, [r2, #2]
    9e6a:	3301      	adds	r3, #1
    9e6c:	70d3      	strb	r3, [r2, #3]
    9e6e:	3301      	adds	r3, #1
    9e70:	7113      	strb	r3, [r2, #4]
    9e72:	3301      	adds	r3, #1
    9e74:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    9e76:	4b03      	ldr	r3, [pc, #12]	; (9e84 <_sercom_get_interrupt_vector+0x2c>)
    9e78:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    9e7a:	466b      	mov	r3, sp
    9e7c:	5618      	ldrsb	r0, [r3, r0]
}
    9e7e:	b003      	add	sp, #12
    9e80:	bd00      	pop	{pc}
    9e82:	46c0      	nop			; (mov r8, r8)
    9e84:	000048fd 	.word	0x000048fd

00009e88 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    9e88:	b510      	push	{r4, lr}
    9e8a:	4b02      	ldr	r3, [pc, #8]	; (9e94 <SERCOM0_Handler+0xc>)
    9e8c:	681b      	ldr	r3, [r3, #0]
    9e8e:	2000      	movs	r0, #0
    9e90:	4798      	blx	r3
    9e92:	bd10      	pop	{r4, pc}
    9e94:	20002730 	.word	0x20002730

00009e98 <SERCOM1_Handler>:
    9e98:	b510      	push	{r4, lr}
    9e9a:	4b02      	ldr	r3, [pc, #8]	; (9ea4 <SERCOM1_Handler+0xc>)
    9e9c:	685b      	ldr	r3, [r3, #4]
    9e9e:	2001      	movs	r0, #1
    9ea0:	4798      	blx	r3
    9ea2:	bd10      	pop	{r4, pc}
    9ea4:	20002730 	.word	0x20002730

00009ea8 <SERCOM2_Handler>:
    9ea8:	b510      	push	{r4, lr}
    9eaa:	4b02      	ldr	r3, [pc, #8]	; (9eb4 <SERCOM2_Handler+0xc>)
    9eac:	689b      	ldr	r3, [r3, #8]
    9eae:	2002      	movs	r0, #2
    9eb0:	4798      	blx	r3
    9eb2:	bd10      	pop	{r4, pc}
    9eb4:	20002730 	.word	0x20002730

00009eb8 <SERCOM3_Handler>:
    9eb8:	b510      	push	{r4, lr}
    9eba:	4b02      	ldr	r3, [pc, #8]	; (9ec4 <SERCOM3_Handler+0xc>)
    9ebc:	68db      	ldr	r3, [r3, #12]
    9ebe:	2003      	movs	r0, #3
    9ec0:	4798      	blx	r3
    9ec2:	bd10      	pop	{r4, pc}
    9ec4:	20002730 	.word	0x20002730

00009ec8 <SERCOM4_Handler>:
    9ec8:	b510      	push	{r4, lr}
    9eca:	4b02      	ldr	r3, [pc, #8]	; (9ed4 <SERCOM4_Handler+0xc>)
    9ecc:	691b      	ldr	r3, [r3, #16]
    9ece:	2004      	movs	r0, #4
    9ed0:	4798      	blx	r3
    9ed2:	bd10      	pop	{r4, pc}
    9ed4:	20002730 	.word	0x20002730

00009ed8 <SERCOM5_Handler>:
    9ed8:	b510      	push	{r4, lr}
    9eda:	4b02      	ldr	r3, [pc, #8]	; (9ee4 <SERCOM5_Handler+0xc>)
    9edc:	695b      	ldr	r3, [r3, #20]
    9ede:	2005      	movs	r0, #5
    9ee0:	4798      	blx	r3
    9ee2:	bd10      	pop	{r4, pc}
    9ee4:	20002730 	.word	0x20002730

00009ee8 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    9ee8:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    9eea:	2a00      	cmp	r2, #0
    9eec:	d001      	beq.n	9ef2 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    9eee:	0018      	movs	r0, r3
    9ef0:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    9ef2:	008b      	lsls	r3, r1, #2
    9ef4:	4a06      	ldr	r2, [pc, #24]	; (9f10 <extint_register_callback+0x28>)
    9ef6:	589b      	ldr	r3, [r3, r2]
    9ef8:	2b00      	cmp	r3, #0
    9efa:	d003      	beq.n	9f04 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    9efc:	4283      	cmp	r3, r0
    9efe:	d005      	beq.n	9f0c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    9f00:	231d      	movs	r3, #29
    9f02:	e7f4      	b.n	9eee <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    9f04:	0089      	lsls	r1, r1, #2
    9f06:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    9f08:	2300      	movs	r3, #0
    9f0a:	e7f0      	b.n	9eee <extint_register_callback+0x6>
		return STATUS_OK;
    9f0c:	2300      	movs	r3, #0
    9f0e:	e7ee      	b.n	9eee <extint_register_callback+0x6>
    9f10:	2000279c 	.word	0x2000279c

00009f14 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    9f14:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    9f16:	2900      	cmp	r1, #0
    9f18:	d001      	beq.n	9f1e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    9f1a:	0018      	movs	r0, r3
    9f1c:	4770      	bx	lr
		return NULL;
    9f1e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    9f20:	281f      	cmp	r0, #31
    9f22:	d800      	bhi.n	9f26 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    9f24:	4a02      	ldr	r2, [pc, #8]	; (9f30 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    9f26:	2301      	movs	r3, #1
    9f28:	4083      	lsls	r3, r0
    9f2a:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    9f2c:	2300      	movs	r3, #0
    9f2e:	e7f4      	b.n	9f1a <extint_chan_enable_callback+0x6>
    9f30:	40002400 	.word	0x40002400

00009f34 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    9f34:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    9f36:	2900      	cmp	r1, #0
    9f38:	d001      	beq.n	9f3e <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    9f3a:	0018      	movs	r0, r3
    9f3c:	4770      	bx	lr
		return NULL;
    9f3e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    9f40:	281f      	cmp	r0, #31
    9f42:	d800      	bhi.n	9f46 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    9f44:	4a02      	ldr	r2, [pc, #8]	; (9f50 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    9f46:	2301      	movs	r3, #1
    9f48:	4083      	lsls	r3, r0
    9f4a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    9f4c:	2300      	movs	r3, #0
    9f4e:	e7f4      	b.n	9f3a <extint_chan_disable_callback+0x6>
    9f50:	40002400 	.word	0x40002400

00009f54 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    9f54:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    9f56:	2200      	movs	r2, #0
    9f58:	4b10      	ldr	r3, [pc, #64]	; (9f9c <EIC_Handler+0x48>)
    9f5a:	701a      	strb	r2, [r3, #0]
    9f5c:	2300      	movs	r3, #0
    9f5e:	4910      	ldr	r1, [pc, #64]	; (9fa0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    9f60:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    9f62:	4e10      	ldr	r6, [pc, #64]	; (9fa4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    9f64:	4c0d      	ldr	r4, [pc, #52]	; (9f9c <EIC_Handler+0x48>)
    9f66:	e00a      	b.n	9f7e <EIC_Handler+0x2a>
		return eics[eic_index];
    9f68:	490d      	ldr	r1, [pc, #52]	; (9fa0 <EIC_Handler+0x4c>)
    9f6a:	e008      	b.n	9f7e <EIC_Handler+0x2a>
    9f6c:	7823      	ldrb	r3, [r4, #0]
    9f6e:	3301      	adds	r3, #1
    9f70:	b2db      	uxtb	r3, r3
    9f72:	7023      	strb	r3, [r4, #0]
    9f74:	2b0f      	cmp	r3, #15
    9f76:	d810      	bhi.n	9f9a <EIC_Handler+0x46>
		return NULL;
    9f78:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    9f7a:	2b1f      	cmp	r3, #31
    9f7c:	d9f4      	bls.n	9f68 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    9f7e:	0028      	movs	r0, r5
    9f80:	4018      	ands	r0, r3
    9f82:	2201      	movs	r2, #1
    9f84:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    9f86:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    9f88:	4210      	tst	r0, r2
    9f8a:	d0ef      	beq.n	9f6c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    9f8c:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    9f8e:	009b      	lsls	r3, r3, #2
    9f90:	599b      	ldr	r3, [r3, r6]
    9f92:	2b00      	cmp	r3, #0
    9f94:	d0ea      	beq.n	9f6c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    9f96:	4798      	blx	r3
    9f98:	e7e8      	b.n	9f6c <EIC_Handler+0x18>
			}
		}
	}
}
    9f9a:	bd70      	pop	{r4, r5, r6, pc}
    9f9c:	20002b44 	.word	0x20002b44
    9fa0:	40002400 	.word	0x40002400
    9fa4:	2000279c 	.word	0x2000279c

00009fa8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    9fa8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    9faa:	2000      	movs	r0, #0
    9fac:	4b08      	ldr	r3, [pc, #32]	; (9fd0 <delay_init+0x28>)
    9fae:	4798      	blx	r3
    9fb0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    9fb2:	4c08      	ldr	r4, [pc, #32]	; (9fd4 <delay_init+0x2c>)
    9fb4:	21fa      	movs	r1, #250	; 0xfa
    9fb6:	0089      	lsls	r1, r1, #2
    9fb8:	47a0      	blx	r4
    9fba:	4b07      	ldr	r3, [pc, #28]	; (9fd8 <delay_init+0x30>)
    9fbc:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    9fbe:	4907      	ldr	r1, [pc, #28]	; (9fdc <delay_init+0x34>)
    9fc0:	0028      	movs	r0, r5
    9fc2:	47a0      	blx	r4
    9fc4:	4b06      	ldr	r3, [pc, #24]	; (9fe0 <delay_init+0x38>)
    9fc6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    9fc8:	2205      	movs	r2, #5
    9fca:	4b06      	ldr	r3, [pc, #24]	; (9fe4 <delay_init+0x3c>)
    9fcc:	601a      	str	r2, [r3, #0]
}
    9fce:	bd70      	pop	{r4, r5, r6, pc}
    9fd0:	0000e0a1 	.word	0x0000e0a1
    9fd4:	0000e565 	.word	0x0000e565
    9fd8:	200002bc 	.word	0x200002bc
    9fdc:	000f4240 	.word	0x000f4240
    9fe0:	200002c0 	.word	0x200002c0
    9fe4:	e000e010 	.word	0xe000e010

00009fe8 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    9fe8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    9fea:	4b08      	ldr	r3, [pc, #32]	; (a00c <delay_cycles_us+0x24>)
    9fec:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    9fee:	4a08      	ldr	r2, [pc, #32]	; (a010 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    9ff0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    9ff2:	2180      	movs	r1, #128	; 0x80
    9ff4:	0249      	lsls	r1, r1, #9
	while (n--) {
    9ff6:	3801      	subs	r0, #1
    9ff8:	d307      	bcc.n	a00a <delay_cycles_us+0x22>
	if (n > 0) {
    9ffa:	2c00      	cmp	r4, #0
    9ffc:	d0fb      	beq.n	9ff6 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    9ffe:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    a000:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    a002:	6813      	ldr	r3, [r2, #0]
    a004:	420b      	tst	r3, r1
    a006:	d0fc      	beq.n	a002 <delay_cycles_us+0x1a>
    a008:	e7f5      	b.n	9ff6 <delay_cycles_us+0xe>
	}
}
    a00a:	bd30      	pop	{r4, r5, pc}
    a00c:	200002c0 	.word	0x200002c0
    a010:	e000e010 	.word	0xe000e010

0000a014 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    a014:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    a016:	4b08      	ldr	r3, [pc, #32]	; (a038 <delay_cycles_ms+0x24>)
    a018:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    a01a:	4a08      	ldr	r2, [pc, #32]	; (a03c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    a01c:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    a01e:	2180      	movs	r1, #128	; 0x80
    a020:	0249      	lsls	r1, r1, #9
	while (n--) {
    a022:	3801      	subs	r0, #1
    a024:	d307      	bcc.n	a036 <delay_cycles_ms+0x22>
	if (n > 0) {
    a026:	2c00      	cmp	r4, #0
    a028:	d0fb      	beq.n	a022 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    a02a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    a02c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    a02e:	6813      	ldr	r3, [r2, #0]
    a030:	420b      	tst	r3, r1
    a032:	d0fc      	beq.n	a02e <delay_cycles_ms+0x1a>
    a034:	e7f5      	b.n	a022 <delay_cycles_ms+0xe>
	}
}
    a036:	bd30      	pop	{r4, r5, pc}
    a038:	200002bc 	.word	0x200002bc
    a03c:	e000e010 	.word	0xe000e010

0000a040 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    a040:	b510      	push	{r4, lr}
	if (gpfIsr) {
    a042:	4b03      	ldr	r3, [pc, #12]	; (a050 <chip_isr+0x10>)
    a044:	681b      	ldr	r3, [r3, #0]
    a046:	2b00      	cmp	r3, #0
    a048:	d000      	beq.n	a04c <chip_isr+0xc>
		gpfIsr();
    a04a:	4798      	blx	r3
	}
}
    a04c:	bd10      	pop	{r4, pc}
    a04e:	46c0      	nop			; (mov r8, r8)
    a050:	20002748 	.word	0x20002748

0000a054 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    a054:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    a056:	1e44      	subs	r4, r0, #1
    a058:	2800      	cmp	r0, #0
    a05a:	d004      	beq.n	a066 <nm_bsp_sleep+0x12>
		delay_ms(1);
    a05c:	4d02      	ldr	r5, [pc, #8]	; (a068 <nm_bsp_sleep+0x14>)
    a05e:	2001      	movs	r0, #1
    a060:	47a8      	blx	r5
	while (u32TimeMsec--) {
    a062:	3c01      	subs	r4, #1
    a064:	d2fb      	bcs.n	a05e <nm_bsp_sleep+0xa>
	}
}
    a066:	bd70      	pop	{r4, r5, r6, pc}
    a068:	0000a015 	.word	0x0000a015

0000a06c <nm_bsp_reset>:
{
    a06c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a06e:	46c6      	mov	lr, r8
    a070:	b500      	push	{lr}
		port_base->OUTCLR.reg = pin_mask;
    a072:	4d0a      	ldr	r5, [pc, #40]	; (a09c <nm_bsp_reset+0x30>)
    a074:	4f0a      	ldr	r7, [pc, #40]	; (a0a0 <nm_bsp_reset+0x34>)
    a076:	2380      	movs	r3, #128	; 0x80
    a078:	009b      	lsls	r3, r3, #2
    a07a:	4698      	mov	r8, r3
    a07c:	617b      	str	r3, [r7, #20]
    a07e:	2608      	movs	r6, #8
    a080:	616e      	str	r6, [r5, #20]
	nm_bsp_sleep(100);
    a082:	2064      	movs	r0, #100	; 0x64
    a084:	4c07      	ldr	r4, [pc, #28]	; (a0a4 <nm_bsp_reset+0x38>)
    a086:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
    a088:	4643      	mov	r3, r8
    a08a:	61bb      	str	r3, [r7, #24]
	nm_bsp_sleep(100);
    a08c:	2064      	movs	r0, #100	; 0x64
    a08e:	47a0      	blx	r4
    a090:	61ae      	str	r6, [r5, #24]
	nm_bsp_sleep(100);
    a092:	2064      	movs	r0, #100	; 0x64
    a094:	47a0      	blx	r4
}
    a096:	bc04      	pop	{r2}
    a098:	4690      	mov	r8, r2
    a09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a09c:	40002800 	.word	0x40002800
    a0a0:	40002880 	.word	0x40002880
    a0a4:	0000a055 	.word	0x0000a055

0000a0a8 <nm_bsp_init>:
{
    a0a8:	b570      	push	{r4, r5, r6, lr}
    a0aa:	b082      	sub	sp, #8
	gpfIsr = NULL;
    a0ac:	2300      	movs	r3, #0
    a0ae:	4a17      	ldr	r2, [pc, #92]	; (a10c <nm_bsp_init+0x64>)
    a0b0:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    a0b2:	ac01      	add	r4, sp, #4
    a0b4:	2501      	movs	r5, #1
    a0b6:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    a0b8:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    a0ba:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    a0bc:	0021      	movs	r1, r4
    a0be:	2003      	movs	r0, #3
    a0c0:	4e13      	ldr	r6, [pc, #76]	; (a110 <nm_bsp_init+0x68>)
    a0c2:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    a0c4:	0021      	movs	r1, r4
    a0c6:	2029      	movs	r0, #41	; 0x29
    a0c8:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    a0ca:	0021      	movs	r1, r4
    a0cc:	2028      	movs	r0, #40	; 0x28
    a0ce:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    a0d0:	2280      	movs	r2, #128	; 0x80
    a0d2:	0092      	lsls	r2, r2, #2
    a0d4:	4b0f      	ldr	r3, [pc, #60]	; (a114 <nm_bsp_init+0x6c>)
    a0d6:	615a      	str	r2, [r3, #20]
    a0d8:	3af9      	subs	r2, #249	; 0xf9
    a0da:	3aff      	subs	r2, #255	; 0xff
    a0dc:	4b0e      	ldr	r3, [pc, #56]	; (a118 <nm_bsp_init+0x70>)
    a0de:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    a0e0:	4b0e      	ldr	r3, [pc, #56]	; (a11c <nm_bsp_init+0x74>)
    a0e2:	681b      	ldr	r3, [r3, #0]
    a0e4:	421d      	tst	r5, r3
    a0e6:	d003      	beq.n	a0f0 <nm_bsp_init+0x48>
    a0e8:	4b0c      	ldr	r3, [pc, #48]	; (a11c <nm_bsp_init+0x74>)
    a0ea:	681b      	ldr	r3, [r3, #0]
    a0ec:	079b      	lsls	r3, r3, #30
    a0ee:	d401      	bmi.n	a0f4 <nm_bsp_init+0x4c>
	    delay_init();
    a0f0:	4b0b      	ldr	r3, [pc, #44]	; (a120 <nm_bsp_init+0x78>)
    a0f2:	4798      	blx	r3
	nm_bsp_reset();
    a0f4:	4b0b      	ldr	r3, [pc, #44]	; (a124 <nm_bsp_init+0x7c>)
    a0f6:	4798      	blx	r3
	cpu_irq_enable();
    a0f8:	2201      	movs	r2, #1
    a0fa:	4b0b      	ldr	r3, [pc, #44]	; (a128 <nm_bsp_init+0x80>)
    a0fc:	701a      	strb	r2, [r3, #0]
    a0fe:	f3bf 8f5f 	dmb	sy
    a102:	b662      	cpsie	i
}
    a104:	2000      	movs	r0, #0
    a106:	b002      	add	sp, #8
    a108:	bd70      	pop	{r4, r5, r6, pc}
    a10a:	46c0      	nop			; (mov r8, r8)
    a10c:	20002748 	.word	0x20002748
    a110:	0000d979 	.word	0x0000d979
    a114:	40002880 	.word	0x40002880
    a118:	40002800 	.word	0x40002800
    a11c:	e000e010 	.word	0xe000e010
    a120:	00009fa9 	.word	0x00009fa9
    a124:	0000a06d 	.word	0x0000a06d
    a128:	200002c6 	.word	0x200002c6

0000a12c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    a12c:	b510      	push	{r4, lr}
    a12e:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    a130:	4b0e      	ldr	r3, [pc, #56]	; (a16c <nm_bsp_register_isr+0x40>)
    a132:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    a134:	ac01      	add	r4, sp, #4
    a136:	0020      	movs	r0, r4
    a138:	4b0d      	ldr	r3, [pc, #52]	; (a170 <nm_bsp_register_isr+0x44>)
    a13a:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    a13c:	2310      	movs	r3, #16
    a13e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    a140:	2300      	movs	r3, #0
    a142:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    a144:	3301      	adds	r3, #1
    a146:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    a148:	3301      	adds	r3, #1
    a14a:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    a14c:	0021      	movs	r1, r4
    a14e:	2000      	movs	r0, #0
    a150:	4b08      	ldr	r3, [pc, #32]	; (a174 <nm_bsp_register_isr+0x48>)
    a152:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    a154:	2200      	movs	r2, #0
    a156:	2100      	movs	r1, #0
    a158:	4807      	ldr	r0, [pc, #28]	; (a178 <nm_bsp_register_isr+0x4c>)
    a15a:	4b08      	ldr	r3, [pc, #32]	; (a17c <nm_bsp_register_isr+0x50>)
    a15c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    a15e:	2100      	movs	r1, #0
    a160:	2000      	movs	r0, #0
    a162:	4b07      	ldr	r3, [pc, #28]	; (a180 <nm_bsp_register_isr+0x54>)
    a164:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    a166:	b004      	add	sp, #16
    a168:	bd10      	pop	{r4, pc}
    a16a:	46c0      	nop			; (mov r8, r8)
    a16c:	20002748 	.word	0x20002748
    a170:	00000b45 	.word	0x00000b45
    a174:	00000b59 	.word	0x00000b59
    a178:	0000a041 	.word	0x0000a041
    a17c:	00009ee9 	.word	0x00009ee9
    a180:	00009f15 	.word	0x00009f15

0000a184 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    a184:	b510      	push	{r4, lr}
	if (u8Enable) {
    a186:	2800      	cmp	r0, #0
    a188:	d104      	bne.n	a194 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    a18a:	2100      	movs	r1, #0
    a18c:	2000      	movs	r0, #0
    a18e:	4b04      	ldr	r3, [pc, #16]	; (a1a0 <nm_bsp_interrupt_ctrl+0x1c>)
    a190:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    a192:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    a194:	2100      	movs	r1, #0
    a196:	2000      	movs	r0, #0
    a198:	4b02      	ldr	r3, [pc, #8]	; (a1a4 <nm_bsp_interrupt_ctrl+0x20>)
    a19a:	4798      	blx	r3
    a19c:	e7f9      	b.n	a192 <nm_bsp_interrupt_ctrl+0xe>
    a19e:	46c0      	nop			; (mov r8, r8)
    a1a0:	00009f35 	.word	0x00009f35
    a1a4:	00009f15 	.word	0x00009f15

0000a1a8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    a1a8:	b530      	push	{r4, r5, lr}
    a1aa:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    a1ac:	4c31      	ldr	r4, [pc, #196]	; (a274 <nm_bus_init+0xcc>)
    a1ae:	2306      	movs	r3, #6
    a1b0:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    a1b2:	2300      	movs	r3, #0
    a1b4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    a1b6:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    a1b8:	a901      	add	r1, sp, #4
    a1ba:	2201      	movs	r2, #1
    a1bc:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    a1be:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    a1c0:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    a1c2:	2006      	movs	r0, #6
    a1c4:	4b2c      	ldr	r3, [pc, #176]	; (a278 <nm_bus_init+0xd0>)
    a1c6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    a1c8:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    a1ca:	09d1      	lsrs	r1, r2, #7
		return NULL;
    a1cc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    a1ce:	2900      	cmp	r1, #0
    a1d0:	d104      	bne.n	a1dc <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    a1d2:	0953      	lsrs	r3, r2, #5
    a1d4:	01db      	lsls	r3, r3, #7
    a1d6:	4929      	ldr	r1, [pc, #164]	; (a27c <nm_bus_init+0xd4>)
    a1d8:	468c      	mov	ip, r1
    a1da:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    a1dc:	211f      	movs	r1, #31
    a1de:	4011      	ands	r1, r2
    a1e0:	2201      	movs	r2, #1
    a1e2:	0010      	movs	r0, r2
    a1e4:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    a1e6:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    a1e8:	ac02      	add	r4, sp, #8
    a1ea:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    a1ec:	2300      	movs	r3, #0
    a1ee:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    a1f0:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    a1f2:	21c0      	movs	r1, #192	; 0xc0
    a1f4:	0389      	lsls	r1, r1, #14
    a1f6:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    a1f8:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    a1fa:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    a1fc:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    a1fe:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    a200:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    a202:	3223      	adds	r2, #35	; 0x23
    a204:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    a206:	3a18      	subs	r2, #24
    a208:	2100      	movs	r1, #0
    a20a:	a808      	add	r0, sp, #32
    a20c:	4b1c      	ldr	r3, [pc, #112]	; (a280 <nm_bus_init+0xd8>)
    a20e:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    a210:	4b1c      	ldr	r3, [pc, #112]	; (a284 <nm_bus_init+0xdc>)
    a212:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    a214:	4b1c      	ldr	r3, [pc, #112]	; (a288 <nm_bus_init+0xe0>)
    a216:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    a218:	2301      	movs	r3, #1
    a21a:	425b      	negs	r3, r3
    a21c:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    a21e:	4b1b      	ldr	r3, [pc, #108]	; (a28c <nm_bus_init+0xe4>)
    a220:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    a222:	4b1b      	ldr	r3, [pc, #108]	; (a290 <nm_bus_init+0xe8>)
    a224:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    a226:	0022      	movs	r2, r4
    a228:	2184      	movs	r1, #132	; 0x84
    a22a:	05c9      	lsls	r1, r1, #23
    a22c:	4819      	ldr	r0, [pc, #100]	; (a294 <nm_bus_init+0xec>)
    a22e:	4b1a      	ldr	r3, [pc, #104]	; (a298 <nm_bus_init+0xf0>)
    a230:	4798      	blx	r3
    a232:	2800      	cmp	r0, #0
    a234:	d11a      	bne.n	a26c <nm_bus_init+0xc4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    a236:	4d17      	ldr	r5, [pc, #92]	; (a294 <nm_bus_init+0xec>)
    a238:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    a23a:	0020      	movs	r0, r4
    a23c:	4b17      	ldr	r3, [pc, #92]	; (a29c <nm_bus_init+0xf4>)
    a23e:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a240:	231f      	movs	r3, #31
    a242:	4018      	ands	r0, r3
    a244:	3b1e      	subs	r3, #30
    a246:	4083      	lsls	r3, r0
    a248:	4a15      	ldr	r2, [pc, #84]	; (a2a0 <nm_bus_init+0xf8>)
    a24a:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a24c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    a24e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    a250:	2b00      	cmp	r3, #0
    a252:	d1fc      	bne.n	a24e <nm_bus_init+0xa6>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    a254:	6823      	ldr	r3, [r4, #0]
    a256:	2202      	movs	r2, #2
    a258:	4313      	orrs	r3, r2
    a25a:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    a25c:	4b11      	ldr	r3, [pc, #68]	; (a2a4 <nm_bus_init+0xfc>)
    a25e:	4798      	blx	r3
	nm_bsp_sleep(1);
    a260:	2001      	movs	r0, #1
    a262:	4b11      	ldr	r3, [pc, #68]	; (a2a8 <nm_bus_init+0x100>)
    a264:	4798      	blx	r3
#endif
	return result;
    a266:	2000      	movs	r0, #0
}
    a268:	b011      	add	sp, #68	; 0x44
    a26a:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    a26c:	2006      	movs	r0, #6
    a26e:	4240      	negs	r0, r0
    a270:	e7fa      	b.n	a268 <nm_bus_init+0xc0>
    a272:	46c0      	nop			; (mov r8, r8)
    a274:	20002b48 	.word	0x20002b48
    a278:	0000d979 	.word	0x0000d979
    a27c:	40002800 	.word	0x40002800
    a280:	000109ff 	.word	0x000109ff
    a284:	00040003 	.word	0x00040003
    a288:	00050003 	.word	0x00050003
    a28c:	00070003 	.word	0x00070003
    a290:	00b71b00 	.word	0x00b71b00
    a294:	20002b4c 	.word	0x20002b4c
    a298:	000098cd 	.word	0x000098cd
    a29c:	00009e59 	.word	0x00009e59
    a2a0:	e000e100 	.word	0xe000e100
    a2a4:	0000a06d 	.word	0x0000a06d
    a2a8:	0000a055 	.word	0x0000a055

0000a2ac <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    a2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2ae:	46de      	mov	lr, fp
    a2b0:	4657      	mov	r7, sl
    a2b2:	464e      	mov	r6, r9
    a2b4:	4645      	mov	r5, r8
    a2b6:	b5e0      	push	{r5, r6, r7, lr}
    a2b8:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    a2ba:	2803      	cmp	r0, #3
    a2bc:	d000      	beq.n	a2c0 <nm_bus_ioctl+0x14>
    a2be:	e075      	b.n	a3ac <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    a2c0:	680e      	ldr	r6, [r1, #0]
    a2c2:	684d      	ldr	r5, [r1, #4]
    a2c4:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    a2c6:	2200      	movs	r2, #0
    a2c8:	466b      	mov	r3, sp
    a2ca:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) || (u16Sz == 0)) {
    a2cc:	2d00      	cmp	r5, #0
    a2ce:	d027      	beq.n	a320 <nm_bus_ioctl+0x74>
    a2d0:	2c00      	cmp	r4, #0
    a2d2:	d065      	beq.n	a3a0 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    a2d4:	2e00      	cmp	r6, #0
    a2d6:	d100      	bne.n	a2da <nm_bus_ioctl+0x2e>
    a2d8:	e077      	b.n	a3ca <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    a2da:	2300      	movs	r3, #0
    a2dc:	4698      	mov	r8, r3
    a2de:	2300      	movs	r3, #0
    a2e0:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    a2e2:	2201      	movs	r2, #1
    a2e4:	493b      	ldr	r1, [pc, #236]	; (a3d4 <nm_bus_ioctl+0x128>)
    a2e6:	483c      	ldr	r0, [pc, #240]	; (a3d8 <nm_bus_ioctl+0x12c>)
    a2e8:	4b3c      	ldr	r3, [pc, #240]	; (a3dc <nm_bus_ioctl+0x130>)
    a2ea:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    a2ec:	4b3a      	ldr	r3, [pc, #232]	; (a3d8 <nm_bus_ioctl+0x12c>)
    a2ee:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    a2f0:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    a2f2:	2204      	movs	r2, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    a2f4:	4699      	mov	r9, r3
			pu8Miso++;
    a2f6:	4659      	mov	r1, fp
    a2f8:	424b      	negs	r3, r1
    a2fa:	4159      	adcs	r1, r3
    a2fc:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    a2fe:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a300:	4653      	mov	r3, sl
    a302:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    a304:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    a306:	4239      	tst	r1, r7
    a308:	d0fc      	beq.n	a304 <nm_bus_ioctl+0x58>
    a30a:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    a30c:	4239      	tst	r1, r7
    a30e:	d0fc      	beq.n	a30a <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    a310:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    a312:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    a314:	4211      	tst	r1, r2
    a316:	d0fc      	beq.n	a312 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    a318:	4649      	mov	r1, r9
    a31a:	7989      	ldrb	r1, [r1, #6]
    a31c:	468c      	mov	ip, r1
    a31e:	e011      	b.n	a344 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) || (u16Sz == 0)) {
    a320:	2e00      	cmp	r6, #0
    a322:	d03a      	beq.n	a39a <nm_bus_ioctl+0xee>
    a324:	2c00      	cmp	r4, #0
    a326:	d03e      	beq.n	a3a6 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    a328:	2300      	movs	r3, #0
    a32a:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    a32c:	3301      	adds	r3, #1
    a32e:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    a330:	466b      	mov	r3, sp
    a332:	1ddd      	adds	r5, r3, #7
    a334:	e7d5      	b.n	a2e2 <nm_bus_ioctl+0x36>
    a336:	4660      	mov	r0, ip
    a338:	2801      	cmp	r0, #1
    a33a:	d00d      	beq.n	a358 <nm_bus_ioctl+0xac>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    a33c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    a33e:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    a340:	2900      	cmp	r1, #0
    a342:	d00d      	beq.n	a360 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    a344:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    a346:	4211      	tst	r1, r2
    a348:	d0fc      	beq.n	a344 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    a34a:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    a34c:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    a34e:	4210      	tst	r0, r2
    a350:	d0f1      	beq.n	a336 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    a352:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    a354:	311e      	adds	r1, #30
    a356:	e7ee      	b.n	a336 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    a358:	6a98      	ldr	r0, [r3, #40]	; 0x28
    a35a:	05c0      	lsls	r0, r0, #23
    a35c:	0dc0      	lsrs	r0, r0, #23
    a35e:	e7ef      	b.n	a340 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    a360:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    a362:	3c01      	subs	r4, #1
    a364:	b2a4      	uxth	r4, r4
			pu8Miso++;
    a366:	445d      	add	r5, fp
			pu8Mosi++;
    a368:	4643      	mov	r3, r8
    a36a:	4259      	negs	r1, r3
    a36c:	414b      	adcs	r3, r1
    a36e:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    a370:	2c00      	cmp	r4, #0
    a372:	d1c4      	bne.n	a2fe <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    a374:	4b18      	ldr	r3, [pc, #96]	; (a3d8 <nm_bus_ioctl+0x12c>)
    a376:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    a378:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    a37a:	7e0b      	ldrb	r3, [r1, #24]
    a37c:	4213      	tst	r3, r2
    a37e:	d0fc      	beq.n	a37a <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    a380:	2200      	movs	r2, #0
    a382:	4914      	ldr	r1, [pc, #80]	; (a3d4 <nm_bus_ioctl+0x128>)
    a384:	4814      	ldr	r0, [pc, #80]	; (a3d8 <nm_bus_ioctl+0x12c>)
    a386:	4b15      	ldr	r3, [pc, #84]	; (a3dc <nm_bus_ioctl+0x130>)
    a388:	4798      	blx	r3
	return M2M_SUCCESS;
    a38a:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    a38c:	b003      	add	sp, #12
    a38e:	bc3c      	pop	{r2, r3, r4, r5}
    a390:	4690      	mov	r8, r2
    a392:	4699      	mov	r9, r3
    a394:	46a2      	mov	sl, r4
    a396:	46ab      	mov	fp, r5
    a398:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    a39a:	200f      	movs	r0, #15
    a39c:	4240      	negs	r0, r0
    a39e:	e7f5      	b.n	a38c <nm_bus_ioctl+0xe0>
    a3a0:	200f      	movs	r0, #15
    a3a2:	4240      	negs	r0, r0
    a3a4:	e7f2      	b.n	a38c <nm_bus_ioctl+0xe0>
    a3a6:	200f      	movs	r0, #15
    a3a8:	4240      	negs	r0, r0
		break;
    a3aa:	e7ef      	b.n	a38c <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    a3ac:	2284      	movs	r2, #132	; 0x84
    a3ae:	0052      	lsls	r2, r2, #1
    a3b0:	490b      	ldr	r1, [pc, #44]	; (a3e0 <nm_bus_ioctl+0x134>)
    a3b2:	480c      	ldr	r0, [pc, #48]	; (a3e4 <nm_bus_ioctl+0x138>)
    a3b4:	4b0c      	ldr	r3, [pc, #48]	; (a3e8 <nm_bus_ioctl+0x13c>)
    a3b6:	4798      	blx	r3
    a3b8:	480c      	ldr	r0, [pc, #48]	; (a3ec <nm_bus_ioctl+0x140>)
    a3ba:	4b0d      	ldr	r3, [pc, #52]	; (a3f0 <nm_bus_ioctl+0x144>)
    a3bc:	4798      	blx	r3
    a3be:	200d      	movs	r0, #13
    a3c0:	4b0c      	ldr	r3, [pc, #48]	; (a3f4 <nm_bus_ioctl+0x148>)
    a3c2:	4798      	blx	r3
			s8Ret = -1;
    a3c4:	2001      	movs	r0, #1
    a3c6:	4240      	negs	r0, r0
	return s8Ret;
    a3c8:	e7e0      	b.n	a38c <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    a3ca:	2301      	movs	r3, #1
    a3cc:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    a3ce:	466b      	mov	r3, sp
    a3d0:	1dde      	adds	r6, r3, #7
    a3d2:	e784      	b.n	a2de <nm_bus_ioctl+0x32>
    a3d4:	20002b48 	.word	0x20002b48
    a3d8:	20002b4c 	.word	0x20002b4c
    a3dc:	00009b01 	.word	0x00009b01
    a3e0:	00015198 	.word	0x00015198
    a3e4:	000151a8 	.word	0x000151a8
    a3e8:	00010b61 	.word	0x00010b61
    a3ec:	000151bc 	.word	0x000151bc
    a3f0:	00010c7d 	.word	0x00010c7d
    a3f4:	00010b95 	.word	0x00010b95

0000a3f8 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    a3f8:	b530      	push	{r4, r5, lr}
    a3fa:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    a3fc:	ab01      	add	r3, sp, #4
    a3fe:	2200      	movs	r2, #0
    a400:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    a402:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    a404:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a406:	4d13      	ldr	r5, [pc, #76]	; (a454 <nm_bus_deinit+0x5c>)
    a408:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    a40a:	0020      	movs	r0, r4
    a40c:	4b12      	ldr	r3, [pc, #72]	; (a458 <nm_bus_deinit+0x60>)
    a40e:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a410:	231f      	movs	r3, #31
    a412:	4018      	ands	r0, r3
    a414:	3b1e      	subs	r3, #30
    a416:	4083      	lsls	r3, r0
    a418:	2280      	movs	r2, #128	; 0x80
    a41a:	4910      	ldr	r1, [pc, #64]	; (a45c <nm_bus_deinit+0x64>)
    a41c:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a41e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    a420:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    a422:	2b00      	cmp	r3, #0
    a424:	d1fc      	bne.n	a420 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    a426:	338f      	adds	r3, #143	; 0x8f
    a428:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    a42a:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    a42c:	6823      	ldr	r3, [r4, #0]
    a42e:	2202      	movs	r2, #2
    a430:	4393      	bics	r3, r2
    a432:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    a434:	a901      	add	r1, sp, #4
    a436:	2004      	movs	r0, #4
    a438:	4c09      	ldr	r4, [pc, #36]	; (a460 <nm_bus_deinit+0x68>)
    a43a:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    a43c:	a901      	add	r1, sp, #4
    a43e:	2007      	movs	r0, #7
    a440:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    a442:	a901      	add	r1, sp, #4
    a444:	2005      	movs	r0, #5
    a446:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    a448:	a901      	add	r1, sp, #4
    a44a:	2006      	movs	r0, #6
    a44c:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    a44e:	2000      	movs	r0, #0
    a450:	b003      	add	sp, #12
    a452:	bd30      	pop	{r4, r5, pc}
    a454:	20002b4c 	.word	0x20002b4c
    a458:	00009e59 	.word	0x00009e59
    a45c:	e000e100 	.word	0xe000e100
    a460:	0000d979 	.word	0x0000d979

0000a464 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    a464:	2a00      	cmp	r2, #0
    a466:	d006      	beq.n	a476 <m2m_memcpy+0x12>
    a468:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    a46a:	780b      	ldrb	r3, [r1, #0]
    a46c:	7003      	strb	r3, [r0, #0]
		pDst++;
    a46e:	3001      	adds	r0, #1
		pSrc++;
    a470:	3101      	adds	r1, #1
	}while(--sz);
    a472:	4290      	cmp	r0, r2
    a474:	d1f9      	bne.n	a46a <m2m_memcpy+0x6>
}
    a476:	4770      	bx	lr

0000a478 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    a478:	2a00      	cmp	r2, #0
    a47a:	d004      	beq.n	a486 <m2m_memset+0xe>
    a47c:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    a47e:	7001      	strb	r1, [r0, #0]
		pBuf++;
    a480:	3001      	adds	r0, #1
	}while(--sz);
    a482:	4290      	cmp	r0, r2
    a484:	d1fb      	bne.n	a47e <m2m_memset+0x6>
}
    a486:	4770      	bx	lr

0000a488 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    a488:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    a48a:	7802      	ldrb	r2, [r0, #0]
    a48c:	2a00      	cmp	r2, #0
    a48e:	d007      	beq.n	a4a0 <m2m_strlen+0x18>
    a490:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    a492:	3001      	adds	r0, #1
    a494:	b280      	uxth	r0, r0
		pcStr++;
    a496:	3301      	adds	r3, #1
	while(*pcStr)
    a498:	781a      	ldrb	r2, [r3, #0]
    a49a:	2a00      	cmp	r2, #0
    a49c:	d1f9      	bne.n	a492 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    a49e:	4770      	bx	lr
	uint16	u16StrLen = 0;
    a4a0:	2000      	movs	r0, #0
    a4a2:	e7fc      	b.n	a49e <m2m_strlen+0x16>

0000a4a4 <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    a4a4:	4a02      	ldr	r2, [pc, #8]	; (a4b0 <isr+0xc>)
    a4a6:	78d3      	ldrb	r3, [r2, #3]
    a4a8:	3301      	adds	r3, #1
    a4aa:	b2db      	uxtb	r3, r3
    a4ac:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    a4ae:	4770      	bx	lr
    a4b0:	20002b88 	.word	0x20002b88

0000a4b4 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    a4b4:	4770      	bx	lr
	...

0000a4b8 <hif_set_rx_done>:
{
    a4b8:	b500      	push	{lr}
    a4ba:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    a4bc:	2200      	movs	r2, #0
    a4be:	4b0a      	ldr	r3, [pc, #40]	; (a4e8 <hif_set_rx_done+0x30>)
    a4c0:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    a4c2:	2001      	movs	r0, #1
    a4c4:	4b09      	ldr	r3, [pc, #36]	; (a4ec <hif_set_rx_done+0x34>)
    a4c6:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    a4c8:	a901      	add	r1, sp, #4
    a4ca:	4809      	ldr	r0, [pc, #36]	; (a4f0 <hif_set_rx_done+0x38>)
    a4cc:	4b09      	ldr	r3, [pc, #36]	; (a4f4 <hif_set_rx_done+0x3c>)
    a4ce:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    a4d0:	2800      	cmp	r0, #0
    a4d2:	d001      	beq.n	a4d8 <hif_set_rx_done+0x20>
}
    a4d4:	b003      	add	sp, #12
    a4d6:	bd00      	pop	{pc}
	reg |= NBIT1;
    a4d8:	2102      	movs	r1, #2
    a4da:	9b01      	ldr	r3, [sp, #4]
    a4dc:	4319      	orrs	r1, r3
    a4de:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    a4e0:	4803      	ldr	r0, [pc, #12]	; (a4f0 <hif_set_rx_done+0x38>)
    a4e2:	4b05      	ldr	r3, [pc, #20]	; (a4f8 <hif_set_rx_done+0x40>)
    a4e4:	4798      	blx	r3
    a4e6:	e7f5      	b.n	a4d4 <hif_set_rx_done+0x1c>
    a4e8:	20002b88 	.word	0x20002b88
    a4ec:	0000a185 	.word	0x0000a185
    a4f0:	00001070 	.word	0x00001070
    a4f4:	0000becd 	.word	0x0000becd
    a4f8:	0000bed9 	.word	0x0000bed9

0000a4fc <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    a4fc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    a4fe:	4b0c      	ldr	r3, [pc, #48]	; (a530 <hif_chip_wake+0x34>)
    a500:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    a502:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    a504:	2b00      	cmp	r3, #0
    a506:	d10d      	bne.n	a524 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    a508:	4b09      	ldr	r3, [pc, #36]	; (a530 <hif_chip_wake+0x34>)
    a50a:	785b      	ldrb	r3, [r3, #1]
    a50c:	2b00      	cmp	r3, #0
    a50e:	d103      	bne.n	a518 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    a510:	4b07      	ldr	r3, [pc, #28]	; (a530 <hif_chip_wake+0x34>)
    a512:	781b      	ldrb	r3, [r3, #0]
    a514:	2b00      	cmp	r3, #0
    a516:	d106      	bne.n	a526 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    a518:	4a05      	ldr	r2, [pc, #20]	; (a530 <hif_chip_wake+0x34>)
    a51a:	7853      	ldrb	r3, [r2, #1]
    a51c:	3301      	adds	r3, #1
    a51e:	b2db      	uxtb	r3, r3
    a520:	7053      	strb	r3, [r2, #1]
    a522:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    a524:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    a526:	4b03      	ldr	r3, [pc, #12]	; (a534 <hif_chip_wake+0x38>)
    a528:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    a52a:	2800      	cmp	r0, #0
    a52c:	d0f4      	beq.n	a518 <hif_chip_wake+0x1c>
    a52e:	e7f9      	b.n	a524 <hif_chip_wake+0x28>
    a530:	20002b88 	.word	0x20002b88
    a534:	0000bab1 	.word	0x0000bab1

0000a538 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    a538:	4b05      	ldr	r3, [pc, #20]	; (a550 <hif_chip_sleep_sc+0x18>)
    a53a:	785b      	ldrb	r3, [r3, #1]
    a53c:	2b00      	cmp	r3, #0
    a53e:	d004      	beq.n	a54a <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    a540:	4a03      	ldr	r2, [pc, #12]	; (a550 <hif_chip_sleep_sc+0x18>)
    a542:	7853      	ldrb	r3, [r2, #1]
    a544:	3b01      	subs	r3, #1
    a546:	b2db      	uxtb	r3, r3
    a548:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    a54a:	2000      	movs	r0, #0
    a54c:	4770      	bx	lr
    a54e:	46c0      	nop			; (mov r8, r8)
    a550:	20002b88 	.word	0x20002b88

0000a554 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    a554:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    a556:	4b0b      	ldr	r3, [pc, #44]	; (a584 <hif_chip_sleep+0x30>)
    a558:	785b      	ldrb	r3, [r3, #1]
    a55a:	2b00      	cmp	r3, #0
    a55c:	d004      	beq.n	a568 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    a55e:	4a09      	ldr	r2, [pc, #36]	; (a584 <hif_chip_sleep+0x30>)
    a560:	7853      	ldrb	r3, [r2, #1]
    a562:	3b01      	subs	r3, #1
    a564:	b2db      	uxtb	r3, r3
    a566:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    a568:	4b06      	ldr	r3, [pc, #24]	; (a584 <hif_chip_sleep+0x30>)
    a56a:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    a56c:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    a56e:	2b00      	cmp	r3, #0
    a570:	d103      	bne.n	a57a <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    a572:	4b04      	ldr	r3, [pc, #16]	; (a584 <hif_chip_sleep+0x30>)
    a574:	781b      	ldrb	r3, [r3, #0]
    a576:	2b00      	cmp	r3, #0
    a578:	d100      	bne.n	a57c <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    a57a:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    a57c:	4b02      	ldr	r3, [pc, #8]	; (a588 <hif_chip_sleep+0x34>)
    a57e:	4798      	blx	r3
    a580:	e7fb      	b.n	a57a <hif_chip_sleep+0x26>
    a582:	46c0      	nop			; (mov r8, r8)
    a584:	20002b88 	.word	0x20002b88
    a588:	0000ba49 	.word	0x0000ba49

0000a58c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    a58c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a58e:	46de      	mov	lr, fp
    a590:	4657      	mov	r7, sl
    a592:	b580      	push	{r7, lr}
    a594:	b089      	sub	sp, #36	; 0x24
    a596:	4683      	mov	fp, r0
    a598:	468a      	mov	sl, r1
    a59a:	9201      	str	r2, [sp, #4]
    a59c:	9300      	str	r3, [sp, #0]
    a59e:	ab10      	add	r3, sp, #64	; 0x40
    a5a0:	cb80      	ldmia	r3!, {r7}
    a5a2:	881e      	ldrh	r6, [r3, #0]
    a5a4:	ab12      	add	r3, sp, #72	; 0x48
    a5a6:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    a5a8:	227f      	movs	r2, #127	; 0x7f
    a5aa:	400a      	ands	r2, r1
    a5ac:	ab07      	add	r3, sp, #28
    a5ae:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    a5b0:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    a5b2:	2208      	movs	r2, #8
    a5b4:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    a5b6:	2f00      	cmp	r7, #0
    a5b8:	d03d      	beq.n	a636 <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    a5ba:	885a      	ldrh	r2, [r3, #2]
    a5bc:	1992      	adds	r2, r2, r6
    a5be:	18aa      	adds	r2, r5, r2
    a5c0:	b292      	uxth	r2, r2
    a5c2:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    a5c4:	4b69      	ldr	r3, [pc, #420]	; (a76c <hif_send+0x1e0>)
    a5c6:	4798      	blx	r3
    a5c8:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    a5ca:	d000      	beq.n	a5ce <hif_send+0x42>
    a5cc:	e0c1      	b.n	a752 <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    a5ce:	2300      	movs	r3, #0
    a5d0:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    a5d2:	aa02      	add	r2, sp, #8
    a5d4:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    a5d6:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    a5d8:	9b04      	ldr	r3, [sp, #16]
    a5da:	465a      	mov	r2, fp
    a5dc:	431a      	orrs	r2, r3
    a5de:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    a5e0:	9a04      	ldr	r2, [sp, #16]
    a5e2:	4653      	mov	r3, sl
    a5e4:	021b      	lsls	r3, r3, #8
    a5e6:	4313      	orrs	r3, r2
    a5e8:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    a5ea:	ab07      	add	r3, sp, #28
    a5ec:	885b      	ldrh	r3, [r3, #2]
    a5ee:	9a04      	ldr	r2, [sp, #16]
    a5f0:	041b      	lsls	r3, r3, #16
    a5f2:	4313      	orrs	r3, r2
    a5f4:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    a5f6:	9904      	ldr	r1, [sp, #16]
    a5f8:	485d      	ldr	r0, [pc, #372]	; (a770 <hif_send+0x1e4>)
    a5fa:	4b5e      	ldr	r3, [pc, #376]	; (a774 <hif_send+0x1e8>)
    a5fc:	4798      	blx	r3
    a5fe:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    a600:	d157      	bne.n	a6b2 <hif_send+0x126>

		reg = 0UL;
    a602:	2300      	movs	r3, #0
    a604:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    a606:	9b04      	ldr	r3, [sp, #16]
    a608:	2202      	movs	r2, #2
    a60a:	4313      	orrs	r3, r2
    a60c:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    a60e:	9904      	ldr	r1, [sp, #16]
    a610:	4859      	ldr	r0, [pc, #356]	; (a778 <hif_send+0x1ec>)
    a612:	4b58      	ldr	r3, [pc, #352]	; (a774 <hif_send+0x1e8>)
    a614:	4798      	blx	r3
    a616:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    a618:	d14b      	bne.n	a6b2 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    a61a:	2200      	movs	r2, #0
    a61c:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    a61e:	ab02      	add	r3, sp, #8
    a620:	80da      	strh	r2, [r3, #6]
    a622:	3306      	adds	r3, #6
    a624:	881b      	ldrh	r3, [r3, #0]
    a626:	b29b      	uxth	r3, r3
    a628:	4a54      	ldr	r2, [pc, #336]	; (a77c <hif_send+0x1f0>)
    a62a:	4293      	cmp	r3, r2
    a62c:	d849      	bhi.n	a6c2 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    a62e:	4c54      	ldr	r4, [pc, #336]	; (a780 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    a630:	4b54      	ldr	r3, [pc, #336]	; (a784 <hif_send+0x1f8>)
    a632:	469a      	mov	sl, r3
    a634:	e017      	b.n	a666 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    a636:	ab07      	add	r3, sp, #28
    a638:	885a      	ldrh	r2, [r3, #2]
    a63a:	9900      	ldr	r1, [sp, #0]
    a63c:	468c      	mov	ip, r1
    a63e:	4462      	add	r2, ip
    a640:	b292      	uxth	r2, r2
    a642:	805a      	strh	r2, [r3, #2]
    a644:	e7be      	b.n	a5c4 <hif_send+0x38>
				nm_bsp_sleep(1);
    a646:	2001      	movs	r0, #1
    a648:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    a64a:	9b04      	ldr	r3, [sp, #16]
    a64c:	079b      	lsls	r3, r3, #30
    a64e:	d528      	bpl.n	a6a2 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    a650:	ab02      	add	r3, sp, #8
    a652:	88da      	ldrh	r2, [r3, #6]
    a654:	3201      	adds	r2, #1
    a656:	b292      	uxth	r2, r2
    a658:	80da      	strh	r2, [r3, #6]
    a65a:	3306      	adds	r3, #6
    a65c:	881b      	ldrh	r3, [r3, #0]
    a65e:	b29b      	uxth	r3, r3
    a660:	4a46      	ldr	r2, [pc, #280]	; (a77c <hif_send+0x1f0>)
    a662:	4293      	cmp	r3, r2
    a664:	d82d      	bhi.n	a6c2 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    a666:	a904      	add	r1, sp, #16
    a668:	4843      	ldr	r0, [pc, #268]	; (a778 <hif_send+0x1ec>)
    a66a:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    a66c:	2800      	cmp	r0, #0
    a66e:	d128      	bne.n	a6c2 <hif_send+0x136>
			if(cnt >= 500) {
    a670:	ab02      	add	r3, sp, #8
    a672:	3306      	adds	r3, #6
    a674:	881b      	ldrh	r3, [r3, #0]
    a676:	b29b      	uxth	r3, r3
    a678:	22f4      	movs	r2, #244	; 0xf4
    a67a:	32ff      	adds	r2, #255	; 0xff
    a67c:	4293      	cmp	r3, r2
    a67e:	d9e4      	bls.n	a64a <hif_send+0xbe>
				if(cnt < 501) {
    a680:	ab02      	add	r3, sp, #8
    a682:	3306      	adds	r3, #6
    a684:	881b      	ldrh	r3, [r3, #0]
    a686:	b29b      	uxth	r3, r3
    a688:	3201      	adds	r2, #1
    a68a:	4293      	cmp	r3, r2
    a68c:	d8db      	bhi.n	a646 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    a68e:	483e      	ldr	r0, [pc, #248]	; (a788 <hif_send+0x1fc>)
    a690:	4b3e      	ldr	r3, [pc, #248]	; (a78c <hif_send+0x200>)
    a692:	4798      	blx	r3
    a694:	483e      	ldr	r0, [pc, #248]	; (a790 <hif_send+0x204>)
    a696:	4b3f      	ldr	r3, [pc, #252]	; (a794 <hif_send+0x208>)
    a698:	4798      	blx	r3
    a69a:	200d      	movs	r0, #13
    a69c:	4b3e      	ldr	r3, [pc, #248]	; (a798 <hif_send+0x20c>)
    a69e:	4798      	blx	r3
    a6a0:	e7d1      	b.n	a646 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    a6a2:	a905      	add	r1, sp, #20
    a6a4:	483d      	ldr	r0, [pc, #244]	; (a79c <hif_send+0x210>)
    a6a6:	4b36      	ldr	r3, [pc, #216]	; (a780 <hif_send+0x1f4>)
    a6a8:	4798      	blx	r3
    a6aa:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    a6ac:	d009      	beq.n	a6c2 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    a6ae:	2300      	movs	r3, #0
    a6b0:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    a6b2:	4b3b      	ldr	r3, [pc, #236]	; (a7a0 <hif_send+0x214>)
    a6b4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    a6b6:	0020      	movs	r0, r4
    a6b8:	b009      	add	sp, #36	; 0x24
    a6ba:	bc0c      	pop	{r2, r3}
    a6bc:	4692      	mov	sl, r2
    a6be:	469b      	mov	fp, r3
    a6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    a6c2:	9b05      	ldr	r3, [sp, #20]
    a6c4:	2b00      	cmp	r3, #0
    a6c6:	d03f      	beq.n	a748 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    a6c8:	9b05      	ldr	r3, [sp, #20]
    a6ca:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    a6cc:	a907      	add	r1, sp, #28
    a6ce:	884b      	ldrh	r3, [r1, #2]
    a6d0:	b29b      	uxth	r3, r3
    a6d2:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    a6d4:	9806      	ldr	r0, [sp, #24]
    a6d6:	2208      	movs	r2, #8
    a6d8:	4b32      	ldr	r3, [pc, #200]	; (a7a4 <hif_send+0x218>)
    a6da:	4798      	blx	r3
    a6dc:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    a6de:	d1e8      	bne.n	a6b2 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    a6e0:	9b06      	ldr	r3, [sp, #24]
    a6e2:	3308      	adds	r3, #8
    a6e4:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    a6e6:	9b01      	ldr	r3, [sp, #4]
    a6e8:	2b00      	cmp	r3, #0
    a6ea:	d00b      	beq.n	a704 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    a6ec:	9806      	ldr	r0, [sp, #24]
    a6ee:	9a00      	ldr	r2, [sp, #0]
    a6f0:	0019      	movs	r1, r3
    a6f2:	4b2c      	ldr	r3, [pc, #176]	; (a7a4 <hif_send+0x218>)
    a6f4:	4798      	blx	r3
    a6f6:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    a6f8:	d1db      	bne.n	a6b2 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    a6fa:	9b06      	ldr	r3, [sp, #24]
    a6fc:	9a00      	ldr	r2, [sp, #0]
    a6fe:	4694      	mov	ip, r2
    a700:	4463      	add	r3, ip
    a702:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    a704:	2f00      	cmp	r7, #0
    a706:	d00e      	beq.n	a726 <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    a708:	9b06      	ldr	r3, [sp, #24]
    a70a:	9a00      	ldr	r2, [sp, #0]
    a70c:	1aad      	subs	r5, r5, r2
    a70e:	18ed      	adds	r5, r5, r3
    a710:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    a712:	9806      	ldr	r0, [sp, #24]
    a714:	0032      	movs	r2, r6
    a716:	0039      	movs	r1, r7
    a718:	4b22      	ldr	r3, [pc, #136]	; (a7a4 <hif_send+0x218>)
    a71a:	4798      	blx	r3
    a71c:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    a71e:	d1c8      	bne.n	a6b2 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    a720:	9b06      	ldr	r3, [sp, #24]
    a722:	18f3      	adds	r3, r6, r3
    a724:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    a726:	9b05      	ldr	r3, [sp, #20]
    a728:	009b      	lsls	r3, r3, #2
    a72a:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    a72c:	9b04      	ldr	r3, [sp, #16]
    a72e:	2202      	movs	r2, #2
    a730:	4313      	orrs	r3, r2
    a732:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    a734:	9904      	ldr	r1, [sp, #16]
    a736:	481c      	ldr	r0, [pc, #112]	; (a7a8 <hif_send+0x21c>)
    a738:	4b0e      	ldr	r3, [pc, #56]	; (a774 <hif_send+0x1e8>)
    a73a:	4798      	blx	r3
    a73c:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    a73e:	d1b8      	bne.n	a6b2 <hif_send+0x126>
 	ret = hif_chip_sleep();
    a740:	4b1a      	ldr	r3, [pc, #104]	; (a7ac <hif_send+0x220>)
    a742:	4798      	blx	r3
    a744:	0004      	movs	r4, r0
	return ret;
    a746:	e7b6      	b.n	a6b6 <hif_send+0x12a>
			ret = hif_chip_sleep();
    a748:	4b18      	ldr	r3, [pc, #96]	; (a7ac <hif_send+0x220>)
    a74a:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    a74c:	2403      	movs	r4, #3
    a74e:	4264      	negs	r4, r4
			goto ERR2;
    a750:	e7b1      	b.n	a6b6 <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    a752:	2298      	movs	r2, #152	; 0x98
    a754:	32ff      	adds	r2, #255	; 0xff
    a756:	4916      	ldr	r1, [pc, #88]	; (a7b0 <hif_send+0x224>)
    a758:	4816      	ldr	r0, [pc, #88]	; (a7b4 <hif_send+0x228>)
    a75a:	4b0c      	ldr	r3, [pc, #48]	; (a78c <hif_send+0x200>)
    a75c:	4798      	blx	r3
    a75e:	4816      	ldr	r0, [pc, #88]	; (a7b8 <hif_send+0x22c>)
    a760:	4b0c      	ldr	r3, [pc, #48]	; (a794 <hif_send+0x208>)
    a762:	4798      	blx	r3
    a764:	200d      	movs	r0, #13
    a766:	4b0c      	ldr	r3, [pc, #48]	; (a798 <hif_send+0x20c>)
    a768:	4798      	blx	r3
		goto ERR2;
    a76a:	e7a4      	b.n	a6b6 <hif_send+0x12a>
    a76c:	0000a4fd 	.word	0x0000a4fd
    a770:	0000108c 	.word	0x0000108c
    a774:	0000bed9 	.word	0x0000bed9
    a778:	00001078 	.word	0x00001078
    a77c:	000003e7 	.word	0x000003e7
    a780:	0000becd 	.word	0x0000becd
    a784:	0000a055 	.word	0x0000a055
    a788:	000154d8 	.word	0x000154d8
    a78c:	00010b61 	.word	0x00010b61
    a790:	000154e4 	.word	0x000154e4
    a794:	00010c7d 	.word	0x00010c7d
    a798:	00010b95 	.word	0x00010b95
    a79c:	00150400 	.word	0x00150400
    a7a0:	0000a539 	.word	0x0000a539
    a7a4:	0000bf4d 	.word	0x0000bf4d
    a7a8:	0000106c 	.word	0x0000106c
    a7ac:	0000a555 	.word	0x0000a555
    a7b0:	000151f0 	.word	0x000151f0
    a7b4:	000151a8 	.word	0x000151a8
    a7b8:	000154f4 	.word	0x000154f4

0000a7bc <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    a7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7be:	46ce      	mov	lr, r9
    a7c0:	4647      	mov	r7, r8
    a7c2:	b580      	push	{r7, lr}
    a7c4:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    a7c6:	2200      	movs	r2, #0
    a7c8:	4bd1      	ldr	r3, [pc, #836]	; (ab10 <hif_handle_isr+0x354>)
    a7ca:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    a7cc:	4699      	mov	r9, r3
    a7ce:	4698      	mov	r8, r3
    a7d0:	e081      	b.n	a8d6 <hif_handle_isr+0x11a>
				gstrHifCxt.u32RxAddr = address;
    a7d2:	4bcf      	ldr	r3, [pc, #828]	; (ab10 <hif_handle_isr+0x354>)
    a7d4:	9a05      	ldr	r2, [sp, #20]
    a7d6:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    a7d8:	60de      	str	r6, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    a7da:	af04      	add	r7, sp, #16
    a7dc:	2204      	movs	r2, #4
    a7de:	0039      	movs	r1, r7
    a7e0:	9805      	ldr	r0, [sp, #20]
    a7e2:	4bcc      	ldr	r3, [pc, #816]	; (ab14 <hif_handle_isr+0x358>)
    a7e4:	4798      	blx	r3
    a7e6:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    a7e8:	887b      	ldrh	r3, [r7, #2]
    a7ea:	b29b      	uxth	r3, r3
    a7ec:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    a7ee:	2800      	cmp	r0, #0
    a7f0:	d134      	bne.n	a85c <hif_handle_isr+0xa0>
				if(strHif.u16Length != size)
    a7f2:	ab04      	add	r3, sp, #16
    a7f4:	885b      	ldrh	r3, [r3, #2]
    a7f6:	b29b      	uxth	r3, r3
    a7f8:	429e      	cmp	r6, r3
    a7fa:	d004      	beq.n	a806 <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
    a7fc:	ab04      	add	r3, sp, #16
    a7fe:	885b      	ldrh	r3, [r3, #2]
    a800:	1af3      	subs	r3, r6, r3
    a802:	2b04      	cmp	r3, #4
    a804:	dc3a      	bgt.n	a87c <hif_handle_isr+0xc0>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    a806:	ab04      	add	r3, sp, #16
    a808:	781b      	ldrb	r3, [r3, #0]
    a80a:	2b01      	cmp	r3, #1
    a80c:	d04f      	beq.n	a8ae <hif_handle_isr+0xf2>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    a80e:	ab04      	add	r3, sp, #16
    a810:	781b      	ldrb	r3, [r3, #0]
    a812:	2b02      	cmp	r3, #2
    a814:	d07d      	beq.n	a912 <hif_handle_isr+0x156>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    a816:	ab04      	add	r3, sp, #16
    a818:	781b      	ldrb	r3, [r3, #0]
    a81a:	2b04      	cmp	r3, #4
    a81c:	d100      	bne.n	a820 <hif_handle_isr+0x64>
    a81e:	e095      	b.n	a94c <hif_handle_isr+0x190>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    a820:	ab04      	add	r3, sp, #16
    a822:	781b      	ldrb	r3, [r3, #0]
    a824:	2b06      	cmp	r3, #6
    a826:	d100      	bne.n	a82a <hif_handle_isr+0x6e>
    a828:	e0ad      	b.n	a986 <hif_handle_isr+0x1ca>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    a82a:	ab04      	add	r3, sp, #16
    a82c:	781b      	ldrb	r3, [r3, #0]
    a82e:	2b07      	cmp	r3, #7
    a830:	d100      	bne.n	a834 <hif_handle_isr+0x78>
    a832:	e0c5      	b.n	a9c0 <hif_handle_isr+0x204>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    a834:	ab04      	add	r3, sp, #16
    a836:	781b      	ldrb	r3, [r3, #0]
    a838:	2b05      	cmp	r3, #5
    a83a:	d100      	bne.n	a83e <hif_handle_isr+0x82>
    a83c:	e0dc      	b.n	a9f8 <hif_handle_isr+0x23c>
					M2M_ERR("(hif) invalid group ID\n");
    a83e:	2284      	movs	r2, #132	; 0x84
    a840:	0092      	lsls	r2, r2, #2
    a842:	49b5      	ldr	r1, [pc, #724]	; (ab18 <hif_handle_isr+0x35c>)
    a844:	48b5      	ldr	r0, [pc, #724]	; (ab1c <hif_handle_isr+0x360>)
    a846:	4bb6      	ldr	r3, [pc, #728]	; (ab20 <hif_handle_isr+0x364>)
    a848:	4798      	blx	r3
    a84a:	48b6      	ldr	r0, [pc, #728]	; (ab24 <hif_handle_isr+0x368>)
    a84c:	4bb6      	ldr	r3, [pc, #728]	; (ab28 <hif_handle_isr+0x36c>)
    a84e:	4798      	blx	r3
    a850:	200d      	movs	r0, #13
    a852:	4bb6      	ldr	r3, [pc, #728]	; (ab2c <hif_handle_isr+0x370>)
    a854:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    a856:	2406      	movs	r4, #6
    a858:	4264      	negs	r4, r4
    a85a:	e119      	b.n	aa90 <hif_handle_isr+0x2d4>
					M2M_ERR("(hif) address bus fail\n");
    a85c:	22e9      	movs	r2, #233	; 0xe9
    a85e:	0052      	lsls	r2, r2, #1
    a860:	49ad      	ldr	r1, [pc, #692]	; (ab18 <hif_handle_isr+0x35c>)
    a862:	48ae      	ldr	r0, [pc, #696]	; (ab1c <hif_handle_isr+0x360>)
    a864:	4bae      	ldr	r3, [pc, #696]	; (ab20 <hif_handle_isr+0x364>)
    a866:	4798      	blx	r3
    a868:	48b1      	ldr	r0, [pc, #708]	; (ab30 <hif_handle_isr+0x374>)
    a86a:	4baf      	ldr	r3, [pc, #700]	; (ab28 <hif_handle_isr+0x36c>)
    a86c:	4798      	blx	r3
    a86e:	200d      	movs	r0, #13
    a870:	4bae      	ldr	r3, [pc, #696]	; (ab2c <hif_handle_isr+0x370>)
    a872:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    a874:	2001      	movs	r0, #1
    a876:	4baf      	ldr	r3, [pc, #700]	; (ab34 <hif_handle_isr+0x378>)
    a878:	4798      	blx	r3
    a87a:	e109      	b.n	aa90 <hif_handle_isr+0x2d4>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    a87c:	22dc      	movs	r2, #220	; 0xdc
    a87e:	32ff      	adds	r2, #255	; 0xff
    a880:	49a5      	ldr	r1, [pc, #660]	; (ab18 <hif_handle_isr+0x35c>)
    a882:	48a6      	ldr	r0, [pc, #664]	; (ab1c <hif_handle_isr+0x360>)
    a884:	4ca6      	ldr	r4, [pc, #664]	; (ab20 <hif_handle_isr+0x364>)
    a886:	47a0      	blx	r4
    a888:	a904      	add	r1, sp, #16
    a88a:	884a      	ldrh	r2, [r1, #2]
    a88c:	b292      	uxth	r2, r2
    a88e:	780b      	ldrb	r3, [r1, #0]
    a890:	b2db      	uxtb	r3, r3
    a892:	7849      	ldrb	r1, [r1, #1]
    a894:	9100      	str	r1, [sp, #0]
    a896:	0031      	movs	r1, r6
    a898:	48a7      	ldr	r0, [pc, #668]	; (ab38 <hif_handle_isr+0x37c>)
    a89a:	47a0      	blx	r4
    a89c:	200d      	movs	r0, #13
    a89e:	4ba3      	ldr	r3, [pc, #652]	; (ab2c <hif_handle_isr+0x370>)
    a8a0:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    a8a2:	2001      	movs	r0, #1
    a8a4:	4ba3      	ldr	r3, [pc, #652]	; (ab34 <hif_handle_isr+0x378>)
    a8a6:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    a8a8:	2406      	movs	r4, #6
    a8aa:	4264      	negs	r4, r4
    a8ac:	e0f0      	b.n	aa90 <hif_handle_isr+0x2d4>
					if(gstrHifCxt.pfWifiCb)
    a8ae:	4b98      	ldr	r3, [pc, #608]	; (ab10 <hif_handle_isr+0x354>)
    a8b0:	691b      	ldr	r3, [r3, #16]
    a8b2:	2b00      	cmp	r3, #0
    a8b4:	d020      	beq.n	a8f8 <hif_handle_isr+0x13c>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a8b6:	4b96      	ldr	r3, [pc, #600]	; (ab10 <hif_handle_isr+0x354>)
    a8b8:	691b      	ldr	r3, [r3, #16]
    a8ba:	aa04      	add	r2, sp, #16
    a8bc:	7850      	ldrb	r0, [r2, #1]
    a8be:	b2c0      	uxtb	r0, r0
    a8c0:	8851      	ldrh	r1, [r2, #2]
    a8c2:	9a05      	ldr	r2, [sp, #20]
    a8c4:	3208      	adds	r2, #8
    a8c6:	3908      	subs	r1, #8
    a8c8:	b289      	uxth	r1, r1
    a8ca:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    a8cc:	4b90      	ldr	r3, [pc, #576]	; (ab10 <hif_handle_isr+0x354>)
    a8ce:	789b      	ldrb	r3, [r3, #2]
    a8d0:	2b00      	cmp	r3, #0
    a8d2:	d000      	beq.n	a8d6 <hif_handle_isr+0x11a>
    a8d4:	e0a1      	b.n	aa1a <hif_handle_isr+0x25e>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    a8d6:	464b      	mov	r3, r9
    a8d8:	78db      	ldrb	r3, [r3, #3]
    a8da:	2b00      	cmp	r3, #0
    a8dc:	d100      	bne.n	a8e0 <hif_handle_isr+0x124>
    a8de:	e15b      	b.n	ab98 <hif_handle_isr+0x3dc>
    a8e0:	4643      	mov	r3, r8
    a8e2:	791b      	ldrb	r3, [r3, #4]
    a8e4:	2b00      	cmp	r3, #0
    a8e6:	d000      	beq.n	a8ea <hif_handle_isr+0x12e>
    a8e8:	e156      	b.n	ab98 <hif_handle_isr+0x3dc>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    a8ea:	4a89      	ldr	r2, [pc, #548]	; (ab10 <hif_handle_isr+0x354>)
    a8ec:	78d3      	ldrb	r3, [r2, #3]
    a8ee:	3b01      	subs	r3, #1
    a8f0:	b2db      	uxtb	r3, r3
    a8f2:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    a8f4:	4d91      	ldr	r5, [pc, #580]	; (ab3c <hif_handle_isr+0x380>)
    a8f6:	e0d6      	b.n	aaa6 <hif_handle_isr+0x2ea>
						M2M_ERR("WIFI callback is not registered\n");
    a8f8:	22e8      	movs	r2, #232	; 0xe8
    a8fa:	32ff      	adds	r2, #255	; 0xff
    a8fc:	4986      	ldr	r1, [pc, #536]	; (ab18 <hif_handle_isr+0x35c>)
    a8fe:	4887      	ldr	r0, [pc, #540]	; (ab1c <hif_handle_isr+0x360>)
    a900:	4b87      	ldr	r3, [pc, #540]	; (ab20 <hif_handle_isr+0x364>)
    a902:	4798      	blx	r3
    a904:	488e      	ldr	r0, [pc, #568]	; (ab40 <hif_handle_isr+0x384>)
    a906:	4b88      	ldr	r3, [pc, #544]	; (ab28 <hif_handle_isr+0x36c>)
    a908:	4798      	blx	r3
    a90a:	200d      	movs	r0, #13
    a90c:	4b87      	ldr	r3, [pc, #540]	; (ab2c <hif_handle_isr+0x370>)
    a90e:	4798      	blx	r3
    a910:	e7dc      	b.n	a8cc <hif_handle_isr+0x110>
					if(gstrHifCxt.pfIpCb)
    a912:	4b7f      	ldr	r3, [pc, #508]	; (ab10 <hif_handle_isr+0x354>)
    a914:	695b      	ldr	r3, [r3, #20]
    a916:	2b00      	cmp	r3, #0
    a918:	d00b      	beq.n	a932 <hif_handle_isr+0x176>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a91a:	4b7d      	ldr	r3, [pc, #500]	; (ab10 <hif_handle_isr+0x354>)
    a91c:	695b      	ldr	r3, [r3, #20]
    a91e:	aa04      	add	r2, sp, #16
    a920:	7850      	ldrb	r0, [r2, #1]
    a922:	b2c0      	uxtb	r0, r0
    a924:	8851      	ldrh	r1, [r2, #2]
    a926:	9a05      	ldr	r2, [sp, #20]
    a928:	3208      	adds	r2, #8
    a92a:	3908      	subs	r1, #8
    a92c:	b289      	uxth	r1, r1
    a92e:	4798      	blx	r3
    a930:	e7cc      	b.n	a8cc <hif_handle_isr+0x110>
						M2M_ERR("Scoket callback is not registered\n");
    a932:	22f0      	movs	r2, #240	; 0xf0
    a934:	32ff      	adds	r2, #255	; 0xff
    a936:	4978      	ldr	r1, [pc, #480]	; (ab18 <hif_handle_isr+0x35c>)
    a938:	4878      	ldr	r0, [pc, #480]	; (ab1c <hif_handle_isr+0x360>)
    a93a:	4b79      	ldr	r3, [pc, #484]	; (ab20 <hif_handle_isr+0x364>)
    a93c:	4798      	blx	r3
    a93e:	4881      	ldr	r0, [pc, #516]	; (ab44 <hif_handle_isr+0x388>)
    a940:	4b79      	ldr	r3, [pc, #484]	; (ab28 <hif_handle_isr+0x36c>)
    a942:	4798      	blx	r3
    a944:	200d      	movs	r0, #13
    a946:	4b79      	ldr	r3, [pc, #484]	; (ab2c <hif_handle_isr+0x370>)
    a948:	4798      	blx	r3
    a94a:	e7bf      	b.n	a8cc <hif_handle_isr+0x110>
					if(gstrHifCxt.pfOtaCb)
    a94c:	4b70      	ldr	r3, [pc, #448]	; (ab10 <hif_handle_isr+0x354>)
    a94e:	699b      	ldr	r3, [r3, #24]
    a950:	2b00      	cmp	r3, #0
    a952:	d00b      	beq.n	a96c <hif_handle_isr+0x1b0>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a954:	4b6e      	ldr	r3, [pc, #440]	; (ab10 <hif_handle_isr+0x354>)
    a956:	699b      	ldr	r3, [r3, #24]
    a958:	aa04      	add	r2, sp, #16
    a95a:	7850      	ldrb	r0, [r2, #1]
    a95c:	b2c0      	uxtb	r0, r0
    a95e:	8851      	ldrh	r1, [r2, #2]
    a960:	9a05      	ldr	r2, [sp, #20]
    a962:	3208      	adds	r2, #8
    a964:	3908      	subs	r1, #8
    a966:	b289      	uxth	r1, r1
    a968:	4798      	blx	r3
    a96a:	e7af      	b.n	a8cc <hif_handle_isr+0x110>
						M2M_ERR("Ota callback is not registered\n");
    a96c:	22f8      	movs	r2, #248	; 0xf8
    a96e:	32ff      	adds	r2, #255	; 0xff
    a970:	4969      	ldr	r1, [pc, #420]	; (ab18 <hif_handle_isr+0x35c>)
    a972:	486a      	ldr	r0, [pc, #424]	; (ab1c <hif_handle_isr+0x360>)
    a974:	4b6a      	ldr	r3, [pc, #424]	; (ab20 <hif_handle_isr+0x364>)
    a976:	4798      	blx	r3
    a978:	4873      	ldr	r0, [pc, #460]	; (ab48 <hif_handle_isr+0x38c>)
    a97a:	4b6b      	ldr	r3, [pc, #428]	; (ab28 <hif_handle_isr+0x36c>)
    a97c:	4798      	blx	r3
    a97e:	200d      	movs	r0, #13
    a980:	4b6a      	ldr	r3, [pc, #424]	; (ab2c <hif_handle_isr+0x370>)
    a982:	4798      	blx	r3
    a984:	e7a2      	b.n	a8cc <hif_handle_isr+0x110>
					if(gstrHifCxt.pfCryptoCb)
    a986:	4b62      	ldr	r3, [pc, #392]	; (ab10 <hif_handle_isr+0x354>)
    a988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a98a:	2b00      	cmp	r3, #0
    a98c:	d00b      	beq.n	a9a6 <hif_handle_isr+0x1ea>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a98e:	4b60      	ldr	r3, [pc, #384]	; (ab10 <hif_handle_isr+0x354>)
    a990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a992:	aa04      	add	r2, sp, #16
    a994:	7850      	ldrb	r0, [r2, #1]
    a996:	b2c0      	uxtb	r0, r0
    a998:	8851      	ldrh	r1, [r2, #2]
    a99a:	9a05      	ldr	r2, [sp, #20]
    a99c:	3208      	adds	r2, #8
    a99e:	3908      	subs	r1, #8
    a9a0:	b289      	uxth	r1, r1
    a9a2:	4798      	blx	r3
    a9a4:	e792      	b.n	a8cc <hif_handle_isr+0x110>
						M2M_ERR("Crypto callback is not registered\n");
    a9a6:	2280      	movs	r2, #128	; 0x80
    a9a8:	0092      	lsls	r2, r2, #2
    a9aa:	495b      	ldr	r1, [pc, #364]	; (ab18 <hif_handle_isr+0x35c>)
    a9ac:	485b      	ldr	r0, [pc, #364]	; (ab1c <hif_handle_isr+0x360>)
    a9ae:	4b5c      	ldr	r3, [pc, #368]	; (ab20 <hif_handle_isr+0x364>)
    a9b0:	4798      	blx	r3
    a9b2:	4866      	ldr	r0, [pc, #408]	; (ab4c <hif_handle_isr+0x390>)
    a9b4:	4b5c      	ldr	r3, [pc, #368]	; (ab28 <hif_handle_isr+0x36c>)
    a9b6:	4798      	blx	r3
    a9b8:	200d      	movs	r0, #13
    a9ba:	4b5c      	ldr	r3, [pc, #368]	; (ab2c <hif_handle_isr+0x370>)
    a9bc:	4798      	blx	r3
    a9be:	e785      	b.n	a8cc <hif_handle_isr+0x110>
					if(gstrHifCxt.pfSigmaCb)
    a9c0:	4b53      	ldr	r3, [pc, #332]	; (ab10 <hif_handle_isr+0x354>)
    a9c2:	69db      	ldr	r3, [r3, #28]
    a9c4:	2b00      	cmp	r3, #0
    a9c6:	d00b      	beq.n	a9e0 <hif_handle_isr+0x224>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a9c8:	4b51      	ldr	r3, [pc, #324]	; (ab10 <hif_handle_isr+0x354>)
    a9ca:	69db      	ldr	r3, [r3, #28]
    a9cc:	aa04      	add	r2, sp, #16
    a9ce:	7850      	ldrb	r0, [r2, #1]
    a9d0:	b2c0      	uxtb	r0, r0
    a9d2:	8851      	ldrh	r1, [r2, #2]
    a9d4:	9a05      	ldr	r2, [sp, #20]
    a9d6:	3208      	adds	r2, #8
    a9d8:	3908      	subs	r1, #8
    a9da:	b289      	uxth	r1, r1
    a9dc:	4798      	blx	r3
    a9de:	e775      	b.n	a8cc <hif_handle_isr+0x110>
						M2M_ERR("Sigma callback is not registered\n");
    a9e0:	4a5b      	ldr	r2, [pc, #364]	; (ab50 <hif_handle_isr+0x394>)
    a9e2:	494d      	ldr	r1, [pc, #308]	; (ab18 <hif_handle_isr+0x35c>)
    a9e4:	484d      	ldr	r0, [pc, #308]	; (ab1c <hif_handle_isr+0x360>)
    a9e6:	4b4e      	ldr	r3, [pc, #312]	; (ab20 <hif_handle_isr+0x364>)
    a9e8:	4798      	blx	r3
    a9ea:	485a      	ldr	r0, [pc, #360]	; (ab54 <hif_handle_isr+0x398>)
    a9ec:	4b4e      	ldr	r3, [pc, #312]	; (ab28 <hif_handle_isr+0x36c>)
    a9ee:	4798      	blx	r3
    a9f0:	200d      	movs	r0, #13
    a9f2:	4b4e      	ldr	r3, [pc, #312]	; (ab2c <hif_handle_isr+0x370>)
    a9f4:	4798      	blx	r3
    a9f6:	e769      	b.n	a8cc <hif_handle_isr+0x110>
				    if(gstrHifCxt.pfSslCb)
    a9f8:	4b45      	ldr	r3, [pc, #276]	; (ab10 <hif_handle_isr+0x354>)
    a9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a9fc:	2b00      	cmp	r3, #0
    a9fe:	d100      	bne.n	aa02 <hif_handle_isr+0x246>
    aa00:	e764      	b.n	a8cc <hif_handle_isr+0x110>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    aa02:	4b43      	ldr	r3, [pc, #268]	; (ab10 <hif_handle_isr+0x354>)
    aa04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aa06:	aa04      	add	r2, sp, #16
    aa08:	7850      	ldrb	r0, [r2, #1]
    aa0a:	b2c0      	uxtb	r0, r0
    aa0c:	8851      	ldrh	r1, [r2, #2]
    aa0e:	9a05      	ldr	r2, [sp, #20]
    aa10:	3208      	adds	r2, #8
    aa12:	3908      	subs	r1, #8
    aa14:	b289      	uxth	r1, r1
    aa16:	4798      	blx	r3
    aa18:	e758      	b.n	a8cc <hif_handle_isr+0x110>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    aa1a:	4a4f      	ldr	r2, [pc, #316]	; (ab58 <hif_handle_isr+0x39c>)
    aa1c:	493e      	ldr	r1, [pc, #248]	; (ab18 <hif_handle_isr+0x35c>)
    aa1e:	483f      	ldr	r0, [pc, #252]	; (ab1c <hif_handle_isr+0x360>)
    aa20:	4c3f      	ldr	r4, [pc, #252]	; (ab20 <hif_handle_isr+0x364>)
    aa22:	47a0      	blx	r4
    aa24:	ab04      	add	r3, sp, #16
    aa26:	7819      	ldrb	r1, [r3, #0]
    aa28:	b2c9      	uxtb	r1, r1
    aa2a:	785a      	ldrb	r2, [r3, #1]
    aa2c:	b2d2      	uxtb	r2, r2
    aa2e:	484b      	ldr	r0, [pc, #300]	; (ab5c <hif_handle_isr+0x3a0>)
    aa30:	47a0      	blx	r4
    aa32:	200d      	movs	r0, #13
    aa34:	4b3d      	ldr	r3, [pc, #244]	; (ab2c <hif_handle_isr+0x370>)
    aa36:	4798      	blx	r3
					ret = hif_set_rx_done();
    aa38:	4b49      	ldr	r3, [pc, #292]	; (ab60 <hif_handle_isr+0x3a4>)
    aa3a:	4798      	blx	r3
    aa3c:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    aa3e:	d127      	bne.n	aa90 <hif_handle_isr+0x2d4>
    aa40:	e749      	b.n	a8d6 <hif_handle_isr+0x11a>
				M2M_ERR("(hif) Wrong Size\n");
    aa42:	4a48      	ldr	r2, [pc, #288]	; (ab64 <hif_handle_isr+0x3a8>)
    aa44:	4934      	ldr	r1, [pc, #208]	; (ab18 <hif_handle_isr+0x35c>)
    aa46:	4835      	ldr	r0, [pc, #212]	; (ab1c <hif_handle_isr+0x360>)
    aa48:	4b35      	ldr	r3, [pc, #212]	; (ab20 <hif_handle_isr+0x364>)
    aa4a:	4798      	blx	r3
    aa4c:	4846      	ldr	r0, [pc, #280]	; (ab68 <hif_handle_isr+0x3ac>)
    aa4e:	4b36      	ldr	r3, [pc, #216]	; (ab28 <hif_handle_isr+0x36c>)
    aa50:	4798      	blx	r3
    aa52:	200d      	movs	r0, #13
    aa54:	4b35      	ldr	r3, [pc, #212]	; (ab2c <hif_handle_isr+0x370>)
    aa56:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    aa58:	2402      	movs	r4, #2
    aa5a:	4264      	negs	r4, r4
    aa5c:	e018      	b.n	aa90 <hif_handle_isr+0x2d4>
			M2M_ERR("(hif) False interrupt %lx",reg);
    aa5e:	4a43      	ldr	r2, [pc, #268]	; (ab6c <hif_handle_isr+0x3b0>)
    aa60:	492d      	ldr	r1, [pc, #180]	; (ab18 <hif_handle_isr+0x35c>)
    aa62:	482e      	ldr	r0, [pc, #184]	; (ab1c <hif_handle_isr+0x360>)
    aa64:	4c2e      	ldr	r4, [pc, #184]	; (ab20 <hif_handle_isr+0x364>)
    aa66:	47a0      	blx	r4
    aa68:	9903      	ldr	r1, [sp, #12]
    aa6a:	4841      	ldr	r0, [pc, #260]	; (ab70 <hif_handle_isr+0x3b4>)
    aa6c:	47a0      	blx	r4
    aa6e:	200d      	movs	r0, #13
    aa70:	4b2e      	ldr	r3, [pc, #184]	; (ab2c <hif_handle_isr+0x370>)
    aa72:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    aa74:	240c      	movs	r4, #12
    aa76:	4264      	negs	r4, r4
    aa78:	e00a      	b.n	aa90 <hif_handle_isr+0x2d4>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    aa7a:	4a3e      	ldr	r2, [pc, #248]	; (ab74 <hif_handle_isr+0x3b8>)
    aa7c:	4926      	ldr	r1, [pc, #152]	; (ab18 <hif_handle_isr+0x35c>)
    aa7e:	4827      	ldr	r0, [pc, #156]	; (ab1c <hif_handle_isr+0x360>)
    aa80:	4b27      	ldr	r3, [pc, #156]	; (ab20 <hif_handle_isr+0x364>)
    aa82:	4798      	blx	r3
    aa84:	483c      	ldr	r0, [pc, #240]	; (ab78 <hif_handle_isr+0x3bc>)
    aa86:	4b28      	ldr	r3, [pc, #160]	; (ab28 <hif_handle_isr+0x36c>)
    aa88:	4798      	blx	r3
    aa8a:	200d      	movs	r0, #13
    aa8c:	4b27      	ldr	r3, [pc, #156]	; (ab2c <hif_handle_isr+0x370>)
    aa8e:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    aa90:	4a3a      	ldr	r2, [pc, #232]	; (ab7c <hif_handle_isr+0x3c0>)
    aa92:	493b      	ldr	r1, [pc, #236]	; (ab80 <hif_handle_isr+0x3c4>)
    aa94:	4821      	ldr	r0, [pc, #132]	; (ab1c <hif_handle_isr+0x360>)
    aa96:	4f22      	ldr	r7, [pc, #136]	; (ab20 <hif_handle_isr+0x364>)
    aa98:	47b8      	blx	r7
    aa9a:	0021      	movs	r1, r4
    aa9c:	4839      	ldr	r0, [pc, #228]	; (ab84 <hif_handle_isr+0x3c8>)
    aa9e:	47b8      	blx	r7
    aaa0:	200d      	movs	r0, #13
    aaa2:	4b22      	ldr	r3, [pc, #136]	; (ab2c <hif_handle_isr+0x370>)
    aaa4:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    aaa6:	a903      	add	r1, sp, #12
    aaa8:	4837      	ldr	r0, [pc, #220]	; (ab88 <hif_handle_isr+0x3cc>)
    aaaa:	47a8      	blx	r5
    aaac:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    aaae:	d1e4      	bne.n	aa7a <hif_handle_isr+0x2be>
		if(reg & 0x1)	/* New interrupt has been received */
    aab0:	9b03      	ldr	r3, [sp, #12]
    aab2:	07db      	lsls	r3, r3, #31
    aab4:	d5d3      	bpl.n	aa5e <hif_handle_isr+0x2a2>
			nm_bsp_interrupt_ctrl(0);
    aab6:	2000      	movs	r0, #0
    aab8:	4b1e      	ldr	r3, [pc, #120]	; (ab34 <hif_handle_isr+0x378>)
    aaba:	4798      	blx	r3
			reg &= ~NBIT0;
    aabc:	2301      	movs	r3, #1
    aabe:	9903      	ldr	r1, [sp, #12]
    aac0:	4399      	bics	r1, r3
    aac2:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    aac4:	4830      	ldr	r0, [pc, #192]	; (ab88 <hif_handle_isr+0x3cc>)
    aac6:	4b31      	ldr	r3, [pc, #196]	; (ab8c <hif_handle_isr+0x3d0>)
    aac8:	4798      	blx	r3
    aaca:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    aacc:	d1e0      	bne.n	aa90 <hif_handle_isr+0x2d4>
			gstrHifCxt.u8HifRXDone = 1;
    aace:	2201      	movs	r2, #1
    aad0:	4b0f      	ldr	r3, [pc, #60]	; (ab10 <hif_handle_isr+0x354>)
    aad2:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    aad4:	9b03      	ldr	r3, [sp, #12]
    aad6:	049e      	lsls	r6, r3, #18
    aad8:	0d36      	lsrs	r6, r6, #20
			if (size > 0) {
    aada:	d0b2      	beq.n	aa42 <hif_handle_isr+0x286>
				uint32 address = 0;
    aadc:	2300      	movs	r3, #0
    aade:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    aae0:	a905      	add	r1, sp, #20
    aae2:	482b      	ldr	r0, [pc, #172]	; (ab90 <hif_handle_isr+0x3d4>)
    aae4:	4b15      	ldr	r3, [pc, #84]	; (ab3c <hif_handle_isr+0x380>)
    aae6:	4798      	blx	r3
    aae8:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    aaea:	d100      	bne.n	aaee <hif_handle_isr+0x332>
    aaec:	e671      	b.n	a7d2 <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    aaee:	22e4      	movs	r2, #228	; 0xe4
    aaf0:	0052      	lsls	r2, r2, #1
    aaf2:	4909      	ldr	r1, [pc, #36]	; (ab18 <hif_handle_isr+0x35c>)
    aaf4:	4809      	ldr	r0, [pc, #36]	; (ab1c <hif_handle_isr+0x360>)
    aaf6:	4b0a      	ldr	r3, [pc, #40]	; (ab20 <hif_handle_isr+0x364>)
    aaf8:	4798      	blx	r3
    aafa:	4826      	ldr	r0, [pc, #152]	; (ab94 <hif_handle_isr+0x3d8>)
    aafc:	4b0a      	ldr	r3, [pc, #40]	; (ab28 <hif_handle_isr+0x36c>)
    aafe:	4798      	blx	r3
    ab00:	200d      	movs	r0, #13
    ab02:	4b0a      	ldr	r3, [pc, #40]	; (ab2c <hif_handle_isr+0x370>)
    ab04:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    ab06:	2001      	movs	r0, #1
    ab08:	4b0a      	ldr	r3, [pc, #40]	; (ab34 <hif_handle_isr+0x378>)
    ab0a:	4798      	blx	r3
    ab0c:	e7c0      	b.n	aa90 <hif_handle_isr+0x2d4>
    ab0e:	46c0      	nop			; (mov r8, r8)
    ab10:	20002b88 	.word	0x20002b88
    ab14:	0000bee5 	.word	0x0000bee5
    ab18:	000151fc 	.word	0x000151fc
    ab1c:	000151a8 	.word	0x000151a8
    ab20:	00010b61 	.word	0x00010b61
    ab24:	00015358 	.word	0x00015358
    ab28:	00010c7d 	.word	0x00010c7d
    ab2c:	00010b95 	.word	0x00010b95
    ab30:	00015254 	.word	0x00015254
    ab34:	0000a185 	.word	0x0000a185
    ab38:	0001526c 	.word	0x0001526c
    ab3c:	0000becd 	.word	0x0000becd
    ab40:	000152ac 	.word	0x000152ac
    ab44:	000152cc 	.word	0x000152cc
    ab48:	000152f0 	.word	0x000152f0
    ab4c:	00015310 	.word	0x00015310
    ab50:	00000207 	.word	0x00000207
    ab54:	00015334 	.word	0x00015334
    ab58:	00000216 	.word	0x00000216
    ab5c:	00015370 	.word	0x00015370
    ab60:	0000a4b9 	.word	0x0000a4b9
    ab64:	0000021d 	.word	0x0000021d
    ab68:	0001539c 	.word	0x0001539c
    ab6c:	00000225 	.word	0x00000225
    ab70:	000153b0 	.word	0x000153b0
    ab74:	0000022e 	.word	0x0000022e
    ab78:	000153cc 	.word	0x000153cc
    ab7c:	00000257 	.word	0x00000257
    ab80:	00015204 	.word	0x00015204
    ab84:	000153f0 	.word	0x000153f0
    ab88:	00001070 	.word	0x00001070
    ab8c:	0000bed9 	.word	0x0000bed9
    ab90:	00001084 	.word	0x00001084
    ab94:	00015230 	.word	0x00015230
			}
		}
	}

	return ret;
}
    ab98:	2000      	movs	r0, #0
    ab9a:	b007      	add	sp, #28
    ab9c:	bc0c      	pop	{r2, r3}
    ab9e:	4690      	mov	r8, r2
    aba0:	4699      	mov	r9, r3
    aba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000aba4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    aba4:	b570      	push	{r4, r5, r6, lr}
    aba6:	0014      	movs	r4, r2
    aba8:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    abaa:	2800      	cmp	r0, #0
    abac:	d003      	beq.n	abb6 <hif_receive+0x12>
    abae:	2900      	cmp	r1, #0
    abb0:	d001      	beq.n	abb6 <hif_receive+0x12>
    abb2:	2a00      	cmp	r2, #0
    abb4:	d113      	bne.n	abde <hif_receive+0x3a>
	{
		if(isDone)
    abb6:	2d00      	cmp	r5, #0
    abb8:	d002      	beq.n	abc0 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    abba:	4b28      	ldr	r3, [pc, #160]	; (ac5c <hif_receive+0xb8>)
    abbc:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    abbe:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    abc0:	229e      	movs	r2, #158	; 0x9e
    abc2:	0092      	lsls	r2, r2, #2
    abc4:	4926      	ldr	r1, [pc, #152]	; (ac60 <hif_receive+0xbc>)
    abc6:	4827      	ldr	r0, [pc, #156]	; (ac64 <hif_receive+0xc0>)
    abc8:	4b27      	ldr	r3, [pc, #156]	; (ac68 <hif_receive+0xc4>)
    abca:	4798      	blx	r3
    abcc:	4827      	ldr	r0, [pc, #156]	; (ac6c <hif_receive+0xc8>)
    abce:	4b28      	ldr	r3, [pc, #160]	; (ac70 <hif_receive+0xcc>)
    abd0:	4798      	blx	r3
    abd2:	200d      	movs	r0, #13
    abd4:	4b27      	ldr	r3, [pc, #156]	; (ac74 <hif_receive+0xd0>)
    abd6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    abd8:	200c      	movs	r0, #12
    abda:	4240      	negs	r0, r0
    abdc:	e7ef      	b.n	abbe <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    abde:	4b26      	ldr	r3, [pc, #152]	; (ac78 <hif_receive+0xd4>)
    abe0:	68db      	ldr	r3, [r3, #12]
    abe2:	429a      	cmp	r2, r3
    abe4:	d81a      	bhi.n	ac1c <hif_receive+0x78>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    abe6:	4b24      	ldr	r3, [pc, #144]	; (ac78 <hif_receive+0xd4>)
    abe8:	689b      	ldr	r3, [r3, #8]
    abea:	4298      	cmp	r0, r3
    abec:	d327      	bcc.n	ac3e <hif_receive+0x9a>
    abee:	1886      	adds	r6, r0, r2
    abf0:	4a21      	ldr	r2, [pc, #132]	; (ac78 <hif_receive+0xd4>)
    abf2:	6893      	ldr	r3, [r2, #8]
    abf4:	68d2      	ldr	r2, [r2, #12]
    abf6:	189b      	adds	r3, r3, r2
    abf8:	429e      	cmp	r6, r3
    abfa:	d820      	bhi.n	ac3e <hif_receive+0x9a>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    abfc:	0022      	movs	r2, r4
    abfe:	4b1f      	ldr	r3, [pc, #124]	; (ac7c <hif_receive+0xd8>)
    ac00:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    ac02:	2800      	cmp	r0, #0
    ac04:	d1db      	bne.n	abbe <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    ac06:	4a1c      	ldr	r2, [pc, #112]	; (ac78 <hif_receive+0xd4>)
    ac08:	6893      	ldr	r3, [r2, #8]
    ac0a:	68d2      	ldr	r2, [r2, #12]
    ac0c:	189b      	adds	r3, r3, r2
    ac0e:	429e      	cmp	r6, r3
    ac10:	d001      	beq.n	ac16 <hif_receive+0x72>
    ac12:	2d00      	cmp	r5, #0
    ac14:	d0d3      	beq.n	abbe <hif_receive+0x1a>
		ret = hif_set_rx_done();
    ac16:	4b11      	ldr	r3, [pc, #68]	; (ac5c <hif_receive+0xb8>)
    ac18:	4798      	blx	r3
    ac1a:	e7d0      	b.n	abbe <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    ac1c:	22a0      	movs	r2, #160	; 0xa0
    ac1e:	0092      	lsls	r2, r2, #2
    ac20:	490f      	ldr	r1, [pc, #60]	; (ac60 <hif_receive+0xbc>)
    ac22:	4810      	ldr	r0, [pc, #64]	; (ac64 <hif_receive+0xc0>)
    ac24:	4d10      	ldr	r5, [pc, #64]	; (ac68 <hif_receive+0xc4>)
    ac26:	47a8      	blx	r5
    ac28:	4b13      	ldr	r3, [pc, #76]	; (ac78 <hif_receive+0xd4>)
    ac2a:	68da      	ldr	r2, [r3, #12]
    ac2c:	0021      	movs	r1, r4
    ac2e:	4814      	ldr	r0, [pc, #80]	; (ac80 <hif_receive+0xdc>)
    ac30:	47a8      	blx	r5
    ac32:	200d      	movs	r0, #13
    ac34:	4b0f      	ldr	r3, [pc, #60]	; (ac74 <hif_receive+0xd0>)
    ac36:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    ac38:	200c      	movs	r0, #12
    ac3a:	4240      	negs	r0, r0
		goto ERR1;
    ac3c:	e7bf      	b.n	abbe <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    ac3e:	4a11      	ldr	r2, [pc, #68]	; (ac84 <hif_receive+0xe0>)
    ac40:	4907      	ldr	r1, [pc, #28]	; (ac60 <hif_receive+0xbc>)
    ac42:	4808      	ldr	r0, [pc, #32]	; (ac64 <hif_receive+0xc0>)
    ac44:	4b08      	ldr	r3, [pc, #32]	; (ac68 <hif_receive+0xc4>)
    ac46:	4798      	blx	r3
    ac48:	480f      	ldr	r0, [pc, #60]	; (ac88 <hif_receive+0xe4>)
    ac4a:	4b09      	ldr	r3, [pc, #36]	; (ac70 <hif_receive+0xcc>)
    ac4c:	4798      	blx	r3
    ac4e:	200d      	movs	r0, #13
    ac50:	4b08      	ldr	r3, [pc, #32]	; (ac74 <hif_receive+0xd0>)
    ac52:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    ac54:	200c      	movs	r0, #12
    ac56:	4240      	negs	r0, r0
		goto ERR1;
    ac58:	e7b1      	b.n	abbe <hif_receive+0x1a>
    ac5a:	46c0      	nop			; (mov r8, r8)
    ac5c:	0000a4b9 	.word	0x0000a4b9
    ac60:	00015214 	.word	0x00015214
    ac64:	000151a8 	.word	0x000151a8
    ac68:	00010b61 	.word	0x00010b61
    ac6c:	00015420 	.word	0x00015420
    ac70:	00010c7d 	.word	0x00010c7d
    ac74:	00010b95 	.word	0x00010b95
    ac78:	20002b88 	.word	0x20002b88
    ac7c:	0000bee5 	.word	0x0000bee5
    ac80:	00015440 	.word	0x00015440
    ac84:	00000286 	.word	0x00000286
    ac88:	00015488 	.word	0x00015488

0000ac8c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    ac8c:	b570      	push	{r4, r5, r6, lr}
    ac8e:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    ac90:	2807      	cmp	r0, #7
    ac92:	d81f      	bhi.n	acd4 <hif_register_cb+0x48>
    ac94:	0083      	lsls	r3, r0, #2
    ac96:	4a16      	ldr	r2, [pc, #88]	; (acf0 <hif_register_cb+0x64>)
    ac98:	58d3      	ldr	r3, [r2, r3]
    ac9a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    ac9c:	4b15      	ldr	r3, [pc, #84]	; (acf4 <hif_register_cb+0x68>)
    ac9e:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    aca0:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    aca2:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    aca4:	4b13      	ldr	r3, [pc, #76]	; (acf4 <hif_register_cb+0x68>)
    aca6:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    aca8:	2000      	movs	r0, #0
			break;
    acaa:	e7fa      	b.n	aca2 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    acac:	4b11      	ldr	r3, [pc, #68]	; (acf4 <hif_register_cb+0x68>)
    acae:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    acb0:	2000      	movs	r0, #0
			break;
    acb2:	e7f6      	b.n	aca2 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    acb4:	4b0f      	ldr	r3, [pc, #60]	; (acf4 <hif_register_cb+0x68>)
    acb6:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    acb8:	2000      	movs	r0, #0
			break;
    acba:	e7f2      	b.n	aca2 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    acbc:	4b0d      	ldr	r3, [pc, #52]	; (acf4 <hif_register_cb+0x68>)
    acbe:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    acc0:	2000      	movs	r0, #0
			break;
    acc2:	e7ee      	b.n	aca2 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    acc4:	4b0b      	ldr	r3, [pc, #44]	; (acf4 <hif_register_cb+0x68>)
    acc6:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    acc8:	2000      	movs	r0, #0
			break;
    acca:	e7ea      	b.n	aca2 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    accc:	4b09      	ldr	r3, [pc, #36]	; (acf4 <hif_register_cb+0x68>)
    acce:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    acd0:	2000      	movs	r0, #0
			break;
    acd2:	e7e6      	b.n	aca2 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    acd4:	4a08      	ldr	r2, [pc, #32]	; (acf8 <hif_register_cb+0x6c>)
    acd6:	4909      	ldr	r1, [pc, #36]	; (acfc <hif_register_cb+0x70>)
    acd8:	4809      	ldr	r0, [pc, #36]	; (ad00 <hif_register_cb+0x74>)
    acda:	4d0a      	ldr	r5, [pc, #40]	; (ad04 <hif_register_cb+0x78>)
    acdc:	47a8      	blx	r5
    acde:	0021      	movs	r1, r4
    ace0:	4809      	ldr	r0, [pc, #36]	; (ad08 <hif_register_cb+0x7c>)
    ace2:	47a8      	blx	r5
    ace4:	200d      	movs	r0, #13
    ace6:	4b09      	ldr	r3, [pc, #36]	; (ad0c <hif_register_cb+0x80>)
    ace8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    acea:	200c      	movs	r0, #12
    acec:	4240      	negs	r0, r0
			break;
    acee:	e7d8      	b.n	aca2 <hif_register_cb+0x16>
    acf0:	000151d0 	.word	0x000151d0
    acf4:	20002b88 	.word	0x20002b88
    acf8:	000002be 	.word	0x000002be
    acfc:	00015220 	.word	0x00015220
    ad00:	000151a8 	.word	0x000151a8
    ad04:	00010b61 	.word	0x00010b61
    ad08:	000154cc 	.word	0x000154cc
    ad0c:	00010b95 	.word	0x00010b95

0000ad10 <hif_init>:
{
    ad10:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    ad12:	222c      	movs	r2, #44	; 0x2c
    ad14:	2100      	movs	r1, #0
    ad16:	4806      	ldr	r0, [pc, #24]	; (ad30 <hif_init+0x20>)
    ad18:	4b06      	ldr	r3, [pc, #24]	; (ad34 <hif_init+0x24>)
    ad1a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    ad1c:	4806      	ldr	r0, [pc, #24]	; (ad38 <hif_init+0x28>)
    ad1e:	4b07      	ldr	r3, [pc, #28]	; (ad3c <hif_init+0x2c>)
    ad20:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    ad22:	4907      	ldr	r1, [pc, #28]	; (ad40 <hif_init+0x30>)
    ad24:	2003      	movs	r0, #3
    ad26:	4b07      	ldr	r3, [pc, #28]	; (ad44 <hif_init+0x34>)
    ad28:	4798      	blx	r3
}
    ad2a:	2000      	movs	r0, #0
    ad2c:	bd10      	pop	{r4, pc}
    ad2e:	46c0      	nop			; (mov r8, r8)
    ad30:	20002b88 	.word	0x20002b88
    ad34:	0000a479 	.word	0x0000a479
    ad38:	0000a4a5 	.word	0x0000a4a5
    ad3c:	0000a12d 	.word	0x0000a12d
    ad40:	0000a4b5 	.word	0x0000a4b5
    ad44:	0000ac8d 	.word	0x0000ac8d

0000ad48 <m2m_ssl_cb>:
				HIF data length.
	@param [in]	u32Addr
				HIF address.
*/
static void m2m_ssl_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    ad48:	b530      	push	{r4, r5, lr}
    ad4a:	b09d      	sub	sp, #116	; 0x74
    ad4c:	0015      	movs	r5, r2
	sint8 s8tmp = M2M_SUCCESS;
	switch(u8OpCode)
    ad4e:	2801      	cmp	r0, #1
    ad50:	d006      	beq.n	ad60 <m2m_ssl_cb+0x18>
    ad52:	2806      	cmp	r0, #6
    ad54:	d017      	beq.n	ad86 <m2m_ssl_cb+0x3e>
	sint8 s8tmp = M2M_SUCCESS;
    ad56:	2400      	movs	r4, #0
					gpfAppSSLCb(M2M_SSL_RESP_SET_CS_LIST, &strCsList);
			}
		}
		break;
	}
	if(s8tmp != M2M_SUCCESS)
    ad58:	2c00      	cmp	r4, #0
    ad5a:	d124      	bne.n	ada6 <m2m_ssl_cb+0x5e>
	{
		M2M_ERR("Error receiving SSL from the HIF\n");
	}
}
    ad5c:	b01d      	add	sp, #116	; 0x74
    ad5e:	bd30      	pop	{r4, r5, pc}
			s8tmp = hif_receive(u32Addr, (uint8*)&strEccREQ, sizeof(tstrEccReqInfo), 0);
    ad60:	2300      	movs	r3, #0
    ad62:	2270      	movs	r2, #112	; 0x70
    ad64:	4669      	mov	r1, sp
    ad66:	0028      	movs	r0, r5
    ad68:	4c15      	ldr	r4, [pc, #84]	; (adc0 <m2m_ssl_cb+0x78>)
    ad6a:	47a0      	blx	r4
    ad6c:	1e04      	subs	r4, r0, #0
			if(s8tmp == M2M_SUCCESS)
    ad6e:	d1f3      	bne.n	ad58 <m2m_ssl_cb+0x10>
				if (gpfAppSSLCb)
    ad70:	4b14      	ldr	r3, [pc, #80]	; (adc4 <m2m_ssl_cb+0x7c>)
    ad72:	681b      	ldr	r3, [r3, #0]
    ad74:	2b00      	cmp	r3, #0
    ad76:	d0ef      	beq.n	ad58 <m2m_ssl_cb+0x10>
					gu32HIFAddr = u32Addr + sizeof(tstrEccReqInfo);
    ad78:	3570      	adds	r5, #112	; 0x70
    ad7a:	4a13      	ldr	r2, [pc, #76]	; (adc8 <m2m_ssl_cb+0x80>)
    ad7c:	6015      	str	r5, [r2, #0]
					gpfAppSSLCb(M2M_SSL_REQ_ECC, &strEccREQ);
    ad7e:	4669      	mov	r1, sp
    ad80:	2001      	movs	r0, #1
    ad82:	4798      	blx	r3
		break;
    ad84:	e7e8      	b.n	ad58 <m2m_ssl_cb+0x10>
			s8tmp = hif_receive(u32Addr, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), 0);
    ad86:	2300      	movs	r3, #0
    ad88:	2204      	movs	r2, #4
    ad8a:	4669      	mov	r1, sp
    ad8c:	0028      	movs	r0, r5
    ad8e:	4c0c      	ldr	r4, [pc, #48]	; (adc0 <m2m_ssl_cb+0x78>)
    ad90:	47a0      	blx	r4
    ad92:	1e04      	subs	r4, r0, #0
			if(s8tmp == M2M_SUCCESS)
    ad94:	d1e0      	bne.n	ad58 <m2m_ssl_cb+0x10>
				if (gpfAppSSLCb)
    ad96:	4b0b      	ldr	r3, [pc, #44]	; (adc4 <m2m_ssl_cb+0x7c>)
    ad98:	681b      	ldr	r3, [r3, #0]
    ad9a:	2b00      	cmp	r3, #0
    ad9c:	d0dc      	beq.n	ad58 <m2m_ssl_cb+0x10>
					gpfAppSSLCb(M2M_SSL_RESP_SET_CS_LIST, &strCsList);
    ad9e:	4669      	mov	r1, sp
    ada0:	2006      	movs	r0, #6
    ada2:	4798      	blx	r3
		break;
    ada4:	e7d8      	b.n	ad58 <m2m_ssl_cb+0x10>
		M2M_ERR("Error receiving SSL from the HIF\n");
    ada6:	2264      	movs	r2, #100	; 0x64
    ada8:	4908      	ldr	r1, [pc, #32]	; (adcc <m2m_ssl_cb+0x84>)
    adaa:	4809      	ldr	r0, [pc, #36]	; (add0 <m2m_ssl_cb+0x88>)
    adac:	4b09      	ldr	r3, [pc, #36]	; (add4 <m2m_ssl_cb+0x8c>)
    adae:	4798      	blx	r3
    adb0:	4809      	ldr	r0, [pc, #36]	; (add8 <m2m_ssl_cb+0x90>)
    adb2:	4b0a      	ldr	r3, [pc, #40]	; (addc <m2m_ssl_cb+0x94>)
    adb4:	4798      	blx	r3
    adb6:	200d      	movs	r0, #13
    adb8:	4b09      	ldr	r3, [pc, #36]	; (ade0 <m2m_ssl_cb+0x98>)
    adba:	4798      	blx	r3
}
    adbc:	e7ce      	b.n	ad5c <m2m_ssl_cb+0x14>
    adbe:	46c0      	nop			; (mov r8, r8)
    adc0:	0000aba5 	.word	0x0000aba5
    adc4:	2000274c 	.word	0x2000274c
    adc8:	20002750 	.word	0x20002750
    adcc:	00015510 	.word	0x00015510
    add0:	000151a8 	.word	0x000151a8
    add4:	00010b61 	.word	0x00010b61
    add8:	0001552c 	.word	0x0001552c
    addc:	00010c7d 	.word	0x00010c7d
    ade0:	00010b95 	.word	0x00010b95

0000ade4 <m2m_ssl_set_active_ciphersuites>:
@return		
	- [SOCK_ERR_NO_ERROR](@ref SOCK_ERR_NO_ERROR)
	- [SOCK_ERR_INVALID_ARG](@ref SOCK_ERR_INVALID_ARG)
*/
sint8 m2m_ssl_set_active_ciphersuites(uint32 u32SslCsBMP)
{
    ade4:	b510      	push	{r4, lr}
    ade6:	b086      	sub	sp, #24
	sint8 s8Ret = M2M_SUCCESS;
	tstrSslSetActiveCsList	strCsList;
	
	strCsList.u32CsBMP = u32SslCsBMP;
    ade8:	9005      	str	r0, [sp, #20]
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_REQ_SET_CS_LIST, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), NULL, 0, 0);
    adea:	2300      	movs	r3, #0
    adec:	9302      	str	r3, [sp, #8]
    adee:	9301      	str	r3, [sp, #4]
    adf0:	9300      	str	r3, [sp, #0]
    adf2:	3304      	adds	r3, #4
    adf4:	aa05      	add	r2, sp, #20
    adf6:	2105      	movs	r1, #5
    adf8:	2005      	movs	r0, #5
    adfa:	4c02      	ldr	r4, [pc, #8]	; (ae04 <m2m_ssl_set_active_ciphersuites+0x20>)
    adfc:	47a0      	blx	r4

	return s8Ret;
}
    adfe:	b006      	add	sp, #24
    ae00:	bd10      	pop	{r4, pc}
    ae02:	46c0      	nop			; (mov r8, r8)
    ae04:	0000a58d 	.word	0x0000a58d

0000ae08 <m2m_ssl_init>:
	@param [in]	pfAppSslCb
	Application SSL callback function.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_init(tpfAppSSLCb pfAppSSLCb)
{
    ae08:	b570      	push	{r4, r5, r6, lr}
	sint8 s8Ret = M2M_SUCCESS;

	gpfAppSSLCb = pfAppSSLCb;
    ae0a:	4b0d      	ldr	r3, [pc, #52]	; (ae40 <m2m_ssl_init+0x38>)
    ae0c:	6018      	str	r0, [r3, #0]
	gu32HIFAddr = 0;
    ae0e:	2200      	movs	r2, #0
    ae10:	4b0c      	ldr	r3, [pc, #48]	; (ae44 <m2m_ssl_init+0x3c>)
    ae12:	601a      	str	r2, [r3, #0]

	s8Ret = hif_register_cb(M2M_REQ_GROUP_SSL,m2m_ssl_cb);
    ae14:	490c      	ldr	r1, [pc, #48]	; (ae48 <m2m_ssl_init+0x40>)
    ae16:	2005      	movs	r0, #5
    ae18:	4b0c      	ldr	r3, [pc, #48]	; (ae4c <m2m_ssl_init+0x44>)
    ae1a:	4798      	blx	r3
    ae1c:	1e04      	subs	r4, r0, #0
	if (s8Ret != M2M_SUCCESS)
    ae1e:	d101      	bne.n	ae24 <m2m_ssl_init+0x1c>
	{
		M2M_ERR("hif_register_cb() failed with ret=%d", s8Ret);
	}
	return s8Ret;
    ae20:	0020      	movs	r0, r4
    ae22:	bd70      	pop	{r4, r5, r6, pc}
		M2M_ERR("hif_register_cb() failed with ret=%d", s8Ret);
    ae24:	2294      	movs	r2, #148	; 0x94
    ae26:	0052      	lsls	r2, r2, #1
    ae28:	4909      	ldr	r1, [pc, #36]	; (ae50 <m2m_ssl_init+0x48>)
    ae2a:	480a      	ldr	r0, [pc, #40]	; (ae54 <m2m_ssl_init+0x4c>)
    ae2c:	4d0a      	ldr	r5, [pc, #40]	; (ae58 <m2m_ssl_init+0x50>)
    ae2e:	47a8      	blx	r5
    ae30:	0021      	movs	r1, r4
    ae32:	480a      	ldr	r0, [pc, #40]	; (ae5c <m2m_ssl_init+0x54>)
    ae34:	47a8      	blx	r5
    ae36:	200d      	movs	r0, #13
    ae38:	4b09      	ldr	r3, [pc, #36]	; (ae60 <m2m_ssl_init+0x58>)
    ae3a:	4798      	blx	r3
    ae3c:	e7f0      	b.n	ae20 <m2m_ssl_init+0x18>
    ae3e:	46c0      	nop			; (mov r8, r8)
    ae40:	2000274c 	.word	0x2000274c
    ae44:	20002750 	.word	0x20002750
    ae48:	0000ad49 	.word	0x0000ad49
    ae4c:	0000ac8d 	.word	0x0000ac8d
    ae50:	0001551c 	.word	0x0001551c
    ae54:	000151a8 	.word	0x000151a8
    ae58:	00010b61 	.word	0x00010b61
    ae5c:	00015550 	.word	0x00015550
    ae60:	00010b95 	.word	0x00010b95

0000ae64 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    ae64:	b530      	push	{r4, r5, lr}
    ae66:	b09f      	sub	sp, #124	; 0x7c
    ae68:	0004      	movs	r4, r0
    ae6a:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    ae6c:	282c      	cmp	r0, #44	; 0x2c
    ae6e:	d02f      	beq.n	aed0 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    ae70:	281b      	cmp	r0, #27
    ae72:	d03d      	beq.n	aef0 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    ae74:	2806      	cmp	r0, #6
    ae76:	d04b      	beq.n	af10 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    ae78:	280e      	cmp	r0, #14
    ae7a:	d027      	beq.n	aecc <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    ae7c:	2832      	cmp	r0, #50	; 0x32
    ae7e:	d057      	beq.n	af30 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    ae80:	282f      	cmp	r0, #47	; 0x2f
    ae82:	d065      	beq.n	af50 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    ae84:	2834      	cmp	r0, #52	; 0x34
    ae86:	d100      	bne.n	ae8a <m2m_wifi_cb+0x26>
    ae88:	e077      	b.n	af7a <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    ae8a:	2811      	cmp	r0, #17
    ae8c:	d100      	bne.n	ae90 <m2m_wifi_cb+0x2c>
    ae8e:	e096      	b.n	afbe <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    ae90:	2813      	cmp	r0, #19
    ae92:	d100      	bne.n	ae96 <m2m_wifi_cb+0x32>
    ae94:	e0ac      	b.n	aff0 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    ae96:	2804      	cmp	r0, #4
    ae98:	d100      	bne.n	ae9c <m2m_wifi_cb+0x38>
    ae9a:	e0bb      	b.n	b014 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    ae9c:	2865      	cmp	r0, #101	; 0x65
    ae9e:	d100      	bne.n	aea2 <m2m_wifi_cb+0x3e>
    aea0:	e0ca      	b.n	b038 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    aea2:	2809      	cmp	r0, #9
    aea4:	d100      	bne.n	aea8 <m2m_wifi_cb+0x44>
    aea6:	e0d9      	b.n	b05c <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    aea8:	282a      	cmp	r0, #42	; 0x2a
    aeaa:	d100      	bne.n	aeae <m2m_wifi_cb+0x4a>
    aeac:	e0e8      	b.n	b080 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    aeae:	2820      	cmp	r0, #32
    aeb0:	d100      	bne.n	aeb4 <m2m_wifi_cb+0x50>
    aeb2:	e0f7      	b.n	b0a4 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    aeb4:	2224      	movs	r2, #36	; 0x24
    aeb6:	32ff      	adds	r2, #255	; 0xff
    aeb8:	4989      	ldr	r1, [pc, #548]	; (b0e0 <m2m_wifi_cb+0x27c>)
    aeba:	488a      	ldr	r0, [pc, #552]	; (b0e4 <m2m_wifi_cb+0x280>)
    aebc:	4d8a      	ldr	r5, [pc, #552]	; (b0e8 <m2m_wifi_cb+0x284>)
    aebe:	47a8      	blx	r5
    aec0:	0021      	movs	r1, r4
    aec2:	488a      	ldr	r0, [pc, #552]	; (b0ec <m2m_wifi_cb+0x288>)
    aec4:	47a8      	blx	r5
    aec6:	200d      	movs	r0, #13
    aec8:	4b89      	ldr	r3, [pc, #548]	; (b0f0 <m2m_wifi_cb+0x28c>)
    aeca:	4798      	blx	r3
	}
}
    aecc:	b01f      	add	sp, #124	; 0x7c
    aece:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    aed0:	2300      	movs	r3, #0
    aed2:	2204      	movs	r2, #4
    aed4:	a903      	add	r1, sp, #12
    aed6:	0028      	movs	r0, r5
    aed8:	4c86      	ldr	r4, [pc, #536]	; (b0f4 <m2m_wifi_cb+0x290>)
    aeda:	47a0      	blx	r4
    aedc:	2800      	cmp	r0, #0
    aede:	d1f5      	bne.n	aecc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    aee0:	4b85      	ldr	r3, [pc, #532]	; (b0f8 <m2m_wifi_cb+0x294>)
    aee2:	681b      	ldr	r3, [r3, #0]
    aee4:	2b00      	cmp	r3, #0
    aee6:	d0f1      	beq.n	aecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    aee8:	a903      	add	r1, sp, #12
    aeea:	302c      	adds	r0, #44	; 0x2c
    aeec:	4798      	blx	r3
    aeee:	e7ed      	b.n	aecc <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    aef0:	2300      	movs	r3, #0
    aef2:	2208      	movs	r2, #8
    aef4:	a903      	add	r1, sp, #12
    aef6:	0028      	movs	r0, r5
    aef8:	4c7e      	ldr	r4, [pc, #504]	; (b0f4 <m2m_wifi_cb+0x290>)
    aefa:	47a0      	blx	r4
    aefc:	2800      	cmp	r0, #0
    aefe:	d1e5      	bne.n	aecc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    af00:	4b7d      	ldr	r3, [pc, #500]	; (b0f8 <m2m_wifi_cb+0x294>)
    af02:	681b      	ldr	r3, [r3, #0]
    af04:	2b00      	cmp	r3, #0
    af06:	d0e1      	beq.n	aecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    af08:	a903      	add	r1, sp, #12
    af0a:	301b      	adds	r0, #27
    af0c:	4798      	blx	r3
    af0e:	e7dd      	b.n	aecc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    af10:	2301      	movs	r3, #1
    af12:	2230      	movs	r2, #48	; 0x30
    af14:	a903      	add	r1, sp, #12
    af16:	0028      	movs	r0, r5
    af18:	4c76      	ldr	r4, [pc, #472]	; (b0f4 <m2m_wifi_cb+0x290>)
    af1a:	47a0      	blx	r4
    af1c:	2800      	cmp	r0, #0
    af1e:	d1d5      	bne.n	aecc <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    af20:	4b75      	ldr	r3, [pc, #468]	; (b0f8 <m2m_wifi_cb+0x294>)
    af22:	681b      	ldr	r3, [r3, #0]
    af24:	2b00      	cmp	r3, #0
    af26:	d0d1      	beq.n	aecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    af28:	a903      	add	r1, sp, #12
    af2a:	3006      	adds	r0, #6
    af2c:	4798      	blx	r3
    af2e:	e7cd      	b.n	aecc <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    af30:	2300      	movs	r3, #0
    af32:	2218      	movs	r2, #24
    af34:	a903      	add	r1, sp, #12
    af36:	0028      	movs	r0, r5
    af38:	4c6e      	ldr	r4, [pc, #440]	; (b0f4 <m2m_wifi_cb+0x290>)
    af3a:	47a0      	blx	r4
    af3c:	2800      	cmp	r0, #0
    af3e:	d1c5      	bne.n	aecc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    af40:	4b6d      	ldr	r3, [pc, #436]	; (b0f8 <m2m_wifi_cb+0x294>)
    af42:	681b      	ldr	r3, [r3, #0]
    af44:	2b00      	cmp	r3, #0
    af46:	d0c1      	beq.n	aecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    af48:	a903      	add	r1, sp, #12
    af4a:	3032      	adds	r0, #50	; 0x32
    af4c:	4798      	blx	r3
    af4e:	e7bd      	b.n	aecc <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    af50:	2264      	movs	r2, #100	; 0x64
    af52:	2100      	movs	r1, #0
    af54:	a803      	add	r0, sp, #12
    af56:	4b69      	ldr	r3, [pc, #420]	; (b0fc <m2m_wifi_cb+0x298>)
    af58:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    af5a:	2300      	movs	r3, #0
    af5c:	2264      	movs	r2, #100	; 0x64
    af5e:	a903      	add	r1, sp, #12
    af60:	0028      	movs	r0, r5
    af62:	4c64      	ldr	r4, [pc, #400]	; (b0f4 <m2m_wifi_cb+0x290>)
    af64:	47a0      	blx	r4
    af66:	2800      	cmp	r0, #0
    af68:	d1b0      	bne.n	aecc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    af6a:	4b63      	ldr	r3, [pc, #396]	; (b0f8 <m2m_wifi_cb+0x294>)
    af6c:	681b      	ldr	r3, [r3, #0]
    af6e:	2b00      	cmp	r3, #0
    af70:	d0ac      	beq.n	aecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    af72:	a903      	add	r1, sp, #12
    af74:	302f      	adds	r0, #47	; 0x2f
    af76:	4798      	blx	r3
    af78:	e7a8      	b.n	aecc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    af7a:	2300      	movs	r3, #0
    af7c:	2204      	movs	r2, #4
    af7e:	a903      	add	r1, sp, #12
    af80:	0028      	movs	r0, r5
    af82:	4c5c      	ldr	r4, [pc, #368]	; (b0f4 <m2m_wifi_cb+0x290>)
    af84:	47a0      	blx	r4
    af86:	2800      	cmp	r0, #0
    af88:	d1a0      	bne.n	aecc <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    af8a:	485d      	ldr	r0, [pc, #372]	; (b100 <m2m_wifi_cb+0x29c>)
    af8c:	4d56      	ldr	r5, [pc, #344]	; (b0e8 <m2m_wifi_cb+0x284>)
    af8e:	47a8      	blx	r5
    af90:	9c03      	ldr	r4, [sp, #12]
    af92:	0a23      	lsrs	r3, r4, #8
    af94:	20ff      	movs	r0, #255	; 0xff
    af96:	4003      	ands	r3, r0
    af98:	0c22      	lsrs	r2, r4, #16
    af9a:	4002      	ands	r2, r0
    af9c:	0e21      	lsrs	r1, r4, #24
    af9e:	4020      	ands	r0, r4
    afa0:	9000      	str	r0, [sp, #0]
    afa2:	4858      	ldr	r0, [pc, #352]	; (b104 <m2m_wifi_cb+0x2a0>)
    afa4:	47a8      	blx	r5
    afa6:	200d      	movs	r0, #13
    afa8:	4b51      	ldr	r3, [pc, #324]	; (b0f0 <m2m_wifi_cb+0x28c>)
    afaa:	4798      	blx	r3
			if (gpfAppWifiCb)
    afac:	4b52      	ldr	r3, [pc, #328]	; (b0f8 <m2m_wifi_cb+0x294>)
    afae:	681b      	ldr	r3, [r3, #0]
    afb0:	2b00      	cmp	r3, #0
    afb2:	d100      	bne.n	afb6 <m2m_wifi_cb+0x152>
    afb4:	e78a      	b.n	aecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    afb6:	2100      	movs	r1, #0
    afb8:	2034      	movs	r0, #52	; 0x34
    afba:	4798      	blx	r3
    afbc:	e786      	b.n	aecc <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    afbe:	2200      	movs	r2, #0
    afc0:	4b51      	ldr	r3, [pc, #324]	; (b108 <m2m_wifi_cb+0x2a4>)
    afc2:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    afc4:	2300      	movs	r3, #0
    afc6:	3204      	adds	r2, #4
    afc8:	a903      	add	r1, sp, #12
    afca:	0028      	movs	r0, r5
    afcc:	4c49      	ldr	r4, [pc, #292]	; (b0f4 <m2m_wifi_cb+0x290>)
    afce:	47a0      	blx	r4
    afd0:	2800      	cmp	r0, #0
    afd2:	d000      	beq.n	afd6 <m2m_wifi_cb+0x172>
    afd4:	e77a      	b.n	aecc <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    afd6:	ab03      	add	r3, sp, #12
    afd8:	781a      	ldrb	r2, [r3, #0]
    afda:	4b4c      	ldr	r3, [pc, #304]	; (b10c <m2m_wifi_cb+0x2a8>)
    afdc:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    afde:	4b46      	ldr	r3, [pc, #280]	; (b0f8 <m2m_wifi_cb+0x294>)
    afe0:	681b      	ldr	r3, [r3, #0]
    afe2:	2b00      	cmp	r3, #0
    afe4:	d100      	bne.n	afe8 <m2m_wifi_cb+0x184>
    afe6:	e771      	b.n	aecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    afe8:	a903      	add	r1, sp, #12
    afea:	3011      	adds	r0, #17
    afec:	4798      	blx	r3
    afee:	e76d      	b.n	aecc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    aff0:	2300      	movs	r3, #0
    aff2:	222c      	movs	r2, #44	; 0x2c
    aff4:	a903      	add	r1, sp, #12
    aff6:	0028      	movs	r0, r5
    aff8:	4c3e      	ldr	r4, [pc, #248]	; (b0f4 <m2m_wifi_cb+0x290>)
    affa:	47a0      	blx	r4
    affc:	2800      	cmp	r0, #0
    affe:	d000      	beq.n	b002 <m2m_wifi_cb+0x19e>
    b000:	e764      	b.n	aecc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    b002:	4b3d      	ldr	r3, [pc, #244]	; (b0f8 <m2m_wifi_cb+0x294>)
    b004:	681b      	ldr	r3, [r3, #0]
    b006:	2b00      	cmp	r3, #0
    b008:	d100      	bne.n	b00c <m2m_wifi_cb+0x1a8>
    b00a:	e75f      	b.n	aecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    b00c:	a903      	add	r1, sp, #12
    b00e:	3013      	adds	r0, #19
    b010:	4798      	blx	r3
    b012:	e75b      	b.n	aecc <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    b014:	2300      	movs	r3, #0
    b016:	2204      	movs	r2, #4
    b018:	a91c      	add	r1, sp, #112	; 0x70
    b01a:	0028      	movs	r0, r5
    b01c:	4c35      	ldr	r4, [pc, #212]	; (b0f4 <m2m_wifi_cb+0x290>)
    b01e:	47a0      	blx	r4
    b020:	2800      	cmp	r0, #0
    b022:	d000      	beq.n	b026 <m2m_wifi_cb+0x1c2>
    b024:	e752      	b.n	aecc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    b026:	4b34      	ldr	r3, [pc, #208]	; (b0f8 <m2m_wifi_cb+0x294>)
    b028:	681b      	ldr	r3, [r3, #0]
    b02a:	2b00      	cmp	r3, #0
    b02c:	d100      	bne.n	b030 <m2m_wifi_cb+0x1cc>
    b02e:	e74d      	b.n	aecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    b030:	a91c      	add	r1, sp, #112	; 0x70
    b032:	3004      	adds	r0, #4
    b034:	4798      	blx	r3
    b036:	e749      	b.n	aecc <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    b038:	2300      	movs	r3, #0
    b03a:	2204      	movs	r2, #4
    b03c:	a91c      	add	r1, sp, #112	; 0x70
    b03e:	0028      	movs	r0, r5
    b040:	4c2c      	ldr	r4, [pc, #176]	; (b0f4 <m2m_wifi_cb+0x290>)
    b042:	47a0      	blx	r4
    b044:	2800      	cmp	r0, #0
    b046:	d000      	beq.n	b04a <m2m_wifi_cb+0x1e6>
    b048:	e740      	b.n	aecc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    b04a:	4b2b      	ldr	r3, [pc, #172]	; (b0f8 <m2m_wifi_cb+0x294>)
    b04c:	681b      	ldr	r3, [r3, #0]
    b04e:	2b00      	cmp	r3, #0
    b050:	d100      	bne.n	b054 <m2m_wifi_cb+0x1f0>
    b052:	e73b      	b.n	aecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    b054:	a91c      	add	r1, sp, #112	; 0x70
    b056:	3065      	adds	r0, #101	; 0x65
    b058:	4798      	blx	r3
    b05a:	e737      	b.n	aecc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    b05c:	2301      	movs	r3, #1
    b05e:	2264      	movs	r2, #100	; 0x64
    b060:	a903      	add	r1, sp, #12
    b062:	0028      	movs	r0, r5
    b064:	4c23      	ldr	r4, [pc, #140]	; (b0f4 <m2m_wifi_cb+0x290>)
    b066:	47a0      	blx	r4
    b068:	2800      	cmp	r0, #0
    b06a:	d000      	beq.n	b06e <m2m_wifi_cb+0x20a>
    b06c:	e72e      	b.n	aecc <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    b06e:	4b22      	ldr	r3, [pc, #136]	; (b0f8 <m2m_wifi_cb+0x294>)
    b070:	681b      	ldr	r3, [r3, #0]
    b072:	2b00      	cmp	r3, #0
    b074:	d100      	bne.n	b078 <m2m_wifi_cb+0x214>
    b076:	e729      	b.n	aecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    b078:	a903      	add	r1, sp, #12
    b07a:	3009      	adds	r0, #9
    b07c:	4798      	blx	r3
    b07e:	e725      	b.n	aecc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    b080:	2301      	movs	r3, #1
    b082:	2204      	movs	r2, #4
    b084:	a903      	add	r1, sp, #12
    b086:	0028      	movs	r0, r5
    b088:	4c1a      	ldr	r4, [pc, #104]	; (b0f4 <m2m_wifi_cb+0x290>)
    b08a:	47a0      	blx	r4
    b08c:	2800      	cmp	r0, #0
    b08e:	d000      	beq.n	b092 <m2m_wifi_cb+0x22e>
    b090:	e71c      	b.n	aecc <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    b092:	4b19      	ldr	r3, [pc, #100]	; (b0f8 <m2m_wifi_cb+0x294>)
    b094:	681b      	ldr	r3, [r3, #0]
    b096:	2b00      	cmp	r3, #0
    b098:	d100      	bne.n	b09c <m2m_wifi_cb+0x238>
    b09a:	e717      	b.n	aecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    b09c:	a903      	add	r1, sp, #12
    b09e:	302a      	adds	r0, #42	; 0x2a
    b0a0:	4798      	blx	r3
    b0a2:	e713      	b.n	aecc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    b0a4:	2300      	movs	r3, #0
    b0a6:	2208      	movs	r2, #8
    b0a8:	a903      	add	r1, sp, #12
    b0aa:	0028      	movs	r0, r5
    b0ac:	4c11      	ldr	r4, [pc, #68]	; (b0f4 <m2m_wifi_cb+0x290>)
    b0ae:	47a0      	blx	r4
    b0b0:	2800      	cmp	r0, #0
    b0b2:	d000      	beq.n	b0b6 <m2m_wifi_cb+0x252>
    b0b4:	e70a      	b.n	aecc <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    b0b6:	ab03      	add	r3, sp, #12
    b0b8:	889a      	ldrh	r2, [r3, #4]
    b0ba:	0028      	movs	r0, r5
    b0bc:	3008      	adds	r0, #8
    b0be:	2301      	movs	r3, #1
    b0c0:	9903      	ldr	r1, [sp, #12]
    b0c2:	4c0c      	ldr	r4, [pc, #48]	; (b0f4 <m2m_wifi_cb+0x290>)
    b0c4:	47a0      	blx	r4
    b0c6:	2800      	cmp	r0, #0
    b0c8:	d000      	beq.n	b0cc <m2m_wifi_cb+0x268>
    b0ca:	e6ff      	b.n	aecc <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    b0cc:	4b0a      	ldr	r3, [pc, #40]	; (b0f8 <m2m_wifi_cb+0x294>)
    b0ce:	681b      	ldr	r3, [r3, #0]
    b0d0:	2b00      	cmp	r3, #0
    b0d2:	d100      	bne.n	b0d6 <m2m_wifi_cb+0x272>
    b0d4:	e6fa      	b.n	aecc <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    b0d6:	a903      	add	r1, sp, #12
    b0d8:	3020      	adds	r0, #32
    b0da:	4798      	blx	r3
    b0dc:	e6f6      	b.n	aecc <m2m_wifi_cb+0x68>
    b0de:	46c0      	nop			; (mov r8, r8)
    b0e0:	00015578 	.word	0x00015578
    b0e4:	000151a8 	.word	0x000151a8
    b0e8:	00010b61 	.word	0x00010b61
    b0ec:	000156bc 	.word	0x000156bc
    b0f0:	00010b95 	.word	0x00010b95
    b0f4:	0000aba5 	.word	0x0000aba5
    b0f8:	20002754 	.word	0x20002754
    b0fc:	0000a479 	.word	0x0000a479
    b100:	000154d8 	.word	0x000154d8
    b104:	0001569c 	.word	0x0001569c
    b108:	20002759 	.word	0x20002759
    b10c:	20002758 	.word	0x20002758

0000b110 <m2m_validate_ap_parameters>:
_EXIT0:
	return ret;
}

static sint8 m2m_validate_ap_parameters(CONST tstrM2MAPConfig* pstrM2MAPConfig)
{
    b110:	b510      	push	{r4, lr}
    b112:	1e04      	subs	r4, r0, #0
	sint8 s8Ret = M2M_SUCCESS;
	/* Check for incoming pointer */
	if(pstrM2MAPConfig == NULL)
    b114:	d02b      	beq.n	b16e <m2m_validate_ap_parameters+0x5e>
		M2M_ERR("INVALID POINTER\n");
		s8Ret = M2M_ERR_FAIL;
		goto ERR1;
	}
	/* Check for SSID */
	if((m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) >= M2M_MAX_SSID_LEN))
    b116:	4b67      	ldr	r3, [pc, #412]	; (b2b4 <m2m_validate_ap_parameters+0x1a4>)
    b118:	4798      	blx	r3
    b11a:	2800      	cmp	r0, #0
    b11c:	d036      	beq.n	b18c <m2m_validate_ap_parameters+0x7c>
    b11e:	0020      	movs	r0, r4
    b120:	4b64      	ldr	r3, [pc, #400]	; (b2b4 <m2m_validate_ap_parameters+0x1a4>)
    b122:	4798      	blx	r3
    b124:	2820      	cmp	r0, #32
    b126:	d831      	bhi.n	b18c <m2m_validate_ap_parameters+0x7c>
		M2M_ERR("INVALID SSID\n");
		s8Ret = M2M_ERR_FAIL;
		goto ERR1;
	}
	/* Check for Channel */
	if(pstrM2MAPConfig->u8ListenChannel > M2M_WIFI_CH_14 || pstrM2MAPConfig->u8ListenChannel < M2M_WIFI_CH_1)
    b128:	2321      	movs	r3, #33	; 0x21
    b12a:	5ce3      	ldrb	r3, [r4, r3]
    b12c:	3b01      	subs	r3, #1
    b12e:	2b0d      	cmp	r3, #13
    b130:	d83b      	bhi.n	b1aa <m2m_validate_ap_parameters+0x9a>
		M2M_ERR("INVALID CH\n");
		s8Ret = M2M_ERR_FAIL;
		goto ERR1;
	}
	/* Check for DHCP Server IP address */
	if(!(pstrM2MAPConfig->au8DHCPServerIP[0] || pstrM2MAPConfig->au8DHCPServerIP[1]))
    b132:	2341      	movs	r3, #65	; 0x41
    b134:	5ce3      	ldrb	r3, [r4, r3]
    b136:	2b00      	cmp	r3, #0
    b138:	d107      	bne.n	b14a <m2m_validate_ap_parameters+0x3a>
    b13a:	3342      	adds	r3, #66	; 0x42
    b13c:	5ce3      	ldrb	r3, [r4, r3]
    b13e:	2b00      	cmp	r3, #0
    b140:	d103      	bne.n	b14a <m2m_validate_ap_parameters+0x3a>
	{
		if(!(pstrM2MAPConfig->au8DHCPServerIP[2]))
    b142:	3343      	adds	r3, #67	; 0x43
    b144:	5ce3      	ldrb	r3, [r4, r3]
    b146:	2b00      	cmp	r3, #0
    b148:	d03e      	beq.n	b1c8 <m2m_validate_ap_parameters+0xb8>
			s8Ret = M2M_ERR_FAIL;
			goto ERR1;
		}
	}
	/* Check for Security */
	if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_OPEN)
    b14a:	233f      	movs	r3, #63	; 0x3f
    b14c:	5ce3      	ldrb	r3, [r4, r3]
    b14e:	2b01      	cmp	r3, #1
    b150:	d100      	bne.n	b154 <m2m_validate_ap_parameters+0x44>
    b152:	e0ac      	b.n	b2ae <m2m_validate_ap_parameters+0x19e>
	{
		goto ERR1;
	}
	else if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_WEP)
    b154:	2b03      	cmp	r3, #3
    b156:	d046      	beq.n	b1e6 <m2m_validate_ap_parameters+0xd6>
			M2M_ERR("INVALID KEY SIZE\n");
			s8Ret = M2M_ERR_FAIL;
			goto ERR1;
		}
	}
	else if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_WPA_PSK)
    b158:	2b02      	cmp	r3, #2
    b15a:	d000      	beq.n	b15e <m2m_validate_ap_parameters+0x4e>
    b15c:	e098      	b.n	b290 <m2m_validate_ap_parameters+0x180>
	{
		/* Check for WPA Key size */
		if(	((pstrM2MAPConfig->u8KeySz + 1) < M2M_MIN_PSK_LEN) || ((pstrM2MAPConfig->u8KeySz + 1) > M2M_MAX_PSK_LEN))
    b15e:	3321      	adds	r3, #33	; 0x21
    b160:	5ce3      	ldrb	r3, [r4, r3]
    b162:	3b08      	subs	r3, #8
	sint8 s8Ret = M2M_SUCCESS;
    b164:	2000      	movs	r0, #0
		if(	((pstrM2MAPConfig->u8KeySz + 1) < M2M_MIN_PSK_LEN) || ((pstrM2MAPConfig->u8KeySz + 1) > M2M_MAX_PSK_LEN))
    b166:	2b38      	cmp	r3, #56	; 0x38
    b168:	d900      	bls.n	b16c <m2m_validate_ap_parameters+0x5c>
    b16a:	e082      	b.n	b272 <m2m_validate_ap_parameters+0x162>
		goto ERR1;
	}
	
ERR1:
	return s8Ret;
}
    b16c:	bd10      	pop	{r4, pc}
		M2M_ERR("INVALID POINTER\n");
    b16e:	229e      	movs	r2, #158	; 0x9e
    b170:	0052      	lsls	r2, r2, #1
    b172:	4951      	ldr	r1, [pc, #324]	; (b2b8 <m2m_validate_ap_parameters+0x1a8>)
    b174:	4851      	ldr	r0, [pc, #324]	; (b2bc <m2m_validate_ap_parameters+0x1ac>)
    b176:	4b52      	ldr	r3, [pc, #328]	; (b2c0 <m2m_validate_ap_parameters+0x1b0>)
    b178:	4798      	blx	r3
    b17a:	4852      	ldr	r0, [pc, #328]	; (b2c4 <m2m_validate_ap_parameters+0x1b4>)
    b17c:	4b52      	ldr	r3, [pc, #328]	; (b2c8 <m2m_validate_ap_parameters+0x1b8>)
    b17e:	4798      	blx	r3
    b180:	200d      	movs	r0, #13
    b182:	4b52      	ldr	r3, [pc, #328]	; (b2cc <m2m_validate_ap_parameters+0x1bc>)
    b184:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
    b186:	200c      	movs	r0, #12
    b188:	4240      	negs	r0, r0
		goto ERR1;
    b18a:	e7ef      	b.n	b16c <m2m_validate_ap_parameters+0x5c>
		M2M_ERR("INVALID SSID\n");
    b18c:	2244      	movs	r2, #68	; 0x44
    b18e:	32ff      	adds	r2, #255	; 0xff
    b190:	4949      	ldr	r1, [pc, #292]	; (b2b8 <m2m_validate_ap_parameters+0x1a8>)
    b192:	484a      	ldr	r0, [pc, #296]	; (b2bc <m2m_validate_ap_parameters+0x1ac>)
    b194:	4b4a      	ldr	r3, [pc, #296]	; (b2c0 <m2m_validate_ap_parameters+0x1b0>)
    b196:	4798      	blx	r3
    b198:	484d      	ldr	r0, [pc, #308]	; (b2d0 <m2m_validate_ap_parameters+0x1c0>)
    b19a:	4b4b      	ldr	r3, [pc, #300]	; (b2c8 <m2m_validate_ap_parameters+0x1b8>)
    b19c:	4798      	blx	r3
    b19e:	200d      	movs	r0, #13
    b1a0:	4b4a      	ldr	r3, [pc, #296]	; (b2cc <m2m_validate_ap_parameters+0x1bc>)
    b1a2:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
    b1a4:	200c      	movs	r0, #12
    b1a6:	4240      	negs	r0, r0
		goto ERR1;
    b1a8:	e7e0      	b.n	b16c <m2m_validate_ap_parameters+0x5c>
		M2M_ERR("INVALID CH\n");
    b1aa:	22a5      	movs	r2, #165	; 0xa5
    b1ac:	0052      	lsls	r2, r2, #1
    b1ae:	4942      	ldr	r1, [pc, #264]	; (b2b8 <m2m_validate_ap_parameters+0x1a8>)
    b1b0:	4842      	ldr	r0, [pc, #264]	; (b2bc <m2m_validate_ap_parameters+0x1ac>)
    b1b2:	4b43      	ldr	r3, [pc, #268]	; (b2c0 <m2m_validate_ap_parameters+0x1b0>)
    b1b4:	4798      	blx	r3
    b1b6:	4847      	ldr	r0, [pc, #284]	; (b2d4 <m2m_validate_ap_parameters+0x1c4>)
    b1b8:	4b43      	ldr	r3, [pc, #268]	; (b2c8 <m2m_validate_ap_parameters+0x1b8>)
    b1ba:	4798      	blx	r3
    b1bc:	200d      	movs	r0, #13
    b1be:	4b43      	ldr	r3, [pc, #268]	; (b2cc <m2m_validate_ap_parameters+0x1bc>)
    b1c0:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
    b1c2:	200c      	movs	r0, #12
    b1c4:	4240      	negs	r0, r0
		goto ERR1;
    b1c6:	e7d1      	b.n	b16c <m2m_validate_ap_parameters+0x5c>
			M2M_ERR("INVALID DHCP SERVER IP\n");
    b1c8:	2254      	movs	r2, #84	; 0x54
    b1ca:	32ff      	adds	r2, #255	; 0xff
    b1cc:	493a      	ldr	r1, [pc, #232]	; (b2b8 <m2m_validate_ap_parameters+0x1a8>)
    b1ce:	483b      	ldr	r0, [pc, #236]	; (b2bc <m2m_validate_ap_parameters+0x1ac>)
    b1d0:	4b3b      	ldr	r3, [pc, #236]	; (b2c0 <m2m_validate_ap_parameters+0x1b0>)
    b1d2:	4798      	blx	r3
    b1d4:	4840      	ldr	r0, [pc, #256]	; (b2d8 <m2m_validate_ap_parameters+0x1c8>)
    b1d6:	4b3c      	ldr	r3, [pc, #240]	; (b2c8 <m2m_validate_ap_parameters+0x1b8>)
    b1d8:	4798      	blx	r3
    b1da:	200d      	movs	r0, #13
    b1dc:	4b3b      	ldr	r3, [pc, #236]	; (b2cc <m2m_validate_ap_parameters+0x1bc>)
    b1de:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
    b1e0:	200c      	movs	r0, #12
    b1e2:	4240      	negs	r0, r0
			goto ERR1;
    b1e4:	e7c2      	b.n	b16c <m2m_validate_ap_parameters+0x5c>
		if((pstrM2MAPConfig->u8KeyIndx <= 0) || (pstrM2MAPConfig->u8KeyIndx > WEP_KEY_MAX_INDEX))
    b1e6:	331f      	adds	r3, #31
    b1e8:	5ce3      	ldrb	r3, [r4, r3]
    b1ea:	3b01      	subs	r3, #1
    b1ec:	2b03      	cmp	r3, #3
    b1ee:	d814      	bhi.n	b21a <m2m_validate_ap_parameters+0x10a>
		if(	(pstrM2MAPConfig->u8KeySz != WEP_40_KEY_STRING_SIZE) &&
    b1f0:	2323      	movs	r3, #35	; 0x23
    b1f2:	5ce3      	ldrb	r3, [r4, r3]
    b1f4:	2210      	movs	r2, #16
    b1f6:	4393      	bics	r3, r2
    b1f8:	2b0a      	cmp	r3, #10
    b1fa:	d01d      	beq.n	b238 <m2m_validate_ap_parameters+0x128>
			M2M_ERR("INVALID KEY STRING SIZE\n");
    b1fc:	226c      	movs	r2, #108	; 0x6c
    b1fe:	32ff      	adds	r2, #255	; 0xff
    b200:	492d      	ldr	r1, [pc, #180]	; (b2b8 <m2m_validate_ap_parameters+0x1a8>)
    b202:	482e      	ldr	r0, [pc, #184]	; (b2bc <m2m_validate_ap_parameters+0x1ac>)
    b204:	4b2e      	ldr	r3, [pc, #184]	; (b2c0 <m2m_validate_ap_parameters+0x1b0>)
    b206:	4798      	blx	r3
    b208:	4834      	ldr	r0, [pc, #208]	; (b2dc <m2m_validate_ap_parameters+0x1cc>)
    b20a:	4b2f      	ldr	r3, [pc, #188]	; (b2c8 <m2m_validate_ap_parameters+0x1b8>)
    b20c:	4798      	blx	r3
    b20e:	200d      	movs	r0, #13
    b210:	4b2e      	ldr	r3, [pc, #184]	; (b2cc <m2m_validate_ap_parameters+0x1bc>)
    b212:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
    b214:	200c      	movs	r0, #12
    b216:	4240      	negs	r0, r0
			goto ERR1;
    b218:	e7a8      	b.n	b16c <m2m_validate_ap_parameters+0x5c>
			M2M_ERR("INVALID KEY INDEX\n");
    b21a:	22b1      	movs	r2, #177	; 0xb1
    b21c:	0052      	lsls	r2, r2, #1
    b21e:	4926      	ldr	r1, [pc, #152]	; (b2b8 <m2m_validate_ap_parameters+0x1a8>)
    b220:	4826      	ldr	r0, [pc, #152]	; (b2bc <m2m_validate_ap_parameters+0x1ac>)
    b222:	4b27      	ldr	r3, [pc, #156]	; (b2c0 <m2m_validate_ap_parameters+0x1b0>)
    b224:	4798      	blx	r3
    b226:	482e      	ldr	r0, [pc, #184]	; (b2e0 <m2m_validate_ap_parameters+0x1d0>)
    b228:	4b27      	ldr	r3, [pc, #156]	; (b2c8 <m2m_validate_ap_parameters+0x1b8>)
    b22a:	4798      	blx	r3
    b22c:	200d      	movs	r0, #13
    b22e:	4b27      	ldr	r3, [pc, #156]	; (b2cc <m2m_validate_ap_parameters+0x1bc>)
    b230:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
    b232:	200c      	movs	r0, #12
    b234:	4240      	negs	r0, r0
			goto ERR1;
    b236:	e799      	b.n	b16c <m2m_validate_ap_parameters+0x5c>
		if((m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) > WEP_104_KEY_STRING_SIZE))
    b238:	3424      	adds	r4, #36	; 0x24
    b23a:	0020      	movs	r0, r4
    b23c:	4b1d      	ldr	r3, [pc, #116]	; (b2b4 <m2m_validate_ap_parameters+0x1a4>)
    b23e:	4798      	blx	r3
    b240:	2800      	cmp	r0, #0
    b242:	d007      	beq.n	b254 <m2m_validate_ap_parameters+0x144>
    b244:	0020      	movs	r0, r4
    b246:	4b1b      	ldr	r3, [pc, #108]	; (b2b4 <m2m_validate_ap_parameters+0x1a4>)
    b248:	4798      	blx	r3
    b24a:	0003      	movs	r3, r0
	sint8 s8Ret = M2M_SUCCESS;
    b24c:	2000      	movs	r0, #0
		if((m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) > WEP_104_KEY_STRING_SIZE))
    b24e:	2b1a      	cmp	r3, #26
    b250:	d800      	bhi.n	b254 <m2m_validate_ap_parameters+0x144>
    b252:	e78b      	b.n	b16c <m2m_validate_ap_parameters+0x5c>
			M2M_ERR("INVALID KEY SIZE\n");
    b254:	22b9      	movs	r2, #185	; 0xb9
    b256:	0052      	lsls	r2, r2, #1
    b258:	4917      	ldr	r1, [pc, #92]	; (b2b8 <m2m_validate_ap_parameters+0x1a8>)
    b25a:	4818      	ldr	r0, [pc, #96]	; (b2bc <m2m_validate_ap_parameters+0x1ac>)
    b25c:	4b18      	ldr	r3, [pc, #96]	; (b2c0 <m2m_validate_ap_parameters+0x1b0>)
    b25e:	4798      	blx	r3
    b260:	4820      	ldr	r0, [pc, #128]	; (b2e4 <m2m_validate_ap_parameters+0x1d4>)
    b262:	4b19      	ldr	r3, [pc, #100]	; (b2c8 <m2m_validate_ap_parameters+0x1b8>)
    b264:	4798      	blx	r3
    b266:	200d      	movs	r0, #13
    b268:	4b18      	ldr	r3, [pc, #96]	; (b2cc <m2m_validate_ap_parameters+0x1bc>)
    b26a:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
    b26c:	200c      	movs	r0, #12
    b26e:	4240      	negs	r0, r0
			goto ERR1;
    b270:	e77c      	b.n	b16c <m2m_validate_ap_parameters+0x5c>
			M2M_ERR("INVALID WPA KEY SIZE\n");
    b272:	22be      	movs	r2, #190	; 0xbe
    b274:	0052      	lsls	r2, r2, #1
    b276:	4910      	ldr	r1, [pc, #64]	; (b2b8 <m2m_validate_ap_parameters+0x1a8>)
    b278:	4810      	ldr	r0, [pc, #64]	; (b2bc <m2m_validate_ap_parameters+0x1ac>)
    b27a:	4b11      	ldr	r3, [pc, #68]	; (b2c0 <m2m_validate_ap_parameters+0x1b0>)
    b27c:	4798      	blx	r3
    b27e:	481a      	ldr	r0, [pc, #104]	; (b2e8 <m2m_validate_ap_parameters+0x1d8>)
    b280:	4b11      	ldr	r3, [pc, #68]	; (b2c8 <m2m_validate_ap_parameters+0x1b8>)
    b282:	4798      	blx	r3
    b284:	200d      	movs	r0, #13
    b286:	4b11      	ldr	r3, [pc, #68]	; (b2cc <m2m_validate_ap_parameters+0x1bc>)
    b288:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
    b28a:	200c      	movs	r0, #12
    b28c:	4240      	negs	r0, r0
			goto ERR1;
    b28e:	e76d      	b.n	b16c <m2m_validate_ap_parameters+0x5c>
		M2M_ERR("INVALID AUTHENTICATION MODE\n");
    b290:	2284      	movs	r2, #132	; 0x84
    b292:	32ff      	adds	r2, #255	; 0xff
    b294:	4908      	ldr	r1, [pc, #32]	; (b2b8 <m2m_validate_ap_parameters+0x1a8>)
    b296:	4809      	ldr	r0, [pc, #36]	; (b2bc <m2m_validate_ap_parameters+0x1ac>)
    b298:	4b09      	ldr	r3, [pc, #36]	; (b2c0 <m2m_validate_ap_parameters+0x1b0>)
    b29a:	4798      	blx	r3
    b29c:	4813      	ldr	r0, [pc, #76]	; (b2ec <m2m_validate_ap_parameters+0x1dc>)
    b29e:	4b0a      	ldr	r3, [pc, #40]	; (b2c8 <m2m_validate_ap_parameters+0x1b8>)
    b2a0:	4798      	blx	r3
    b2a2:	200d      	movs	r0, #13
    b2a4:	4b09      	ldr	r3, [pc, #36]	; (b2cc <m2m_validate_ap_parameters+0x1bc>)
    b2a6:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
    b2a8:	200c      	movs	r0, #12
    b2aa:	4240      	negs	r0, r0
		goto ERR1;
    b2ac:	e75e      	b.n	b16c <m2m_validate_ap_parameters+0x5c>
	sint8 s8Ret = M2M_SUCCESS;
    b2ae:	2000      	movs	r0, #0
    b2b0:	e75c      	b.n	b16c <m2m_validate_ap_parameters+0x5c>
    b2b2:	46c0      	nop			; (mov r8, r8)
    b2b4:	0000a489 	.word	0x0000a489
    b2b8:	00015584 	.word	0x00015584
    b2bc:	000151a8 	.word	0x000151a8
    b2c0:	00010b61 	.word	0x00010b61
    b2c4:	000155e4 	.word	0x000155e4
    b2c8:	00010c7d 	.word	0x00010c7d
    b2cc:	00010b95 	.word	0x00010b95
    b2d0:	000155f4 	.word	0x000155f4
    b2d4:	00015604 	.word	0x00015604
    b2d8:	00015610 	.word	0x00015610
    b2dc:	0001563c 	.word	0x0001563c
    b2e0:	00015628 	.word	0x00015628
    b2e4:	00015654 	.word	0x00015654
    b2e8:	00015668 	.word	0x00015668
    b2ec:	00015680 	.word	0x00015680

0000b2f0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    b2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2f2:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    b2f4:	2201      	movs	r2, #1
    b2f6:	230f      	movs	r3, #15
    b2f8:	446b      	add	r3, sp
    b2fa:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    b2fc:	2800      	cmp	r0, #0
    b2fe:	d061      	beq.n	b3c4 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    b300:	6802      	ldr	r2, [r0, #0]
    b302:	4b32      	ldr	r3, [pc, #200]	; (b3cc <m2m_wifi_init+0xdc>)
    b304:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    b306:	2200      	movs	r2, #0
    b308:	4b31      	ldr	r3, [pc, #196]	; (b3d0 <m2m_wifi_init+0xe0>)
    b30a:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    b30c:	200f      	movs	r0, #15
    b30e:	4468      	add	r0, sp
    b310:	4b30      	ldr	r3, [pc, #192]	; (b3d4 <m2m_wifi_init+0xe4>)
    b312:	4798      	blx	r3
    b314:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    b316:	d002      	beq.n	b31e <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    b318:	0020      	movs	r0, r4
    b31a:	b00f      	add	sp, #60	; 0x3c
    b31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    b31e:	2000      	movs	r0, #0
    b320:	4b2d      	ldr	r3, [pc, #180]	; (b3d8 <m2m_wifi_init+0xe8>)
    b322:	4798      	blx	r3
    b324:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    b326:	d149      	bne.n	b3bc <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    b328:	492c      	ldr	r1, [pc, #176]	; (b3dc <m2m_wifi_init+0xec>)
    b32a:	2001      	movs	r0, #1
    b32c:	4b2c      	ldr	r3, [pc, #176]	; (b3e0 <m2m_wifi_init+0xf0>)
    b32e:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    b330:	ae04      	add	r6, sp, #16
    b332:	0030      	movs	r0, r6
    b334:	4b2b      	ldr	r3, [pc, #172]	; (b3e4 <m2m_wifi_init+0xf4>)
    b336:	4798      	blx	r3
    b338:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    b33a:	482b      	ldr	r0, [pc, #172]	; (b3e8 <m2m_wifi_init+0xf8>)
    b33c:	4d2b      	ldr	r5, [pc, #172]	; (b3ec <m2m_wifi_init+0xfc>)
    b33e:	47a8      	blx	r5
    b340:	79b3      	ldrb	r3, [r6, #6]
    b342:	7972      	ldrb	r2, [r6, #5]
    b344:	7931      	ldrb	r1, [r6, #4]
    b346:	8c30      	ldrh	r0, [r6, #32]
    b348:	9000      	str	r0, [sp, #0]
    b34a:	4829      	ldr	r0, [pc, #164]	; (b3f0 <m2m_wifi_init+0x100>)
    b34c:	47a8      	blx	r5
    b34e:	200d      	movs	r0, #13
    b350:	4f28      	ldr	r7, [pc, #160]	; (b3f4 <m2m_wifi_init+0x104>)
    b352:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    b354:	4824      	ldr	r0, [pc, #144]	; (b3e8 <m2m_wifi_init+0xf8>)
    b356:	47a8      	blx	r5
    b358:	2226      	movs	r2, #38	; 0x26
    b35a:	446a      	add	r2, sp
    b35c:	211a      	movs	r1, #26
    b35e:	4469      	add	r1, sp
    b360:	4825      	ldr	r0, [pc, #148]	; (b3f8 <m2m_wifi_init+0x108>)
    b362:	47a8      	blx	r5
    b364:	200d      	movs	r0, #13
    b366:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    b368:	481f      	ldr	r0, [pc, #124]	; (b3e8 <m2m_wifi_init+0xf8>)
    b36a:	47a8      	blx	r5
    b36c:	7a73      	ldrb	r3, [r6, #9]
    b36e:	7a32      	ldrb	r2, [r6, #8]
    b370:	79f1      	ldrb	r1, [r6, #7]
    b372:	4822      	ldr	r0, [pc, #136]	; (b3fc <m2m_wifi_init+0x10c>)
    b374:	47a8      	blx	r5
    b376:	200d      	movs	r0, #13
    b378:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    b37a:	481b      	ldr	r0, [pc, #108]	; (b3e8 <m2m_wifi_init+0xf8>)
    b37c:	47a8      	blx	r5
    b37e:	2304      	movs	r3, #4
    b380:	2205      	movs	r2, #5
    b382:	2113      	movs	r1, #19
    b384:	481e      	ldr	r0, [pc, #120]	; (b400 <m2m_wifi_init+0x110>)
    b386:	47a8      	blx	r5
    b388:	200d      	movs	r0, #13
    b38a:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    b38c:	4816      	ldr	r0, [pc, #88]	; (b3e8 <m2m_wifi_init+0xf8>)
    b38e:	47a8      	blx	r5
    b390:	4a1c      	ldr	r2, [pc, #112]	; (b404 <m2m_wifi_init+0x114>)
    b392:	491d      	ldr	r1, [pc, #116]	; (b408 <m2m_wifi_init+0x118>)
    b394:	481d      	ldr	r0, [pc, #116]	; (b40c <m2m_wifi_init+0x11c>)
    b396:	47a8      	blx	r5
    b398:	200d      	movs	r0, #13
    b39a:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    b39c:	0023      	movs	r3, r4
    b39e:	330d      	adds	r3, #13
    b3a0:	d1ba      	bne.n	b318 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    b3a2:	22e8      	movs	r2, #232	; 0xe8
    b3a4:	32ff      	adds	r2, #255	; 0xff
    b3a6:	491a      	ldr	r1, [pc, #104]	; (b410 <m2m_wifi_init+0x120>)
    b3a8:	481a      	ldr	r0, [pc, #104]	; (b414 <m2m_wifi_init+0x124>)
    b3aa:	4b10      	ldr	r3, [pc, #64]	; (b3ec <m2m_wifi_init+0xfc>)
    b3ac:	4798      	blx	r3
    b3ae:	481a      	ldr	r0, [pc, #104]	; (b418 <m2m_wifi_init+0x128>)
    b3b0:	4b1a      	ldr	r3, [pc, #104]	; (b41c <m2m_wifi_init+0x12c>)
    b3b2:	4798      	blx	r3
    b3b4:	200d      	movs	r0, #13
    b3b6:	4b0f      	ldr	r3, [pc, #60]	; (b3f4 <m2m_wifi_init+0x104>)
    b3b8:	4798      	blx	r3
    b3ba:	e7ad      	b.n	b318 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    b3bc:	2000      	movs	r0, #0
    b3be:	4b18      	ldr	r3, [pc, #96]	; (b420 <m2m_wifi_init+0x130>)
    b3c0:	4798      	blx	r3
    b3c2:	e7a9      	b.n	b318 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    b3c4:	240c      	movs	r4, #12
    b3c6:	4264      	negs	r4, r4
    b3c8:	e7a6      	b.n	b318 <m2m_wifi_init+0x28>
    b3ca:	46c0      	nop			; (mov r8, r8)
    b3cc:	20002754 	.word	0x20002754
    b3d0:	20002759 	.word	0x20002759
    b3d4:	0000c099 	.word	0x0000c099
    b3d8:	0000ad11 	.word	0x0000ad11
    b3dc:	0000ae65 	.word	0x0000ae65
    b3e0:	0000ac8d 	.word	0x0000ac8d
    b3e4:	0000bfb5 	.word	0x0000bfb5
    b3e8:	000154d8 	.word	0x000154d8
    b3ec:	00010b61 	.word	0x00010b61
    b3f0:	00015778 	.word	0x00015778
    b3f4:	00010b95 	.word	0x00010b95
    b3f8:	000157a0 	.word	0x000157a0
    b3fc:	000157bc 	.word	0x000157bc
    b400:	000157e0 	.word	0x000157e0
    b404:	000157f8 	.word	0x000157f8
    b408:	00015804 	.word	0x00015804
    b40c:	00015810 	.word	0x00015810
    b410:	000155a0 	.word	0x000155a0
    b414:	000151a8 	.word	0x000151a8
    b418:	00015828 	.word	0x00015828
    b41c:	00010c7d 	.word	0x00010c7d
    b420:	0000c17d 	.word	0x0000c17d

0000b424 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    b424:	b510      	push	{r4, lr}
	return hif_handle_isr();
    b426:	4b01      	ldr	r3, [pc, #4]	; (b42c <m2m_wifi_handle_events+0x8>)
    b428:	4798      	blx	r3
}
    b42a:	bd10      	pop	{r4, pc}
    b42c:	0000a7bd 	.word	0x0000a7bd

0000b430 <m2m_wifi_default_connect>:

sint8 m2m_wifi_default_connect(void)
{
    b430:	b510      	push	{r4, lr}
    b432:	b084      	sub	sp, #16
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
    b434:	2300      	movs	r3, #0
    b436:	9302      	str	r3, [sp, #8]
    b438:	9301      	str	r3, [sp, #4]
    b43a:	9300      	str	r3, [sp, #0]
    b43c:	2200      	movs	r2, #0
    b43e:	2129      	movs	r1, #41	; 0x29
    b440:	2001      	movs	r0, #1
    b442:	4c02      	ldr	r4, [pc, #8]	; (b44c <m2m_wifi_default_connect+0x1c>)
    b444:	47a0      	blx	r4
}
    b446:	b004      	add	sp, #16
    b448:	bd10      	pop	{r4, pc}
    b44a:	46c0      	nop			; (mov r8, r8)
    b44c:	0000a58d 	.word	0x0000a58d

0000b450 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    b450:	b5f0      	push	{r4, r5, r6, r7, lr}
    b452:	46ce      	mov	lr, r9
    b454:	4647      	mov	r7, r8
    b456:	b580      	push	{r7, lr}
    b458:	b0a3      	sub	sp, #140	; 0x8c
    b45a:	9005      	str	r0, [sp, #20]
    b45c:	000c      	movs	r4, r1
    b45e:	0015      	movs	r5, r2
    b460:	001f      	movs	r7, r3
    b462:	ab2a      	add	r3, sp, #168	; 0xa8
    b464:	881b      	ldrh	r3, [r3, #0]
    b466:	4699      	mov	r9, r3
    b468:	ab2b      	add	r3, sp, #172	; 0xac
    b46a:	781b      	ldrb	r3, [r3, #0]
    b46c:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    b46e:	2a01      	cmp	r2, #1
    b470:	d003      	beq.n	b47a <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    b472:	2f00      	cmp	r7, #0
    b474:	d040      	beq.n	b4f8 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    b476:	2a02      	cmp	r2, #2
    b478:	d04c      	beq.n	b514 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    b47a:	1e63      	subs	r3, r4, #1
    b47c:	2b1f      	cmp	r3, #31
    b47e:	d900      	bls.n	b482 <m2m_wifi_connect_sc+0x32>
    b480:	e078      	b.n	b574 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    b482:	464b      	mov	r3, r9
    b484:	3b01      	subs	r3, #1
    b486:	b29b      	uxth	r3, r3
    b488:	2b0d      	cmp	r3, #13
    b48a:	d903      	bls.n	b494 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    b48c:	464b      	mov	r3, r9
    b48e:	2bff      	cmp	r3, #255	; 0xff
    b490:	d000      	beq.n	b494 <m2m_wifi_connect_sc+0x44>
    b492:	e07e      	b.n	b592 <m2m_wifi_connect_sc+0x142>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    b494:	ae07      	add	r6, sp, #28
    b496:	0022      	movs	r2, r4
    b498:	9905      	ldr	r1, [sp, #20]
    b49a:	205a      	movs	r0, #90	; 0x5a
    b49c:	ab02      	add	r3, sp, #8
    b49e:	469c      	mov	ip, r3
    b4a0:	4460      	add	r0, ip
    b4a2:	4b79      	ldr	r3, [pc, #484]	; (b688 <m2m_wifi_connect_sc+0x238>)
    b4a4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    b4a6:	1934      	adds	r4, r6, r4
    b4a8:	3446      	adds	r4, #70	; 0x46
    b4aa:	2300      	movs	r3, #0
    b4ac:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    b4ae:	3344      	adds	r3, #68	; 0x44
    b4b0:	464a      	mov	r2, r9
    b4b2:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    b4b4:	4643      	mov	r3, r8
    b4b6:	1e5a      	subs	r2, r3, #1
    b4b8:	4193      	sbcs	r3, r2
    b4ba:	2267      	movs	r2, #103	; 0x67
    b4bc:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    b4be:	2341      	movs	r3, #65	; 0x41
    b4c0:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    b4c2:	2d03      	cmp	r5, #3
    b4c4:	d100      	bne.n	b4c8 <m2m_wifi_connect_sc+0x78>
    b4c6:	e072      	b.n	b5ae <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    b4c8:	2d02      	cmp	r5, #2
    b4ca:	d100      	bne.n	b4ce <m2m_wifi_connect_sc+0x7e>
    b4cc:	e0ac      	b.n	b628 <m2m_wifi_connect_sc+0x1d8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    b4ce:	2d04      	cmp	r5, #4
    b4d0:	d100      	bne.n	b4d4 <m2m_wifi_connect_sc+0x84>
    b4d2:	e0c4      	b.n	b65e <m2m_wifi_connect_sc+0x20e>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    b4d4:	2d01      	cmp	r5, #1
    b4d6:	d000      	beq.n	b4da <m2m_wifi_connect_sc+0x8a>
    b4d8:	e0c7      	b.n	b66a <m2m_wifi_connect_sc+0x21a>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    b4da:	2300      	movs	r3, #0
    b4dc:	9302      	str	r3, [sp, #8]
    b4de:	9301      	str	r3, [sp, #4]
    b4e0:	9300      	str	r3, [sp, #0]
    b4e2:	336c      	adds	r3, #108	; 0x6c
    b4e4:	aa07      	add	r2, sp, #28
    b4e6:	2128      	movs	r1, #40	; 0x28
    b4e8:	2001      	movs	r0, #1
    b4ea:	4c68      	ldr	r4, [pc, #416]	; (b68c <m2m_wifi_connect_sc+0x23c>)
    b4ec:	47a0      	blx	r4

ERR1:
	return ret;
}
    b4ee:	b023      	add	sp, #140	; 0x8c
    b4f0:	bc0c      	pop	{r2, r3}
    b4f2:	4690      	mov	r8, r2
    b4f4:	4699      	mov	r9, r3
    b4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    b4f8:	4a65      	ldr	r2, [pc, #404]	; (b690 <m2m_wifi_connect_sc+0x240>)
    b4fa:	4966      	ldr	r1, [pc, #408]	; (b694 <m2m_wifi_connect_sc+0x244>)
    b4fc:	4866      	ldr	r0, [pc, #408]	; (b698 <m2m_wifi_connect_sc+0x248>)
    b4fe:	4b67      	ldr	r3, [pc, #412]	; (b69c <m2m_wifi_connect_sc+0x24c>)
    b500:	4798      	blx	r3
    b502:	4867      	ldr	r0, [pc, #412]	; (b6a0 <m2m_wifi_connect_sc+0x250>)
    b504:	4b67      	ldr	r3, [pc, #412]	; (b6a4 <m2m_wifi_connect_sc+0x254>)
    b506:	4798      	blx	r3
    b508:	200d      	movs	r0, #13
    b50a:	4b67      	ldr	r3, [pc, #412]	; (b6a8 <m2m_wifi_connect_sc+0x258>)
    b50c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    b50e:	200c      	movs	r0, #12
    b510:	4240      	negs	r0, r0
			goto ERR1;
    b512:	e7ec      	b.n	b4ee <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    b514:	0038      	movs	r0, r7
    b516:	4b65      	ldr	r3, [pc, #404]	; (b6ac <m2m_wifi_connect_sc+0x25c>)
    b518:	4798      	blx	r3
    b51a:	2840      	cmp	r0, #64	; 0x40
    b51c:	d1ad      	bne.n	b47a <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    b51e:	783b      	ldrb	r3, [r7, #0]
    b520:	001a      	movs	r2, r3
    b522:	3a30      	subs	r2, #48	; 0x30
    b524:	2a36      	cmp	r2, #54	; 0x36
    b526:	d817      	bhi.n	b558 <m2m_wifi_connect_sc+0x108>
    b528:	3a0a      	subs	r2, #10
    b52a:	2a06      	cmp	r2, #6
    b52c:	d914      	bls.n	b558 <m2m_wifi_connect_sc+0x108>
    b52e:	3b47      	subs	r3, #71	; 0x47
    b530:	2b19      	cmp	r3, #25
    b532:	d911      	bls.n	b558 <m2m_wifi_connect_sc+0x108>
    b534:	1c7a      	adds	r2, r7, #1
    b536:	0038      	movs	r0, r7
    b538:	3040      	adds	r0, #64	; 0x40
    b53a:	7813      	ldrb	r3, [r2, #0]
    b53c:	0019      	movs	r1, r3
    b53e:	3930      	subs	r1, #48	; 0x30
    b540:	2936      	cmp	r1, #54	; 0x36
    b542:	d809      	bhi.n	b558 <m2m_wifi_connect_sc+0x108>
    b544:	390a      	subs	r1, #10
    b546:	2906      	cmp	r1, #6
    b548:	d906      	bls.n	b558 <m2m_wifi_connect_sc+0x108>
    b54a:	3b47      	subs	r3, #71	; 0x47
    b54c:	2b19      	cmp	r3, #25
    b54e:	d903      	bls.n	b558 <m2m_wifi_connect_sc+0x108>
    b550:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    b552:	4282      	cmp	r2, r0
    b554:	d1f1      	bne.n	b53a <m2m_wifi_connect_sc+0xea>
    b556:	e790      	b.n	b47a <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    b558:	4a55      	ldr	r2, [pc, #340]	; (b6b0 <m2m_wifi_connect_sc+0x260>)
    b55a:	494e      	ldr	r1, [pc, #312]	; (b694 <m2m_wifi_connect_sc+0x244>)
    b55c:	484e      	ldr	r0, [pc, #312]	; (b698 <m2m_wifi_connect_sc+0x248>)
    b55e:	4b4f      	ldr	r3, [pc, #316]	; (b69c <m2m_wifi_connect_sc+0x24c>)
    b560:	4798      	blx	r3
    b562:	4854      	ldr	r0, [pc, #336]	; (b6b4 <m2m_wifi_connect_sc+0x264>)
    b564:	4b4f      	ldr	r3, [pc, #316]	; (b6a4 <m2m_wifi_connect_sc+0x254>)
    b566:	4798      	blx	r3
    b568:	200d      	movs	r0, #13
    b56a:	4b4f      	ldr	r3, [pc, #316]	; (b6a8 <m2m_wifi_connect_sc+0x258>)
    b56c:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    b56e:	200c      	movs	r0, #12
    b570:	4240      	negs	r0, r0
					goto ERR1;
    b572:	e7bc      	b.n	b4ee <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    b574:	228c      	movs	r2, #140	; 0x8c
    b576:	0092      	lsls	r2, r2, #2
    b578:	4946      	ldr	r1, [pc, #280]	; (b694 <m2m_wifi_connect_sc+0x244>)
    b57a:	4847      	ldr	r0, [pc, #284]	; (b698 <m2m_wifi_connect_sc+0x248>)
    b57c:	4b47      	ldr	r3, [pc, #284]	; (b69c <m2m_wifi_connect_sc+0x24c>)
    b57e:	4798      	blx	r3
    b580:	484d      	ldr	r0, [pc, #308]	; (b6b8 <m2m_wifi_connect_sc+0x268>)
    b582:	4b48      	ldr	r3, [pc, #288]	; (b6a4 <m2m_wifi_connect_sc+0x254>)
    b584:	4798      	blx	r3
    b586:	200d      	movs	r0, #13
    b588:	4b47      	ldr	r3, [pc, #284]	; (b6a8 <m2m_wifi_connect_sc+0x258>)
    b58a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    b58c:	200c      	movs	r0, #12
    b58e:	4240      	negs	r0, r0
		goto ERR1;
    b590:	e7ad      	b.n	b4ee <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    b592:	4a4a      	ldr	r2, [pc, #296]	; (b6bc <m2m_wifi_connect_sc+0x26c>)
    b594:	493f      	ldr	r1, [pc, #252]	; (b694 <m2m_wifi_connect_sc+0x244>)
    b596:	4840      	ldr	r0, [pc, #256]	; (b698 <m2m_wifi_connect_sc+0x248>)
    b598:	4b40      	ldr	r3, [pc, #256]	; (b69c <m2m_wifi_connect_sc+0x24c>)
    b59a:	4798      	blx	r3
    b59c:	4848      	ldr	r0, [pc, #288]	; (b6c0 <m2m_wifi_connect_sc+0x270>)
    b59e:	4b41      	ldr	r3, [pc, #260]	; (b6a4 <m2m_wifi_connect_sc+0x254>)
    b5a0:	4798      	blx	r3
    b5a2:	200d      	movs	r0, #13
    b5a4:	4b40      	ldr	r3, [pc, #256]	; (b6a8 <m2m_wifi_connect_sc+0x258>)
    b5a6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    b5a8:	200c      	movs	r0, #12
    b5aa:	4240      	negs	r0, r0
			goto ERR1;
    b5ac:	e79f      	b.n	b4ee <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    b5ae:	783b      	ldrb	r3, [r7, #0]
    b5b0:	3b01      	subs	r3, #1
    b5b2:	b2db      	uxtb	r3, r3
    b5b4:	aa07      	add	r2, sp, #28
    b5b6:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    b5b8:	2b03      	cmp	r3, #3
    b5ba:	d817      	bhi.n	b5ec <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    b5bc:	787a      	ldrb	r2, [r7, #1]
    b5be:	1e51      	subs	r1, r2, #1
    b5c0:	ab07      	add	r3, sp, #28
    b5c2:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    b5c4:	2310      	movs	r3, #16
    b5c6:	0011      	movs	r1, r2
    b5c8:	4399      	bics	r1, r3
    b5ca:	290b      	cmp	r1, #11
    b5cc:	d01e      	beq.n	b60c <m2m_wifi_connect_sc+0x1bc>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    b5ce:	4a3d      	ldr	r2, [pc, #244]	; (b6c4 <m2m_wifi_connect_sc+0x274>)
    b5d0:	4930      	ldr	r1, [pc, #192]	; (b694 <m2m_wifi_connect_sc+0x244>)
    b5d2:	4831      	ldr	r0, [pc, #196]	; (b698 <m2m_wifi_connect_sc+0x248>)
    b5d4:	4c31      	ldr	r4, [pc, #196]	; (b69c <m2m_wifi_connect_sc+0x24c>)
    b5d6:	47a0      	blx	r4
    b5d8:	ab07      	add	r3, sp, #28
    b5da:	7859      	ldrb	r1, [r3, #1]
    b5dc:	483a      	ldr	r0, [pc, #232]	; (b6c8 <m2m_wifi_connect_sc+0x278>)
    b5de:	47a0      	blx	r4
    b5e0:	200d      	movs	r0, #13
    b5e2:	4b31      	ldr	r3, [pc, #196]	; (b6a8 <m2m_wifi_connect_sc+0x258>)
    b5e4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    b5e6:	200c      	movs	r0, #12
    b5e8:	4240      	negs	r0, r0
			goto ERR1;
    b5ea:	e780      	b.n	b4ee <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    b5ec:	2294      	movs	r2, #148	; 0x94
    b5ee:	0092      	lsls	r2, r2, #2
    b5f0:	4928      	ldr	r1, [pc, #160]	; (b694 <m2m_wifi_connect_sc+0x244>)
    b5f2:	4829      	ldr	r0, [pc, #164]	; (b698 <m2m_wifi_connect_sc+0x248>)
    b5f4:	4c29      	ldr	r4, [pc, #164]	; (b69c <m2m_wifi_connect_sc+0x24c>)
    b5f6:	47a0      	blx	r4
    b5f8:	ab07      	add	r3, sp, #28
    b5fa:	7819      	ldrb	r1, [r3, #0]
    b5fc:	4833      	ldr	r0, [pc, #204]	; (b6cc <m2m_wifi_connect_sc+0x27c>)
    b5fe:	47a0      	blx	r4
    b600:	200d      	movs	r0, #13
    b602:	4b29      	ldr	r3, [pc, #164]	; (b6a8 <m2m_wifi_connect_sc+0x258>)
    b604:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    b606:	200c      	movs	r0, #12
    b608:	4240      	negs	r0, r0
			goto ERR1;
    b60a:	e770      	b.n	b4ee <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    b60c:	1cb9      	adds	r1, r7, #2
    b60e:	2016      	movs	r0, #22
    b610:	ab02      	add	r3, sp, #8
    b612:	469c      	mov	ip, r3
    b614:	4460      	add	r0, ip
    b616:	4b1c      	ldr	r3, [pc, #112]	; (b688 <m2m_wifi_connect_sc+0x238>)
    b618:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    b61a:	787b      	ldrb	r3, [r7, #1]
    b61c:	aa07      	add	r2, sp, #28
    b61e:	4694      	mov	ip, r2
    b620:	4463      	add	r3, ip
    b622:	2200      	movs	r2, #0
    b624:	709a      	strb	r2, [r3, #2]
    b626:	e758      	b.n	b4da <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    b628:	0038      	movs	r0, r7
    b62a:	4b20      	ldr	r3, [pc, #128]	; (b6ac <m2m_wifi_connect_sc+0x25c>)
    b62c:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    b62e:	1e43      	subs	r3, r0, #1
    b630:	b29b      	uxth	r3, r3
    b632:	2b3f      	cmp	r3, #63	; 0x3f
    b634:	d805      	bhi.n	b642 <m2m_wifi_connect_sc+0x1f2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    b636:	1c42      	adds	r2, r0, #1
    b638:	0039      	movs	r1, r7
    b63a:	a807      	add	r0, sp, #28
    b63c:	4b12      	ldr	r3, [pc, #72]	; (b688 <m2m_wifi_connect_sc+0x238>)
    b63e:	4798      	blx	r3
    b640:	e74b      	b.n	b4da <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    b642:	4a23      	ldr	r2, [pc, #140]	; (b6d0 <m2m_wifi_connect_sc+0x280>)
    b644:	4913      	ldr	r1, [pc, #76]	; (b694 <m2m_wifi_connect_sc+0x244>)
    b646:	4814      	ldr	r0, [pc, #80]	; (b698 <m2m_wifi_connect_sc+0x248>)
    b648:	4b14      	ldr	r3, [pc, #80]	; (b69c <m2m_wifi_connect_sc+0x24c>)
    b64a:	4798      	blx	r3
    b64c:	4821      	ldr	r0, [pc, #132]	; (b6d4 <m2m_wifi_connect_sc+0x284>)
    b64e:	4b15      	ldr	r3, [pc, #84]	; (b6a4 <m2m_wifi_connect_sc+0x254>)
    b650:	4798      	blx	r3
    b652:	200d      	movs	r0, #13
    b654:	4b14      	ldr	r3, [pc, #80]	; (b6a8 <m2m_wifi_connect_sc+0x258>)
    b656:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    b658:	200c      	movs	r0, #12
    b65a:	4240      	negs	r0, r0
			goto ERR1;
    b65c:	e747      	b.n	b4ee <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    b65e:	223e      	movs	r2, #62	; 0x3e
    b660:	0039      	movs	r1, r7
    b662:	a807      	add	r0, sp, #28
    b664:	4b08      	ldr	r3, [pc, #32]	; (b688 <m2m_wifi_connect_sc+0x238>)
    b666:	4798      	blx	r3
    b668:	e737      	b.n	b4da <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    b66a:	4a1b      	ldr	r2, [pc, #108]	; (b6d8 <m2m_wifi_connect_sc+0x288>)
    b66c:	4909      	ldr	r1, [pc, #36]	; (b694 <m2m_wifi_connect_sc+0x244>)
    b66e:	480a      	ldr	r0, [pc, #40]	; (b698 <m2m_wifi_connect_sc+0x248>)
    b670:	4b0a      	ldr	r3, [pc, #40]	; (b69c <m2m_wifi_connect_sc+0x24c>)
    b672:	4798      	blx	r3
    b674:	4819      	ldr	r0, [pc, #100]	; (b6dc <m2m_wifi_connect_sc+0x28c>)
    b676:	4b0b      	ldr	r3, [pc, #44]	; (b6a4 <m2m_wifi_connect_sc+0x254>)
    b678:	4798      	blx	r3
    b67a:	200d      	movs	r0, #13
    b67c:	4b0a      	ldr	r3, [pc, #40]	; (b6a8 <m2m_wifi_connect_sc+0x258>)
    b67e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    b680:	200c      	movs	r0, #12
    b682:	4240      	negs	r0, r0
		goto ERR1;
    b684:	e733      	b.n	b4ee <m2m_wifi_connect_sc+0x9e>
    b686:	46c0      	nop			; (mov r8, r8)
    b688:	0000a465 	.word	0x0000a465
    b68c:	0000a58d 	.word	0x0000a58d
    b690:	0000021a 	.word	0x0000021a
    b694:	000155b0 	.word	0x000155b0
    b698:	000151a8 	.word	0x000151a8
    b69c:	00010b61 	.word	0x00010b61
    b6a0:	000156d0 	.word	0x000156d0
    b6a4:	00010c7d 	.word	0x00010c7d
    b6a8:	00010b95 	.word	0x00010b95
    b6ac:	0000a489 	.word	0x0000a489
    b6b0:	00000226 	.word	0x00000226
    b6b4:	000156e4 	.word	0x000156e4
    b6b8:	000156f0 	.word	0x000156f0
    b6bc:	00000239 	.word	0x00000239
    b6c0:	00015704 	.word	0x00015704
    b6c4:	00000257 	.word	0x00000257
    b6c8:	0001572c 	.word	0x0001572c
    b6cc:	00015710 	.word	0x00015710
    b6d0:	00000266 	.word	0x00000266
    b6d4:	00015748 	.word	0x00015748
    b6d8:	00000276 	.word	0x00000276
    b6dc:	00015764 	.word	0x00015764

0000b6e0 <m2m_wifi_connect>:
{
    b6e0:	b530      	push	{r4, r5, lr}
    b6e2:	b083      	sub	sp, #12
    b6e4:	ac06      	add	r4, sp, #24
    b6e6:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    b6e8:	2500      	movs	r5, #0
    b6ea:	9501      	str	r5, [sp, #4]
    b6ec:	9400      	str	r4, [sp, #0]
    b6ee:	4c02      	ldr	r4, [pc, #8]	; (b6f8 <m2m_wifi_connect+0x18>)
    b6f0:	47a0      	blx	r4
}
    b6f2:	b003      	add	sp, #12
    b6f4:	bd30      	pop	{r4, r5, pc}
    b6f6:	46c0      	nop			; (mov r8, r8)
    b6f8:	0000b451 	.word	0x0000b451

0000b6fc <m2m_wifi_set_mac_address>:
sint8 m2m_wifi_disconnect(void)
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0,0);
}
sint8 m2m_wifi_set_mac_address(uint8 au8MacAddress[6])
{
    b6fc:	b510      	push	{r4, lr}
    b6fe:	b086      	sub	sp, #24
    b700:	0001      	movs	r1, r0
	tstrM2mSetMacAddress strTmp;
	m2m_memcpy((uint8*) strTmp.au8Mac, (uint8*) au8MacAddress, 6);
    b702:	2206      	movs	r2, #6
    b704:	a804      	add	r0, sp, #16
    b706:	4b07      	ldr	r3, [pc, #28]	; (b724 <m2m_wifi_set_mac_address+0x28>)
    b708:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_MAC_ADDRESS,
    b70a:	2300      	movs	r3, #0
    b70c:	9302      	str	r3, [sp, #8]
    b70e:	9301      	str	r3, [sp, #4]
    b710:	9300      	str	r3, [sp, #0]
    b712:	3308      	adds	r3, #8
    b714:	aa04      	add	r2, sp, #16
    b716:	2102      	movs	r1, #2
    b718:	2001      	movs	r0, #1
    b71a:	4c03      	ldr	r4, [pc, #12]	; (b728 <m2m_wifi_set_mac_address+0x2c>)
    b71c:	47a0      	blx	r4
		(uint8*) &strTmp, sizeof(tstrM2mSetMacAddress), NULL, 0,0);
}
    b71e:	b006      	add	sp, #24
    b720:	bd10      	pop	{r4, pc}
    b722:	46c0      	nop			; (mov r8, r8)
    b724:	0000a465 	.word	0x0000a465
    b728:	0000a58d 	.word	0x0000a58d

0000b72c <m2m_wifi_get_otp_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_otp_mac_address(uint8 *pu8MacAddr, uint8* pu8IsValid)
{
    b72c:	b570      	push	{r4, r5, r6, lr}
    b72e:	0004      	movs	r4, r0
    b730:	000d      	movs	r5, r1
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    b732:	4b07      	ldr	r3, [pc, #28]	; (b750 <m2m_wifi_get_otp_mac_address+0x24>)
    b734:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
    b736:	2800      	cmp	r0, #0
    b738:	d000      	beq.n	b73c <m2m_wifi_get_otp_mac_address+0x10>
		{
			ret = hif_chip_sleep();
		}
	}
	return ret;
}
    b73a:	bd70      	pop	{r4, r5, r6, pc}
		ret = nmi_get_otp_mac_address(pu8MacAddr, pu8IsValid);
    b73c:	0029      	movs	r1, r5
    b73e:	0020      	movs	r0, r4
    b740:	4b04      	ldr	r3, [pc, #16]	; (b754 <m2m_wifi_get_otp_mac_address+0x28>)
    b742:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    b744:	2800      	cmp	r0, #0
    b746:	d1f8      	bne.n	b73a <m2m_wifi_get_otp_mac_address+0xe>
			ret = hif_chip_sleep();
    b748:	4b03      	ldr	r3, [pc, #12]	; (b758 <m2m_wifi_get_otp_mac_address+0x2c>)
    b74a:	4798      	blx	r3
    b74c:	e7f5      	b.n	b73a <m2m_wifi_get_otp_mac_address+0xe>
    b74e:	46c0      	nop			; (mov r8, r8)
    b750:	0000a4fd 	.word	0x0000a4fd
    b754:	0000bd99 	.word	0x0000bd99
    b758:	0000a555 	.word	0x0000a555

0000b75c <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
    b75c:	b510      	push	{r4, lr}
    b75e:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    b760:	4b06      	ldr	r3, [pc, #24]	; (b77c <m2m_wifi_get_mac_address+0x20>)
    b762:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
    b764:	2800      	cmp	r0, #0
    b766:	d000      	beq.n	b76a <m2m_wifi_get_mac_address+0xe>
			ret = hif_chip_sleep();
		}
	}

	return ret;
}
    b768:	bd10      	pop	{r4, pc}
		ret = nmi_get_mac_address(pu8MacAddr);
    b76a:	0020      	movs	r0, r4
    b76c:	4b04      	ldr	r3, [pc, #16]	; (b780 <m2m_wifi_get_mac_address+0x24>)
    b76e:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    b770:	2800      	cmp	r0, #0
    b772:	d1f9      	bne.n	b768 <m2m_wifi_get_mac_address+0xc>
			ret = hif_chip_sleep();
    b774:	4b03      	ldr	r3, [pc, #12]	; (b784 <m2m_wifi_get_mac_address+0x28>)
    b776:	4798      	blx	r3
    b778:	e7f6      	b.n	b768 <m2m_wifi_get_mac_address+0xc>
    b77a:	46c0      	nop			; (mov r8, r8)
    b77c:	0000a4fd 	.word	0x0000a4fd
    b780:	0000be2d 	.word	0x0000be2d
    b784:	0000a555 	.word	0x0000a555

0000b788 <m2m_wifi_set_device_name>:
			Length of the device name.
@return		The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
@warning	The Function called once after initialization. 
*/
sint8 m2m_wifi_set_device_name(uint8 *pu8DeviceName, uint8 u8DeviceNameLength)
{
    b788:	b510      	push	{r4, lr}
    b78a:	b090      	sub	sp, #64	; 0x40
    b78c:	1c0a      	adds	r2, r1, #0
    b78e:	2930      	cmp	r1, #48	; 0x30
    b790:	d900      	bls.n	b794 <m2m_wifi_set_device_name+0xc>
    b792:	2230      	movs	r2, #48	; 0x30
	if(u8DeviceNameLength >= M2M_DEVICE_NAME_MAX)
	{
		u8DeviceNameLength = M2M_DEVICE_NAME_MAX;
	}
	//pu8DeviceName[u8DeviceNameLength] = '\0';
	u8DeviceNameLength ++;
    b794:	3201      	adds	r2, #1
	m2m_memcpy(strDeviceName.au8DeviceName, pu8DeviceName, u8DeviceNameLength);
    b796:	b2d2      	uxtb	r2, r2
    b798:	0001      	movs	r1, r0
    b79a:	a804      	add	r0, sp, #16
    b79c:	4b06      	ldr	r3, [pc, #24]	; (b7b8 <m2m_wifi_set_device_name+0x30>)
    b79e:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_DEVICE_NAME,
    b7a0:	2300      	movs	r3, #0
    b7a2:	9302      	str	r3, [sp, #8]
    b7a4:	9301      	str	r3, [sp, #4]
    b7a6:	9300      	str	r3, [sp, #0]
    b7a8:	3330      	adds	r3, #48	; 0x30
    b7aa:	aa04      	add	r2, sp, #16
    b7ac:	2107      	movs	r1, #7
    b7ae:	2001      	movs	r0, #1
    b7b0:	4c02      	ldr	r4, [pc, #8]	; (b7bc <m2m_wifi_set_device_name+0x34>)
    b7b2:	47a0      	blx	r4
		(uint8*)&strDeviceName, sizeof(tstrM2MDeviceNameConfig), NULL, 0,0);
}
    b7b4:	b010      	add	sp, #64	; 0x40
    b7b6:	bd10      	pop	{r4, pc}
    b7b8:	0000a465 	.word	0x0000a465
    b7bc:	0000a58d 	.word	0x0000a58d

0000b7c0 <m2m_wifi_get_firmware_version>:
sint8 m2m_wifi_get_firmware_version(tstrM2mRev *pstrRev)
{
    b7c0:	b570      	push	{r4, r5, r6, lr}
    b7c2:	0005      	movs	r5, r0
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    b7c4:	4b06      	ldr	r3, [pc, #24]	; (b7e0 <m2m_wifi_get_firmware_version+0x20>)
    b7c6:	4798      	blx	r3
    b7c8:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    b7ca:	d001      	beq.n	b7d0 <m2m_wifi_get_firmware_version+0x10>
	{
    	ret = nm_get_firmware_full_info(pstrRev);
		hif_chip_sleep();
	}
	return ret;
}
    b7cc:	0020      	movs	r0, r4
    b7ce:	bd70      	pop	{r4, r5, r6, pc}
    	ret = nm_get_firmware_full_info(pstrRev);
    b7d0:	0028      	movs	r0, r5
    b7d2:	4b04      	ldr	r3, [pc, #16]	; (b7e4 <m2m_wifi_get_firmware_version+0x24>)
    b7d4:	4798      	blx	r3
    b7d6:	0004      	movs	r4, r0
		hif_chip_sleep();
    b7d8:	4b03      	ldr	r3, [pc, #12]	; (b7e8 <m2m_wifi_get_firmware_version+0x28>)
    b7da:	4798      	blx	r3
    b7dc:	e7f6      	b.n	b7cc <m2m_wifi_get_firmware_version+0xc>
    b7de:	46c0      	nop			; (mov r8, r8)
    b7e0:	0000a4fd 	.word	0x0000a4fd
    b7e4:	0000bfb5 	.word	0x0000bfb5
    b7e8:	0000a555 	.word	0x0000a555

0000b7ec <m2m_wifi_start_provision_mode>:
	return s8Ret;
}
#endif

sint8 m2m_wifi_start_provision_mode(tstrM2MAPConfig *pstrAPConfig, char *pcHttpServerDomainName, uint8 bEnableHttpRedirect)
{
    b7ec:	b570      	push	{r4, r5, r6, lr}
    b7ee:	b0b8      	sub	sp, #224	; 0xe0
    b7f0:	0004      	movs	r4, r0
    b7f2:	000d      	movs	r5, r1
    b7f4:	0016      	movs	r6, r2
	sint8	s8Ret = M2M_ERR_FAIL;

	if((pstrAPConfig != NULL))
    b7f6:	2800      	cmp	r0, #0
    b7f8:	d036      	beq.n	b868 <m2m_wifi_start_provision_mode+0x7c>
	{
		tstrM2MProvisionModeConfig	strProvConfig;
		if(M2M_SUCCESS == m2m_validate_ap_parameters(pstrAPConfig))
    b7fa:	4b1d      	ldr	r3, [pc, #116]	; (b870 <m2m_wifi_start_provision_mode+0x84>)
    b7fc:	4798      	blx	r3
    b7fe:	2800      	cmp	r0, #0
    b800:	d003      	beq.n	b80a <m2m_wifi_start_provision_mode+0x1e>
	sint8	s8Ret = M2M_ERR_FAIL;
    b802:	200c      	movs	r0, #12
    b804:	4240      	negs	r0, r0
			/*goto ERR1;*/
		}
	}
ERR1:
	return s8Ret;
}
    b806:	b038      	add	sp, #224	; 0xe0
    b808:	bd70      	pop	{r4, r5, r6, pc}
			m2m_memcpy((uint8*)&strProvConfig.strApConfig, (uint8*)pstrAPConfig, sizeof(tstrM2MAPConfig));
    b80a:	2288      	movs	r2, #136	; 0x88
    b80c:	0021      	movs	r1, r4
    b80e:	a805      	add	r0, sp, #20
    b810:	4b18      	ldr	r3, [pc, #96]	; (b874 <m2m_wifi_start_provision_mode+0x88>)
    b812:	4798      	blx	r3
			if((m2m_strlen((uint8 *)pcHttpServerDomainName) <= 0) || (NULL == pcHttpServerDomainName))
    b814:	0028      	movs	r0, r5
    b816:	4b18      	ldr	r3, [pc, #96]	; (b878 <m2m_wifi_start_provision_mode+0x8c>)
    b818:	4798      	blx	r3
    b81a:	2800      	cmp	r0, #0
    b81c:	d016      	beq.n	b84c <m2m_wifi_start_provision_mode+0x60>
    b81e:	2d00      	cmp	r5, #0
    b820:	d014      	beq.n	b84c <m2m_wifi_start_provision_mode+0x60>
			m2m_memcpy((uint8*)strProvConfig.acHttpServerDomainName, (uint8*)pcHttpServerDomainName, 64);
    b822:	ac05      	add	r4, sp, #20
    b824:	2240      	movs	r2, #64	; 0x40
    b826:	0029      	movs	r1, r5
    b828:	a827      	add	r0, sp, #156	; 0x9c
    b82a:	4b12      	ldr	r3, [pc, #72]	; (b874 <m2m_wifi_start_provision_mode+0x88>)
    b82c:	4798      	blx	r3
			strProvConfig.u8EnableRedirect = bEnableHttpRedirect;
    b82e:	23c8      	movs	r3, #200	; 0xc8
    b830:	54e6      	strb	r6, [r4, r3]
			gu8scanInProgress = 0;
    b832:	2300      	movs	r3, #0
    b834:	4a11      	ldr	r2, [pc, #68]	; (b87c <m2m_wifi_start_provision_mode+0x90>)
    b836:	7013      	strb	r3, [r2, #0]
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_START_PROVISION_MODE | M2M_REQ_DATA_PKT, 
    b838:	9302      	str	r3, [sp, #8]
    b83a:	9301      	str	r3, [sp, #4]
    b83c:	9300      	str	r3, [sp, #0]
    b83e:	33cc      	adds	r3, #204	; 0xcc
    b840:	0022      	movs	r2, r4
    b842:	2188      	movs	r1, #136	; 0x88
    b844:	2001      	movs	r0, #1
    b846:	4c0e      	ldr	r4, [pc, #56]	; (b880 <m2m_wifi_start_provision_mode+0x94>)
    b848:	47a0      	blx	r4
    b84a:	e7dc      	b.n	b806 <m2m_wifi_start_provision_mode+0x1a>
				M2M_ERR("INVALID DOMAIN NAME\n");
    b84c:	4a0d      	ldr	r2, [pc, #52]	; (b884 <m2m_wifi_start_provision_mode+0x98>)
    b84e:	490e      	ldr	r1, [pc, #56]	; (b888 <m2m_wifi_start_provision_mode+0x9c>)
    b850:	480e      	ldr	r0, [pc, #56]	; (b88c <m2m_wifi_start_provision_mode+0xa0>)
    b852:	4b0f      	ldr	r3, [pc, #60]	; (b890 <m2m_wifi_start_provision_mode+0xa4>)
    b854:	4798      	blx	r3
    b856:	480f      	ldr	r0, [pc, #60]	; (b894 <m2m_wifi_start_provision_mode+0xa8>)
    b858:	4b0f      	ldr	r3, [pc, #60]	; (b898 <m2m_wifi_start_provision_mode+0xac>)
    b85a:	4798      	blx	r3
    b85c:	200d      	movs	r0, #13
    b85e:	4b0f      	ldr	r3, [pc, #60]	; (b89c <m2m_wifi_start_provision_mode+0xb0>)
    b860:	4798      	blx	r3
	sint8	s8Ret = M2M_ERR_FAIL;
    b862:	200c      	movs	r0, #12
    b864:	4240      	negs	r0, r0
    b866:	e7ce      	b.n	b806 <m2m_wifi_start_provision_mode+0x1a>
    b868:	200c      	movs	r0, #12
    b86a:	4240      	negs	r0, r0
    b86c:	e7cb      	b.n	b806 <m2m_wifi_start_provision_mode+0x1a>
    b86e:	46c0      	nop			; (mov r8, r8)
    b870:	0000b111 	.word	0x0000b111
    b874:	0000a465 	.word	0x0000a465
    b878:	0000a489 	.word	0x0000a489
    b87c:	20002759 	.word	0x20002759
    b880:	0000a58d 	.word	0x0000a58d
    b884:	000004b2 	.word	0x000004b2
    b888:	000155c4 	.word	0x000155c4
    b88c:	000151a8 	.word	0x000151a8
    b890:	00010b61 	.word	0x00010b61
    b894:	00015844 	.word	0x00015844
    b898:	00010c7d 	.word	0x00010c7d
    b89c:	00010b95 	.word	0x00010b95

0000b8a0 <m2m_wifi_get_sytem_time>:
 * @note         get the system time from the sntp client
 *		         using the API \ref m2m_wifi_get_sytem_time.
 * @return        The function returns @ref M2M_SUCCESS for successful operations and a negative value otherwise.
 */
sint8 m2m_wifi_get_sytem_time(void)
{
    b8a0:	b510      	push	{r4, lr}
    b8a2:	b084      	sub	sp, #16
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_GET_SYS_TIME, NULL,0, NULL, 0, 0);
    b8a4:	2300      	movs	r3, #0
    b8a6:	9302      	str	r3, [sp, #8]
    b8a8:	9301      	str	r3, [sp, #4]
    b8aa:	9300      	str	r3, [sp, #0]
    b8ac:	2200      	movs	r2, #0
    b8ae:	211a      	movs	r1, #26
    b8b0:	2001      	movs	r0, #1
    b8b2:	4c02      	ldr	r4, [pc, #8]	; (b8bc <m2m_wifi_get_sytem_time+0x1c>)
    b8b4:	47a0      	blx	r4
}
    b8b6:	b004      	add	sp, #16
    b8b8:	bd10      	pop	{r4, pc}
    b8ba:	46c0      	nop			; (mov r8, r8)
    b8bc:	0000a58d 	.word	0x0000a58d

0000b8c0 <m2m_wifi_enable_sntp>:

sint8 m2m_wifi_enable_sntp(uint8 bEnable)
{
    b8c0:	b510      	push	{r4, lr}
    b8c2:	b084      	sub	sp, #16
	uint8	u8Req;

	u8Req = bEnable ? M2M_WIFI_REQ_ENABLE_SNTP_CLIENT : M2M_WIFI_REQ_DISABLE_SNTP_CLIENT;
    b8c4:	4241      	negs	r1, r0
    b8c6:	4141      	adcs	r1, r0
    b8c8:	310c      	adds	r1, #12
	return hif_send(M2M_REQ_GROUP_WIFI, u8Req, NULL, 0, NULL, 0, 0);
    b8ca:	2300      	movs	r3, #0
    b8cc:	9302      	str	r3, [sp, #8]
    b8ce:	9301      	str	r3, [sp, #4]
    b8d0:	9300      	str	r3, [sp, #0]
    b8d2:	2200      	movs	r2, #0
    b8d4:	2001      	movs	r0, #1
    b8d6:	4c02      	ldr	r4, [pc, #8]	; (b8e0 <m2m_wifi_enable_sntp+0x20>)
    b8d8:	47a0      	blx	r4
}
    b8da:	b004      	add	sp, #16
    b8dc:	bd10      	pop	{r4, pc}
    b8de:	46c0      	nop			; (mov r8, r8)
    b8e0:	0000a58d 	.word	0x0000a58d

0000b8e4 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    b8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b8e6:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    b8e8:	2580      	movs	r5, #128	; 0x80
    b8ea:	006d      	lsls	r5, r5, #1
    b8ec:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    b8ee:	24a5      	movs	r4, #165	; 0xa5
    b8f0:	0164      	lsls	r4, r4, #5
    b8f2:	4f08      	ldr	r7, [pc, #32]	; (b914 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    b8f4:	4e08      	ldr	r6, [pc, #32]	; (b918 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    b8f6:	0029      	movs	r1, r5
    b8f8:	0020      	movs	r0, r4
    b8fa:	47b8      	blx	r7
			uint32 reg = 0;
    b8fc:	2300      	movs	r3, #0
    b8fe:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    b900:	a901      	add	r1, sp, #4
    b902:	0020      	movs	r0, r4
    b904:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    b906:	2800      	cmp	r0, #0
    b908:	d1f5      	bne.n	b8f6 <chip_apply_conf+0x12>
				if(reg == val32)
    b90a:	9b01      	ldr	r3, [sp, #4]
    b90c:	429d      	cmp	r5, r3
    b90e:	d1f2      	bne.n	b8f6 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    b910:	b003      	add	sp, #12
    b912:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b914:	0000bed9 	.word	0x0000bed9
    b918:	0000becd 	.word	0x0000becd

0000b91c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    b91c:	b500      	push	{lr}
    b91e:	b083      	sub	sp, #12
	uint32 reg = 0;
    b920:	2300      	movs	r3, #0
    b922:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    b924:	a901      	add	r1, sp, #4
    b926:	4811      	ldr	r0, [pc, #68]	; (b96c <enable_interrupts+0x50>)
    b928:	4b11      	ldr	r3, [pc, #68]	; (b970 <enable_interrupts+0x54>)
    b92a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    b92c:	2800      	cmp	r0, #0
    b92e:	d001      	beq.n	b934 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    b930:	b003      	add	sp, #12
    b932:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    b934:	2180      	movs	r1, #128	; 0x80
    b936:	0049      	lsls	r1, r1, #1
    b938:	9b01      	ldr	r3, [sp, #4]
    b93a:	4319      	orrs	r1, r3
    b93c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    b93e:	480b      	ldr	r0, [pc, #44]	; (b96c <enable_interrupts+0x50>)
    b940:	4b0c      	ldr	r3, [pc, #48]	; (b974 <enable_interrupts+0x58>)
    b942:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    b944:	2800      	cmp	r0, #0
    b946:	d1f3      	bne.n	b930 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    b948:	a901      	add	r1, sp, #4
    b94a:	20d0      	movs	r0, #208	; 0xd0
    b94c:	0140      	lsls	r0, r0, #5
    b94e:	4b08      	ldr	r3, [pc, #32]	; (b970 <enable_interrupts+0x54>)
    b950:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    b952:	2800      	cmp	r0, #0
    b954:	d1ec      	bne.n	b930 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    b956:	2180      	movs	r1, #128	; 0x80
    b958:	0249      	lsls	r1, r1, #9
    b95a:	9b01      	ldr	r3, [sp, #4]
    b95c:	4319      	orrs	r1, r3
    b95e:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    b960:	20d0      	movs	r0, #208	; 0xd0
    b962:	0140      	lsls	r0, r0, #5
    b964:	4b03      	ldr	r3, [pc, #12]	; (b974 <enable_interrupts+0x58>)
    b966:	4798      	blx	r3
    b968:	e7e2      	b.n	b930 <enable_interrupts+0x14>
    b96a:	46c0      	nop			; (mov r8, r8)
    b96c:	00001408 	.word	0x00001408
    b970:	0000becd 	.word	0x0000becd
    b974:	0000bed9 	.word	0x0000bed9

0000b978 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    b978:	b510      	push	{r4, lr}
    b97a:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    b97c:	4b28      	ldr	r3, [pc, #160]	; (ba20 <nmi_get_chipid+0xa8>)
    b97e:	681c      	ldr	r4, [r3, #0]
    b980:	2c00      	cmp	r4, #0
    b982:	d004      	beq.n	b98e <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    b984:	4b26      	ldr	r3, [pc, #152]	; (ba20 <nmi_get_chipid+0xa8>)
    b986:	681c      	ldr	r4, [r3, #0]
}
    b988:	0020      	movs	r0, r4
    b98a:	b002      	add	sp, #8
    b98c:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    b98e:	0019      	movs	r1, r3
    b990:	2080      	movs	r0, #128	; 0x80
    b992:	0140      	lsls	r0, r0, #5
    b994:	4b23      	ldr	r3, [pc, #140]	; (ba24 <nmi_get_chipid+0xac>)
    b996:	4798      	blx	r3
    b998:	2800      	cmp	r0, #0
    b99a:	d003      	beq.n	b9a4 <nmi_get_chipid+0x2c>
			chipid = 0;
    b99c:	2200      	movs	r2, #0
    b99e:	4b20      	ldr	r3, [pc, #128]	; (ba20 <nmi_get_chipid+0xa8>)
    b9a0:	601a      	str	r2, [r3, #0]
			return 0;
    b9a2:	e7f1      	b.n	b988 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    b9a4:	a901      	add	r1, sp, #4
    b9a6:	4820      	ldr	r0, [pc, #128]	; (ba28 <nmi_get_chipid+0xb0>)
    b9a8:	4b1e      	ldr	r3, [pc, #120]	; (ba24 <nmi_get_chipid+0xac>)
    b9aa:	4798      	blx	r3
    b9ac:	2800      	cmp	r0, #0
    b9ae:	d003      	beq.n	b9b8 <nmi_get_chipid+0x40>
			chipid = 0;
    b9b0:	2200      	movs	r2, #0
    b9b2:	4b1b      	ldr	r3, [pc, #108]	; (ba20 <nmi_get_chipid+0xa8>)
    b9b4:	601a      	str	r2, [r3, #0]
			return 0;
    b9b6:	e7e7      	b.n	b988 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    b9b8:	4b19      	ldr	r3, [pc, #100]	; (ba20 <nmi_get_chipid+0xa8>)
    b9ba:	681b      	ldr	r3, [r3, #0]
    b9bc:	4a1b      	ldr	r2, [pc, #108]	; (ba2c <nmi_get_chipid+0xb4>)
    b9be:	4293      	cmp	r3, r2
    b9c0:	d00e      	beq.n	b9e0 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    b9c2:	4a1b      	ldr	r2, [pc, #108]	; (ba30 <nmi_get_chipid+0xb8>)
    b9c4:	4293      	cmp	r3, r2
    b9c6:	d012      	beq.n	b9ee <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    b9c8:	4a1a      	ldr	r2, [pc, #104]	; (ba34 <nmi_get_chipid+0xbc>)
    b9ca:	4293      	cmp	r3, r2
    b9cc:	d01c      	beq.n	ba08 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    b9ce:	4914      	ldr	r1, [pc, #80]	; (ba20 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    b9d0:	4a19      	ldr	r2, [pc, #100]	; (ba38 <nmi_get_chipid+0xc0>)
    b9d2:	680b      	ldr	r3, [r1, #0]
    b9d4:	401a      	ands	r2, r3
		chipid |= 0x050000;
    b9d6:	23a0      	movs	r3, #160	; 0xa0
    b9d8:	02db      	lsls	r3, r3, #11
    b9da:	4313      	orrs	r3, r2
    b9dc:	600b      	str	r3, [r1, #0]
    b9de:	e7d1      	b.n	b984 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    b9e0:	9b01      	ldr	r3, [sp, #4]
    b9e2:	2b01      	cmp	r3, #1
    b9e4:	d0f3      	beq.n	b9ce <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    b9e6:	4a15      	ldr	r2, [pc, #84]	; (ba3c <nmi_get_chipid+0xc4>)
    b9e8:	4b0d      	ldr	r3, [pc, #52]	; (ba20 <nmi_get_chipid+0xa8>)
    b9ea:	601a      	str	r2, [r3, #0]
    b9ec:	e7ef      	b.n	b9ce <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    b9ee:	9b01      	ldr	r3, [sp, #4]
    b9f0:	2b03      	cmp	r3, #3
    b9f2:	d0ec      	beq.n	b9ce <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    b9f4:	2b04      	cmp	r3, #4
    b9f6:	d003      	beq.n	ba00 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    b9f8:	4a11      	ldr	r2, [pc, #68]	; (ba40 <nmi_get_chipid+0xc8>)
    b9fa:	4b09      	ldr	r3, [pc, #36]	; (ba20 <nmi_get_chipid+0xa8>)
    b9fc:	601a      	str	r2, [r3, #0]
    b9fe:	e7e6      	b.n	b9ce <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    ba00:	4a10      	ldr	r2, [pc, #64]	; (ba44 <nmi_get_chipid+0xcc>)
    ba02:	4b07      	ldr	r3, [pc, #28]	; (ba20 <nmi_get_chipid+0xa8>)
    ba04:	601a      	str	r2, [r3, #0]
    ba06:	e7e2      	b.n	b9ce <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    ba08:	4905      	ldr	r1, [pc, #20]	; (ba20 <nmi_get_chipid+0xa8>)
    ba0a:	20ec      	movs	r0, #236	; 0xec
    ba0c:	0380      	lsls	r0, r0, #14
    ba0e:	4b05      	ldr	r3, [pc, #20]	; (ba24 <nmi_get_chipid+0xac>)
    ba10:	4798      	blx	r3
    ba12:	2800      	cmp	r0, #0
    ba14:	d0db      	beq.n	b9ce <nmi_get_chipid+0x56>
			chipid = 0;
    ba16:	2200      	movs	r2, #0
    ba18:	4b01      	ldr	r3, [pc, #4]	; (ba20 <nmi_get_chipid+0xa8>)
    ba1a:	601a      	str	r2, [r3, #0]
			return 0;
    ba1c:	e7b4      	b.n	b988 <nmi_get_chipid+0x10>
    ba1e:	46c0      	nop			; (mov r8, r8)
    ba20:	2000275c 	.word	0x2000275c
    ba24:	0000becd 	.word	0x0000becd
    ba28:	000013f4 	.word	0x000013f4
    ba2c:	001002a0 	.word	0x001002a0
    ba30:	001002b0 	.word	0x001002b0
    ba34:	001000f0 	.word	0x001000f0
    ba38:	fff0ffff 	.word	0xfff0ffff
    ba3c:	001002a1 	.word	0x001002a1
    ba40:	001002b2 	.word	0x001002b2
    ba44:	001002b1 	.word	0x001002b1

0000ba48 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    ba48:	b530      	push	{r4, r5, lr}
    ba4a:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    ba4c:	4c16      	ldr	r4, [pc, #88]	; (baa8 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    ba4e:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    ba50:	a901      	add	r1, sp, #4
    ba52:	2010      	movs	r0, #16
    ba54:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    ba56:	2800      	cmp	r0, #0
    ba58:	d11c      	bne.n	ba94 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    ba5a:	9b01      	ldr	r3, [sp, #4]
    ba5c:	422b      	tst	r3, r5
    ba5e:	d1f7      	bne.n	ba50 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    ba60:	a901      	add	r1, sp, #4
    ba62:	3001      	adds	r0, #1
    ba64:	4b10      	ldr	r3, [pc, #64]	; (baa8 <chip_sleep+0x60>)
    ba66:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    ba68:	2800      	cmp	r0, #0
    ba6a:	d113      	bne.n	ba94 <chip_sleep+0x4c>
	if(reg & NBIT1)
    ba6c:	9901      	ldr	r1, [sp, #4]
    ba6e:	078b      	lsls	r3, r1, #30
    ba70:	d507      	bpl.n	ba82 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    ba72:	2302      	movs	r3, #2
    ba74:	4399      	bics	r1, r3
    ba76:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    ba78:	3001      	adds	r0, #1
    ba7a:	4b0c      	ldr	r3, [pc, #48]	; (baac <chip_sleep+0x64>)
    ba7c:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    ba7e:	2800      	cmp	r0, #0
    ba80:	d108      	bne.n	ba94 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    ba82:	a901      	add	r1, sp, #4
    ba84:	200b      	movs	r0, #11
    ba86:	4b08      	ldr	r3, [pc, #32]	; (baa8 <chip_sleep+0x60>)
    ba88:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    ba8a:	2800      	cmp	r0, #0
    ba8c:	d102      	bne.n	ba94 <chip_sleep+0x4c>
	if(reg & NBIT0)
    ba8e:	9901      	ldr	r1, [sp, #4]
    ba90:	07cb      	lsls	r3, r1, #31
    ba92:	d401      	bmi.n	ba98 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    ba94:	b003      	add	sp, #12
    ba96:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    ba98:	2301      	movs	r3, #1
    ba9a:	4399      	bics	r1, r3
    ba9c:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    ba9e:	300b      	adds	r0, #11
    baa0:	4b02      	ldr	r3, [pc, #8]	; (baac <chip_sleep+0x64>)
    baa2:	4798      	blx	r3
    baa4:	e7f6      	b.n	ba94 <chip_sleep+0x4c>
    baa6:	46c0      	nop			; (mov r8, r8)
    baa8:	0000becd 	.word	0x0000becd
    baac:	0000bed9 	.word	0x0000bed9

0000bab0 <chip_wake>:
sint8 chip_wake(void)
{
    bab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bab2:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    bab4:	2300      	movs	r3, #0
    bab6:	9301      	str	r3, [sp, #4]
    bab8:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    baba:	a901      	add	r1, sp, #4
    babc:	200b      	movs	r0, #11
    babe:	4b28      	ldr	r3, [pc, #160]	; (bb60 <chip_wake+0xb0>)
    bac0:	4798      	blx	r3
    bac2:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    bac4:	d130      	bne.n	bb28 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    bac6:	9901      	ldr	r1, [sp, #4]
    bac8:	07cb      	lsls	r3, r1, #31
    baca:	d406      	bmi.n	bada <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    bacc:	2301      	movs	r3, #1
    bace:	4319      	orrs	r1, r3
    bad0:	200b      	movs	r0, #11
    bad2:	4b24      	ldr	r3, [pc, #144]	; (bb64 <chip_wake+0xb4>)
    bad4:	4798      	blx	r3
    bad6:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    bad8:	d126      	bne.n	bb28 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    bada:	a901      	add	r1, sp, #4
    badc:	2001      	movs	r0, #1
    bade:	4b20      	ldr	r3, [pc, #128]	; (bb60 <chip_wake+0xb0>)
    bae0:	4798      	blx	r3
    bae2:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    bae4:	d120      	bne.n	bb28 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    bae6:	9901      	ldr	r1, [sp, #4]
    bae8:	078b      	lsls	r3, r1, #30
    baea:	d520      	bpl.n	bb2e <chip_wake+0x7e>
{
    baec:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    baee:	4f1c      	ldr	r7, [pc, #112]	; (bb60 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    baf0:	4e1d      	ldr	r6, [pc, #116]	; (bb68 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    baf2:	4669      	mov	r1, sp
    baf4:	200f      	movs	r0, #15
    baf6:	47b8      	blx	r7
    baf8:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    bafa:	d120      	bne.n	bb3e <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    bafc:	9b00      	ldr	r3, [sp, #0]
    bafe:	075b      	lsls	r3, r3, #29
    bb00:	d42b      	bmi.n	bb5a <chip_wake+0xaa>
		nm_bsp_sleep(2);
    bb02:	2002      	movs	r0, #2
    bb04:	47b0      	blx	r6
    bb06:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    bb08:	2d00      	cmp	r5, #0
    bb0a:	d1f2      	bne.n	baf2 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    bb0c:	22ad      	movs	r2, #173	; 0xad
    bb0e:	0052      	lsls	r2, r2, #1
    bb10:	4916      	ldr	r1, [pc, #88]	; (bb6c <chip_wake+0xbc>)
    bb12:	4817      	ldr	r0, [pc, #92]	; (bb70 <chip_wake+0xc0>)
    bb14:	4b17      	ldr	r3, [pc, #92]	; (bb74 <chip_wake+0xc4>)
    bb16:	4798      	blx	r3
    bb18:	4817      	ldr	r0, [pc, #92]	; (bb78 <chip_wake+0xc8>)
    bb1a:	4b18      	ldr	r3, [pc, #96]	; (bb7c <chip_wake+0xcc>)
    bb1c:	4798      	blx	r3
    bb1e:	200d      	movs	r0, #13
    bb20:	4b17      	ldr	r3, [pc, #92]	; (bb80 <chip_wake+0xd0>)
    bb22:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    bb24:	2404      	movs	r4, #4
    bb26:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    bb28:	0020      	movs	r0, r4
    bb2a:	b003      	add	sp, #12
    bb2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    bb2e:	2302      	movs	r3, #2
    bb30:	4319      	orrs	r1, r3
    bb32:	2001      	movs	r0, #1
    bb34:	4b0b      	ldr	r3, [pc, #44]	; (bb64 <chip_wake+0xb4>)
    bb36:	4798      	blx	r3
    bb38:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    bb3a:	d0d7      	beq.n	baec <chip_wake+0x3c>
    bb3c:	e7f4      	b.n	bb28 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    bb3e:	22a8      	movs	r2, #168	; 0xa8
    bb40:	0052      	lsls	r2, r2, #1
    bb42:	490a      	ldr	r1, [pc, #40]	; (bb6c <chip_wake+0xbc>)
    bb44:	480a      	ldr	r0, [pc, #40]	; (bb70 <chip_wake+0xc0>)
    bb46:	4d0b      	ldr	r5, [pc, #44]	; (bb74 <chip_wake+0xc4>)
    bb48:	47a8      	blx	r5
    bb4a:	9a00      	ldr	r2, [sp, #0]
    bb4c:	0021      	movs	r1, r4
    bb4e:	480d      	ldr	r0, [pc, #52]	; (bb84 <chip_wake+0xd4>)
    bb50:	47a8      	blx	r5
    bb52:	200d      	movs	r0, #13
    bb54:	4b0a      	ldr	r3, [pc, #40]	; (bb80 <chip_wake+0xd0>)
    bb56:	4798      	blx	r3
			goto _WAKE_EXIT;
    bb58:	e7e6      	b.n	bb28 <chip_wake+0x78>
	nm_bus_reset();
    bb5a:	4b0b      	ldr	r3, [pc, #44]	; (bb88 <chip_wake+0xd8>)
    bb5c:	4798      	blx	r3
    bb5e:	e7e3      	b.n	bb28 <chip_wake+0x78>
    bb60:	0000becd 	.word	0x0000becd
    bb64:	0000bed9 	.word	0x0000bed9
    bb68:	0000a055 	.word	0x0000a055
    bb6c:	00015858 	.word	0x00015858
    bb70:	000151a8 	.word	0x000151a8
    bb74:	00010b61 	.word	0x00010b61
    bb78:	000158a0 	.word	0x000158a0
    bb7c:	00010c7d 	.word	0x00010c7d
    bb80:	00010b95 	.word	0x00010b95
    bb84:	00015888 	.word	0x00015888
    bb88:	0000beb5 	.word	0x0000beb5

0000bb8c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    bb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb8e:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    bb90:	4d2d      	ldr	r5, [pc, #180]	; (bc48 <wait_for_bootrom+0xbc>)
    bb92:	4c2e      	ldr	r4, [pc, #184]	; (bc4c <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    bb94:	4e2e      	ldr	r6, [pc, #184]	; (bc50 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    bb96:	0028      	movs	r0, r5
    bb98:	47a0      	blx	r4
		if (reg & 0x80000000) {
    bb9a:	2800      	cmp	r0, #0
    bb9c:	db02      	blt.n	bba4 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    bb9e:	2001      	movs	r0, #1
    bba0:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    bba2:	e7f8      	b.n	bb96 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    bba4:	482b      	ldr	r0, [pc, #172]	; (bc54 <wait_for_bootrom+0xc8>)
    bba6:	4b29      	ldr	r3, [pc, #164]	; (bc4c <wait_for_bootrom+0xc0>)
    bba8:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    bbaa:	07c3      	lsls	r3, r0, #31
    bbac:	d409      	bmi.n	bbc2 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    bbae:	4e28      	ldr	r6, [pc, #160]	; (bc50 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    bbb0:	4c29      	ldr	r4, [pc, #164]	; (bc58 <wait_for_bootrom+0xcc>)
    bbb2:	4d26      	ldr	r5, [pc, #152]	; (bc4c <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    bbb4:	2001      	movs	r0, #1
    bbb6:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    bbb8:	0020      	movs	r0, r4
    bbba:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    bbbc:	4b27      	ldr	r3, [pc, #156]	; (bc5c <wait_for_bootrom+0xd0>)
    bbbe:	4298      	cmp	r0, r3
    bbc0:	d1f8      	bne.n	bbb4 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    bbc2:	2f02      	cmp	r7, #2
    bbc4:	d021      	beq.n	bc0a <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    bbc6:	2f03      	cmp	r7, #3
    bbc8:	d029      	beq.n	bc1e <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    bbca:	2f04      	cmp	r7, #4
    bbcc:	d030      	beq.n	bc30 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    bbce:	4924      	ldr	r1, [pc, #144]	; (bc60 <wait_for_bootrom+0xd4>)
    bbd0:	4824      	ldr	r0, [pc, #144]	; (bc64 <wait_for_bootrom+0xd8>)
    bbd2:	4b25      	ldr	r3, [pc, #148]	; (bc68 <wait_for_bootrom+0xdc>)
    bbd4:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    bbd6:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    bbd8:	4b24      	ldr	r3, [pc, #144]	; (bc6c <wait_for_bootrom+0xe0>)
    bbda:	4798      	blx	r3
    bbdc:	0500      	lsls	r0, r0, #20
    bbde:	0d00      	lsrs	r0, r0, #20
    bbe0:	4b23      	ldr	r3, [pc, #140]	; (bc70 <wait_for_bootrom+0xe4>)
    bbe2:	4298      	cmp	r0, r3
    bbe4:	d82a      	bhi.n	bc3c <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    bbe6:	0020      	movs	r0, r4
    bbe8:	4b22      	ldr	r3, [pc, #136]	; (bc74 <wait_for_bootrom+0xe8>)
    bbea:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    bbec:	4822      	ldr	r0, [pc, #136]	; (bc78 <wait_for_bootrom+0xec>)
    bbee:	4c23      	ldr	r4, [pc, #140]	; (bc7c <wait_for_bootrom+0xf0>)
    bbf0:	47a0      	blx	r4
    bbf2:	491b      	ldr	r1, [pc, #108]	; (bc60 <wait_for_bootrom+0xd4>)
    bbf4:	4822      	ldr	r0, [pc, #136]	; (bc80 <wait_for_bootrom+0xf4>)
    bbf6:	47a0      	blx	r4
    bbf8:	200d      	movs	r0, #13
    bbfa:	4b22      	ldr	r3, [pc, #136]	; (bc84 <wait_for_bootrom+0xf8>)
    bbfc:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    bbfe:	4922      	ldr	r1, [pc, #136]	; (bc88 <wait_for_bootrom+0xfc>)
    bc00:	4815      	ldr	r0, [pc, #84]	; (bc58 <wait_for_bootrom+0xcc>)
    bc02:	4b19      	ldr	r3, [pc, #100]	; (bc68 <wait_for_bootrom+0xdc>)
    bc04:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    bc06:	2000      	movs	r0, #0
    bc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    bc0a:	4920      	ldr	r1, [pc, #128]	; (bc8c <wait_for_bootrom+0x100>)
    bc0c:	4820      	ldr	r0, [pc, #128]	; (bc90 <wait_for_bootrom+0x104>)
    bc0e:	4c16      	ldr	r4, [pc, #88]	; (bc68 <wait_for_bootrom+0xdc>)
    bc10:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    bc12:	2180      	movs	r1, #128	; 0x80
    bc14:	0349      	lsls	r1, r1, #13
    bc16:	4813      	ldr	r0, [pc, #76]	; (bc64 <wait_for_bootrom+0xd8>)
    bc18:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    bc1a:	2400      	movs	r4, #0
    bc1c:	e7dc      	b.n	bbd8 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    bc1e:	491b      	ldr	r1, [pc, #108]	; (bc8c <wait_for_bootrom+0x100>)
    bc20:	481b      	ldr	r0, [pc, #108]	; (bc90 <wait_for_bootrom+0x104>)
    bc22:	4c11      	ldr	r4, [pc, #68]	; (bc68 <wait_for_bootrom+0xdc>)
    bc24:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    bc26:	2100      	movs	r1, #0
    bc28:	480e      	ldr	r0, [pc, #56]	; (bc64 <wait_for_bootrom+0xd8>)
    bc2a:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    bc2c:	2400      	movs	r4, #0
    bc2e:	e7d3      	b.n	bbd8 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    bc30:	490b      	ldr	r1, [pc, #44]	; (bc60 <wait_for_bootrom+0xd4>)
    bc32:	480c      	ldr	r0, [pc, #48]	; (bc64 <wait_for_bootrom+0xd8>)
    bc34:	4b0c      	ldr	r3, [pc, #48]	; (bc68 <wait_for_bootrom+0xdc>)
    bc36:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    bc38:	2480      	movs	r4, #128	; 0x80
    bc3a:	e7cd      	b.n	bbd8 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    bc3c:	2002      	movs	r0, #2
    bc3e:	4320      	orrs	r0, r4
    bc40:	4b0c      	ldr	r3, [pc, #48]	; (bc74 <wait_for_bootrom+0xe8>)
    bc42:	4798      	blx	r3
    bc44:	e7d2      	b.n	bbec <wait_for_bootrom+0x60>
    bc46:	46c0      	nop			; (mov r8, r8)
    bc48:	00001014 	.word	0x00001014
    bc4c:	0000bec1 	.word	0x0000bec1
    bc50:	0000a055 	.word	0x0000a055
    bc54:	000207bc 	.word	0x000207bc
    bc58:	000c000c 	.word	0x000c000c
    bc5c:	10add09e 	.word	0x10add09e
    bc60:	13301354 	.word	0x13301354
    bc64:	0000108c 	.word	0x0000108c
    bc68:	0000bed9 	.word	0x0000bed9
    bc6c:	0000b979 	.word	0x0000b979
    bc70:	0000039f 	.word	0x0000039f
    bc74:	0000b8e5 	.word	0x0000b8e5
    bc78:	000154d8 	.word	0x000154d8
    bc7c:	00010b61 	.word	0x00010b61
    bc80:	000158bc 	.word	0x000158bc
    bc84:	00010b95 	.word	0x00010b95
    bc88:	ef522f61 	.word	0xef522f61
    bc8c:	3c1cd57d 	.word	0x3c1cd57d
    bc90:	000207ac 	.word	0x000207ac

0000bc94 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    bc94:	b570      	push	{r4, r5, r6, lr}
    bc96:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    bc98:	4b15      	ldr	r3, [pc, #84]	; (bcf0 <wait_for_firmware_start+0x5c>)
    bc9a:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    bc9c:	4b15      	ldr	r3, [pc, #84]	; (bcf4 <wait_for_firmware_start+0x60>)
    bc9e:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    bca0:	3802      	subs	r0, #2
    bca2:	2801      	cmp	r0, #1
    bca4:	d911      	bls.n	bcca <wait_for_firmware_start+0x36>
{
    bca6:	2401      	movs	r4, #1
    bca8:	4264      	negs	r4, r4
    bcaa:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    bcac:	4e12      	ldr	r6, [pc, #72]	; (bcf8 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    bcae:	4d13      	ldr	r5, [pc, #76]	; (bcfc <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    bcb0:	9b00      	ldr	r3, [sp, #0]
    bcb2:	4298      	cmp	r0, r3
    bcb4:	d00e      	beq.n	bcd4 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    bcb6:	2002      	movs	r0, #2
    bcb8:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    bcba:	9801      	ldr	r0, [sp, #4]
    bcbc:	47a8      	blx	r5
    bcbe:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    bcc0:	2c00      	cmp	r4, #0
    bcc2:	d1f5      	bne.n	bcb0 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    bcc4:	2005      	movs	r0, #5
    bcc6:	4240      	negs	r0, r0
    bcc8:	e009      	b.n	bcde <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    bcca:	4b0d      	ldr	r3, [pc, #52]	; (bd00 <wait_for_firmware_start+0x6c>)
    bccc:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    bcce:	4b0d      	ldr	r3, [pc, #52]	; (bd04 <wait_for_firmware_start+0x70>)
    bcd0:	9300      	str	r3, [sp, #0]
    bcd2:	e7e8      	b.n	bca6 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    bcd4:	9a00      	ldr	r2, [sp, #0]
    bcd6:	4b07      	ldr	r3, [pc, #28]	; (bcf4 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    bcd8:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    bcda:	429a      	cmp	r2, r3
    bcdc:	d001      	beq.n	bce2 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    bcde:	b002      	add	sp, #8
    bce0:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    bce2:	2100      	movs	r1, #0
    bce4:	4802      	ldr	r0, [pc, #8]	; (bcf0 <wait_for_firmware_start+0x5c>)
    bce6:	4b08      	ldr	r3, [pc, #32]	; (bd08 <wait_for_firmware_start+0x74>)
    bce8:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    bcea:	2000      	movs	r0, #0
    bcec:	e7f7      	b.n	bcde <wait_for_firmware_start+0x4a>
    bcee:	46c0      	nop			; (mov r8, r8)
    bcf0:	0000108c 	.word	0x0000108c
    bcf4:	02532636 	.word	0x02532636
    bcf8:	0000a055 	.word	0x0000a055
    bcfc:	0000bec1 	.word	0x0000bec1
    bd00:	000207ac 	.word	0x000207ac
    bd04:	d75dc1c3 	.word	0xd75dc1c3
    bd08:	0000bed9 	.word	0x0000bed9

0000bd0c <chip_deinit>:

sint8 chip_deinit(void)
{
    bd0c:	b510      	push	{r4, lr}
    bd0e:	b082      	sub	sp, #8
	uint32 reg = 0;
    bd10:	2300      	movs	r3, #0
    bd12:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    bd14:	a901      	add	r1, sp, #4
    bd16:	20a0      	movs	r0, #160	; 0xa0
    bd18:	0140      	lsls	r0, r0, #5
    bd1a:	4b14      	ldr	r3, [pc, #80]	; (bd6c <chip_deinit+0x60>)
    bd1c:	4798      	blx	r3
    bd1e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    bd20:	d115      	bne.n	bd4e <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    bd22:	4913      	ldr	r1, [pc, #76]	; (bd70 <chip_deinit+0x64>)
    bd24:	9b01      	ldr	r3, [sp, #4]
    bd26:	4019      	ands	r1, r3
    bd28:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    bd2a:	20a0      	movs	r0, #160	; 0xa0
    bd2c:	0140      	lsls	r0, r0, #5
    bd2e:	4b11      	ldr	r3, [pc, #68]	; (bd74 <chip_deinit+0x68>)
    bd30:	4798      	blx	r3
    bd32:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    bd34:	d016      	beq.n	bd64 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    bd36:	4a10      	ldr	r2, [pc, #64]	; (bd78 <chip_deinit+0x6c>)
    bd38:	4910      	ldr	r1, [pc, #64]	; (bd7c <chip_deinit+0x70>)
    bd3a:	4811      	ldr	r0, [pc, #68]	; (bd80 <chip_deinit+0x74>)
    bd3c:	4b11      	ldr	r3, [pc, #68]	; (bd84 <chip_deinit+0x78>)
    bd3e:	4798      	blx	r3
    bd40:	4811      	ldr	r0, [pc, #68]	; (bd88 <chip_deinit+0x7c>)
    bd42:	4b12      	ldr	r3, [pc, #72]	; (bd8c <chip_deinit+0x80>)
    bd44:	4798      	blx	r3
    bd46:	200d      	movs	r0, #13
    bd48:	4b11      	ldr	r3, [pc, #68]	; (bd90 <chip_deinit+0x84>)
    bd4a:	4798      	blx	r3
		goto ERR1;
    bd4c:	e00a      	b.n	bd64 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    bd4e:	4a11      	ldr	r2, [pc, #68]	; (bd94 <chip_deinit+0x88>)
    bd50:	490a      	ldr	r1, [pc, #40]	; (bd7c <chip_deinit+0x70>)
    bd52:	480b      	ldr	r0, [pc, #44]	; (bd80 <chip_deinit+0x74>)
    bd54:	4b0b      	ldr	r3, [pc, #44]	; (bd84 <chip_deinit+0x78>)
    bd56:	4798      	blx	r3
    bd58:	480b      	ldr	r0, [pc, #44]	; (bd88 <chip_deinit+0x7c>)
    bd5a:	4b0c      	ldr	r3, [pc, #48]	; (bd8c <chip_deinit+0x80>)
    bd5c:	4798      	blx	r3
    bd5e:	200d      	movs	r0, #13
    bd60:	4b0b      	ldr	r3, [pc, #44]	; (bd90 <chip_deinit+0x84>)
    bd62:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    bd64:	0020      	movs	r0, r4
    bd66:	b002      	add	sp, #8
    bd68:	bd10      	pop	{r4, pc}
    bd6a:	46c0      	nop			; (mov r8, r8)
    bd6c:	0000becd 	.word	0x0000becd
    bd70:	fffffbff 	.word	0xfffffbff
    bd74:	0000bed9 	.word	0x0000bed9
    bd78:	00000207 	.word	0x00000207
    bd7c:	00015864 	.word	0x00015864
    bd80:	000151a8 	.word	0x000151a8
    bd84:	00010b61 	.word	0x00010b61
    bd88:	00015870 	.word	0x00015870
    bd8c:	00010c7d 	.word	0x00010c7d
    bd90:	00010b95 	.word	0x00010b95
    bd94:	00000201 	.word	0x00000201

0000bd98 <nmi_get_otp_mac_address>:
	return s8Ret;
}
#endif /* CONF_PERIPH */

sint8 nmi_get_otp_mac_address(uint8 *pu8MacAddr,  uint8 * pu8IsValid)
{
    bd98:	b570      	push	{r4, r5, r6, lr}
    bd9a:	b086      	sub	sp, #24
    bd9c:	0006      	movs	r6, r0
    bd9e:	000d      	movs	r5, r1
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    bda0:	2208      	movs	r2, #8
    bda2:	2100      	movs	r1, #0
    bda4:	a801      	add	r0, sp, #4
    bda6:	4b1b      	ldr	r3, [pc, #108]	; (be14 <nmi_get_otp_mac_address+0x7c>)
    bda8:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    bdaa:	a905      	add	r1, sp, #20
    bdac:	481a      	ldr	r0, [pc, #104]	; (be18 <nmi_get_otp_mac_address+0x80>)
    bdae:	4b1b      	ldr	r3, [pc, #108]	; (be1c <nmi_get_otp_mac_address+0x84>)
    bdb0:	4798      	blx	r3
    bdb2:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    bdb4:	d006      	beq.n	bdc4 <nmi_get_otp_mac_address+0x2c>
	m2m_memcpy(pu8MacAddr,mac,6);
	if(pu8IsValid) *pu8IsValid = 1;
	return ret;

_EXIT_ERR:
	if(pu8IsValid) *pu8IsValid = 0;
    bdb6:	2d00      	cmp	r5, #0
    bdb8:	d001      	beq.n	bdbe <nmi_get_otp_mac_address+0x26>
    bdba:	2300      	movs	r3, #0
    bdbc:	702b      	strb	r3, [r5, #0]
	return ret;
}
    bdbe:	0020      	movs	r0, r4
    bdc0:	b006      	add	sp, #24
    bdc2:	bd70      	pop	{r4, r5, r6, pc}
	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    bdc4:	20c0      	movs	r0, #192	; 0xc0
    bdc6:	0280      	lsls	r0, r0, #10
    bdc8:	9b05      	ldr	r3, [sp, #20]
    bdca:	4318      	orrs	r0, r3
    bdcc:	2208      	movs	r2, #8
    bdce:	a901      	add	r1, sp, #4
    bdd0:	4b13      	ldr	r3, [pc, #76]	; (be20 <nmi_get_otp_mac_address+0x88>)
    bdd2:	4798      	blx	r3
    bdd4:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    bdd6:	d1ee      	bne.n	bdb6 <nmi_get_otp_mac_address+0x1e>
	u32RegValue = strgp.u32Mac_efuse_mib;
    bdd8:	9801      	ldr	r0, [sp, #4]
    bdda:	9005      	str	r0, [sp, #20]
	if(!EFUSED_MAC(u32RegValue)) {
    bddc:	0c03      	lsrs	r3, r0, #16
    bdde:	d105      	bne.n	bdec <nmi_get_otp_mac_address+0x54>
		m2m_memset(pu8MacAddr, 0, 6);
    bde0:	2206      	movs	r2, #6
    bde2:	2100      	movs	r1, #0
    bde4:	0030      	movs	r0, r6
    bde6:	4b0f      	ldr	r3, [pc, #60]	; (be24 <nmi_get_otp_mac_address+0x8c>)
    bde8:	4798      	blx	r3
		goto _EXIT_ERR;
    bdea:	e7e4      	b.n	bdb6 <nmi_get_otp_mac_address+0x1e>
	u32RegValue >>=16;
    bdec:	0c00      	lsrs	r0, r0, #16
    bdee:	9005      	str	r0, [sp, #20]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    bdf0:	23c0      	movs	r3, #192	; 0xc0
    bdf2:	029b      	lsls	r3, r3, #10
    bdf4:	4318      	orrs	r0, r3
    bdf6:	2206      	movs	r2, #6
    bdf8:	a903      	add	r1, sp, #12
    bdfa:	4b09      	ldr	r3, [pc, #36]	; (be20 <nmi_get_otp_mac_address+0x88>)
    bdfc:	4798      	blx	r3
    bdfe:	0004      	movs	r4, r0
	m2m_memcpy(pu8MacAddr,mac,6);
    be00:	2206      	movs	r2, #6
    be02:	a903      	add	r1, sp, #12
    be04:	0030      	movs	r0, r6
    be06:	4b08      	ldr	r3, [pc, #32]	; (be28 <nmi_get_otp_mac_address+0x90>)
    be08:	4798      	blx	r3
	if(pu8IsValid) *pu8IsValid = 1;
    be0a:	2d00      	cmp	r5, #0
    be0c:	d0d7      	beq.n	bdbe <nmi_get_otp_mac_address+0x26>
    be0e:	2301      	movs	r3, #1
    be10:	702b      	strb	r3, [r5, #0]
    be12:	e7d4      	b.n	bdbe <nmi_get_otp_mac_address+0x26>
    be14:	000109ff 	.word	0x000109ff
    be18:	000c0008 	.word	0x000c0008
    be1c:	0000becd 	.word	0x0000becd
    be20:	0000bee5 	.word	0x0000bee5
    be24:	0000a479 	.word	0x0000a479
    be28:	0000a465 	.word	0x0000a465

0000be2c <nmi_get_mac_address>:

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
    be2c:	b530      	push	{r4, r5, lr}
    be2e:	b087      	sub	sp, #28
    be30:	0005      	movs	r5, r0
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    be32:	2208      	movs	r2, #8
    be34:	2100      	movs	r1, #0
    be36:	a801      	add	r0, sp, #4
    be38:	4b13      	ldr	r3, [pc, #76]	; (be88 <nmi_get_mac_address+0x5c>)
    be3a:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    be3c:	a905      	add	r1, sp, #20
    be3e:	4813      	ldr	r0, [pc, #76]	; (be8c <nmi_get_mac_address+0x60>)
    be40:	4b13      	ldr	r3, [pc, #76]	; (be90 <nmi_get_mac_address+0x64>)
    be42:	4798      	blx	r3
    be44:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    be46:	d002      	beq.n	be4e <nmi_get_mac_address+0x22>

	return ret;

_EXIT_ERR:
	return ret;
}
    be48:	0020      	movs	r0, r4
    be4a:	b007      	add	sp, #28
    be4c:	bd30      	pop	{r4, r5, pc}
	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    be4e:	20c0      	movs	r0, #192	; 0xc0
    be50:	0280      	lsls	r0, r0, #10
    be52:	9b05      	ldr	r3, [sp, #20]
    be54:	4318      	orrs	r0, r3
    be56:	2208      	movs	r2, #8
    be58:	a901      	add	r1, sp, #4
    be5a:	4b0e      	ldr	r3, [pc, #56]	; (be94 <nmi_get_mac_address+0x68>)
    be5c:	4798      	blx	r3
    be5e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    be60:	d1f2      	bne.n	be48 <nmi_get_mac_address+0x1c>
	u32RegValue &=0x0000ffff;
    be62:	9b01      	ldr	r3, [sp, #4]
    be64:	0418      	lsls	r0, r3, #16
    be66:	0c00      	lsrs	r0, r0, #16
    be68:	9005      	str	r0, [sp, #20]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    be6a:	23c0      	movs	r3, #192	; 0xc0
    be6c:	029b      	lsls	r3, r3, #10
    be6e:	4318      	orrs	r0, r3
    be70:	2206      	movs	r2, #6
    be72:	a903      	add	r1, sp, #12
    be74:	4b07      	ldr	r3, [pc, #28]	; (be94 <nmi_get_mac_address+0x68>)
    be76:	4798      	blx	r3
    be78:	0004      	movs	r4, r0
	m2m_memcpy(pu8MacAddr, mac, 6);
    be7a:	2206      	movs	r2, #6
    be7c:	a903      	add	r1, sp, #12
    be7e:	0028      	movs	r0, r5
    be80:	4b05      	ldr	r3, [pc, #20]	; (be98 <nmi_get_mac_address+0x6c>)
    be82:	4798      	blx	r3
	return ret;
    be84:	e7e0      	b.n	be48 <nmi_get_mac_address+0x1c>
    be86:	46c0      	nop			; (mov r8, r8)
    be88:	000109ff 	.word	0x000109ff
    be8c:	000c0008 	.word	0x000c0008
    be90:	0000becd 	.word	0x0000becd
    be94:	0000bee5 	.word	0x0000bee5
    be98:	0000a465 	.word	0x0000a465

0000be9c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    be9c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    be9e:	4b01      	ldr	r3, [pc, #4]	; (bea4 <nm_bus_iface_init+0x8>)
    bea0:	4798      	blx	r3
	return ret;
}
    bea2:	bd10      	pop	{r4, pc}
    bea4:	0000a1a9 	.word	0x0000a1a9

0000bea8 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    bea8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    beaa:	4b01      	ldr	r3, [pc, #4]	; (beb0 <nm_bus_iface_deinit+0x8>)
    beac:	4798      	blx	r3

	return ret;
}
    beae:	bd10      	pop	{r4, pc}
    beb0:	0000a3f9 	.word	0x0000a3f9

0000beb4 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    beb4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    beb6:	4b01      	ldr	r3, [pc, #4]	; (bebc <nm_bus_reset+0x8>)
    beb8:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    beba:	bd10      	pop	{r4, pc}
    bebc:	0000c86d 	.word	0x0000c86d

0000bec0 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    bec0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    bec2:	4b01      	ldr	r3, [pc, #4]	; (bec8 <nm_read_reg+0x8>)
    bec4:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    bec6:	bd10      	pop	{r4, pc}
    bec8:	0000c8a5 	.word	0x0000c8a5

0000becc <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    becc:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    bece:	4b01      	ldr	r3, [pc, #4]	; (bed4 <nm_read_reg_with_ret+0x8>)
    bed0:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    bed2:	bd10      	pop	{r4, pc}
    bed4:	0000c8b9 	.word	0x0000c8b9

0000bed8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    bed8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    beda:	4b01      	ldr	r3, [pc, #4]	; (bee0 <nm_write_reg+0x8>)
    bedc:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    bede:	bd10      	pop	{r4, pc}
    bee0:	0000c8d1 	.word	0x0000c8d1

0000bee4 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    bee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bee6:	46d6      	mov	lr, sl
    bee8:	464f      	mov	r7, r9
    beea:	4646      	mov	r6, r8
    beec:	b5c0      	push	{r6, r7, lr}
    beee:	b082      	sub	sp, #8
    bef0:	4680      	mov	r8, r0
    bef2:	4689      	mov	r9, r1
    bef4:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    bef6:	4b13      	ldr	r3, [pc, #76]	; (bf44 <nm_read_block+0x60>)
    bef8:	881f      	ldrh	r7, [r3, #0]
    befa:	3f08      	subs	r7, #8
    befc:	b2bb      	uxth	r3, r7
    befe:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    bf00:	001e      	movs	r6, r3
    bf02:	0004      	movs	r4, r0
    bf04:	429a      	cmp	r2, r3
    bf06:	d91a      	bls.n	bf3e <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    bf08:	4b0f      	ldr	r3, [pc, #60]	; (bf48 <nm_read_block+0x64>)
    bf0a:	469a      	mov	sl, r3
    bf0c:	1a37      	subs	r7, r6, r0
    bf0e:	4643      	mov	r3, r8
    bf10:	1ae1      	subs	r1, r4, r3
    bf12:	4449      	add	r1, r9
    bf14:	9a01      	ldr	r2, [sp, #4]
    bf16:	0020      	movs	r0, r4
    bf18:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    bf1a:	2800      	cmp	r0, #0
    bf1c:	d109      	bne.n	bf32 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    bf1e:	1bad      	subs	r5, r5, r6
    bf20:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    bf22:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    bf24:	42b5      	cmp	r5, r6
    bf26:	d8f2      	bhi.n	bf0e <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    bf28:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    bf2a:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    bf2c:	0020      	movs	r0, r4
    bf2e:	4b06      	ldr	r3, [pc, #24]	; (bf48 <nm_read_block+0x64>)
    bf30:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    bf32:	b002      	add	sp, #8
    bf34:	bc1c      	pop	{r2, r3, r4}
    bf36:	4690      	mov	r8, r2
    bf38:	4699      	mov	r9, r3
    bf3a:	46a2      	mov	sl, r4
    bf3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    bf3e:	2100      	movs	r1, #0
    bf40:	e7f2      	b.n	bf28 <nm_read_block+0x44>
    bf42:	46c0      	nop			; (mov r8, r8)
    bf44:	200002c4 	.word	0x200002c4
    bf48:	0000ca11 	.word	0x0000ca11

0000bf4c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    bf4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf4e:	46d6      	mov	lr, sl
    bf50:	464f      	mov	r7, r9
    bf52:	4646      	mov	r6, r8
    bf54:	b5c0      	push	{r6, r7, lr}
    bf56:	b082      	sub	sp, #8
    bf58:	4680      	mov	r8, r0
    bf5a:	4689      	mov	r9, r1
    bf5c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    bf5e:	4b13      	ldr	r3, [pc, #76]	; (bfac <nm_write_block+0x60>)
    bf60:	881f      	ldrh	r7, [r3, #0]
    bf62:	3f08      	subs	r7, #8
    bf64:	b2bb      	uxth	r3, r7
    bf66:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    bf68:	001e      	movs	r6, r3
    bf6a:	0004      	movs	r4, r0
    bf6c:	429a      	cmp	r2, r3
    bf6e:	d91a      	bls.n	bfa6 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    bf70:	4b0f      	ldr	r3, [pc, #60]	; (bfb0 <nm_write_block+0x64>)
    bf72:	469a      	mov	sl, r3
    bf74:	1a37      	subs	r7, r6, r0
    bf76:	4643      	mov	r3, r8
    bf78:	1ae1      	subs	r1, r4, r3
    bf7a:	4449      	add	r1, r9
    bf7c:	9a01      	ldr	r2, [sp, #4]
    bf7e:	0020      	movs	r0, r4
    bf80:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    bf82:	2800      	cmp	r0, #0
    bf84:	d109      	bne.n	bf9a <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    bf86:	1bad      	subs	r5, r5, r6
    bf88:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    bf8a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    bf8c:	42b5      	cmp	r5, r6
    bf8e:	d8f2      	bhi.n	bf76 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    bf90:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    bf92:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    bf94:	0020      	movs	r0, r4
    bf96:	4b06      	ldr	r3, [pc, #24]	; (bfb0 <nm_write_block+0x64>)
    bf98:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    bf9a:	b002      	add	sp, #8
    bf9c:	bc1c      	pop	{r2, r3, r4}
    bf9e:	4690      	mov	r8, r2
    bfa0:	4699      	mov	r9, r3
    bfa2:	46a2      	mov	sl, r4
    bfa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    bfa6:	2100      	movs	r1, #0
    bfa8:	e7f2      	b.n	bf90 <nm_write_block+0x44>
    bfaa:	46c0      	nop			; (mov r8, r8)
    bfac:	200002c4 	.word	0x200002c4
    bfb0:	0000cb6d 	.word	0x0000cb6d

0000bfb4 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    bfb4:	b570      	push	{r4, r5, r6, lr}
    bfb6:	b084      	sub	sp, #16
    bfb8:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    bfba:	2300      	movs	r3, #0
    bfbc:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    bfbe:	2208      	movs	r2, #8
    bfc0:	2100      	movs	r1, #0
    bfc2:	a801      	add	r0, sp, #4
    bfc4:	4b2d      	ldr	r3, [pc, #180]	; (c07c <nm_get_firmware_full_info+0xc8>)
    bfc6:	4798      	blx	r3
	if (pstrRev != NULL)
    bfc8:	2c00      	cmp	r4, #0
    bfca:	d044      	beq.n	c056 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    bfcc:	2228      	movs	r2, #40	; 0x28
    bfce:	2100      	movs	r1, #0
    bfd0:	0020      	movs	r0, r4
    bfd2:	4b2b      	ldr	r3, [pc, #172]	; (c080 <nm_get_firmware_full_info+0xcc>)
    bfd4:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    bfd6:	a903      	add	r1, sp, #12
    bfd8:	482a      	ldr	r0, [pc, #168]	; (c084 <nm_get_firmware_full_info+0xd0>)
    bfda:	4b2b      	ldr	r3, [pc, #172]	; (c088 <nm_get_firmware_full_info+0xd4>)
    bfdc:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    bfde:	2800      	cmp	r0, #0
    bfe0:	d13a      	bne.n	c058 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    bfe2:	9b03      	ldr	r3, [sp, #12]
    bfe4:	2b00      	cmp	r3, #0
    bfe6:	d039      	beq.n	c05c <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    bfe8:	20c0      	movs	r0, #192	; 0xc0
    bfea:	0280      	lsls	r0, r0, #10
    bfec:	4318      	orrs	r0, r3
    bfee:	2208      	movs	r2, #8
    bff0:	a901      	add	r1, sp, #4
    bff2:	4b26      	ldr	r3, [pc, #152]	; (c08c <nm_get_firmware_full_info+0xd8>)
    bff4:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    bff6:	2800      	cmp	r0, #0
    bff8:	d12e      	bne.n	c058 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    bffa:	9b02      	ldr	r3, [sp, #8]
    bffc:	0418      	lsls	r0, r3, #16
    bffe:	0c00      	lsrs	r0, r0, #16
    c000:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    c002:	d02e      	beq.n	c062 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    c004:	23c0      	movs	r3, #192	; 0xc0
    c006:	029b      	lsls	r3, r3, #10
    c008:	4318      	orrs	r0, r3
    c00a:	2228      	movs	r2, #40	; 0x28
    c00c:	0021      	movs	r1, r4
    c00e:	4b1f      	ldr	r3, [pc, #124]	; (c08c <nm_get_firmware_full_info+0xd8>)
    c010:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    c012:	2800      	cmp	r0, #0
    c014:	d120      	bne.n	c058 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    c016:	7921      	ldrb	r1, [r4, #4]
    c018:	0209      	lsls	r1, r1, #8
    c01a:	79a2      	ldrb	r2, [r4, #6]
    c01c:	230f      	movs	r3, #15
    c01e:	401a      	ands	r2, r3
    c020:	430a      	orrs	r2, r1
    c022:	7961      	ldrb	r1, [r4, #5]
    c024:	0109      	lsls	r1, r1, #4
    c026:	25ff      	movs	r5, #255	; 0xff
    c028:	4029      	ands	r1, r5
    c02a:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    c02c:	79e1      	ldrb	r1, [r4, #7]
    c02e:	0209      	lsls	r1, r1, #8
    c030:	7a66      	ldrb	r6, [r4, #9]
    c032:	4033      	ands	r3, r6
    c034:	430b      	orrs	r3, r1
    c036:	7a21      	ldrb	r1, [r4, #8]
    c038:	0109      	lsls	r1, r1, #4
    c03a:	400d      	ands	r5, r1
    c03c:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    c03e:	2a00      	cmp	r2, #0
    c040:	d012      	beq.n	c068 <nm_get_firmware_full_info+0xb4>
    c042:	2b00      	cmp	r3, #0
    c044:	d013      	beq.n	c06e <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    c046:	4912      	ldr	r1, [pc, #72]	; (c090 <nm_get_firmware_full_info+0xdc>)
    c048:	428b      	cmp	r3, r1
    c04a:	d813      	bhi.n	c074 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    c04c:	4b11      	ldr	r3, [pc, #68]	; (c094 <nm_get_firmware_full_info+0xe0>)
    c04e:	429a      	cmp	r2, r3
    c050:	d802      	bhi.n	c058 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    c052:	380d      	subs	r0, #13
    c054:	e000      	b.n	c058 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    c056:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    c058:	b004      	add	sp, #16
    c05a:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    c05c:	200c      	movs	r0, #12
    c05e:	4240      	negs	r0, r0
    c060:	e7fa      	b.n	c058 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    c062:	200c      	movs	r0, #12
    c064:	4240      	negs	r0, r0
    c066:	e7f7      	b.n	c058 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    c068:	200c      	movs	r0, #12
    c06a:	4240      	negs	r0, r0
    c06c:	e7f4      	b.n	c058 <nm_get_firmware_full_info+0xa4>
    c06e:	200c      	movs	r0, #12
    c070:	4240      	negs	r0, r0
    c072:	e7f1      	b.n	c058 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    c074:	200d      	movs	r0, #13
    c076:	4240      	negs	r0, r0
    c078:	e7ee      	b.n	c058 <nm_get_firmware_full_info+0xa4>
    c07a:	46c0      	nop			; (mov r8, r8)
    c07c:	000109ff 	.word	0x000109ff
    c080:	0000a479 	.word	0x0000a479
    c084:	000c0008 	.word	0x000c0008
    c088:	0000becd 	.word	0x0000becd
    c08c:	0000bee5 	.word	0x0000bee5
    c090:	00001354 	.word	0x00001354
    c094:	00001353 	.word	0x00001353

0000c098 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    c098:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
    uint32 chipid;
	
	if(NULL != arg) {
    c09a:	2800      	cmp	r0, #0
    c09c:	d014      	beq.n	c0c8 <nm_drv_init+0x30>
		u8Mode = *((uint8 *)arg);
    c09e:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    c0a0:	1e6b      	subs	r3, r5, #1
    c0a2:	2b03      	cmp	r3, #3
    c0a4:	d900      	bls.n	c0a8 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    c0a6:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    c0a8:	2000      	movs	r0, #0
    c0aa:	4b23      	ldr	r3, [pc, #140]	; (c138 <nm_drv_init+0xa0>)
    c0ac:	4798      	blx	r3
    c0ae:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c0b0:	d10c      	bne.n	c0cc <nm_drv_init+0x34>
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	/* Check to see if the device is attached */
	chipid = nmi_get_chipid();
    c0b2:	4b22      	ldr	r3, [pc, #136]	; (c13c <nm_drv_init+0xa4>)
    c0b4:	4798      	blx	r3
	if (0x1503a0 != chipid)
    c0b6:	4b22      	ldr	r3, [pc, #136]	; (c140 <nm_drv_init+0xa8>)
    c0b8:	4298      	cmp	r0, r3
    c0ba:	d014      	beq.n	c0e6 <nm_drv_init+0x4e>
	{
		ret =  M2M_ERR_TIME_OUT;
    c0bc:	2404      	movs	r4, #4
    c0be:	4264      	negs	r4, r4
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    c0c0:	4b20      	ldr	r3, [pc, #128]	; (c144 <nm_drv_init+0xac>)
    c0c2:	4798      	blx	r3
ERR1:
	return ret;
}
    c0c4:	0020      	movs	r0, r4
    c0c6:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    c0c8:	2501      	movs	r5, #1
    c0ca:	e7ed      	b.n	c0a8 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    c0cc:	2222      	movs	r2, #34	; 0x22
    c0ce:	32ff      	adds	r2, #255	; 0xff
    c0d0:	491d      	ldr	r1, [pc, #116]	; (c148 <nm_drv_init+0xb0>)
    c0d2:	481e      	ldr	r0, [pc, #120]	; (c14c <nm_drv_init+0xb4>)
    c0d4:	4b1e      	ldr	r3, [pc, #120]	; (c150 <nm_drv_init+0xb8>)
    c0d6:	4798      	blx	r3
    c0d8:	481e      	ldr	r0, [pc, #120]	; (c154 <nm_drv_init+0xbc>)
    c0da:	4b1f      	ldr	r3, [pc, #124]	; (c158 <nm_drv_init+0xc0>)
    c0dc:	4798      	blx	r3
    c0de:	200d      	movs	r0, #13
    c0e0:	4b1e      	ldr	r3, [pc, #120]	; (c15c <nm_drv_init+0xc4>)
    c0e2:	4798      	blx	r3
		goto ERR1;
    c0e4:	e7ee      	b.n	c0c4 <nm_drv_init+0x2c>
	M2M_INFO("Chip ID %lx\n", chipid);
    c0e6:	481e      	ldr	r0, [pc, #120]	; (c160 <nm_drv_init+0xc8>)
    c0e8:	4c19      	ldr	r4, [pc, #100]	; (c150 <nm_drv_init+0xb8>)
    c0ea:	47a0      	blx	r4
    c0ec:	4914      	ldr	r1, [pc, #80]	; (c140 <nm_drv_init+0xa8>)
    c0ee:	481d      	ldr	r0, [pc, #116]	; (c164 <nm_drv_init+0xcc>)
    c0f0:	47a0      	blx	r4
    c0f2:	200d      	movs	r0, #13
    c0f4:	4b19      	ldr	r3, [pc, #100]	; (c15c <nm_drv_init+0xc4>)
    c0f6:	4798      	blx	r3
	nm_spi_init();
    c0f8:	4b1b      	ldr	r3, [pc, #108]	; (c168 <nm_drv_init+0xd0>)
    c0fa:	4798      	blx	r3
	ret = wait_for_bootrom(u8Mode);
    c0fc:	0028      	movs	r0, r5
    c0fe:	4b1b      	ldr	r3, [pc, #108]	; (c16c <nm_drv_init+0xd4>)
    c100:	4798      	blx	r3
    c102:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c104:	d1dc      	bne.n	c0c0 <nm_drv_init+0x28>
	ret = wait_for_firmware_start(u8Mode);
    c106:	0028      	movs	r0, r5
    c108:	4b19      	ldr	r3, [pc, #100]	; (c170 <nm_drv_init+0xd8>)
    c10a:	4798      	blx	r3
    c10c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c10e:	d1d7      	bne.n	c0c0 <nm_drv_init+0x28>
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    c110:	3d02      	subs	r5, #2
    c112:	2d01      	cmp	r5, #1
    c114:	d9d6      	bls.n	c0c4 <nm_drv_init+0x2c>
	ret = enable_interrupts();
    c116:	4b17      	ldr	r3, [pc, #92]	; (c174 <nm_drv_init+0xdc>)
    c118:	4798      	blx	r3
    c11a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c11c:	d0d2      	beq.n	c0c4 <nm_drv_init+0x2c>
		M2M_ERR("failed to enable interrupts..\n");
    c11e:	2258      	movs	r2, #88	; 0x58
    c120:	32ff      	adds	r2, #255	; 0xff
    c122:	4909      	ldr	r1, [pc, #36]	; (c148 <nm_drv_init+0xb0>)
    c124:	4809      	ldr	r0, [pc, #36]	; (c14c <nm_drv_init+0xb4>)
    c126:	4b0a      	ldr	r3, [pc, #40]	; (c150 <nm_drv_init+0xb8>)
    c128:	4798      	blx	r3
    c12a:	4813      	ldr	r0, [pc, #76]	; (c178 <nm_drv_init+0xe0>)
    c12c:	4b0a      	ldr	r3, [pc, #40]	; (c158 <nm_drv_init+0xc0>)
    c12e:	4798      	blx	r3
    c130:	200d      	movs	r0, #13
    c132:	4b0a      	ldr	r3, [pc, #40]	; (c15c <nm_drv_init+0xc4>)
    c134:	4798      	blx	r3
		goto ERR2;
    c136:	e7c3      	b.n	c0c0 <nm_drv_init+0x28>
    c138:	0000be9d 	.word	0x0000be9d
    c13c:	0000b979 	.word	0x0000b979
    c140:	001503a0 	.word	0x001503a0
    c144:	0000bea9 	.word	0x0000bea9
    c148:	000158d4 	.word	0x000158d4
    c14c:	000151a8 	.word	0x000151a8
    c150:	00010b61 	.word	0x00010b61
    c154:	00015970 	.word	0x00015970
    c158:	00010c7d 	.word	0x00010c7d
    c15c:	00010b95 	.word	0x00010b95
    c160:	000154d8 	.word	0x000154d8
    c164:	0001598c 	.word	0x0001598c
    c168:	0000c8e9 	.word	0x0000c8e9
    c16c:	0000bb8d 	.word	0x0000bb8d
    c170:	0000bc95 	.word	0x0000bc95
    c174:	0000b91d 	.word	0x0000b91d
    c178:	00015950 	.word	0x00015950

0000c17c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    c17c:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    c17e:	4b1c      	ldr	r3, [pc, #112]	; (c1f0 <nm_drv_deinit+0x74>)
    c180:	4798      	blx	r3
    c182:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c184:	d10b      	bne.n	c19e <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    c186:	2000      	movs	r0, #0
    c188:	4b1a      	ldr	r3, [pc, #104]	; (c1f4 <nm_drv_deinit+0x78>)
    c18a:	4798      	blx	r3
    c18c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c18e:	d114      	bne.n	c1ba <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    c190:	4b19      	ldr	r3, [pc, #100]	; (c1f8 <nm_drv_deinit+0x7c>)
    c192:	4798      	blx	r3
    c194:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c196:	d11d      	bne.n	c1d4 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    c198:	4b18      	ldr	r3, [pc, #96]	; (c1fc <nm_drv_deinit+0x80>)
    c19a:	4798      	blx	r3
    c19c:	e00b      	b.n	c1b6 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    c19e:	22b7      	movs	r2, #183	; 0xb7
    c1a0:	0052      	lsls	r2, r2, #1
    c1a2:	4917      	ldr	r1, [pc, #92]	; (c200 <nm_drv_deinit+0x84>)
    c1a4:	4817      	ldr	r0, [pc, #92]	; (c204 <nm_drv_deinit+0x88>)
    c1a6:	4b18      	ldr	r3, [pc, #96]	; (c208 <nm_drv_deinit+0x8c>)
    c1a8:	4798      	blx	r3
    c1aa:	4818      	ldr	r0, [pc, #96]	; (c20c <nm_drv_deinit+0x90>)
    c1ac:	4b18      	ldr	r3, [pc, #96]	; (c210 <nm_drv_deinit+0x94>)
    c1ae:	4798      	blx	r3
    c1b0:	200d      	movs	r0, #13
    c1b2:	4b18      	ldr	r3, [pc, #96]	; (c214 <nm_drv_deinit+0x98>)
    c1b4:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    c1b6:	0020      	movs	r0, r4
    c1b8:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    c1ba:	2276      	movs	r2, #118	; 0x76
    c1bc:	32ff      	adds	r2, #255	; 0xff
    c1be:	4910      	ldr	r1, [pc, #64]	; (c200 <nm_drv_deinit+0x84>)
    c1c0:	4810      	ldr	r0, [pc, #64]	; (c204 <nm_drv_deinit+0x88>)
    c1c2:	4b11      	ldr	r3, [pc, #68]	; (c208 <nm_drv_deinit+0x8c>)
    c1c4:	4798      	blx	r3
    c1c6:	4814      	ldr	r0, [pc, #80]	; (c218 <nm_drv_deinit+0x9c>)
    c1c8:	4b11      	ldr	r3, [pc, #68]	; (c210 <nm_drv_deinit+0x94>)
    c1ca:	4798      	blx	r3
    c1cc:	200d      	movs	r0, #13
    c1ce:	4b11      	ldr	r3, [pc, #68]	; (c214 <nm_drv_deinit+0x98>)
    c1d0:	4798      	blx	r3
		goto ERR1;
    c1d2:	e7f0      	b.n	c1b6 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    c1d4:	227c      	movs	r2, #124	; 0x7c
    c1d6:	32ff      	adds	r2, #255	; 0xff
    c1d8:	4909      	ldr	r1, [pc, #36]	; (c200 <nm_drv_deinit+0x84>)
    c1da:	480a      	ldr	r0, [pc, #40]	; (c204 <nm_drv_deinit+0x88>)
    c1dc:	4b0a      	ldr	r3, [pc, #40]	; (c208 <nm_drv_deinit+0x8c>)
    c1de:	4798      	blx	r3
    c1e0:	480e      	ldr	r0, [pc, #56]	; (c21c <nm_drv_deinit+0xa0>)
    c1e2:	4b0b      	ldr	r3, [pc, #44]	; (c210 <nm_drv_deinit+0x94>)
    c1e4:	4798      	blx	r3
    c1e6:	200d      	movs	r0, #13
    c1e8:	4b0a      	ldr	r3, [pc, #40]	; (c214 <nm_drv_deinit+0x98>)
    c1ea:	4798      	blx	r3
		goto ERR1;
    c1ec:	e7e3      	b.n	c1b6 <nm_drv_deinit+0x3a>
    c1ee:	46c0      	nop			; (mov r8, r8)
    c1f0:	0000bd0d 	.word	0x0000bd0d
    c1f4:	0000d891 	.word	0x0000d891
    c1f8:	0000bea9 	.word	0x0000bea9
    c1fc:	0000c895 	.word	0x0000c895
    c200:	000158e0 	.word	0x000158e0
    c204:	000151a8 	.word	0x000151a8
    c208:	00010b61 	.word	0x00010b61
    c20c:	000158f0 	.word	0x000158f0
    c210:	00010c7d 	.word	0x00010c7d
    c214:	00010b95 	.word	0x00010b95
    c218:	00015910 	.word	0x00015910
    c21c:	00015934 	.word	0x00015934

0000c220 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    c220:	b500      	push	{lr}
    c222:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    c224:	ab01      	add	r3, sp, #4
    c226:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    c228:	2200      	movs	r2, #0
    c22a:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    c22c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    c22e:	0019      	movs	r1, r3
    c230:	2003      	movs	r0, #3
    c232:	4b02      	ldr	r3, [pc, #8]	; (c23c <nmi_spi_write+0x1c>)
    c234:	4798      	blx	r3
}
    c236:	b005      	add	sp, #20
    c238:	bd00      	pop	{pc}
    c23a:	46c0      	nop			; (mov r8, r8)
    c23c:	0000a2ad 	.word	0x0000a2ad

0000c240 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    c240:	b570      	push	{r4, r5, r6, lr}
    c242:	b084      	sub	sp, #16
    c244:	ac08      	add	r4, sp, #32
    c246:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    c248:	ac01      	add	r4, sp, #4
    c24a:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    c24c:	303f      	adds	r0, #63	; 0x3f
    c24e:	b2c4      	uxtb	r4, r0
    c250:	2c0e      	cmp	r4, #14
    c252:	d900      	bls.n	c256 <spi_cmd+0x16>
    c254:	e084      	b.n	c360 <spi_cmd+0x120>
    c256:	00a0      	lsls	r0, r4, #2
    c258:	4c4f      	ldr	r4, [pc, #316]	; (c398 <spi_cmd+0x158>)
    c25a:	5820      	ldr	r0, [r4, r0]
    c25c:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    c25e:	ab01      	add	r3, sp, #4
    c260:	0c0a      	lsrs	r2, r1, #16
    c262:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    c264:	0a0a      	lsrs	r2, r1, #8
    c266:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    c268:	70d9      	strb	r1, [r3, #3]
		len = 5;
    c26a:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    c26c:	4b4b      	ldr	r3, [pc, #300]	; (c39c <spi_cmd+0x15c>)
    c26e:	781b      	ldrb	r3, [r3, #0]
    c270:	2b00      	cmp	r3, #0
    c272:	d077      	beq.n	c364 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    c274:	3901      	subs	r1, #1
    c276:	b2c9      	uxtb	r1, r1
    c278:	e083      	b.n	c382 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    c27a:	0a0b      	lsrs	r3, r1, #8
    c27c:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    c27e:	2d00      	cmp	r5, #0
    c280:	d107      	bne.n	c292 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    c282:	aa01      	add	r2, sp, #4
    c284:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    c286:	ab01      	add	r3, sp, #4
    c288:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    c28a:	2200      	movs	r2, #0
    c28c:	70da      	strb	r2, [r3, #3]
		len = 5;
    c28e:	2105      	movs	r1, #5
		break;
    c290:	e7ec      	b.n	c26c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    c292:	2280      	movs	r2, #128	; 0x80
    c294:	4252      	negs	r2, r2
    c296:	4313      	orrs	r3, r2
    c298:	aa01      	add	r2, sp, #4
    c29a:	7053      	strb	r3, [r2, #1]
    c29c:	e7f3      	b.n	c286 <spi_cmd+0x46>
		bc[1] = 0x00;
    c29e:	ab01      	add	r3, sp, #4
    c2a0:	2200      	movs	r2, #0
    c2a2:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    c2a4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    c2a6:	70da      	strb	r2, [r3, #3]
		len = 5;
    c2a8:	2105      	movs	r1, #5
		break;
    c2aa:	e7df      	b.n	c26c <spi_cmd+0x2c>
		bc[1] = 0x00;
    c2ac:	ab01      	add	r3, sp, #4
    c2ae:	2200      	movs	r2, #0
    c2b0:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    c2b2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    c2b4:	70da      	strb	r2, [r3, #3]
		len = 5;
    c2b6:	2105      	movs	r1, #5
		break;
    c2b8:	e7d8      	b.n	c26c <spi_cmd+0x2c>
		bc[1] = 0xff;
    c2ba:	ab01      	add	r3, sp, #4
    c2bc:	22ff      	movs	r2, #255	; 0xff
    c2be:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    c2c0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    c2c2:	70da      	strb	r2, [r3, #3]
		len = 5;
    c2c4:	2105      	movs	r1, #5
		break;
    c2c6:	e7d1      	b.n	c26c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    c2c8:	aa01      	add	r2, sp, #4
    c2ca:	0c08      	lsrs	r0, r1, #16
    c2cc:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    c2ce:	0a08      	lsrs	r0, r1, #8
    c2d0:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    c2d2:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    c2d4:	0a19      	lsrs	r1, r3, #8
    c2d6:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    c2d8:	7153      	strb	r3, [r2, #5]
		len = 7;
    c2da:	2107      	movs	r1, #7
		break;
    c2dc:	e7c6      	b.n	c26c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    c2de:	aa01      	add	r2, sp, #4
    c2e0:	0c08      	lsrs	r0, r1, #16
    c2e2:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    c2e4:	0a08      	lsrs	r0, r1, #8
    c2e6:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    c2e8:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    c2ea:	0c19      	lsrs	r1, r3, #16
    c2ec:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    c2ee:	0a19      	lsrs	r1, r3, #8
    c2f0:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    c2f2:	7193      	strb	r3, [r2, #6]
		len = 8;
    c2f4:	2108      	movs	r1, #8
		break;
    c2f6:	e7b9      	b.n	c26c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    c2f8:	0a0b      	lsrs	r3, r1, #8
    c2fa:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    c2fc:	2d00      	cmp	r5, #0
    c2fe:	d10c      	bne.n	c31a <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    c300:	a801      	add	r0, sp, #4
    c302:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    c304:	ab01      	add	r3, sp, #4
    c306:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    c308:	0e11      	lsrs	r1, r2, #24
    c30a:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    c30c:	0c11      	lsrs	r1, r2, #16
    c30e:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    c310:	0a11      	lsrs	r1, r2, #8
    c312:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    c314:	719a      	strb	r2, [r3, #6]
		len = 8;
    c316:	2108      	movs	r1, #8
		break;
    c318:	e7a8      	b.n	c26c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    c31a:	2080      	movs	r0, #128	; 0x80
    c31c:	4240      	negs	r0, r0
    c31e:	4303      	orrs	r3, r0
    c320:	a801      	add	r0, sp, #4
    c322:	7043      	strb	r3, [r0, #1]
    c324:	e7ee      	b.n	c304 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    c326:	ab01      	add	r3, sp, #4
    c328:	0c08      	lsrs	r0, r1, #16
    c32a:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    c32c:	0a08      	lsrs	r0, r1, #8
    c32e:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    c330:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    c332:	0e11      	lsrs	r1, r2, #24
    c334:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    c336:	0c11      	lsrs	r1, r2, #16
    c338:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    c33a:	0a11      	lsrs	r1, r2, #8
    c33c:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    c33e:	71da      	strb	r2, [r3, #7]
		len = 9;
    c340:	2109      	movs	r1, #9
		break;
    c342:	e793      	b.n	c26c <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    c344:	2290      	movs	r2, #144	; 0x90
    c346:	0052      	lsls	r2, r2, #1
    c348:	4915      	ldr	r1, [pc, #84]	; (c3a0 <spi_cmd+0x160>)
    c34a:	4816      	ldr	r0, [pc, #88]	; (c3a4 <spi_cmd+0x164>)
    c34c:	4b16      	ldr	r3, [pc, #88]	; (c3a8 <spi_cmd+0x168>)
    c34e:	4798      	blx	r3
    c350:	4816      	ldr	r0, [pc, #88]	; (c3ac <spi_cmd+0x16c>)
    c352:	4b17      	ldr	r3, [pc, #92]	; (c3b0 <spi_cmd+0x170>)
    c354:	4798      	blx	r3
    c356:	200d      	movs	r0, #13
    c358:	4b16      	ldr	r3, [pc, #88]	; (c3b4 <spi_cmd+0x174>)
    c35a:	4798      	blx	r3
			result = N_FAIL;
    c35c:	2300      	movs	r3, #0
    c35e:	e017      	b.n	c390 <spi_cmd+0x150>
	switch (cmd) {
    c360:	2300      	movs	r3, #0
    c362:	e015      	b.n	c390 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    c364:	1e4e      	subs	r6, r1, #1
    c366:	aa01      	add	r2, sp, #4
    c368:	1995      	adds	r5, r2, r6
    c36a:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    c36c:	4c12      	ldr	r4, [pc, #72]	; (c3b8 <spi_cmd+0x178>)
    c36e:	005b      	lsls	r3, r3, #1
    c370:	7810      	ldrb	r0, [r2, #0]
    c372:	4043      	eors	r3, r0
    c374:	5ce3      	ldrb	r3, [r4, r3]
    c376:	3201      	adds	r2, #1
	while (len--)
    c378:	42aa      	cmp	r2, r5
    c37a:	d1f8      	bne.n	c36e <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    c37c:	005b      	lsls	r3, r3, #1
    c37e:	aa01      	add	r2, sp, #4
    c380:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    c382:	b289      	uxth	r1, r1
    c384:	a801      	add	r0, sp, #4
    c386:	4b0d      	ldr	r3, [pc, #52]	; (c3bc <spi_cmd+0x17c>)
    c388:	4798      	blx	r3
    c38a:	2301      	movs	r3, #1
    c38c:	2800      	cmp	r0, #0
    c38e:	d1d9      	bne.n	c344 <spi_cmd+0x104>
		}
	}

	return result;
}
    c390:	0018      	movs	r0, r3
    c392:	b004      	add	sp, #16
    c394:	bd70      	pop	{r4, r5, r6, pc}
    c396:	46c0      	nop			; (mov r8, r8)
    c398:	0001599c 	.word	0x0001599c
    c39c:	20002760 	.word	0x20002760
    c3a0:	000159dc 	.word	0x000159dc
    c3a4:	000151a8 	.word	0x000151a8
    c3a8:	00010b61 	.word	0x00010b61
    c3ac:	00015e6c 	.word	0x00015e6c
    c3b0:	00010c7d 	.word	0x00010c7d
    c3b4:	00010b95 	.word	0x00010b95
    c3b8:	00015a68 	.word	0x00015a68
    c3bc:	0000c221 	.word	0x0000c221

0000c3c0 <nmi_spi_read>:
{
    c3c0:	b500      	push	{lr}
    c3c2:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    c3c4:	ab01      	add	r3, sp, #4
    c3c6:	2200      	movs	r2, #0
    c3c8:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    c3ca:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    c3cc:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    c3ce:	0019      	movs	r1, r3
    c3d0:	2003      	movs	r0, #3
    c3d2:	4b02      	ldr	r3, [pc, #8]	; (c3dc <nmi_spi_read+0x1c>)
    c3d4:	4798      	blx	r3
}
    c3d6:	b005      	add	sp, #20
    c3d8:	bd00      	pop	{pc}
    c3da:	46c0      	nop			; (mov r8, r8)
    c3dc:	0000a2ad 	.word	0x0000a2ad

0000c3e0 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    c3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3e2:	46c6      	mov	lr, r8
    c3e4:	b500      	push	{lr}
    c3e6:	b082      	sub	sp, #8
    c3e8:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    c3ea:	28cf      	cmp	r0, #207	; 0xcf
    c3ec:	d02b      	beq.n	c446 <spi_cmd_rsp+0x66>
    c3ee:	0003      	movs	r3, r0
    c3f0:	333b      	adds	r3, #59	; 0x3b
    c3f2:	b2db      	uxtb	r3, r3
    c3f4:	2b01      	cmp	r3, #1
    c3f6:	d926      	bls.n	c446 <spi_cmd_rsp+0x66>
{
    c3f8:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    c3fa:	466b      	mov	r3, sp
    c3fc:	1dde      	adds	r6, r3, #7
    c3fe:	4b26      	ldr	r3, [pc, #152]	; (c498 <spi_cmd_rsp+0xb8>)
    c400:	4698      	mov	r8, r3
    c402:	2101      	movs	r1, #1
    c404:	0030      	movs	r0, r6
    c406:	47c0      	blx	r8
    c408:	1e05      	subs	r5, r0, #0
    c40a:	d125      	bne.n	c458 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    c40c:	7833      	ldrb	r3, [r6, #0]
    c40e:	42bb      	cmp	r3, r7
    c410:	d030      	beq.n	c474 <spi_cmd_rsp+0x94>
    c412:	3c01      	subs	r4, #1
    c414:	b2e4      	uxtb	r4, r4
    c416:	2c00      	cmp	r4, #0
    c418:	d1f3      	bne.n	c402 <spi_cmd_rsp+0x22>
    c41a:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    c41c:	466b      	mov	r3, sp
    c41e:	1dde      	adds	r6, r3, #7
    c420:	4f1d      	ldr	r7, [pc, #116]	; (c498 <spi_cmd_rsp+0xb8>)
    c422:	2101      	movs	r1, #1
    c424:	0030      	movs	r0, r6
    c426:	47b8      	blx	r7
    c428:	2800      	cmp	r0, #0
    c42a:	d125      	bne.n	c478 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    c42c:	7833      	ldrb	r3, [r6, #0]
    c42e:	2b00      	cmp	r3, #0
    c430:	d02f      	beq.n	c492 <spi_cmd_rsp+0xb2>
    c432:	3c01      	subs	r4, #1
    c434:	b2e4      	uxtb	r4, r4
    c436:	2c00      	cmp	r4, #0
    c438:	d1f3      	bne.n	c422 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    c43a:	2501      	movs	r5, #1

_fail_:

	return result;
}
    c43c:	0028      	movs	r0, r5
    c43e:	b002      	add	sp, #8
    c440:	bc04      	pop	{r2}
    c442:	4690      	mov	r8, r2
    c444:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    c446:	2101      	movs	r1, #1
    c448:	466b      	mov	r3, sp
    c44a:	1dd8      	adds	r0, r3, #7
    c44c:	4b12      	ldr	r3, [pc, #72]	; (c498 <spi_cmd_rsp+0xb8>)
    c44e:	4798      	blx	r3
			result = N_FAIL;
    c450:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    c452:	2800      	cmp	r0, #0
    c454:	d0d0      	beq.n	c3f8 <spi_cmd_rsp+0x18>
    c456:	e7f1      	b.n	c43c <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    c458:	225c      	movs	r2, #92	; 0x5c
    c45a:	32ff      	adds	r2, #255	; 0xff
    c45c:	490f      	ldr	r1, [pc, #60]	; (c49c <spi_cmd_rsp+0xbc>)
    c45e:	4810      	ldr	r0, [pc, #64]	; (c4a0 <spi_cmd_rsp+0xc0>)
    c460:	4b10      	ldr	r3, [pc, #64]	; (c4a4 <spi_cmd_rsp+0xc4>)
    c462:	4798      	blx	r3
    c464:	4810      	ldr	r0, [pc, #64]	; (c4a8 <spi_cmd_rsp+0xc8>)
    c466:	4b11      	ldr	r3, [pc, #68]	; (c4ac <spi_cmd_rsp+0xcc>)
    c468:	4798      	blx	r3
    c46a:	200d      	movs	r0, #13
    c46c:	4b10      	ldr	r3, [pc, #64]	; (c4b0 <spi_cmd_rsp+0xd0>)
    c46e:	4798      	blx	r3
			result = N_FAIL;
    c470:	2500      	movs	r5, #0
			goto _fail_;
    c472:	e7e3      	b.n	c43c <spi_cmd_rsp+0x5c>
    c474:	240b      	movs	r4, #11
    c476:	e7d1      	b.n	c41c <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    c478:	226a      	movs	r2, #106	; 0x6a
    c47a:	32ff      	adds	r2, #255	; 0xff
    c47c:	4907      	ldr	r1, [pc, #28]	; (c49c <spi_cmd_rsp+0xbc>)
    c47e:	4808      	ldr	r0, [pc, #32]	; (c4a0 <spi_cmd_rsp+0xc0>)
    c480:	4b08      	ldr	r3, [pc, #32]	; (c4a4 <spi_cmd_rsp+0xc4>)
    c482:	4798      	blx	r3
    c484:	4808      	ldr	r0, [pc, #32]	; (c4a8 <spi_cmd_rsp+0xc8>)
    c486:	4b09      	ldr	r3, [pc, #36]	; (c4ac <spi_cmd_rsp+0xcc>)
    c488:	4798      	blx	r3
    c48a:	200d      	movs	r0, #13
    c48c:	4b08      	ldr	r3, [pc, #32]	; (c4b0 <spi_cmd_rsp+0xd0>)
    c48e:	4798      	blx	r3
			goto _fail_;
    c490:	e7d4      	b.n	c43c <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    c492:	2501      	movs	r5, #1
    c494:	e7d2      	b.n	c43c <spi_cmd_rsp+0x5c>
    c496:	46c0      	nop			; (mov r8, r8)
    c498:	0000c3c1 	.word	0x0000c3c1
    c49c:	000159f4 	.word	0x000159f4
    c4a0:	000151a8 	.word	0x000151a8
    c4a4:	00010b61 	.word	0x00010b61
    c4a8:	00015e98 	.word	0x00015e98
    c4ac:	00010c7d 	.word	0x00010c7d
    c4b0:	00010b95 	.word	0x00010b95

0000c4b4 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    c4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4b6:	46de      	mov	lr, fp
    c4b8:	4657      	mov	r7, sl
    c4ba:	464e      	mov	r6, r9
    c4bc:	4645      	mov	r5, r8
    c4be:	b5e0      	push	{r5, r6, r7, lr}
    c4c0:	b087      	sub	sp, #28
    c4c2:	9001      	str	r0, [sp, #4]
    c4c4:	4689      	mov	r9, r1
    c4c6:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    c4c8:	2300      	movs	r3, #0
    c4ca:	469a      	mov	sl, r3
    c4cc:	2380      	movs	r3, #128	; 0x80
    c4ce:	019b      	lsls	r3, r3, #6
    c4d0:	469b      	mov	fp, r3
    c4d2:	466a      	mov	r2, sp
    c4d4:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    c4d6:	4b3c      	ldr	r3, [pc, #240]	; (c5c8 <spi_data_read+0x114>)
    c4d8:	4698      	mov	r8, r3
    c4da:	e02f      	b.n	c53c <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    c4dc:	22be      	movs	r2, #190	; 0xbe
    c4de:	0092      	lsls	r2, r2, #2
    c4e0:	493a      	ldr	r1, [pc, #232]	; (c5cc <spi_data_read+0x118>)
    c4e2:	483b      	ldr	r0, [pc, #236]	; (c5d0 <spi_data_read+0x11c>)
    c4e4:	4b3b      	ldr	r3, [pc, #236]	; (c5d4 <spi_data_read+0x120>)
    c4e6:	4798      	blx	r3
    c4e8:	483b      	ldr	r0, [pc, #236]	; (c5d8 <spi_data_read+0x124>)
    c4ea:	4b3c      	ldr	r3, [pc, #240]	; (c5dc <spi_data_read+0x128>)
    c4ec:	4798      	blx	r3
    c4ee:	200d      	movs	r0, #13
    c4f0:	4b3b      	ldr	r3, [pc, #236]	; (c5e0 <spi_data_read+0x12c>)
    c4f2:	4798      	blx	r3
    c4f4:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    c4f6:	0028      	movs	r0, r5
    c4f8:	b007      	add	sp, #28
    c4fa:	bc3c      	pop	{r2, r3, r4, r5}
    c4fc:	4690      	mov	r8, r2
    c4fe:	4699      	mov	r9, r3
    c500:	46a2      	mov	sl, r4
    c502:	46ab      	mov	fp, r5
    c504:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    c506:	2c00      	cmp	r4, #0
    c508:	dd2e      	ble.n	c568 <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    c50a:	9b01      	ldr	r3, [sp, #4]
    c50c:	4453      	add	r3, sl
    c50e:	0018      	movs	r0, r3
    c510:	0039      	movs	r1, r7
    c512:	4b2d      	ldr	r3, [pc, #180]	; (c5c8 <spi_data_read+0x114>)
    c514:	4798      	blx	r3
    c516:	1e04      	subs	r4, r0, #0
    c518:	d134      	bne.n	c584 <spi_data_read+0xd0>
		if(!clockless)
    c51a:	9b02      	ldr	r3, [sp, #8]
    c51c:	2b00      	cmp	r3, #0
    c51e:	d103      	bne.n	c528 <spi_data_read+0x74>
			if (!gu8Crc_off) {
    c520:	4b30      	ldr	r3, [pc, #192]	; (c5e4 <spi_data_read+0x130>)
    c522:	781b      	ldrb	r3, [r3, #0]
    c524:	2b00      	cmp	r3, #0
    c526:	d039      	beq.n	c59c <spi_data_read+0xe8>
		ix += nbytes;
    c528:	4653      	mov	r3, sl
    c52a:	18fb      	adds	r3, r7, r3
    c52c:	b21b      	sxth	r3, r3
    c52e:	469a      	mov	sl, r3
		sz -= nbytes;
    c530:	464b      	mov	r3, r9
    c532:	1bdf      	subs	r7, r3, r7
    c534:	b2bb      	uxth	r3, r7
    c536:	4699      	mov	r9, r3
	} while (sz);
    c538:	2b00      	cmp	r3, #0
    c53a:	d043      	beq.n	c5c4 <spi_data_read+0x110>
    c53c:	464f      	mov	r7, r9
    c53e:	45d9      	cmp	r9, fp
    c540:	d901      	bls.n	c546 <spi_data_read+0x92>
    c542:	466b      	mov	r3, sp
    c544:	89df      	ldrh	r7, [r3, #14]
    c546:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    c548:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    c54a:	ab04      	add	r3, sp, #16
    c54c:	1cde      	adds	r6, r3, #3
    c54e:	2101      	movs	r1, #1
    c550:	0030      	movs	r0, r6
    c552:	47c0      	blx	r8
    c554:	1e05      	subs	r5, r0, #0
    c556:	d1c1      	bne.n	c4dc <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    c558:	7833      	ldrb	r3, [r6, #0]
    c55a:	091b      	lsrs	r3, r3, #4
    c55c:	2b0f      	cmp	r3, #15
    c55e:	d0d2      	beq.n	c506 <spi_data_read+0x52>
    c560:	3c01      	subs	r4, #1
    c562:	b224      	sxth	r4, r4
		} while (retry--);
    c564:	1c63      	adds	r3, r4, #1
    c566:	d1f2      	bne.n	c54e <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    c568:	22c1      	movs	r2, #193	; 0xc1
    c56a:	0092      	lsls	r2, r2, #2
    c56c:	4917      	ldr	r1, [pc, #92]	; (c5cc <spi_data_read+0x118>)
    c56e:	4818      	ldr	r0, [pc, #96]	; (c5d0 <spi_data_read+0x11c>)
    c570:	4c18      	ldr	r4, [pc, #96]	; (c5d4 <spi_data_read+0x120>)
    c572:	47a0      	blx	r4
    c574:	ab04      	add	r3, sp, #16
    c576:	78d9      	ldrb	r1, [r3, #3]
    c578:	481b      	ldr	r0, [pc, #108]	; (c5e8 <spi_data_read+0x134>)
    c57a:	47a0      	blx	r4
    c57c:	200d      	movs	r0, #13
    c57e:	4b18      	ldr	r3, [pc, #96]	; (c5e0 <spi_data_read+0x12c>)
    c580:	4798      	blx	r3
			break;
    c582:	e7b8      	b.n	c4f6 <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    c584:	4a19      	ldr	r2, [pc, #100]	; (c5ec <spi_data_read+0x138>)
    c586:	4911      	ldr	r1, [pc, #68]	; (c5cc <spi_data_read+0x118>)
    c588:	4811      	ldr	r0, [pc, #68]	; (c5d0 <spi_data_read+0x11c>)
    c58a:	4b12      	ldr	r3, [pc, #72]	; (c5d4 <spi_data_read+0x120>)
    c58c:	4798      	blx	r3
    c58e:	4818      	ldr	r0, [pc, #96]	; (c5f0 <spi_data_read+0x13c>)
    c590:	4b12      	ldr	r3, [pc, #72]	; (c5dc <spi_data_read+0x128>)
    c592:	4798      	blx	r3
    c594:	200d      	movs	r0, #13
    c596:	4b12      	ldr	r3, [pc, #72]	; (c5e0 <spi_data_read+0x12c>)
    c598:	4798      	blx	r3
			break;
    c59a:	e7ac      	b.n	c4f6 <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    c59c:	2102      	movs	r1, #2
    c59e:	a805      	add	r0, sp, #20
    c5a0:	4b09      	ldr	r3, [pc, #36]	; (c5c8 <spi_data_read+0x114>)
    c5a2:	4798      	blx	r3
    c5a4:	2800      	cmp	r0, #0
    c5a6:	d0bf      	beq.n	c528 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    c5a8:	22c6      	movs	r2, #198	; 0xc6
    c5aa:	0092      	lsls	r2, r2, #2
    c5ac:	4907      	ldr	r1, [pc, #28]	; (c5cc <spi_data_read+0x118>)
    c5ae:	4808      	ldr	r0, [pc, #32]	; (c5d0 <spi_data_read+0x11c>)
    c5b0:	4b08      	ldr	r3, [pc, #32]	; (c5d4 <spi_data_read+0x120>)
    c5b2:	4798      	blx	r3
    c5b4:	480f      	ldr	r0, [pc, #60]	; (c5f4 <spi_data_read+0x140>)
    c5b6:	4b09      	ldr	r3, [pc, #36]	; (c5dc <spi_data_read+0x128>)
    c5b8:	4798      	blx	r3
    c5ba:	200d      	movs	r0, #13
    c5bc:	4b08      	ldr	r3, [pc, #32]	; (c5e0 <spi_data_read+0x12c>)
    c5be:	4798      	blx	r3
					result = N_FAIL;
    c5c0:	0025      	movs	r5, r4
					break;
    c5c2:	e798      	b.n	c4f6 <spi_data_read+0x42>
    c5c4:	2501      	movs	r5, #1
    c5c6:	e796      	b.n	c4f6 <spi_data_read+0x42>
    c5c8:	0000c3c1 	.word	0x0000c3c1
    c5cc:	00015a00 	.word	0x00015a00
    c5d0:	000151a8 	.word	0x000151a8
    c5d4:	00010b61 	.word	0x00010b61
    c5d8:	00015ecc 	.word	0x00015ecc
    c5dc:	00010c7d 	.word	0x00010c7d
    c5e0:	00010b95 	.word	0x00010b95
    c5e4:	20002760 	.word	0x20002760
    c5e8:	00015f00 	.word	0x00015f00
    c5ec:	0000030d 	.word	0x0000030d
    c5f0:	00015f30 	.word	0x00015f30
    c5f4:	00015f60 	.word	0x00015f60

0000c5f8 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    c5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5fa:	46d6      	mov	lr, sl
    c5fc:	464f      	mov	r7, r9
    c5fe:	4646      	mov	r6, r8
    c600:	b5c0      	push	{r6, r7, lr}
    c602:	b086      	sub	sp, #24
    c604:	9003      	str	r0, [sp, #12]
    c606:	9104      	str	r1, [sp, #16]
    c608:	2830      	cmp	r0, #48	; 0x30
    c60a:	d80f      	bhi.n	c62c <spi_write_reg+0x34>
    c60c:	4b30      	ldr	r3, [pc, #192]	; (c6d0 <spi_write_reg+0xd8>)
    c60e:	781f      	ldrb	r7, [r3, #0]
    c610:	b2fb      	uxtb	r3, r7
    c612:	9305      	str	r3, [sp, #20]
    c614:	2300      	movs	r3, #0
    c616:	2230      	movs	r2, #48	; 0x30
    c618:	9903      	ldr	r1, [sp, #12]
    c61a:	428a      	cmp	r2, r1
    c61c:	415b      	adcs	r3, r3
    c61e:	b2db      	uxtb	r3, r3
    c620:	469a      	mov	sl, r3
    c622:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    c624:	4b2b      	ldr	r3, [pc, #172]	; (c6d4 <spi_write_reg+0xdc>)
    c626:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    c628:	46d1      	mov	r9, sl
    c62a:	e033      	b.n	c694 <spi_write_reg+0x9c>
    c62c:	4b2a      	ldr	r3, [pc, #168]	; (c6d8 <spi_write_reg+0xe0>)
    c62e:	781f      	ldrb	r7, [r3, #0]
    c630:	e7ee      	b.n	c610 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    c632:	9805      	ldr	r0, [sp, #20]
    c634:	4b29      	ldr	r3, [pc, #164]	; (c6dc <spi_write_reg+0xe4>)
    c636:	4798      	blx	r3
    c638:	0004      	movs	r4, r0
	if (result != N_OK) {
    c63a:	2801      	cmp	r0, #1
    c63c:	d041      	beq.n	c6c2 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    c63e:	4a28      	ldr	r2, [pc, #160]	; (c6e0 <spi_write_reg+0xe8>)
    c640:	4928      	ldr	r1, [pc, #160]	; (c6e4 <spi_write_reg+0xec>)
    c642:	4829      	ldr	r0, [pc, #164]	; (c6e8 <spi_write_reg+0xf0>)
    c644:	4e29      	ldr	r6, [pc, #164]	; (c6ec <spi_write_reg+0xf4>)
    c646:	47b0      	blx	r6
    c648:	9903      	ldr	r1, [sp, #12]
    c64a:	4829      	ldr	r0, [pc, #164]	; (c6f0 <spi_write_reg+0xf8>)
    c64c:	47b0      	blx	r6
    c64e:	200d      	movs	r0, #13
    c650:	4b28      	ldr	r3, [pc, #160]	; (c6f4 <spi_write_reg+0xfc>)
    c652:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    c654:	2001      	movs	r0, #1
    c656:	4e28      	ldr	r6, [pc, #160]	; (c6f8 <spi_write_reg+0x100>)
    c658:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c65a:	2300      	movs	r3, #0
    c65c:	9300      	str	r3, [sp, #0]
    c65e:	2200      	movs	r2, #0
    c660:	2100      	movs	r1, #0
    c662:	20cf      	movs	r0, #207	; 0xcf
    c664:	4f1b      	ldr	r7, [pc, #108]	; (c6d4 <spi_write_reg+0xdc>)
    c666:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    c668:	20cf      	movs	r0, #207	; 0xcf
    c66a:	4b1c      	ldr	r3, [pc, #112]	; (c6dc <spi_write_reg+0xe4>)
    c66c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    c66e:	22ea      	movs	r2, #234	; 0xea
    c670:	0092      	lsls	r2, r2, #2
    c672:	491c      	ldr	r1, [pc, #112]	; (c6e4 <spi_write_reg+0xec>)
    c674:	481c      	ldr	r0, [pc, #112]	; (c6e8 <spi_write_reg+0xf0>)
    c676:	4f1d      	ldr	r7, [pc, #116]	; (c6ec <spi_write_reg+0xf4>)
    c678:	47b8      	blx	r7
    c67a:	9b04      	ldr	r3, [sp, #16]
    c67c:	9a03      	ldr	r2, [sp, #12]
    c67e:	0029      	movs	r1, r5
    c680:	481e      	ldr	r0, [pc, #120]	; (c6fc <spi_write_reg+0x104>)
    c682:	47b8      	blx	r7
    c684:	200d      	movs	r0, #13
    c686:	4b1b      	ldr	r3, [pc, #108]	; (c6f4 <spi_write_reg+0xfc>)
    c688:	4798      	blx	r3
		nm_bsp_sleep(1);
    c68a:	2001      	movs	r0, #1
    c68c:	47b0      	blx	r6
    c68e:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    c690:	2d00      	cmp	r5, #0
    c692:	d016      	beq.n	c6c2 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    c694:	464b      	mov	r3, r9
    c696:	9300      	str	r3, [sp, #0]
    c698:	2304      	movs	r3, #4
    c69a:	9a04      	ldr	r2, [sp, #16]
    c69c:	9f03      	ldr	r7, [sp, #12]
    c69e:	0039      	movs	r1, r7
    c6a0:	9805      	ldr	r0, [sp, #20]
    c6a2:	47c0      	blx	r8
    c6a4:	0004      	movs	r4, r0
	if (result != N_OK) {
    c6a6:	2801      	cmp	r0, #1
    c6a8:	d0c3      	beq.n	c632 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    c6aa:	4a15      	ldr	r2, [pc, #84]	; (c700 <spi_write_reg+0x108>)
    c6ac:	490d      	ldr	r1, [pc, #52]	; (c6e4 <spi_write_reg+0xec>)
    c6ae:	480e      	ldr	r0, [pc, #56]	; (c6e8 <spi_write_reg+0xf0>)
    c6b0:	4e0e      	ldr	r6, [pc, #56]	; (c6ec <spi_write_reg+0xf4>)
    c6b2:	47b0      	blx	r6
    c6b4:	0039      	movs	r1, r7
    c6b6:	4813      	ldr	r0, [pc, #76]	; (c704 <spi_write_reg+0x10c>)
    c6b8:	47b0      	blx	r6
    c6ba:	200d      	movs	r0, #13
    c6bc:	4b0d      	ldr	r3, [pc, #52]	; (c6f4 <spi_write_reg+0xfc>)
    c6be:	4798      	blx	r3
		goto _FAIL_;
    c6c0:	e7c8      	b.n	c654 <spi_write_reg+0x5c>
	}

	return result;
}
    c6c2:	0020      	movs	r0, r4
    c6c4:	b006      	add	sp, #24
    c6c6:	bc1c      	pop	{r2, r3, r4}
    c6c8:	4690      	mov	r8, r2
    c6ca:	4699      	mov	r9, r3
    c6cc:	46a2      	mov	sl, r4
    c6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6d0:	000159d8 	.word	0x000159d8
    c6d4:	0000c241 	.word	0x0000c241
    c6d8:	000159d9 	.word	0x000159d9
    c6dc:	0000c3e1 	.word	0x0000c3e1
    c6e0:	00000395 	.word	0x00000395
    c6e4:	00015a20 	.word	0x00015a20
    c6e8:	000151a8 	.word	0x000151a8
    c6ec:	00010b61 	.word	0x00010b61
    c6f0:	00016058 	.word	0x00016058
    c6f4:	00010b95 	.word	0x00010b95
    c6f8:	0000a055 	.word	0x0000a055
    c6fc:	00016090 	.word	0x00016090
    c700:	0000038f 	.word	0x0000038f
    c704:	0001602c 	.word	0x0001602c

0000c708 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    c708:	b5f0      	push	{r4, r5, r6, r7, lr}
    c70a:	46de      	mov	lr, fp
    c70c:	4657      	mov	r7, sl
    c70e:	464e      	mov	r6, r9
    c710:	4645      	mov	r5, r8
    c712:	b5e0      	push	{r5, r6, r7, lr}
    c714:	b087      	sub	sp, #28
    c716:	9002      	str	r0, [sp, #8]
    c718:	468b      	mov	fp, r1
    c71a:	28ff      	cmp	r0, #255	; 0xff
    c71c:	d80f      	bhi.n	c73e <spi_read_reg+0x36>
    c71e:	4b41      	ldr	r3, [pc, #260]	; (c824 <spi_read_reg+0x11c>)
    c720:	781f      	ldrb	r7, [r3, #0]
    c722:	b2fb      	uxtb	r3, r7
    c724:	9303      	str	r3, [sp, #12]
    c726:	2300      	movs	r3, #0
    c728:	22ff      	movs	r2, #255	; 0xff
    c72a:	9902      	ldr	r1, [sp, #8]
    c72c:	428a      	cmp	r2, r1
    c72e:	415b      	adcs	r3, r3
    c730:	b2db      	uxtb	r3, r3
    c732:	469a      	mov	sl, r3
    c734:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    c736:	4b3c      	ldr	r3, [pc, #240]	; (c828 <spi_read_reg+0x120>)
    c738:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    c73a:	46d1      	mov	r9, sl
    c73c:	e031      	b.n	c7a2 <spi_read_reg+0x9a>
    c73e:	4b3b      	ldr	r3, [pc, #236]	; (c82c <spi_read_reg+0x124>)
    c740:	781f      	ldrb	r7, [r3, #0]
    c742:	e7ee      	b.n	c722 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    c744:	9803      	ldr	r0, [sp, #12]
    c746:	4b3a      	ldr	r3, [pc, #232]	; (c830 <spi_read_reg+0x128>)
    c748:	4798      	blx	r3
    c74a:	0004      	movs	r4, r0
	if (result != N_OK) {
    c74c:	2801      	cmp	r0, #1
    c74e:	d040      	beq.n	c7d2 <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    c750:	4a38      	ldr	r2, [pc, #224]	; (c834 <spi_read_reg+0x12c>)
    c752:	4939      	ldr	r1, [pc, #228]	; (c838 <spi_read_reg+0x130>)
    c754:	4839      	ldr	r0, [pc, #228]	; (c83c <spi_read_reg+0x134>)
    c756:	4e3a      	ldr	r6, [pc, #232]	; (c840 <spi_read_reg+0x138>)
    c758:	47b0      	blx	r6
    c75a:	9902      	ldr	r1, [sp, #8]
    c75c:	4839      	ldr	r0, [pc, #228]	; (c844 <spi_read_reg+0x13c>)
    c75e:	47b0      	blx	r6
    c760:	200d      	movs	r0, #13
    c762:	4b39      	ldr	r3, [pc, #228]	; (c848 <spi_read_reg+0x140>)
    c764:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    c766:	2001      	movs	r0, #1
    c768:	4e38      	ldr	r6, [pc, #224]	; (c84c <spi_read_reg+0x144>)
    c76a:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c76c:	2300      	movs	r3, #0
    c76e:	9300      	str	r3, [sp, #0]
    c770:	2200      	movs	r2, #0
    c772:	2100      	movs	r1, #0
    c774:	20cf      	movs	r0, #207	; 0xcf
    c776:	4f2c      	ldr	r7, [pc, #176]	; (c828 <spi_read_reg+0x120>)
    c778:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    c77a:	20cf      	movs	r0, #207	; 0xcf
    c77c:	4b2c      	ldr	r3, [pc, #176]	; (c830 <spi_read_reg+0x128>)
    c77e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    c780:	4a33      	ldr	r2, [pc, #204]	; (c850 <spi_read_reg+0x148>)
    c782:	492d      	ldr	r1, [pc, #180]	; (c838 <spi_read_reg+0x130>)
    c784:	482d      	ldr	r0, [pc, #180]	; (c83c <spi_read_reg+0x134>)
    c786:	4f2e      	ldr	r7, [pc, #184]	; (c840 <spi_read_reg+0x138>)
    c788:	47b8      	blx	r7
    c78a:	9a02      	ldr	r2, [sp, #8]
    c78c:	0029      	movs	r1, r5
    c78e:	4831      	ldr	r0, [pc, #196]	; (c854 <spi_read_reg+0x14c>)
    c790:	47b8      	blx	r7
    c792:	200d      	movs	r0, #13
    c794:	4b2c      	ldr	r3, [pc, #176]	; (c848 <spi_read_reg+0x140>)
    c796:	4798      	blx	r3
		nm_bsp_sleep(1);
    c798:	2001      	movs	r0, #1
    c79a:	47b0      	blx	r6
    c79c:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    c79e:	2d00      	cmp	r5, #0
    c7a0:	d038      	beq.n	c814 <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    c7a2:	464b      	mov	r3, r9
    c7a4:	9300      	str	r3, [sp, #0]
    c7a6:	2304      	movs	r3, #4
    c7a8:	2200      	movs	r2, #0
    c7aa:	9f02      	ldr	r7, [sp, #8]
    c7ac:	0039      	movs	r1, r7
    c7ae:	9803      	ldr	r0, [sp, #12]
    c7b0:	47c0      	blx	r8
    c7b2:	0004      	movs	r4, r0
	if (result != N_OK) {
    c7b4:	2801      	cmp	r0, #1
    c7b6:	d0c5      	beq.n	c744 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    c7b8:	2282      	movs	r2, #130	; 0x82
    c7ba:	00d2      	lsls	r2, r2, #3
    c7bc:	491e      	ldr	r1, [pc, #120]	; (c838 <spi_read_reg+0x130>)
    c7be:	481f      	ldr	r0, [pc, #124]	; (c83c <spi_read_reg+0x134>)
    c7c0:	4e1f      	ldr	r6, [pc, #124]	; (c840 <spi_read_reg+0x138>)
    c7c2:	47b0      	blx	r6
    c7c4:	0039      	movs	r1, r7
    c7c6:	4824      	ldr	r0, [pc, #144]	; (c858 <spi_read_reg+0x150>)
    c7c8:	47b0      	blx	r6
    c7ca:	200d      	movs	r0, #13
    c7cc:	4b1e      	ldr	r3, [pc, #120]	; (c848 <spi_read_reg+0x140>)
    c7ce:	4798      	blx	r3
		goto _FAIL_;
    c7d0:	e7c9      	b.n	c766 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    c7d2:	464a      	mov	r2, r9
    c7d4:	2104      	movs	r1, #4
    c7d6:	a805      	add	r0, sp, #20
    c7d8:	4b20      	ldr	r3, [pc, #128]	; (c85c <spi_read_reg+0x154>)
    c7da:	4798      	blx	r3
    c7dc:	0004      	movs	r4, r0
	if (result != N_OK) {
    c7de:	2801      	cmp	r0, #1
    c7e0:	d00b      	beq.n	c7fa <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    c7e2:	4a1f      	ldr	r2, [pc, #124]	; (c860 <spi_read_reg+0x158>)
    c7e4:	4914      	ldr	r1, [pc, #80]	; (c838 <spi_read_reg+0x130>)
    c7e6:	4815      	ldr	r0, [pc, #84]	; (c83c <spi_read_reg+0x134>)
    c7e8:	4b15      	ldr	r3, [pc, #84]	; (c840 <spi_read_reg+0x138>)
    c7ea:	4798      	blx	r3
    c7ec:	481d      	ldr	r0, [pc, #116]	; (c864 <spi_read_reg+0x15c>)
    c7ee:	4b1e      	ldr	r3, [pc, #120]	; (c868 <spi_read_reg+0x160>)
    c7f0:	4798      	blx	r3
    c7f2:	200d      	movs	r0, #13
    c7f4:	4b14      	ldr	r3, [pc, #80]	; (c848 <spi_read_reg+0x140>)
    c7f6:	4798      	blx	r3
		goto _FAIL_;
    c7f8:	e7b5      	b.n	c766 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    c7fa:	aa05      	add	r2, sp, #20
    c7fc:	7853      	ldrb	r3, [r2, #1]
    c7fe:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    c800:	7891      	ldrb	r1, [r2, #2]
    c802:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    c804:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    c806:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    c808:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    c80a:	78d2      	ldrb	r2, [r2, #3]
    c80c:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    c80e:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    c810:	465a      	mov	r2, fp
    c812:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    c814:	0020      	movs	r0, r4
    c816:	b007      	add	sp, #28
    c818:	bc3c      	pop	{r2, r3, r4, r5}
    c81a:	4690      	mov	r8, r2
    c81c:	4699      	mov	r9, r3
    c81e:	46a2      	mov	sl, r4
    c820:	46ab      	mov	fp, r5
    c822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c824:	000159da 	.word	0x000159da
    c828:	0000c241 	.word	0x0000c241
    c82c:	000159db 	.word	0x000159db
    c830:	0000c3e1 	.word	0x0000c3e1
    c834:	00000416 	.word	0x00000416
    c838:	00015a40 	.word	0x00015a40
    c83c:	000151a8 	.word	0x000151a8
    c840:	00010b61 	.word	0x00010b61
    c844:	00015fc0 	.word	0x00015fc0
    c848:	00010b95 	.word	0x00010b95
    c84c:	0000a055 	.word	0x0000a055
    c850:	00000435 	.word	0x00000435
    c854:	00016014 	.word	0x00016014
    c858:	00015f94 	.word	0x00015f94
    c85c:	0000c4b5 	.word	0x0000c4b5
    c860:	0000041d 	.word	0x0000041d
    c864:	00015ff4 	.word	0x00015ff4
    c868:	00010c7d 	.word	0x00010c7d

0000c86c <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    c86c:	b510      	push	{r4, lr}
    c86e:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c870:	2300      	movs	r3, #0
    c872:	9300      	str	r3, [sp, #0]
    c874:	2200      	movs	r2, #0
    c876:	2100      	movs	r1, #0
    c878:	20cf      	movs	r0, #207	; 0xcf
    c87a:	4c04      	ldr	r4, [pc, #16]	; (c88c <nm_spi_reset+0x20>)
    c87c:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    c87e:	20cf      	movs	r0, #207	; 0xcf
    c880:	4b03      	ldr	r3, [pc, #12]	; (c890 <nm_spi_reset+0x24>)
    c882:	4798      	blx	r3
	return M2M_SUCCESS;
}
    c884:	2000      	movs	r0, #0
    c886:	b002      	add	sp, #8
    c888:	bd10      	pop	{r4, pc}
    c88a:	46c0      	nop			; (mov r8, r8)
    c88c:	0000c241 	.word	0x0000c241
    c890:	0000c3e1 	.word	0x0000c3e1

0000c894 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    c894:	2200      	movs	r2, #0
    c896:	4b02      	ldr	r3, [pc, #8]	; (c8a0 <nm_spi_deinit+0xc>)
    c898:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    c89a:	2000      	movs	r0, #0
    c89c:	4770      	bx	lr
    c89e:	46c0      	nop			; (mov r8, r8)
    c8a0:	20002760 	.word	0x20002760

0000c8a4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    c8a4:	b500      	push	{lr}
    c8a6:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    c8a8:	a901      	add	r1, sp, #4
    c8aa:	4b02      	ldr	r3, [pc, #8]	; (c8b4 <nm_spi_read_reg+0x10>)
    c8ac:	4798      	blx	r3

	return u32Val;
}
    c8ae:	9801      	ldr	r0, [sp, #4]
    c8b0:	b003      	add	sp, #12
    c8b2:	bd00      	pop	{pc}
    c8b4:	0000c709 	.word	0x0000c709

0000c8b8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    c8b8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    c8ba:	4b04      	ldr	r3, [pc, #16]	; (c8cc <nm_spi_read_reg_with_ret+0x14>)
    c8bc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c8be:	2300      	movs	r3, #0
    c8c0:	2801      	cmp	r0, #1
    c8c2:	d101      	bne.n	c8c8 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    c8c4:	0018      	movs	r0, r3
    c8c6:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    c8c8:	3b06      	subs	r3, #6
    c8ca:	e7fb      	b.n	c8c4 <nm_spi_read_reg_with_ret+0xc>
    c8cc:	0000c709 	.word	0x0000c709

0000c8d0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    c8d0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    c8d2:	4b04      	ldr	r3, [pc, #16]	; (c8e4 <nm_spi_write_reg+0x14>)
    c8d4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c8d6:	2300      	movs	r3, #0
    c8d8:	2801      	cmp	r0, #1
    c8da:	d101      	bne.n	c8e0 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    c8dc:	0018      	movs	r0, r3
    c8de:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    c8e0:	3b06      	subs	r3, #6
    c8e2:	e7fb      	b.n	c8dc <nm_spi_write_reg+0xc>
    c8e4:	0000c5f9 	.word	0x0000c5f9

0000c8e8 <nm_spi_init>:
{
    c8e8:	b510      	push	{r4, lr}
    c8ea:	b082      	sub	sp, #8
	uint32 reg = 0;
    c8ec:	2300      	movs	r3, #0
    c8ee:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    c8f0:	4a35      	ldr	r2, [pc, #212]	; (c9c8 <nm_spi_init+0xe0>)
    c8f2:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    c8f4:	4669      	mov	r1, sp
    c8f6:	4835      	ldr	r0, [pc, #212]	; (c9cc <nm_spi_init+0xe4>)
    c8f8:	4b35      	ldr	r3, [pc, #212]	; (c9d0 <nm_spi_init+0xe8>)
    c8fa:	4798      	blx	r3
    c8fc:	2800      	cmp	r0, #0
    c8fe:	d028      	beq.n	c952 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    c900:	4b31      	ldr	r3, [pc, #196]	; (c9c8 <nm_spi_init+0xe0>)
    c902:	781b      	ldrb	r3, [r3, #0]
    c904:	2b00      	cmp	r3, #0
    c906:	d10d      	bne.n	c924 <nm_spi_init+0x3c>
		reg &= ~0x70;
    c908:	337c      	adds	r3, #124	; 0x7c
    c90a:	9900      	ldr	r1, [sp, #0]
    c90c:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    c90e:	3b2c      	subs	r3, #44	; 0x2c
    c910:	4319      	orrs	r1, r3
    c912:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    c914:	482d      	ldr	r0, [pc, #180]	; (c9cc <nm_spi_init+0xe4>)
    c916:	4b2f      	ldr	r3, [pc, #188]	; (c9d4 <nm_spi_init+0xec>)
    c918:	4798      	blx	r3
    c91a:	1e04      	subs	r4, r0, #0
    c91c:	d03a      	beq.n	c994 <nm_spi_init+0xac>
		gu8Crc_off = 1;
    c91e:	2201      	movs	r2, #1
    c920:	4b29      	ldr	r3, [pc, #164]	; (c9c8 <nm_spi_init+0xe0>)
    c922:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    c924:	a901      	add	r1, sp, #4
    c926:	2080      	movs	r0, #128	; 0x80
    c928:	0140      	lsls	r0, r0, #5
    c92a:	4b29      	ldr	r3, [pc, #164]	; (c9d0 <nm_spi_init+0xe8>)
    c92c:	4798      	blx	r3
    c92e:	2800      	cmp	r0, #0
    c930:	d03c      	beq.n	c9ac <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    c932:	4c26      	ldr	r4, [pc, #152]	; (c9cc <nm_spi_init+0xe4>)
    c934:	0020      	movs	r0, r4
    c936:	4b28      	ldr	r3, [pc, #160]	; (c9d8 <nm_spi_init+0xf0>)
    c938:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    c93a:	2370      	movs	r3, #112	; 0x70
    c93c:	0001      	movs	r1, r0
    c93e:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    c940:	2050      	movs	r0, #80	; 0x50
    c942:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    c944:	0020      	movs	r0, r4
    c946:	4b25      	ldr	r3, [pc, #148]	; (c9dc <nm_spi_init+0xf4>)
    c948:	4798      	blx	r3
	return M2M_SUCCESS;
    c94a:	2400      	movs	r4, #0
}
    c94c:	0020      	movs	r0, r4
    c94e:	b002      	add	sp, #8
    c950:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    c952:	2201      	movs	r2, #1
    c954:	4b1c      	ldr	r3, [pc, #112]	; (c9c8 <nm_spi_init+0xe0>)
    c956:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    c958:	2298      	movs	r2, #152	; 0x98
    c95a:	00d2      	lsls	r2, r2, #3
    c95c:	4920      	ldr	r1, [pc, #128]	; (c9e0 <nm_spi_init+0xf8>)
    c95e:	4821      	ldr	r0, [pc, #132]	; (c9e4 <nm_spi_init+0xfc>)
    c960:	4b21      	ldr	r3, [pc, #132]	; (c9e8 <nm_spi_init+0x100>)
    c962:	4798      	blx	r3
    c964:	4821      	ldr	r0, [pc, #132]	; (c9ec <nm_spi_init+0x104>)
    c966:	4b22      	ldr	r3, [pc, #136]	; (c9f0 <nm_spi_init+0x108>)
    c968:	4798      	blx	r3
    c96a:	200d      	movs	r0, #13
    c96c:	4b21      	ldr	r3, [pc, #132]	; (c9f4 <nm_spi_init+0x10c>)
    c96e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    c970:	4669      	mov	r1, sp
    c972:	4816      	ldr	r0, [pc, #88]	; (c9cc <nm_spi_init+0xe4>)
    c974:	4b16      	ldr	r3, [pc, #88]	; (c9d0 <nm_spi_init+0xe8>)
    c976:	4798      	blx	r3
    c978:	1e04      	subs	r4, r0, #0
    c97a:	d1c1      	bne.n	c900 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    c97c:	4a1e      	ldr	r2, [pc, #120]	; (c9f8 <nm_spi_init+0x110>)
    c97e:	4918      	ldr	r1, [pc, #96]	; (c9e0 <nm_spi_init+0xf8>)
    c980:	4818      	ldr	r0, [pc, #96]	; (c9e4 <nm_spi_init+0xfc>)
    c982:	4b19      	ldr	r3, [pc, #100]	; (c9e8 <nm_spi_init+0x100>)
    c984:	4798      	blx	r3
    c986:	481d      	ldr	r0, [pc, #116]	; (c9fc <nm_spi_init+0x114>)
    c988:	4b19      	ldr	r3, [pc, #100]	; (c9f0 <nm_spi_init+0x108>)
    c98a:	4798      	blx	r3
    c98c:	200d      	movs	r0, #13
    c98e:	4b19      	ldr	r3, [pc, #100]	; (c9f4 <nm_spi_init+0x10c>)
    c990:	4798      	blx	r3
			return 0;
    c992:	e7db      	b.n	c94c <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    c994:	4a1a      	ldr	r2, [pc, #104]	; (ca00 <nm_spi_init+0x118>)
    c996:	4912      	ldr	r1, [pc, #72]	; (c9e0 <nm_spi_init+0xf8>)
    c998:	4812      	ldr	r0, [pc, #72]	; (c9e4 <nm_spi_init+0xfc>)
    c99a:	4b13      	ldr	r3, [pc, #76]	; (c9e8 <nm_spi_init+0x100>)
    c99c:	4798      	blx	r3
    c99e:	4819      	ldr	r0, [pc, #100]	; (ca04 <nm_spi_init+0x11c>)
    c9a0:	4b13      	ldr	r3, [pc, #76]	; (c9f0 <nm_spi_init+0x108>)
    c9a2:	4798      	blx	r3
    c9a4:	200d      	movs	r0, #13
    c9a6:	4b13      	ldr	r3, [pc, #76]	; (c9f4 <nm_spi_init+0x10c>)
    c9a8:	4798      	blx	r3
			return 0;
    c9aa:	e7cf      	b.n	c94c <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    c9ac:	4a16      	ldr	r2, [pc, #88]	; (ca08 <nm_spi_init+0x120>)
    c9ae:	490c      	ldr	r1, [pc, #48]	; (c9e0 <nm_spi_init+0xf8>)
    c9b0:	480c      	ldr	r0, [pc, #48]	; (c9e4 <nm_spi_init+0xfc>)
    c9b2:	4b0d      	ldr	r3, [pc, #52]	; (c9e8 <nm_spi_init+0x100>)
    c9b4:	4798      	blx	r3
    c9b6:	4815      	ldr	r0, [pc, #84]	; (ca0c <nm_spi_init+0x124>)
    c9b8:	4b0d      	ldr	r3, [pc, #52]	; (c9f0 <nm_spi_init+0x108>)
    c9ba:	4798      	blx	r3
    c9bc:	200d      	movs	r0, #13
    c9be:	4b0d      	ldr	r3, [pc, #52]	; (c9f4 <nm_spi_init+0x10c>)
    c9c0:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    c9c2:	2406      	movs	r4, #6
    c9c4:	4264      	negs	r4, r4
    c9c6:	e7c1      	b.n	c94c <nm_spi_init+0x64>
    c9c8:	20002760 	.word	0x20002760
    c9cc:	0000e824 	.word	0x0000e824
    c9d0:	0000c709 	.word	0x0000c709
    c9d4:	0000c5f9 	.word	0x0000c5f9
    c9d8:	0000c8a5 	.word	0x0000c8a5
    c9dc:	0000c8d1 	.word	0x0000c8d1
    c9e0:	00015a5c 	.word	0x00015a5c
    c9e4:	000151a8 	.word	0x000151a8
    c9e8:	00010b61 	.word	0x00010b61
    c9ec:	00015b68 	.word	0x00015b68
    c9f0:	00010c7d 	.word	0x00010c7d
    c9f4:	00010b95 	.word	0x00010b95
    c9f8:	000004c3 	.word	0x000004c3
    c9fc:	00015bb8 	.word	0x00015bb8
    ca00:	000004cd 	.word	0x000004cd
    ca04:	00015be4 	.word	0x00015be4
    ca08:	000004d7 	.word	0x000004d7
    ca0c:	00015c18 	.word	0x00015c18

0000ca10 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    ca10:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca12:	46de      	mov	lr, fp
    ca14:	4657      	mov	r7, sl
    ca16:	464e      	mov	r6, r9
    ca18:	4645      	mov	r5, r8
    ca1a:	b5e0      	push	{r5, r6, r7, lr}
    ca1c:	b087      	sub	sp, #28
    ca1e:	9002      	str	r0, [sp, #8]
    ca20:	9103      	str	r1, [sp, #12]
    ca22:	0016      	movs	r6, r2
    ca24:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    ca26:	2300      	movs	r3, #0
    ca28:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    ca2a:	2400      	movs	r4, #0
    ca2c:	4b3e      	ldr	r3, [pc, #248]	; (cb28 <nm_spi_read_block+0x118>)
    ca2e:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    ca30:	46a9      	mov	r9, r5
    ca32:	e037      	b.n	caa4 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    ca34:	2301      	movs	r3, #1
    ca36:	469b      	mov	fp, r3
		size = 2;
    ca38:	3601      	adds	r6, #1
    ca3a:	e035      	b.n	caa8 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    ca3c:	20c8      	movs	r0, #200	; 0xc8
    ca3e:	4b3b      	ldr	r3, [pc, #236]	; (cb2c <nm_spi_read_block+0x11c>)
    ca40:	4798      	blx	r3
	if (result != N_OK) {
    ca42:	2801      	cmp	r0, #1
    ca44:	d045      	beq.n	cad2 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    ca46:	4a3a      	ldr	r2, [pc, #232]	; (cb30 <nm_spi_read_block+0x120>)
    ca48:	493a      	ldr	r1, [pc, #232]	; (cb34 <nm_spi_read_block+0x124>)
    ca4a:	483b      	ldr	r0, [pc, #236]	; (cb38 <nm_spi_read_block+0x128>)
    ca4c:	4f3b      	ldr	r7, [pc, #236]	; (cb3c <nm_spi_read_block+0x12c>)
    ca4e:	47b8      	blx	r7
    ca50:	9902      	ldr	r1, [sp, #8]
    ca52:	483b      	ldr	r0, [pc, #236]	; (cb40 <nm_spi_read_block+0x130>)
    ca54:	47b8      	blx	r7
    ca56:	200d      	movs	r0, #13
    ca58:	4b3a      	ldr	r3, [pc, #232]	; (cb44 <nm_spi_read_block+0x134>)
    ca5a:	4798      	blx	r3
		nm_bsp_sleep(1);
    ca5c:	2001      	movs	r0, #1
    ca5e:	4f3a      	ldr	r7, [pc, #232]	; (cb48 <nm_spi_read_block+0x138>)
    ca60:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ca62:	9400      	str	r4, [sp, #0]
    ca64:	0023      	movs	r3, r4
    ca66:	0022      	movs	r2, r4
    ca68:	0021      	movs	r1, r4
    ca6a:	20cf      	movs	r0, #207	; 0xcf
    ca6c:	4d2e      	ldr	r5, [pc, #184]	; (cb28 <nm_spi_read_block+0x118>)
    ca6e:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    ca70:	20cf      	movs	r0, #207	; 0xcf
    ca72:	4b2e      	ldr	r3, [pc, #184]	; (cb2c <nm_spi_read_block+0x11c>)
    ca74:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    ca76:	4a35      	ldr	r2, [pc, #212]	; (cb4c <nm_spi_read_block+0x13c>)
    ca78:	492e      	ldr	r1, [pc, #184]	; (cb34 <nm_spi_read_block+0x124>)
    ca7a:	482f      	ldr	r0, [pc, #188]	; (cb38 <nm_spi_read_block+0x128>)
    ca7c:	4b2f      	ldr	r3, [pc, #188]	; (cb3c <nm_spi_read_block+0x12c>)
    ca7e:	469a      	mov	sl, r3
    ca80:	4798      	blx	r3
    ca82:	0033      	movs	r3, r6
    ca84:	9a02      	ldr	r2, [sp, #8]
    ca86:	4649      	mov	r1, r9
    ca88:	4831      	ldr	r0, [pc, #196]	; (cb50 <nm_spi_read_block+0x140>)
    ca8a:	47d0      	blx	sl
    ca8c:	200d      	movs	r0, #13
    ca8e:	4b2d      	ldr	r3, [pc, #180]	; (cb44 <nm_spi_read_block+0x134>)
    ca90:	4798      	blx	r3
		nm_bsp_sleep(1);
    ca92:	2001      	movs	r0, #1
    ca94:	47b8      	blx	r7
    ca96:	2301      	movs	r3, #1
    ca98:	425b      	negs	r3, r3
    ca9a:	469c      	mov	ip, r3
    ca9c:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    ca9e:	464b      	mov	r3, r9
    caa0:	2b00      	cmp	r3, #0
    caa2:	d038      	beq.n	cb16 <nm_spi_read_block+0x106>
	if (size == 1)
    caa4:	2e01      	cmp	r6, #1
    caa6:	d0c5      	beq.n	ca34 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    caa8:	9400      	str	r4, [sp, #0]
    caaa:	0033      	movs	r3, r6
    caac:	0022      	movs	r2, r4
    caae:	9d02      	ldr	r5, [sp, #8]
    cab0:	0029      	movs	r1, r5
    cab2:	20c8      	movs	r0, #200	; 0xc8
    cab4:	47c0      	blx	r8
	if (result != N_OK) {
    cab6:	2801      	cmp	r0, #1
    cab8:	d0c0      	beq.n	ca3c <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    caba:	4a26      	ldr	r2, [pc, #152]	; (cb54 <nm_spi_read_block+0x144>)
    cabc:	491d      	ldr	r1, [pc, #116]	; (cb34 <nm_spi_read_block+0x124>)
    cabe:	481e      	ldr	r0, [pc, #120]	; (cb38 <nm_spi_read_block+0x128>)
    cac0:	4f1e      	ldr	r7, [pc, #120]	; (cb3c <nm_spi_read_block+0x12c>)
    cac2:	47b8      	blx	r7
    cac4:	0029      	movs	r1, r5
    cac6:	4824      	ldr	r0, [pc, #144]	; (cb58 <nm_spi_read_block+0x148>)
    cac8:	47b8      	blx	r7
    caca:	200d      	movs	r0, #13
    cacc:	4b1d      	ldr	r3, [pc, #116]	; (cb44 <nm_spi_read_block+0x134>)
    cace:	4798      	blx	r3
    cad0:	e7c4      	b.n	ca5c <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    cad2:	465b      	mov	r3, fp
    cad4:	2b00      	cmp	r3, #0
    cad6:	d016      	beq.n	cb06 <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    cad8:	af05      	add	r7, sp, #20
    cada:	0022      	movs	r2, r4
    cadc:	0031      	movs	r1, r6
    cade:	0038      	movs	r0, r7
    cae0:	4b1e      	ldr	r3, [pc, #120]	; (cb5c <nm_spi_read_block+0x14c>)
    cae2:	4798      	blx	r3
		buf[0] = tmp[0];
    cae4:	783b      	ldrb	r3, [r7, #0]
    cae6:	9a03      	ldr	r2, [sp, #12]
    cae8:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    caea:	2801      	cmp	r0, #1
    caec:	d011      	beq.n	cb12 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    caee:	4a1c      	ldr	r2, [pc, #112]	; (cb60 <nm_spi_read_block+0x150>)
    caf0:	4910      	ldr	r1, [pc, #64]	; (cb34 <nm_spi_read_block+0x124>)
    caf2:	4811      	ldr	r0, [pc, #68]	; (cb38 <nm_spi_read_block+0x128>)
    caf4:	4b11      	ldr	r3, [pc, #68]	; (cb3c <nm_spi_read_block+0x12c>)
    caf6:	4798      	blx	r3
    caf8:	481a      	ldr	r0, [pc, #104]	; (cb64 <nm_spi_read_block+0x154>)
    cafa:	4b1b      	ldr	r3, [pc, #108]	; (cb68 <nm_spi_read_block+0x158>)
    cafc:	4798      	blx	r3
    cafe:	200d      	movs	r0, #13
    cb00:	4b10      	ldr	r3, [pc, #64]	; (cb44 <nm_spi_read_block+0x134>)
    cb02:	4798      	blx	r3
    cb04:	e7aa      	b.n	ca5c <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    cb06:	0022      	movs	r2, r4
    cb08:	0031      	movs	r1, r6
    cb0a:	9803      	ldr	r0, [sp, #12]
    cb0c:	4b13      	ldr	r3, [pc, #76]	; (cb5c <nm_spi_read_block+0x14c>)
    cb0e:	4798      	blx	r3
    cb10:	e7eb      	b.n	caea <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    cb12:	2000      	movs	r0, #0
    cb14:	e001      	b.n	cb1a <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    cb16:	2006      	movs	r0, #6
    cb18:	4240      	negs	r0, r0

	return s8Ret;
}
    cb1a:	b007      	add	sp, #28
    cb1c:	bc3c      	pop	{r2, r3, r4, r5}
    cb1e:	4690      	mov	r8, r2
    cb20:	4699      	mov	r9, r3
    cb22:	46a2      	mov	sl, r4
    cb24:	46ab      	mov	fp, r5
    cb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb28:	0000c241 	.word	0x0000c241
    cb2c:	0000c3e1 	.word	0x0000c3e1
    cb30:	0000045c 	.word	0x0000045c
    cb34:	00015a50 	.word	0x00015a50
    cb38:	000151a8 	.word	0x000151a8
    cb3c:	00010b61 	.word	0x00010b61
    cb40:	00015c6c 	.word	0x00015c6c
    cb44:	00010b95 	.word	0x00010b95
    cb48:	0000a055 	.word	0x0000a055
    cb4c:	0000047d 	.word	0x0000047d
    cb50:	00015ccc 	.word	0x00015ccc
    cb54:	00000456 	.word	0x00000456
    cb58:	00015c3c 	.word	0x00015c3c
    cb5c:	0000c4b5 	.word	0x0000c4b5
    cb60:	0000046c 	.word	0x0000046c
    cb64:	00015ca4 	.word	0x00015ca4
    cb68:	00010c7d 	.word	0x00010c7d

0000cb6c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    cb6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb6e:	46de      	mov	lr, fp
    cb70:	4647      	mov	r7, r8
    cb72:	b580      	push	{r7, lr}
    cb74:	b089      	sub	sp, #36	; 0x24
    cb76:	9004      	str	r0, [sp, #16]
    cb78:	468b      	mov	fp, r1
    cb7a:	9203      	str	r2, [sp, #12]
    cb7c:	260a      	movs	r6, #10
    cb7e:	2780      	movs	r7, #128	; 0x80
    cb80:	01bf      	lsls	r7, r7, #6
    cb82:	466b      	mov	r3, sp
    cb84:	82df      	strh	r7, [r3, #22]
    cb86:	0035      	movs	r5, r6
    cb88:	e02d      	b.n	cbe6 <nm_spi_write_block+0x7a>
		size = 2;
    cb8a:	3301      	adds	r3, #1
    cb8c:	9303      	str	r3, [sp, #12]
    cb8e:	e02d      	b.n	cbec <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    cb90:	4a82      	ldr	r2, [pc, #520]	; (cd9c <nm_spi_write_block+0x230>)
    cb92:	4983      	ldr	r1, [pc, #524]	; (cda0 <nm_spi_write_block+0x234>)
    cb94:	4883      	ldr	r0, [pc, #524]	; (cda4 <nm_spi_write_block+0x238>)
    cb96:	4c84      	ldr	r4, [pc, #528]	; (cda8 <nm_spi_write_block+0x23c>)
    cb98:	47a0      	blx	r4
    cb9a:	0031      	movs	r1, r6
    cb9c:	4883      	ldr	r0, [pc, #524]	; (cdac <nm_spi_write_block+0x240>)
    cb9e:	47a0      	blx	r4
    cba0:	200d      	movs	r0, #13
    cba2:	4b83      	ldr	r3, [pc, #524]	; (cdb0 <nm_spi_write_block+0x244>)
    cba4:	4798      	blx	r3
		nm_bsp_sleep(1);
    cba6:	2001      	movs	r0, #1
    cba8:	4c82      	ldr	r4, [pc, #520]	; (cdb4 <nm_spi_write_block+0x248>)
    cbaa:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    cbac:	2300      	movs	r3, #0
    cbae:	9300      	str	r3, [sp, #0]
    cbb0:	2200      	movs	r2, #0
    cbb2:	2100      	movs	r1, #0
    cbb4:	20cf      	movs	r0, #207	; 0xcf
    cbb6:	4e80      	ldr	r6, [pc, #512]	; (cdb8 <nm_spi_write_block+0x24c>)
    cbb8:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    cbba:	20cf      	movs	r0, #207	; 0xcf
    cbbc:	4b7f      	ldr	r3, [pc, #508]	; (cdbc <nm_spi_write_block+0x250>)
    cbbe:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    cbc0:	4a7f      	ldr	r2, [pc, #508]	; (cdc0 <nm_spi_write_block+0x254>)
    cbc2:	4977      	ldr	r1, [pc, #476]	; (cda0 <nm_spi_write_block+0x234>)
    cbc4:	4877      	ldr	r0, [pc, #476]	; (cda4 <nm_spi_write_block+0x238>)
    cbc6:	4e78      	ldr	r6, [pc, #480]	; (cda8 <nm_spi_write_block+0x23c>)
    cbc8:	47b0      	blx	r6
    cbca:	9b03      	ldr	r3, [sp, #12]
    cbcc:	9a04      	ldr	r2, [sp, #16]
    cbce:	0029      	movs	r1, r5
    cbd0:	487c      	ldr	r0, [pc, #496]	; (cdc4 <nm_spi_write_block+0x258>)
    cbd2:	47b0      	blx	r6
    cbd4:	200d      	movs	r0, #13
    cbd6:	4b76      	ldr	r3, [pc, #472]	; (cdb0 <nm_spi_write_block+0x244>)
    cbd8:	4798      	blx	r3
		nm_bsp_sleep(1);
    cbda:	2001      	movs	r0, #1
    cbdc:	47a0      	blx	r4
    cbde:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    cbe0:	2d00      	cmp	r5, #0
    cbe2:	d100      	bne.n	cbe6 <nm_spi_write_block+0x7a>
    cbe4:	e0d2      	b.n	cd8c <nm_spi_write_block+0x220>
	if (size == 1)
    cbe6:	9b03      	ldr	r3, [sp, #12]
    cbe8:	2b01      	cmp	r3, #1
    cbea:	d0ce      	beq.n	cb8a <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    cbec:	2300      	movs	r3, #0
    cbee:	9300      	str	r3, [sp, #0]
    cbf0:	9b03      	ldr	r3, [sp, #12]
    cbf2:	2200      	movs	r2, #0
    cbf4:	9e04      	ldr	r6, [sp, #16]
    cbf6:	0031      	movs	r1, r6
    cbf8:	20c7      	movs	r0, #199	; 0xc7
    cbfa:	4c6f      	ldr	r4, [pc, #444]	; (cdb8 <nm_spi_write_block+0x24c>)
    cbfc:	47a0      	blx	r4
	if (result != N_OK) {
    cbfe:	2801      	cmp	r0, #1
    cc00:	d1c6      	bne.n	cb90 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    cc02:	20c7      	movs	r0, #199	; 0xc7
    cc04:	4b6d      	ldr	r3, [pc, #436]	; (cdbc <nm_spi_write_block+0x250>)
    cc06:	4798      	blx	r3
	if (result != N_OK) {
    cc08:	2801      	cmp	r0, #1
    cc0a:	d00b      	beq.n	cc24 <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    cc0c:	4a6e      	ldr	r2, [pc, #440]	; (cdc8 <nm_spi_write_block+0x25c>)
    cc0e:	4964      	ldr	r1, [pc, #400]	; (cda0 <nm_spi_write_block+0x234>)
    cc10:	4864      	ldr	r0, [pc, #400]	; (cda4 <nm_spi_write_block+0x238>)
    cc12:	4c65      	ldr	r4, [pc, #404]	; (cda8 <nm_spi_write_block+0x23c>)
    cc14:	47a0      	blx	r4
    cc16:	9904      	ldr	r1, [sp, #16]
    cc18:	486c      	ldr	r0, [pc, #432]	; (cdcc <nm_spi_write_block+0x260>)
    cc1a:	47a0      	blx	r4
    cc1c:	200d      	movs	r0, #13
    cc1e:	4b64      	ldr	r3, [pc, #400]	; (cdb0 <nm_spi_write_block+0x244>)
    cc20:	4798      	blx	r3
    cc22:	e7c0      	b.n	cba6 <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    cc24:	2200      	movs	r2, #0
    cc26:	ab07      	add	r3, sp, #28
    cc28:	801a      	strh	r2, [r3, #0]
    cc2a:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    cc2c:	2600      	movs	r6, #0
				order = 0x1;
    cc2e:	46a8      	mov	r8, r5
    cc30:	0035      	movs	r5, r6
    cc32:	0026      	movs	r6, r4
    cc34:	e021      	b.n	cc7a <nm_spi_write_block+0x10e>
				order = 0x2;
    cc36:	2300      	movs	r3, #0
    cc38:	42b7      	cmp	r7, r6
    cc3a:	415b      	adcs	r3, r3
    cc3c:	3302      	adds	r3, #2
		cmd |= order;
    cc3e:	200b      	movs	r0, #11
    cc40:	aa04      	add	r2, sp, #16
    cc42:	4694      	mov	ip, r2
    cc44:	4460      	add	r0, ip
    cc46:	2210      	movs	r2, #16
    cc48:	4252      	negs	r2, r2
    cc4a:	4313      	orrs	r3, r2
    cc4c:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    cc4e:	2101      	movs	r1, #1
    cc50:	4b5f      	ldr	r3, [pc, #380]	; (cdd0 <nm_spi_write_block+0x264>)
    cc52:	4798      	blx	r3
    cc54:	2800      	cmp	r0, #0
    cc56:	d11d      	bne.n	cc94 <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    cc58:	465b      	mov	r3, fp
    cc5a:	1958      	adds	r0, r3, r5
    cc5c:	0021      	movs	r1, r4
    cc5e:	4b5c      	ldr	r3, [pc, #368]	; (cdd0 <nm_spi_write_block+0x264>)
    cc60:	4798      	blx	r3
    cc62:	2800      	cmp	r0, #0
    cc64:	d12e      	bne.n	ccc4 <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    cc66:	4b5b      	ldr	r3, [pc, #364]	; (cdd4 <nm_spi_write_block+0x268>)
    cc68:	781b      	ldrb	r3, [r3, #0]
    cc6a:	2b00      	cmp	r3, #0
    cc6c:	d037      	beq.n	ccde <nm_spi_write_block+0x172>
		ix += nbytes;
    cc6e:	1965      	adds	r5, r4, r5
    cc70:	b22d      	sxth	r5, r5
		sz -= nbytes;
    cc72:	1b36      	subs	r6, r6, r4
    cc74:	b2b6      	uxth	r6, r6
	} while (sz);
    cc76:	2e00      	cmp	r6, #0
    cc78:	d052      	beq.n	cd20 <nm_spi_write_block+0x1b4>
    cc7a:	1c34      	adds	r4, r6, #0
    cc7c:	42be      	cmp	r6, r7
    cc7e:	d901      	bls.n	cc84 <nm_spi_write_block+0x118>
    cc80:	466b      	mov	r3, sp
    cc82:	8adc      	ldrh	r4, [r3, #22]
    cc84:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    cc86:	2d00      	cmp	r5, #0
    cc88:	d1d5      	bne.n	cc36 <nm_spi_write_block+0xca>
				order = 0x3;
    cc8a:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    cc8c:	42be      	cmp	r6, r7
    cc8e:	d9d6      	bls.n	cc3e <nm_spi_write_block+0xd2>
				order = 0x1;
    cc90:	3b02      	subs	r3, #2
    cc92:	e7d4      	b.n	cc3e <nm_spi_write_block+0xd2>
    cc94:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    cc96:	4a50      	ldr	r2, [pc, #320]	; (cdd8 <nm_spi_write_block+0x26c>)
    cc98:	4950      	ldr	r1, [pc, #320]	; (cddc <nm_spi_write_block+0x270>)
    cc9a:	4842      	ldr	r0, [pc, #264]	; (cda4 <nm_spi_write_block+0x238>)
    cc9c:	4b42      	ldr	r3, [pc, #264]	; (cda8 <nm_spi_write_block+0x23c>)
    cc9e:	4798      	blx	r3
    cca0:	484f      	ldr	r0, [pc, #316]	; (cde0 <nm_spi_write_block+0x274>)
    cca2:	4b50      	ldr	r3, [pc, #320]	; (cde4 <nm_spi_write_block+0x278>)
    cca4:	4798      	blx	r3
    cca6:	200d      	movs	r0, #13
    cca8:	4b41      	ldr	r3, [pc, #260]	; (cdb0 <nm_spi_write_block+0x244>)
    ccaa:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    ccac:	4a4e      	ldr	r2, [pc, #312]	; (cde8 <nm_spi_write_block+0x27c>)
    ccae:	493c      	ldr	r1, [pc, #240]	; (cda0 <nm_spi_write_block+0x234>)
    ccb0:	483c      	ldr	r0, [pc, #240]	; (cda4 <nm_spi_write_block+0x238>)
    ccb2:	4b3d      	ldr	r3, [pc, #244]	; (cda8 <nm_spi_write_block+0x23c>)
    ccb4:	4798      	blx	r3
    ccb6:	484d      	ldr	r0, [pc, #308]	; (cdec <nm_spi_write_block+0x280>)
    ccb8:	4b4a      	ldr	r3, [pc, #296]	; (cde4 <nm_spi_write_block+0x278>)
    ccba:	4798      	blx	r3
    ccbc:	200d      	movs	r0, #13
    ccbe:	4b3c      	ldr	r3, [pc, #240]	; (cdb0 <nm_spi_write_block+0x244>)
    ccc0:	4798      	blx	r3
    ccc2:	e770      	b.n	cba6 <nm_spi_write_block+0x3a>
    ccc4:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    ccc6:	4a4a      	ldr	r2, [pc, #296]	; (cdf0 <nm_spi_write_block+0x284>)
    ccc8:	4944      	ldr	r1, [pc, #272]	; (cddc <nm_spi_write_block+0x270>)
    ccca:	4836      	ldr	r0, [pc, #216]	; (cda4 <nm_spi_write_block+0x238>)
    cccc:	4b36      	ldr	r3, [pc, #216]	; (cda8 <nm_spi_write_block+0x23c>)
    ccce:	4798      	blx	r3
    ccd0:	4848      	ldr	r0, [pc, #288]	; (cdf4 <nm_spi_write_block+0x288>)
    ccd2:	4b44      	ldr	r3, [pc, #272]	; (cde4 <nm_spi_write_block+0x278>)
    ccd4:	4798      	blx	r3
    ccd6:	200d      	movs	r0, #13
    ccd8:	4b35      	ldr	r3, [pc, #212]	; (cdb0 <nm_spi_write_block+0x244>)
    ccda:	4798      	blx	r3
    ccdc:	e7e6      	b.n	ccac <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    ccde:	2102      	movs	r1, #2
    cce0:	a807      	add	r0, sp, #28
    cce2:	4b3b      	ldr	r3, [pc, #236]	; (cdd0 <nm_spi_write_block+0x264>)
    cce4:	4798      	blx	r3
    cce6:	2800      	cmp	r0, #0
    cce8:	d0c1      	beq.n	cc6e <nm_spi_write_block+0x102>
    ccea:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    ccec:	22d7      	movs	r2, #215	; 0xd7
    ccee:	0092      	lsls	r2, r2, #2
    ccf0:	493a      	ldr	r1, [pc, #232]	; (cddc <nm_spi_write_block+0x270>)
    ccf2:	482c      	ldr	r0, [pc, #176]	; (cda4 <nm_spi_write_block+0x238>)
    ccf4:	4b2c      	ldr	r3, [pc, #176]	; (cda8 <nm_spi_write_block+0x23c>)
    ccf6:	4798      	blx	r3
    ccf8:	483f      	ldr	r0, [pc, #252]	; (cdf8 <nm_spi_write_block+0x28c>)
    ccfa:	4b3a      	ldr	r3, [pc, #232]	; (cde4 <nm_spi_write_block+0x278>)
    ccfc:	4798      	blx	r3
    ccfe:	200d      	movs	r0, #13
    cd00:	4b2b      	ldr	r3, [pc, #172]	; (cdb0 <nm_spi_write_block+0x244>)
    cd02:	4798      	blx	r3
    cd04:	e7d2      	b.n	ccac <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    cd06:	229a      	movs	r2, #154	; 0x9a
    cd08:	0052      	lsls	r2, r2, #1
    cd0a:	493c      	ldr	r1, [pc, #240]	; (cdfc <nm_spi_write_block+0x290>)
    cd0c:	4825      	ldr	r0, [pc, #148]	; (cda4 <nm_spi_write_block+0x238>)
    cd0e:	4b26      	ldr	r3, [pc, #152]	; (cda8 <nm_spi_write_block+0x23c>)
    cd10:	4798      	blx	r3
    cd12:	483b      	ldr	r0, [pc, #236]	; (ce00 <nm_spi_write_block+0x294>)
    cd14:	4b33      	ldr	r3, [pc, #204]	; (cde4 <nm_spi_write_block+0x278>)
    cd16:	4798      	blx	r3
    cd18:	200d      	movs	r0, #13
    cd1a:	4b25      	ldr	r3, [pc, #148]	; (cdb0 <nm_spi_write_block+0x244>)
    cd1c:	4798      	blx	r3
    cd1e:	e027      	b.n	cd70 <nm_spi_write_block+0x204>
    cd20:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    cd22:	4b2c      	ldr	r3, [pc, #176]	; (cdd4 <nm_spi_write_block+0x268>)
    cd24:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    cd26:	1e63      	subs	r3, r4, #1
    cd28:	419c      	sbcs	r4, r3
    cd2a:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    cd2c:	b2a1      	uxth	r1, r4
    cd2e:	a807      	add	r0, sp, #28
    cd30:	4b34      	ldr	r3, [pc, #208]	; (ce04 <nm_spi_write_block+0x298>)
    cd32:	4798      	blx	r3
    cd34:	2800      	cmp	r0, #0
    cd36:	d1e6      	bne.n	cd06 <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    cd38:	ab08      	add	r3, sp, #32
    cd3a:	191b      	adds	r3, r3, r4
    cd3c:	3b05      	subs	r3, #5
    cd3e:	781b      	ldrb	r3, [r3, #0]
    cd40:	2b00      	cmp	r3, #0
    cd42:	d106      	bne.n	cd52 <nm_spi_write_block+0x1e6>
    cd44:	ab08      	add	r3, sp, #32
    cd46:	469c      	mov	ip, r3
    cd48:	4464      	add	r4, ip
    cd4a:	3c06      	subs	r4, #6
    cd4c:	7823      	ldrb	r3, [r4, #0]
    cd4e:	2bc3      	cmp	r3, #195	; 0xc3
    cd50:	d01a      	beq.n	cd88 <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    cd52:	223c      	movs	r2, #60	; 0x3c
    cd54:	32ff      	adds	r2, #255	; 0xff
    cd56:	4929      	ldr	r1, [pc, #164]	; (cdfc <nm_spi_write_block+0x290>)
    cd58:	4812      	ldr	r0, [pc, #72]	; (cda4 <nm_spi_write_block+0x238>)
    cd5a:	4c13      	ldr	r4, [pc, #76]	; (cda8 <nm_spi_write_block+0x23c>)
    cd5c:	47a0      	blx	r4
    cd5e:	a907      	add	r1, sp, #28
    cd60:	788b      	ldrb	r3, [r1, #2]
    cd62:	784a      	ldrb	r2, [r1, #1]
    cd64:	7809      	ldrb	r1, [r1, #0]
    cd66:	4828      	ldr	r0, [pc, #160]	; (ce08 <nm_spi_write_block+0x29c>)
    cd68:	47a0      	blx	r4
    cd6a:	200d      	movs	r0, #13
    cd6c:	4b10      	ldr	r3, [pc, #64]	; (cdb0 <nm_spi_write_block+0x244>)
    cd6e:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    cd70:	4a26      	ldr	r2, [pc, #152]	; (ce0c <nm_spi_write_block+0x2a0>)
    cd72:	490b      	ldr	r1, [pc, #44]	; (cda0 <nm_spi_write_block+0x234>)
    cd74:	480b      	ldr	r0, [pc, #44]	; (cda4 <nm_spi_write_block+0x238>)
    cd76:	4b0c      	ldr	r3, [pc, #48]	; (cda8 <nm_spi_write_block+0x23c>)
    cd78:	4798      	blx	r3
    cd7a:	481c      	ldr	r0, [pc, #112]	; (cdec <nm_spi_write_block+0x280>)
    cd7c:	4b19      	ldr	r3, [pc, #100]	; (cde4 <nm_spi_write_block+0x278>)
    cd7e:	4798      	blx	r3
    cd80:	200d      	movs	r0, #13
    cd82:	4b0b      	ldr	r3, [pc, #44]	; (cdb0 <nm_spi_write_block+0x244>)
    cd84:	4798      	blx	r3
    cd86:	e70e      	b.n	cba6 <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    cd88:	2000      	movs	r0, #0
    cd8a:	e001      	b.n	cd90 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    cd8c:	2006      	movs	r0, #6
    cd8e:	4240      	negs	r0, r0

	return s8Ret;
}
    cd90:	b009      	add	sp, #36	; 0x24
    cd92:	bc0c      	pop	{r2, r3}
    cd94:	4690      	mov	r8, r2
    cd96:	469b      	mov	fp, r3
    cd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd9a:	46c0      	nop			; (mov r8, r8)
    cd9c:	000003c3 	.word	0x000003c3
    cda0:	00015a30 	.word	0x00015a30
    cda4:	000151a8 	.word	0x000151a8
    cda8:	00010b61 	.word	0x00010b61
    cdac:	00015ce8 	.word	0x00015ce8
    cdb0:	00010b95 	.word	0x00010b95
    cdb4:	0000a055 	.word	0x0000a055
    cdb8:	0000c241 	.word	0x0000c241
    cdbc:	0000c3e1 	.word	0x0000c3e1
    cdc0:	000003eb 	.word	0x000003eb
    cdc4:	00015ccc 	.word	0x00015ccc
    cdc8:	000003c9 	.word	0x000003c9
    cdcc:	00015d18 	.word	0x00015d18
    cdd0:	0000c221 	.word	0x0000c221
    cdd4:	20002760 	.word	0x20002760
    cdd8:	00000349 	.word	0x00000349
    cddc:	00015a10 	.word	0x00015a10
    cde0:	00015d50 	.word	0x00015d50
    cde4:	00010c7d 	.word	0x00010c7d
    cde8:	000003d9 	.word	0x000003d9
    cdec:	00015e44 	.word	0x00015e44
    cdf0:	00000352 	.word	0x00000352
    cdf4:	00015d88 	.word	0x00015d88
    cdf8:	00015dbc 	.word	0x00015dbc
    cdfc:	000159e4 	.word	0x000159e4
    ce00:	00015df4 	.word	0x00015df4
    ce04:	0000c3c1 	.word	0x0000c3c1
    ce08:	00015e14 	.word	0x00015e14
    ce0c:	000003e1 	.word	0x000003e1

0000ce10 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    ce10:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce12:	46de      	mov	lr, fp
    ce14:	4657      	mov	r7, sl
    ce16:	464e      	mov	r6, r9
    ce18:	4645      	mov	r5, r8
    ce1a:	b5e0      	push	{r5, r6, r7, lr}
    ce1c:	b085      	sub	sp, #20
    ce1e:	9001      	str	r0, [sp, #4]
    ce20:	000e      	movs	r6, r1
    ce22:	9202      	str	r2, [sp, #8]
    ce24:	001d      	movs	r5, r3
    ce26:	ab0e      	add	r3, sp, #56	; 0x38
    ce28:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    ce2a:	2c00      	cmp	r4, #0
    ce2c:	d064      	beq.n	cef8 <Socket_ReadSocketData+0xe8>
    ce2e:	0103      	lsls	r3, r0, #4
    ce30:	4935      	ldr	r1, [pc, #212]	; (cf08 <Socket_ReadSocketData+0xf8>)
    ce32:	585b      	ldr	r3, [r3, r1]
    ce34:	2b00      	cmp	r3, #0
    ce36:	d05f      	beq.n	cef8 <Socket_ReadSocketData+0xe8>
    ce38:	0101      	lsls	r1, r0, #4
    ce3a:	4b33      	ldr	r3, [pc, #204]	; (cf08 <Socket_ReadSocketData+0xf8>)
    ce3c:	185b      	adds	r3, r3, r1
    ce3e:	889b      	ldrh	r3, [r3, #4]
    ce40:	b29b      	uxth	r3, r3
    ce42:	2b00      	cmp	r3, #0
    ce44:	d058      	beq.n	cef8 <Socket_ReadSocketData+0xe8>
    ce46:	4b30      	ldr	r3, [pc, #192]	; (cf08 <Socket_ReadSocketData+0xf8>)
    ce48:	185b      	adds	r3, r3, r1
    ce4a:	7a9b      	ldrb	r3, [r3, #10]
    ce4c:	2b01      	cmp	r3, #1
    ce4e:	d153      	bne.n	cef8 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    ce50:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    ce52:	4b2d      	ldr	r3, [pc, #180]	; (cf08 <Socket_ReadSocketData+0xf8>)
    ce54:	469b      	mov	fp, r3
    ce56:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    ce58:	465b      	mov	r3, fp
    ce5a:	220a      	movs	r2, #10
    ce5c:	4690      	mov	r8, r2
    ce5e:	44d8      	add	r8, fp
    ce60:	468a      	mov	sl, r1
    ce62:	9500      	str	r5, [sp, #0]
    ce64:	9303      	str	r3, [sp, #12]
    ce66:	e015      	b.n	ce94 <Socket_ReadSocketData+0x84>
    ce68:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    ce6a:	2301      	movs	r3, #1
    ce6c:	e01c      	b.n	cea8 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    ce6e:	3301      	adds	r3, #1
    ce70:	2200      	movs	r2, #0
    ce72:	2100      	movs	r1, #0
    ce74:	2000      	movs	r0, #0
    ce76:	4c25      	ldr	r4, [pc, #148]	; (cf0c <Socket_ReadSocketData+0xfc>)
    ce78:	47a0      	blx	r4
    ce7a:	e03d      	b.n	cef8 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    ce7c:	4824      	ldr	r0, [pc, #144]	; (cf10 <Socket_ReadSocketData+0x100>)
    ce7e:	4d25      	ldr	r5, [pc, #148]	; (cf14 <Socket_ReadSocketData+0x104>)
    ce80:	47a8      	blx	r5
    ce82:	0021      	movs	r1, r4
    ce84:	4824      	ldr	r0, [pc, #144]	; (cf18 <Socket_ReadSocketData+0x108>)
    ce86:	47a8      	blx	r5
    ce88:	200d      	movs	r0, #13
    ce8a:	4b24      	ldr	r3, [pc, #144]	; (cf1c <Socket_ReadSocketData+0x10c>)
    ce8c:	4798      	blx	r3
				break;
    ce8e:	e033      	b.n	cef8 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    ce90:	2c00      	cmp	r4, #0
    ce92:	d031      	beq.n	cef8 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    ce94:	465b      	mov	r3, fp
    ce96:	889b      	ldrh	r3, [r3, #4]
    ce98:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    ce9a:	b21b      	sxth	r3, r3
    ce9c:	2b00      	cmp	r3, #0
    ce9e:	dde3      	ble.n	ce68 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    cea0:	9b03      	ldr	r3, [sp, #12]
    cea2:	889d      	ldrh	r5, [r3, #4]
    cea4:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    cea6:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    cea8:	4a17      	ldr	r2, [pc, #92]	; (cf08 <Socket_ReadSocketData+0xf8>)
    ceaa:	4651      	mov	r1, sl
    ceac:	5889      	ldr	r1, [r1, r2]
    ceae:	002a      	movs	r2, r5
    ceb0:	9800      	ldr	r0, [sp, #0]
    ceb2:	4f16      	ldr	r7, [pc, #88]	; (cf0c <Socket_ReadSocketData+0xfc>)
    ceb4:	47b8      	blx	r7
    ceb6:	2800      	cmp	r0, #0
    ceb8:	d1e0      	bne.n	ce7c <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    ceba:	4b13      	ldr	r3, [pc, #76]	; (cf08 <Socket_ReadSocketData+0xf8>)
    cebc:	4652      	mov	r2, sl
    cebe:	58d3      	ldr	r3, [r2, r3]
    cec0:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    cec2:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    cec4:	88f3      	ldrh	r3, [r6, #6]
    cec6:	1b5b      	subs	r3, r3, r5
    cec8:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    ceca:	4b15      	ldr	r3, [pc, #84]	; (cf20 <Socket_ReadSocketData+0x110>)
    cecc:	681b      	ldr	r3, [r3, #0]
    cece:	2b00      	cmp	r3, #0
    ced0:	d005      	beq.n	cede <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    ced2:	4b13      	ldr	r3, [pc, #76]	; (cf20 <Socket_ReadSocketData+0x110>)
    ced4:	681b      	ldr	r3, [r3, #0]
    ced6:	0032      	movs	r2, r6
    ced8:	9902      	ldr	r1, [sp, #8]
    ceda:	9801      	ldr	r0, [sp, #4]
    cedc:	4798      	blx	r3
				u16ReadCount -= u16Read;
    cede:	1b64      	subs	r4, r4, r5
    cee0:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    cee2:	9b00      	ldr	r3, [sp, #0]
    cee4:	469c      	mov	ip, r3
    cee6:	44ac      	add	ip, r5
    cee8:	4663      	mov	r3, ip
    ceea:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    ceec:	4643      	mov	r3, r8
    ceee:	781b      	ldrb	r3, [r3, #0]
    cef0:	2b00      	cmp	r3, #0
    cef2:	d1cd      	bne.n	ce90 <Socket_ReadSocketData+0x80>
    cef4:	2c00      	cmp	r4, #0
    cef6:	d1ba      	bne.n	ce6e <Socket_ReadSocketData+0x5e>
	}
}
    cef8:	b005      	add	sp, #20
    cefa:	bc3c      	pop	{r2, r3, r4, r5}
    cefc:	4690      	mov	r8, r2
    cefe:	4699      	mov	r9, r3
    cf00:	46a2      	mov	sl, r4
    cf02:	46ab      	mov	fp, r5
    cf04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf06:	46c0      	nop			; (mov r8, r8)
    cf08:	20002bb8 	.word	0x20002bb8
    cf0c:	0000aba5 	.word	0x0000aba5
    cf10:	000154d8 	.word	0x000154d8
    cf14:	00010b61 	.word	0x00010b61
    cf18:	000160ac 	.word	0x000160ac
    cf1c:	00010b95 	.word	0x00010b95
    cf20:	20002c68 	.word	0x20002c68

0000cf24 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    cf24:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf26:	46d6      	mov	lr, sl
    cf28:	464f      	mov	r7, r9
    cf2a:	4646      	mov	r6, r8
    cf2c:	b5c0      	push	{r6, r7, lr}
    cf2e:	b09a      	sub	sp, #104	; 0x68
    cf30:	000d      	movs	r5, r1
    cf32:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    cf34:	2841      	cmp	r0, #65	; 0x41
    cf36:	d039      	beq.n	cfac <m2m_ip_cb+0x88>
    cf38:	2854      	cmp	r0, #84	; 0x54
    cf3a:	d037      	beq.n	cfac <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    cf3c:	2842      	cmp	r0, #66	; 0x42
    cf3e:	d053      	beq.n	cfe8 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    cf40:	2843      	cmp	r0, #67	; 0x43
    cf42:	d06a      	beq.n	d01a <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    cf44:	2844      	cmp	r0, #68	; 0x44
    cf46:	d100      	bne.n	cf4a <m2m_ip_cb+0x26>
    cf48:	e0af      	b.n	d0aa <m2m_ip_cb+0x186>
    cf4a:	284b      	cmp	r0, #75	; 0x4b
    cf4c:	d100      	bne.n	cf50 <m2m_ip_cb+0x2c>
    cf4e:	e0ac      	b.n	d0aa <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    cf50:	284a      	cmp	r0, #74	; 0x4a
    cf52:	d100      	bne.n	cf56 <m2m_ip_cb+0x32>
    cf54:	e0cf      	b.n	d0f6 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    cf56:	2846      	cmp	r0, #70	; 0x46
    cf58:	d100      	bne.n	cf5c <m2m_ip_cb+0x38>
    cf5a:	e0e5      	b.n	d128 <m2m_ip_cb+0x204>
    cf5c:	2848      	cmp	r0, #72	; 0x48
    cf5e:	d100      	bne.n	cf62 <m2m_ip_cb+0x3e>
    cf60:	e10e      	b.n	d180 <m2m_ip_cb+0x25c>
    cf62:	284d      	cmp	r0, #77	; 0x4d
    cf64:	d100      	bne.n	cf68 <m2m_ip_cb+0x44>
    cf66:	e0dc      	b.n	d122 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    cf68:	2845      	cmp	r0, #69	; 0x45
    cf6a:	d100      	bne.n	cf6e <m2m_ip_cb+0x4a>
    cf6c:	e12c      	b.n	d1c8 <m2m_ip_cb+0x2a4>
    cf6e:	2847      	cmp	r0, #71	; 0x47
    cf70:	d100      	bne.n	cf74 <m2m_ip_cb+0x50>
    cf72:	e14d      	b.n	d210 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    cf74:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    cf76:	284c      	cmp	r0, #76	; 0x4c
    cf78:	d100      	bne.n	cf7c <m2m_ip_cb+0x58>
    cf7a:	e126      	b.n	d1ca <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    cf7c:	2852      	cmp	r0, #82	; 0x52
    cf7e:	d12d      	bne.n	cfdc <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    cf80:	2301      	movs	r3, #1
    cf82:	2214      	movs	r2, #20
    cf84:	a909      	add	r1, sp, #36	; 0x24
    cf86:	0020      	movs	r0, r4
    cf88:	4ca2      	ldr	r4, [pc, #648]	; (d214 <m2m_ip_cb+0x2f0>)
    cf8a:	47a0      	blx	r4
    cf8c:	2800      	cmp	r0, #0
    cf8e:	d125      	bne.n	cfdc <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    cf90:	4ba1      	ldr	r3, [pc, #644]	; (d218 <m2m_ip_cb+0x2f4>)
    cf92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cf94:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    cf96:	681b      	ldr	r3, [r3, #0]
    cf98:	2b00      	cmp	r3, #0
    cf9a:	d01f      	beq.n	cfdc <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    cf9c:	4b9e      	ldr	r3, [pc, #632]	; (d218 <m2m_ip_cb+0x2f4>)
    cf9e:	681c      	ldr	r4, [r3, #0]
    cfa0:	ab09      	add	r3, sp, #36	; 0x24
    cfa2:	7c1a      	ldrb	r2, [r3, #16]
    cfa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cfa6:	9809      	ldr	r0, [sp, #36]	; 0x24
    cfa8:	47a0      	blx	r4
			}
		}
	}
}
    cfaa:	e017      	b.n	cfdc <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    cfac:	2300      	movs	r3, #0
    cfae:	2204      	movs	r2, #4
    cfb0:	a909      	add	r1, sp, #36	; 0x24
    cfb2:	0020      	movs	r0, r4
    cfb4:	4c97      	ldr	r4, [pc, #604]	; (d214 <m2m_ip_cb+0x2f0>)
    cfb6:	47a0      	blx	r4
    cfb8:	2800      	cmp	r0, #0
    cfba:	d10f      	bne.n	cfdc <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    cfbc:	ab09      	add	r3, sp, #36	; 0x24
    cfbe:	785a      	ldrb	r2, [r3, #1]
    cfc0:	ab05      	add	r3, sp, #20
    cfc2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    cfc4:	4b95      	ldr	r3, [pc, #596]	; (d21c <m2m_ip_cb+0x2f8>)
    cfc6:	681b      	ldr	r3, [r3, #0]
    cfc8:	2b00      	cmp	r3, #0
    cfca:	d007      	beq.n	cfdc <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    cfcc:	4b93      	ldr	r3, [pc, #588]	; (d21c <m2m_ip_cb+0x2f8>)
    cfce:	681b      	ldr	r3, [r3, #0]
    cfd0:	aa09      	add	r2, sp, #36	; 0x24
    cfd2:	2000      	movs	r0, #0
    cfd4:	5610      	ldrsb	r0, [r2, r0]
    cfd6:	aa05      	add	r2, sp, #20
    cfd8:	2101      	movs	r1, #1
    cfda:	4798      	blx	r3
}
    cfdc:	b01a      	add	sp, #104	; 0x68
    cfde:	bc1c      	pop	{r2, r3, r4}
    cfe0:	4690      	mov	r8, r2
    cfe2:	4699      	mov	r9, r3
    cfe4:	46a2      	mov	sl, r4
    cfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    cfe8:	2300      	movs	r3, #0
    cfea:	2204      	movs	r2, #4
    cfec:	a909      	add	r1, sp, #36	; 0x24
    cfee:	0020      	movs	r0, r4
    cff0:	4c88      	ldr	r4, [pc, #544]	; (d214 <m2m_ip_cb+0x2f0>)
    cff2:	47a0      	blx	r4
    cff4:	2800      	cmp	r0, #0
    cff6:	d1f1      	bne.n	cfdc <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    cff8:	ab09      	add	r3, sp, #36	; 0x24
    cffa:	785a      	ldrb	r2, [r3, #1]
    cffc:	ab05      	add	r3, sp, #20
    cffe:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    d000:	4b86      	ldr	r3, [pc, #536]	; (d21c <m2m_ip_cb+0x2f8>)
    d002:	681b      	ldr	r3, [r3, #0]
    d004:	2b00      	cmp	r3, #0
    d006:	d0e9      	beq.n	cfdc <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    d008:	4b84      	ldr	r3, [pc, #528]	; (d21c <m2m_ip_cb+0x2f8>)
    d00a:	681b      	ldr	r3, [r3, #0]
    d00c:	aa09      	add	r2, sp, #36	; 0x24
    d00e:	2000      	movs	r0, #0
    d010:	5610      	ldrsb	r0, [r2, r0]
    d012:	aa05      	add	r2, sp, #20
    d014:	2102      	movs	r1, #2
    d016:	4798      	blx	r3
    d018:	e7e0      	b.n	cfdc <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    d01a:	2300      	movs	r3, #0
    d01c:	220c      	movs	r2, #12
    d01e:	a905      	add	r1, sp, #20
    d020:	0020      	movs	r0, r4
    d022:	4c7c      	ldr	r4, [pc, #496]	; (d214 <m2m_ip_cb+0x2f0>)
    d024:	47a0      	blx	r4
    d026:	2800      	cmp	r0, #0
    d028:	d1d8      	bne.n	cfdc <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    d02a:	ab05      	add	r3, sp, #20
    d02c:	2209      	movs	r2, #9
    d02e:	569a      	ldrsb	r2, [r3, r2]
    d030:	2a00      	cmp	r2, #0
    d032:	db24      	blt.n	d07e <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    d034:	0018      	movs	r0, r3
    d036:	2108      	movs	r1, #8
    d038:	5659      	ldrsb	r1, [r3, r1]
    d03a:	4b79      	ldr	r3, [pc, #484]	; (d220 <m2m_ip_cb+0x2fc>)
    d03c:	0109      	lsls	r1, r1, #4
    d03e:	1859      	adds	r1, r3, r1
    d040:	7ac9      	ldrb	r1, [r1, #11]
    d042:	b2c9      	uxtb	r1, r1
    d044:	0114      	lsls	r4, r2, #4
    d046:	191b      	adds	r3, r3, r4
    d048:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    d04a:	2101      	movs	r1, #1
    d04c:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    d04e:	8941      	ldrh	r1, [r0, #10]
    d050:	3908      	subs	r1, #8
    d052:	b289      	uxth	r1, r1
    d054:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    d056:	4973      	ldr	r1, [pc, #460]	; (d224 <m2m_ip_cb+0x300>)
    d058:	880b      	ldrh	r3, [r1, #0]
    d05a:	3301      	adds	r3, #1
    d05c:	b29b      	uxth	r3, r3
    d05e:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    d060:	880b      	ldrh	r3, [r1, #0]
    d062:	b29b      	uxth	r3, r3
    d064:	2b00      	cmp	r3, #0
    d066:	d103      	bne.n	d070 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    d068:	880b      	ldrh	r3, [r1, #0]
    d06a:	3301      	adds	r3, #1
    d06c:	b29b      	uxth	r3, r3
    d06e:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    d070:	4b6c      	ldr	r3, [pc, #432]	; (d224 <m2m_ip_cb+0x300>)
    d072:	8819      	ldrh	r1, [r3, #0]
    d074:	b289      	uxth	r1, r1
    d076:	0110      	lsls	r0, r2, #4
    d078:	4b69      	ldr	r3, [pc, #420]	; (d220 <m2m_ip_cb+0x2fc>)
    d07a:	181b      	adds	r3, r3, r0
    d07c:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    d07e:	ab09      	add	r3, sp, #36	; 0x24
    d080:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    d082:	2202      	movs	r2, #2
    d084:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    d086:	aa05      	add	r2, sp, #20
    d088:	8851      	ldrh	r1, [r2, #2]
    d08a:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    d08c:	9a06      	ldr	r2, [sp, #24]
    d08e:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    d090:	4b62      	ldr	r3, [pc, #392]	; (d21c <m2m_ip_cb+0x2f8>)
    d092:	681b      	ldr	r3, [r3, #0]
    d094:	2b00      	cmp	r3, #0
    d096:	d0a1      	beq.n	cfdc <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    d098:	4b60      	ldr	r3, [pc, #384]	; (d21c <m2m_ip_cb+0x2f8>)
    d09a:	681b      	ldr	r3, [r3, #0]
    d09c:	aa05      	add	r2, sp, #20
    d09e:	2008      	movs	r0, #8
    d0a0:	5610      	ldrsb	r0, [r2, r0]
    d0a2:	aa09      	add	r2, sp, #36	; 0x24
    d0a4:	2104      	movs	r1, #4
    d0a6:	4798      	blx	r3
    d0a8:	e798      	b.n	cfdc <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    d0aa:	2300      	movs	r3, #0
    d0ac:	2204      	movs	r2, #4
    d0ae:	a909      	add	r1, sp, #36	; 0x24
    d0b0:	0020      	movs	r0, r4
    d0b2:	4c58      	ldr	r4, [pc, #352]	; (d214 <m2m_ip_cb+0x2f0>)
    d0b4:	47a0      	blx	r4
    d0b6:	2800      	cmp	r0, #0
    d0b8:	d000      	beq.n	d0bc <m2m_ip_cb+0x198>
    d0ba:	e78f      	b.n	cfdc <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    d0bc:	ab09      	add	r3, sp, #36	; 0x24
    d0be:	2000      	movs	r0, #0
    d0c0:	5618      	ldrsb	r0, [r3, r0]
    d0c2:	aa05      	add	r2, sp, #20
    d0c4:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    d0c6:	785b      	ldrb	r3, [r3, #1]
    d0c8:	b25b      	sxtb	r3, r3
    d0ca:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    d0cc:	2b00      	cmp	r3, #0
    d0ce:	d107      	bne.n	d0e0 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    d0d0:	ab09      	add	r3, sp, #36	; 0x24
    d0d2:	885b      	ldrh	r3, [r3, #2]
    d0d4:	3b08      	subs	r3, #8
    d0d6:	b29b      	uxth	r3, r3
    d0d8:	0101      	lsls	r1, r0, #4
    d0da:	4a51      	ldr	r2, [pc, #324]	; (d220 <m2m_ip_cb+0x2fc>)
    d0dc:	1852      	adds	r2, r2, r1
    d0de:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    d0e0:	4b4e      	ldr	r3, [pc, #312]	; (d21c <m2m_ip_cb+0x2f8>)
    d0e2:	681b      	ldr	r3, [r3, #0]
    d0e4:	2b00      	cmp	r3, #0
    d0e6:	d100      	bne.n	d0ea <m2m_ip_cb+0x1c6>
    d0e8:	e778      	b.n	cfdc <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    d0ea:	4b4c      	ldr	r3, [pc, #304]	; (d21c <m2m_ip_cb+0x2f8>)
    d0ec:	681b      	ldr	r3, [r3, #0]
    d0ee:	aa05      	add	r2, sp, #20
    d0f0:	2105      	movs	r1, #5
    d0f2:	4798      	blx	r3
	{
    d0f4:	e772      	b.n	cfdc <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    d0f6:	2300      	movs	r3, #0
    d0f8:	2244      	movs	r2, #68	; 0x44
    d0fa:	a909      	add	r1, sp, #36	; 0x24
    d0fc:	0020      	movs	r0, r4
    d0fe:	4c45      	ldr	r4, [pc, #276]	; (d214 <m2m_ip_cb+0x2f0>)
    d100:	47a0      	blx	r4
    d102:	2800      	cmp	r0, #0
    d104:	d000      	beq.n	d108 <m2m_ip_cb+0x1e4>
    d106:	e769      	b.n	cfdc <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    d108:	4b47      	ldr	r3, [pc, #284]	; (d228 <m2m_ip_cb+0x304>)
    d10a:	681b      	ldr	r3, [r3, #0]
    d10c:	2b00      	cmp	r3, #0
    d10e:	d100      	bne.n	d112 <m2m_ip_cb+0x1ee>
    d110:	e764      	b.n	cfdc <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    d112:	4b45      	ldr	r3, [pc, #276]	; (d228 <m2m_ip_cb+0x304>)
    d114:	681b      	ldr	r3, [r3, #0]
    d116:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d118:	9203      	str	r2, [sp, #12]
    d11a:	0011      	movs	r1, r2
    d11c:	a809      	add	r0, sp, #36	; 0x24
    d11e:	4798      	blx	r3
    d120:	e75c      	b.n	cfdc <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    d122:	2306      	movs	r3, #6
    d124:	469a      	mov	sl, r3
    d126:	e001      	b.n	d12c <m2m_ip_cb+0x208>
    d128:	2306      	movs	r3, #6
    d12a:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    d12c:	2300      	movs	r3, #0
    d12e:	2210      	movs	r2, #16
    d130:	a905      	add	r1, sp, #20
    d132:	0020      	movs	r0, r4
    d134:	4f37      	ldr	r7, [pc, #220]	; (d214 <m2m_ip_cb+0x2f0>)
    d136:	47b8      	blx	r7
    d138:	2800      	cmp	r0, #0
    d13a:	d000      	beq.n	d13e <m2m_ip_cb+0x21a>
    d13c:	e74e      	b.n	cfdc <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    d13e:	aa05      	add	r2, sp, #20
    d140:	200c      	movs	r0, #12
    d142:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    d144:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    d146:	0107      	lsls	r7, r0, #4
    d148:	4935      	ldr	r1, [pc, #212]	; (d220 <m2m_ip_cb+0x2fc>)
    d14a:	19c9      	adds	r1, r1, r7
    d14c:	2700      	movs	r7, #0
    d14e:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    d150:	2608      	movs	r6, #8
    d152:	5f97      	ldrsh	r7, [r2, r6]
    d154:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    d156:	8957      	ldrh	r7, [r2, #10]
    d158:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    d15a:	af09      	add	r7, sp, #36	; 0x24
    d15c:	8856      	ldrh	r6, [r2, #2]
    d15e:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    d160:	9a06      	ldr	r2, [sp, #24]
    d162:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    d164:	88ca      	ldrh	r2, [r1, #6]
    d166:	b292      	uxth	r2, r2
    d168:	4293      	cmp	r3, r2
    d16a:	d00c      	beq.n	d186 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    d16c:	2d10      	cmp	r5, #16
    d16e:	d800      	bhi.n	d172 <m2m_ip_cb+0x24e>
    d170:	e734      	b.n	cfdc <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    d172:	2301      	movs	r3, #1
    d174:	2200      	movs	r2, #0
    d176:	2100      	movs	r1, #0
    d178:	2000      	movs	r0, #0
    d17a:	4c26      	ldr	r4, [pc, #152]	; (d214 <m2m_ip_cb+0x2f0>)
    d17c:	47a0      	blx	r4
	{
    d17e:	e72d      	b.n	cfdc <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    d180:	2309      	movs	r3, #9
    d182:	469a      	mov	sl, r3
    d184:	e7d2      	b.n	d12c <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    d186:	4643      	mov	r3, r8
    d188:	2b00      	cmp	r3, #0
    d18a:	dd01      	ble.n	d190 <m2m_ip_cb+0x26c>
    d18c:	45a8      	cmp	r8, r5
    d18e:	db0f      	blt.n	d1b0 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    d190:	ab09      	add	r3, sp, #36	; 0x24
    d192:	4642      	mov	r2, r8
    d194:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    d196:	2300      	movs	r3, #0
    d198:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    d19a:	4b20      	ldr	r3, [pc, #128]	; (d21c <m2m_ip_cb+0x2f8>)
    d19c:	681b      	ldr	r3, [r3, #0]
    d19e:	2b00      	cmp	r3, #0
    d1a0:	d100      	bne.n	d1a4 <m2m_ip_cb+0x280>
    d1a2:	e71b      	b.n	cfdc <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    d1a4:	4b1d      	ldr	r3, [pc, #116]	; (d21c <m2m_ip_cb+0x2f8>)
    d1a6:	681b      	ldr	r3, [r3, #0]
    d1a8:	aa09      	add	r2, sp, #36	; 0x24
    d1aa:	4651      	mov	r1, sl
    d1ac:	4798      	blx	r3
    d1ae:	e715      	b.n	cfdc <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    d1b0:	0023      	movs	r3, r4
    d1b2:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    d1b4:	4642      	mov	r2, r8
    d1b6:	4669      	mov	r1, sp
    d1b8:	818a      	strh	r2, [r1, #12]
    d1ba:	898a      	ldrh	r2, [r1, #12]
    d1bc:	9200      	str	r2, [sp, #0]
    d1be:	4652      	mov	r2, sl
    d1c0:	0039      	movs	r1, r7
    d1c2:	4c1a      	ldr	r4, [pc, #104]	; (d22c <m2m_ip_cb+0x308>)
    d1c4:	47a0      	blx	r4
    d1c6:	e709      	b.n	cfdc <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    d1c8:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    d1ca:	2300      	movs	r3, #0
    d1cc:	2208      	movs	r2, #8
    d1ce:	a909      	add	r1, sp, #36	; 0x24
    d1d0:	0020      	movs	r0, r4
    d1d2:	4c10      	ldr	r4, [pc, #64]	; (d214 <m2m_ip_cb+0x2f0>)
    d1d4:	47a0      	blx	r4
    d1d6:	2800      	cmp	r0, #0
    d1d8:	d000      	beq.n	d1dc <m2m_ip_cb+0x2b8>
    d1da:	e6ff      	b.n	cfdc <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    d1dc:	ab09      	add	r3, sp, #36	; 0x24
    d1de:	2000      	movs	r0, #0
    d1e0:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    d1e2:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    d1e4:	8859      	ldrh	r1, [r3, #2]
    d1e6:	ab05      	add	r3, sp, #20
    d1e8:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    d1ea:	0101      	lsls	r1, r0, #4
    d1ec:	4b0c      	ldr	r3, [pc, #48]	; (d220 <m2m_ip_cb+0x2fc>)
    d1ee:	185b      	adds	r3, r3, r1
    d1f0:	88db      	ldrh	r3, [r3, #6]
    d1f2:	b29b      	uxth	r3, r3
    d1f4:	429a      	cmp	r2, r3
    d1f6:	d000      	beq.n	d1fa <m2m_ip_cb+0x2d6>
    d1f8:	e6f0      	b.n	cfdc <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    d1fa:	4b08      	ldr	r3, [pc, #32]	; (d21c <m2m_ip_cb+0x2f8>)
    d1fc:	681b      	ldr	r3, [r3, #0]
    d1fe:	2b00      	cmp	r3, #0
    d200:	d100      	bne.n	d204 <m2m_ip_cb+0x2e0>
    d202:	e6eb      	b.n	cfdc <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    d204:	4b05      	ldr	r3, [pc, #20]	; (d21c <m2m_ip_cb+0x2f8>)
    d206:	681b      	ldr	r3, [r3, #0]
    d208:	aa05      	add	r2, sp, #20
    d20a:	0029      	movs	r1, r5
    d20c:	4798      	blx	r3
	{
    d20e:	e6e5      	b.n	cfdc <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    d210:	2508      	movs	r5, #8
    d212:	e7da      	b.n	d1ca <m2m_ip_cb+0x2a6>
    d214:	0000aba5 	.word	0x0000aba5
    d218:	20002c6c 	.word	0x20002c6c
    d21c:	20002c68 	.word	0x20002c68
    d220:	20002bb8 	.word	0x20002bb8
    d224:	20002762 	.word	0x20002762
    d228:	20002c70 	.word	0x20002c70
    d22c:	0000ce11 	.word	0x0000ce11

0000d230 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    d230:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    d232:	4b0a      	ldr	r3, [pc, #40]	; (d25c <socketInit+0x2c>)
    d234:	781b      	ldrb	r3, [r3, #0]
    d236:	2b00      	cmp	r3, #0
    d238:	d000      	beq.n	d23c <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    d23a:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    d23c:	22b0      	movs	r2, #176	; 0xb0
    d23e:	2100      	movs	r1, #0
    d240:	4807      	ldr	r0, [pc, #28]	; (d260 <socketInit+0x30>)
    d242:	4b08      	ldr	r3, [pc, #32]	; (d264 <socketInit+0x34>)
    d244:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    d246:	4908      	ldr	r1, [pc, #32]	; (d268 <socketInit+0x38>)
    d248:	2002      	movs	r0, #2
    d24a:	4b08      	ldr	r3, [pc, #32]	; (d26c <socketInit+0x3c>)
    d24c:	4798      	blx	r3
		gbSocketInit	= 1;
    d24e:	2201      	movs	r2, #1
    d250:	4b02      	ldr	r3, [pc, #8]	; (d25c <socketInit+0x2c>)
    d252:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    d254:	2200      	movs	r2, #0
    d256:	4b06      	ldr	r3, [pc, #24]	; (d270 <socketInit+0x40>)
    d258:	801a      	strh	r2, [r3, #0]
}
    d25a:	e7ee      	b.n	d23a <socketInit+0xa>
    d25c:	20002761 	.word	0x20002761
    d260:	20002bb8 	.word	0x20002bb8
    d264:	0000a479 	.word	0x0000a479
    d268:	0000cf25 	.word	0x0000cf25
    d26c:	0000ac8d 	.word	0x0000ac8d
    d270:	20002762 	.word	0x20002762

0000d274 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    d274:	4b02      	ldr	r3, [pc, #8]	; (d280 <registerSocketCallback+0xc>)
    d276:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    d278:	4b02      	ldr	r3, [pc, #8]	; (d284 <registerSocketCallback+0x10>)
    d27a:	6019      	str	r1, [r3, #0]
}
    d27c:	4770      	bx	lr
    d27e:	46c0      	nop			; (mov r8, r8)
    d280:	20002c68 	.word	0x20002c68
    d284:	20002c70 	.word	0x20002c70

0000d288 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    d288:	b5f0      	push	{r4, r5, r6, r7, lr}
    d28a:	46d6      	mov	lr, sl
    d28c:	4647      	mov	r7, r8
    d28e:	b580      	push	{r7, lr}
    d290:	b089      	sub	sp, #36	; 0x24
    d292:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    d294:	2802      	cmp	r0, #2
    d296:	d000      	beq.n	d29a <socket+0x12>
    d298:	e09c      	b.n	d3d4 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    d29a:	2901      	cmp	r1, #1
    d29c:	d00a      	beq.n	d2b4 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    d29e:	2902      	cmp	r1, #2
    d2a0:	d100      	bne.n	d2a4 <socket+0x1c>
    d2a2:	e070      	b.n	d386 <socket+0xfe>
	SOCKET					sock = -1;
    d2a4:	2501      	movs	r5, #1
    d2a6:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    d2a8:	0028      	movs	r0, r5
    d2aa:	b009      	add	sp, #36	; 0x24
    d2ac:	bc0c      	pop	{r2, r3}
    d2ae:	4690      	mov	r8, r2
    d2b0:	469a      	mov	sl, r3
    d2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    d2b4:	4c49      	ldr	r4, [pc, #292]	; (d3dc <socket+0x154>)
    d2b6:	7827      	ldrb	r7, [r4, #0]
    d2b8:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    d2ba:	7826      	ldrb	r6, [r4, #0]
    d2bc:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    d2be:	7820      	ldrb	r0, [r4, #0]
    d2c0:	3001      	adds	r0, #1
    d2c2:	3106      	adds	r1, #6
    d2c4:	4b46      	ldr	r3, [pc, #280]	; (d3e0 <socket+0x158>)
    d2c6:	4798      	blx	r3
    d2c8:	b2c9      	uxtb	r1, r1
    d2ca:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    d2cc:	0132      	lsls	r2, r6, #4
    d2ce:	4b45      	ldr	r3, [pc, #276]	; (d3e4 <socket+0x15c>)
    d2d0:	189b      	adds	r3, r3, r2
    d2d2:	7a9b      	ldrb	r3, [r3, #10]
    d2d4:	2506      	movs	r5, #6
    d2d6:	2b00      	cmp	r3, #0
    d2d8:	d018      	beq.n	d30c <socket+0x84>
				u8SockID	= u8NextTcpSock;
    d2da:	4e40      	ldr	r6, [pc, #256]	; (d3dc <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    d2dc:	4b40      	ldr	r3, [pc, #256]	; (d3e0 <socket+0x158>)
    d2de:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    d2e0:	4b40      	ldr	r3, [pc, #256]	; (d3e4 <socket+0x15c>)
    d2e2:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    d2e4:	7837      	ldrb	r7, [r6, #0]
    d2e6:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    d2e8:	7834      	ldrb	r4, [r6, #0]
    d2ea:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    d2ec:	7830      	ldrb	r0, [r6, #0]
    d2ee:	3001      	adds	r0, #1
    d2f0:	2107      	movs	r1, #7
    d2f2:	47d0      	blx	sl
    d2f4:	b2c9      	uxtb	r1, r1
    d2f6:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    d2f8:	0123      	lsls	r3, r4, #4
    d2fa:	4443      	add	r3, r8
    d2fc:	7a9b      	ldrb	r3, [r3, #10]
    d2fe:	2b00      	cmp	r3, #0
    d300:	d007      	beq.n	d312 <socket+0x8a>
    d302:	3d01      	subs	r5, #1
    d304:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    d306:	2d00      	cmp	r5, #0
    d308:	d1ec      	bne.n	d2e4 <socket+0x5c>
    d30a:	e7cb      	b.n	d2a4 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    d30c:	4b35      	ldr	r3, [pc, #212]	; (d3e4 <socket+0x15c>)
    d30e:	18d4      	adds	r4, r2, r3
    d310:	e002      	b.n	d318 <socket+0x90>
    d312:	0124      	lsls	r4, r4, #4
    d314:	4b33      	ldr	r3, [pc, #204]	; (d3e4 <socket+0x15c>)
    d316:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    d318:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    d31a:	2d00      	cmp	r5, #0
    d31c:	dbc4      	blt.n	d2a8 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    d31e:	2210      	movs	r2, #16
    d320:	2100      	movs	r1, #0
    d322:	0020      	movs	r0, r4
    d324:	4b30      	ldr	r3, [pc, #192]	; (d3e8 <socket+0x160>)
    d326:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    d328:	2301      	movs	r3, #1
    d32a:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    d32c:	4a2f      	ldr	r2, [pc, #188]	; (d3ec <socket+0x164>)
    d32e:	8813      	ldrh	r3, [r2, #0]
    d330:	3301      	adds	r3, #1
    d332:	b29b      	uxth	r3, r3
    d334:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    d336:	8813      	ldrh	r3, [r2, #0]
    d338:	b29b      	uxth	r3, r3
    d33a:	2b00      	cmp	r3, #0
    d33c:	d103      	bne.n	d346 <socket+0xbe>
				++gu16SessionID;
    d33e:	8813      	ldrh	r3, [r2, #0]
    d340:	3301      	adds	r3, #1
    d342:	b29b      	uxth	r3, r3
    d344:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    d346:	4e29      	ldr	r6, [pc, #164]	; (d3ec <socket+0x164>)
    d348:	8833      	ldrh	r3, [r6, #0]
    d34a:	b29b      	uxth	r3, r3
    d34c:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    d34e:	4828      	ldr	r0, [pc, #160]	; (d3f0 <socket+0x168>)
    d350:	4f28      	ldr	r7, [pc, #160]	; (d3f4 <socket+0x16c>)
    d352:	47b8      	blx	r7
    d354:	8832      	ldrh	r2, [r6, #0]
    d356:	b292      	uxth	r2, r2
    d358:	0029      	movs	r1, r5
    d35a:	4827      	ldr	r0, [pc, #156]	; (d3f8 <socket+0x170>)
    d35c:	47b8      	blx	r7
    d35e:	200d      	movs	r0, #13
    d360:	4b26      	ldr	r3, [pc, #152]	; (d3fc <socket+0x174>)
    d362:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    d364:	9b05      	ldr	r3, [sp, #20]
    d366:	07db      	lsls	r3, r3, #31
    d368:	d59e      	bpl.n	d2a8 <socket+0x20>
				strSSLCreate.sslSock = sock;
    d36a:	aa07      	add	r2, sp, #28
    d36c:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    d36e:	2321      	movs	r3, #33	; 0x21
    d370:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    d372:	2300      	movs	r3, #0
    d374:	9302      	str	r3, [sp, #8]
    d376:	9301      	str	r3, [sp, #4]
    d378:	9300      	str	r3, [sp, #0]
    d37a:	3304      	adds	r3, #4
    d37c:	2150      	movs	r1, #80	; 0x50
    d37e:	2002      	movs	r0, #2
    d380:	4c1f      	ldr	r4, [pc, #124]	; (d400 <socket+0x178>)
    d382:	47a0      	blx	r4
    d384:	e790      	b.n	d2a8 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    d386:	4b1f      	ldr	r3, [pc, #124]	; (d404 <socket+0x17c>)
    d388:	781d      	ldrb	r5, [r3, #0]
    d38a:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    d38c:	781c      	ldrb	r4, [r3, #0]
    d38e:	0124      	lsls	r4, r4, #4
    d390:	4a1d      	ldr	r2, [pc, #116]	; (d408 <socket+0x180>)
    d392:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    d394:	7819      	ldrb	r1, [r3, #0]
    d396:	3101      	adds	r1, #1
    d398:	2203      	movs	r2, #3
    d39a:	400a      	ands	r2, r1
    d39c:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    d39e:	7aa3      	ldrb	r3, [r4, #10]
    d3a0:	2b00      	cmp	r3, #0
    d3a2:	d014      	beq.n	d3ce <socket+0x146>
    d3a4:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    d3a6:	4917      	ldr	r1, [pc, #92]	; (d404 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    d3a8:	4f17      	ldr	r7, [pc, #92]	; (d408 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    d3aa:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    d3ac:	780d      	ldrb	r5, [r1, #0]
    d3ae:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    d3b0:	780c      	ldrb	r4, [r1, #0]
    d3b2:	0124      	lsls	r4, r4, #4
    d3b4:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    d3b6:	780b      	ldrb	r3, [r1, #0]
    d3b8:	3301      	adds	r3, #1
    d3ba:	4003      	ands	r3, r0
    d3bc:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    d3be:	7aa3      	ldrb	r3, [r4, #10]
    d3c0:	2b00      	cmp	r3, #0
    d3c2:	d004      	beq.n	d3ce <socket+0x146>
    d3c4:	3a01      	subs	r2, #1
    d3c6:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    d3c8:	2a00      	cmp	r2, #0
    d3ca:	d1ef      	bne.n	d3ac <socket+0x124>
    d3cc:	e76a      	b.n	d2a4 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    d3ce:	3507      	adds	r5, #7
    d3d0:	b26d      	sxtb	r5, r5
					break;
    d3d2:	e7a2      	b.n	d31a <socket+0x92>
	SOCKET					sock = -1;
    d3d4:	2501      	movs	r5, #1
    d3d6:	426d      	negs	r5, r5
    d3d8:	e766      	b.n	d2a8 <socket+0x20>
    d3da:	46c0      	nop			; (mov r8, r8)
    d3dc:	20002764 	.word	0x20002764
    d3e0:	0000e845 	.word	0x0000e845
    d3e4:	20002bb8 	.word	0x20002bb8
    d3e8:	0000a479 	.word	0x0000a479
    d3ec:	20002762 	.word	0x20002762
    d3f0:	000154d8 	.word	0x000154d8
    d3f4:	00010b61 	.word	0x00010b61
    d3f8:	00016130 	.word	0x00016130
    d3fc:	00010b95 	.word	0x00010b95
    d400:	0000a58d 	.word	0x0000a58d
    d404:	20002765 	.word	0x20002765
    d408:	20002c28 	.word	0x20002c28

0000d40c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    d40c:	b570      	push	{r4, r5, r6, lr}
    d40e:	b088      	sub	sp, #32
    d410:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    d412:	db30      	blt.n	d476 <connect+0x6a>
    d414:	2900      	cmp	r1, #0
    d416:	d031      	beq.n	d47c <connect+0x70>
    d418:	0100      	lsls	r0, r0, #4
    d41a:	4b1d      	ldr	r3, [pc, #116]	; (d490 <connect+0x84>)
    d41c:	181b      	adds	r3, r3, r0
    d41e:	7a9b      	ldrb	r3, [r3, #10]
    d420:	2b01      	cmp	r3, #1
    d422:	d12e      	bne.n	d482 <connect+0x76>
    d424:	2a00      	cmp	r2, #0
    d426:	d02f      	beq.n	d488 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    d428:	4b19      	ldr	r3, [pc, #100]	; (d490 <connect+0x84>)
    d42a:	181b      	adds	r3, r3, r0
    d42c:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    d42e:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    d430:	07db      	lsls	r3, r3, #31
    d432:	d505      	bpl.n	d440 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    d434:	4b16      	ldr	r3, [pc, #88]	; (d490 <connect+0x84>)
    d436:	181b      	adds	r3, r3, r0
    d438:	7ada      	ldrb	r2, [r3, #11]
    d43a:	ab05      	add	r3, sp, #20
    d43c:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    d43e:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    d440:	ad05      	add	r5, sp, #20
    d442:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    d444:	2208      	movs	r2, #8
    d446:	0028      	movs	r0, r5
    d448:	4b12      	ldr	r3, [pc, #72]	; (d494 <connect+0x88>)
    d44a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    d44c:	0124      	lsls	r4, r4, #4
    d44e:	4b10      	ldr	r3, [pc, #64]	; (d490 <connect+0x84>)
    d450:	191c      	adds	r4, r3, r4
    d452:	88e3      	ldrh	r3, [r4, #6]
    d454:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    d456:	2300      	movs	r3, #0
    d458:	9302      	str	r3, [sp, #8]
    d45a:	9301      	str	r3, [sp, #4]
    d45c:	9300      	str	r3, [sp, #0]
    d45e:	330c      	adds	r3, #12
    d460:	002a      	movs	r2, r5
    d462:	0031      	movs	r1, r6
    d464:	2002      	movs	r0, #2
    d466:	4c0c      	ldr	r4, [pc, #48]	; (d498 <connect+0x8c>)
    d468:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    d46a:	2800      	cmp	r0, #0
    d46c:	d001      	beq.n	d472 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    d46e:	2009      	movs	r0, #9
    d470:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    d472:	b008      	add	sp, #32
    d474:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    d476:	2006      	movs	r0, #6
    d478:	4240      	negs	r0, r0
    d47a:	e7fa      	b.n	d472 <connect+0x66>
    d47c:	2006      	movs	r0, #6
    d47e:	4240      	negs	r0, r0
    d480:	e7f7      	b.n	d472 <connect+0x66>
    d482:	2006      	movs	r0, #6
    d484:	4240      	negs	r0, r0
    d486:	e7f4      	b.n	d472 <connect+0x66>
    d488:	2006      	movs	r0, #6
    d48a:	4240      	negs	r0, r0
    d48c:	e7f1      	b.n	d472 <connect+0x66>
    d48e:	46c0      	nop			; (mov r8, r8)
    d490:	20002bb8 	.word	0x20002bb8
    d494:	0000a465 	.word	0x0000a465
    d498:	0000a58d 	.word	0x0000a58d

0000d49c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    d49c:	b530      	push	{r4, r5, lr}
    d49e:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    d4a0:	2800      	cmp	r0, #0
    d4a2:	db36      	blt.n	d512 <send+0x76>
    d4a4:	2900      	cmp	r1, #0
    d4a6:	d037      	beq.n	d518 <send+0x7c>
    d4a8:	23af      	movs	r3, #175	; 0xaf
    d4aa:	00db      	lsls	r3, r3, #3
    d4ac:	429a      	cmp	r2, r3
    d4ae:	d836      	bhi.n	d51e <send+0x82>
    d4b0:	0104      	lsls	r4, r0, #4
    d4b2:	4b1e      	ldr	r3, [pc, #120]	; (d52c <send+0x90>)
    d4b4:	191b      	adds	r3, r3, r4
    d4b6:	7a9b      	ldrb	r3, [r3, #10]
    d4b8:	2b01      	cmp	r3, #1
    d4ba:	d133      	bne.n	d524 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    d4bc:	ab04      	add	r3, sp, #16
    d4be:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    d4c0:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    d4c2:	0025      	movs	r5, r4
    d4c4:	4c19      	ldr	r4, [pc, #100]	; (d52c <send+0x90>)
    d4c6:	1964      	adds	r4, r4, r5
    d4c8:	88e4      	ldrh	r4, [r4, #6]
    d4ca:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    d4cc:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    d4ce:	2806      	cmp	r0, #6
    d4d0:	dd00      	ble.n	d4d4 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    d4d2:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d4d4:	0104      	lsls	r4, r0, #4
    d4d6:	4b15      	ldr	r3, [pc, #84]	; (d52c <send+0x90>)
    d4d8:	191b      	adds	r3, r3, r4
    d4da:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    d4dc:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d4de:	07e4      	lsls	r4, r4, #31
    d4e0:	d505      	bpl.n	d4ee <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    d4e2:	0100      	lsls	r0, r0, #4
    d4e4:	4b11      	ldr	r3, [pc, #68]	; (d52c <send+0x90>)
    d4e6:	1818      	adds	r0, r3, r0
    d4e8:	8905      	ldrh	r5, [r0, #8]
    d4ea:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    d4ec:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    d4ee:	2080      	movs	r0, #128	; 0x80
    d4f0:	4318      	orrs	r0, r3
    d4f2:	9502      	str	r5, [sp, #8]
    d4f4:	9201      	str	r2, [sp, #4]
    d4f6:	9100      	str	r1, [sp, #0]
    d4f8:	2310      	movs	r3, #16
    d4fa:	aa04      	add	r2, sp, #16
    d4fc:	0001      	movs	r1, r0
    d4fe:	2002      	movs	r0, #2
    d500:	4c0b      	ldr	r4, [pc, #44]	; (d530 <send+0x94>)
    d502:	47a0      	blx	r4
    d504:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    d506:	2800      	cmp	r0, #0
    d508:	d000      	beq.n	d50c <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    d50a:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    d50c:	0018      	movs	r0, r3
    d50e:	b009      	add	sp, #36	; 0x24
    d510:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    d512:	2306      	movs	r3, #6
    d514:	425b      	negs	r3, r3
    d516:	e7f9      	b.n	d50c <send+0x70>
    d518:	2306      	movs	r3, #6
    d51a:	425b      	negs	r3, r3
    d51c:	e7f6      	b.n	d50c <send+0x70>
    d51e:	2306      	movs	r3, #6
    d520:	425b      	negs	r3, r3
    d522:	e7f3      	b.n	d50c <send+0x70>
    d524:	2306      	movs	r3, #6
    d526:	425b      	negs	r3, r3
    d528:	e7f0      	b.n	d50c <send+0x70>
    d52a:	46c0      	nop			; (mov r8, r8)
    d52c:	20002bb8 	.word	0x20002bb8
    d530:	0000a58d 	.word	0x0000a58d

0000d534 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    d534:	b530      	push	{r4, r5, lr}
    d536:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    d538:	2800      	cmp	r0, #0
    d53a:	db34      	blt.n	d5a6 <recv+0x72>
    d53c:	2900      	cmp	r1, #0
    d53e:	d035      	beq.n	d5ac <recv+0x78>
    d540:	2a00      	cmp	r2, #0
    d542:	d036      	beq.n	d5b2 <recv+0x7e>
    d544:	0105      	lsls	r5, r0, #4
    d546:	4c1e      	ldr	r4, [pc, #120]	; (d5c0 <recv+0x8c>)
    d548:	1964      	adds	r4, r4, r5
    d54a:	7aa4      	ldrb	r4, [r4, #10]
    d54c:	2c01      	cmp	r4, #1
    d54e:	d133      	bne.n	d5b8 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    d550:	4c1b      	ldr	r4, [pc, #108]	; (d5c0 <recv+0x8c>)
    d552:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    d554:	1964      	adds	r4, r4, r5
    d556:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    d558:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    d55a:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    d55c:	2900      	cmp	r1, #0
    d55e:	d11d      	bne.n	d59c <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    d560:	2101      	movs	r1, #1
    d562:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d564:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    d566:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d568:	07d2      	lsls	r2, r2, #31
    d56a:	d500      	bpl.n	d56e <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    d56c:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    d56e:	2b00      	cmp	r3, #0
    d570:	d117      	bne.n	d5a2 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    d572:	3b01      	subs	r3, #1
    d574:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    d576:	aa04      	add	r2, sp, #16
    d578:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    d57a:	0100      	lsls	r0, r0, #4
    d57c:	4b10      	ldr	r3, [pc, #64]	; (d5c0 <recv+0x8c>)
    d57e:	1818      	adds	r0, r3, r0
    d580:	88c3      	ldrh	r3, [r0, #6]
    d582:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    d584:	2300      	movs	r3, #0
    d586:	9302      	str	r3, [sp, #8]
    d588:	9301      	str	r3, [sp, #4]
    d58a:	9300      	str	r3, [sp, #0]
    d58c:	3308      	adds	r3, #8
    d58e:	2002      	movs	r0, #2
    d590:	4c0c      	ldr	r4, [pc, #48]	; (d5c4 <recv+0x90>)
    d592:	47a0      	blx	r4
    d594:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    d596:	2800      	cmp	r0, #0
    d598:	d000      	beq.n	d59c <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    d59a:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    d59c:	0010      	movs	r0, r2
    d59e:	b007      	add	sp, #28
    d5a0:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    d5a2:	9304      	str	r3, [sp, #16]
    d5a4:	e7e7      	b.n	d576 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    d5a6:	2206      	movs	r2, #6
    d5a8:	4252      	negs	r2, r2
    d5aa:	e7f7      	b.n	d59c <recv+0x68>
    d5ac:	2206      	movs	r2, #6
    d5ae:	4252      	negs	r2, r2
    d5b0:	e7f4      	b.n	d59c <recv+0x68>
    d5b2:	2206      	movs	r2, #6
    d5b4:	4252      	negs	r2, r2
    d5b6:	e7f1      	b.n	d59c <recv+0x68>
    d5b8:	2206      	movs	r2, #6
    d5ba:	4252      	negs	r2, r2
    d5bc:	e7ee      	b.n	d59c <recv+0x68>
    d5be:	46c0      	nop			; (mov r8, r8)
    d5c0:	20002bb8 	.word	0x20002bb8
    d5c4:	0000a58d 	.word	0x0000a58d

0000d5c8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    d5c8:	b530      	push	{r4, r5, lr}
    d5ca:	b087      	sub	sp, #28
    d5cc:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    d5ce:	481e      	ldr	r0, [pc, #120]	; (d648 <close+0x80>)
    d5d0:	4d1e      	ldr	r5, [pc, #120]	; (d64c <close+0x84>)
    d5d2:	47a8      	blx	r5
    d5d4:	0021      	movs	r1, r4
    d5d6:	481e      	ldr	r0, [pc, #120]	; (d650 <close+0x88>)
    d5d8:	47a8      	blx	r5
    d5da:	200d      	movs	r0, #13
    d5dc:	4b1d      	ldr	r3, [pc, #116]	; (d654 <close+0x8c>)
    d5de:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    d5e0:	2c00      	cmp	r4, #0
    d5e2:	db2a      	blt.n	d63a <close+0x72>
    d5e4:	0122      	lsls	r2, r4, #4
    d5e6:	4b1c      	ldr	r3, [pc, #112]	; (d658 <close+0x90>)
    d5e8:	189b      	adds	r3, r3, r2
    d5ea:	7a9b      	ldrb	r3, [r3, #10]
    d5ec:	2b01      	cmp	r3, #1
    d5ee:	d127      	bne.n	d640 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    d5f0:	a905      	add	r1, sp, #20
    d5f2:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    d5f4:	4b18      	ldr	r3, [pc, #96]	; (d658 <close+0x90>)
    d5f6:	189b      	adds	r3, r3, r2
    d5f8:	88da      	ldrh	r2, [r3, #6]
    d5fa:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    d5fc:	2200      	movs	r2, #0
    d5fe:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    d600:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d602:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    d604:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d606:	07db      	lsls	r3, r3, #31
    d608:	d500      	bpl.n	d60c <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    d60a:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    d60c:	2300      	movs	r3, #0
    d60e:	9302      	str	r3, [sp, #8]
    d610:	9301      	str	r3, [sp, #4]
    d612:	9300      	str	r3, [sp, #0]
    d614:	3304      	adds	r3, #4
    d616:	aa05      	add	r2, sp, #20
    d618:	2002      	movs	r0, #2
    d61a:	4d10      	ldr	r5, [pc, #64]	; (d65c <close+0x94>)
    d61c:	47a8      	blx	r5
    d61e:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    d620:	d001      	beq.n	d626 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    d622:	2509      	movs	r5, #9
    d624:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    d626:	0124      	lsls	r4, r4, #4
    d628:	480b      	ldr	r0, [pc, #44]	; (d658 <close+0x90>)
    d62a:	1820      	adds	r0, r4, r0
    d62c:	2210      	movs	r2, #16
    d62e:	2100      	movs	r1, #0
    d630:	4b0b      	ldr	r3, [pc, #44]	; (d660 <close+0x98>)
    d632:	4798      	blx	r3
	}
	return s8Ret;
}
    d634:	0028      	movs	r0, r5
    d636:	b007      	add	sp, #28
    d638:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    d63a:	2506      	movs	r5, #6
    d63c:	426d      	negs	r5, r5
    d63e:	e7f9      	b.n	d634 <close+0x6c>
    d640:	2506      	movs	r5, #6
    d642:	426d      	negs	r5, r5
    d644:	e7f6      	b.n	d634 <close+0x6c>
    d646:	46c0      	nop			; (mov r8, r8)
    d648:	000154d8 	.word	0x000154d8
    d64c:	00010b61 	.word	0x00010b61
    d650:	000160d0 	.word	0x000160d0
    d654:	00010b95 	.word	0x00010b95
    d658:	20002bb8 	.word	0x20002bb8
    d65c:	0000a58d 	.word	0x0000a58d
    d660:	0000a479 	.word	0x0000a479

0000d664 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    d664:	b510      	push	{r4, lr}
    d666:	b084      	sub	sp, #16
    d668:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    d66a:	4b0b      	ldr	r3, [pc, #44]	; (d698 <gethostbyname+0x34>)
    d66c:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    d66e:	b2c3      	uxtb	r3, r0
    d670:	2b40      	cmp	r3, #64	; 0x40
    d672:	d80d      	bhi.n	d690 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    d674:	23ff      	movs	r3, #255	; 0xff
    d676:	4003      	ands	r3, r0
    d678:	3301      	adds	r3, #1
    d67a:	2200      	movs	r2, #0
    d67c:	9202      	str	r2, [sp, #8]
    d67e:	9201      	str	r2, [sp, #4]
    d680:	9200      	str	r2, [sp, #0]
    d682:	0022      	movs	r2, r4
    d684:	214a      	movs	r1, #74	; 0x4a
    d686:	2002      	movs	r0, #2
    d688:	4c04      	ldr	r4, [pc, #16]	; (d69c <gethostbyname+0x38>)
    d68a:	47a0      	blx	r4
	}
	return s8Err;
}
    d68c:	b004      	add	sp, #16
    d68e:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    d690:	2006      	movs	r0, #6
    d692:	4240      	negs	r0, r0
    d694:	e7fa      	b.n	d68c <gethostbyname+0x28>
    d696:	46c0      	nop			; (mov r8, r8)
    d698:	0000a489 	.word	0x0000a489
    d69c:	0000a58d 	.word	0x0000a58d

0000d6a0 <setsockopt>:
Date
		9 September 2014
*********************************************************************/
sint8 setsockopt(SOCKET sock, uint8  u8Level, uint8  option_name,
       const void *option_value, uint16 u16OptionLen)
{
    d6a0:	b570      	push	{r4, r5, r6, lr}
    d6a2:	b096      	sub	sp, #88	; 0x58
    d6a4:	0015      	movs	r5, r2
    d6a6:	aa1a      	add	r2, sp, #104	; 0x68
    d6a8:	8816      	ldrh	r6, [r2, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0)  && (option_value != NULL)  && (gastrSockets[sock].bIsUsed == 1))
    d6aa:	2800      	cmp	r0, #0
    d6ac:	da00      	bge.n	d6b0 <setsockopt+0x10>
    d6ae:	e0c8      	b.n	d842 <setsockopt+0x1a2>
    d6b0:	2b00      	cmp	r3, #0
    d6b2:	d100      	bne.n	d6b6 <setsockopt+0x16>
    d6b4:	e0c8      	b.n	d848 <setsockopt+0x1a8>
    d6b6:	0104      	lsls	r4, r0, #4
    d6b8:	4a68      	ldr	r2, [pc, #416]	; (d85c <setsockopt+0x1bc>)
    d6ba:	1912      	adds	r2, r2, r4
    d6bc:	7a92      	ldrb	r2, [r2, #10]
    d6be:	2a01      	cmp	r2, #1
    d6c0:	d000      	beq.n	d6c4 <setsockopt+0x24>
    d6c2:	e0c4      	b.n	d84e <setsockopt+0x1ae>
	{
		if(u8Level == SOL_SSL_SOCKET)
    d6c4:	2902      	cmp	r1, #2
    d6c6:	d018      	beq.n	d6fa <setsockopt+0x5a>
		}
		else
		{
			uint8	u8Cmd = SOCKET_CMD_SET_SOCKET_OPTION;
			tstrSetSocketOptCmd strSetSockOpt;
			strSetSockOpt.u8Option=option_name;
    d6c8:	aa04      	add	r2, sp, #16
    d6ca:	7155      	strb	r5, [r2, #5]
			strSetSockOpt.sock = sock; 
    d6cc:	7110      	strb	r0, [r2, #4]
			strSetSockOpt.u32OptionValue = *(uint32*)option_value;
    d6ce:	681b      	ldr	r3, [r3, #0]
    d6d0:	9304      	str	r3, [sp, #16]
			strSetSockOpt.u16SessionID		= gastrSockets[sock].u16SessionID;
    d6d2:	0100      	lsls	r0, r0, #4
    d6d4:	4b61      	ldr	r3, [pc, #388]	; (d85c <setsockopt+0x1bc>)
    d6d6:	1818      	adds	r0, r3, r0
    d6d8:	88c3      	ldrh	r3, [r0, #6]
    d6da:	80d3      	strh	r3, [r2, #6]

			s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strSetSockOpt, sizeof(tstrSetSocketOptCmd), NULL,0, 0);
    d6dc:	2300      	movs	r3, #0
    d6de:	9302      	str	r3, [sp, #8]
    d6e0:	9301      	str	r3, [sp, #4]
    d6e2:	9300      	str	r3, [sp, #0]
    d6e4:	3308      	adds	r3, #8
    d6e6:	214f      	movs	r1, #79	; 0x4f
    d6e8:	2002      	movs	r0, #2
    d6ea:	4c5d      	ldr	r4, [pc, #372]	; (d860 <setsockopt+0x1c0>)
    d6ec:	47a0      	blx	r4
			if(s8Ret != SOCK_ERR_NO_ERROR)
    d6ee:	2800      	cmp	r0, #0
    d6f0:	d001      	beq.n	d6f6 <setsockopt+0x56>
			{
				s8Ret = SOCK_ERR_INVALID;
    d6f2:	2009      	movs	r0, #9
    d6f4:	4240      	negs	r0, r0
			}
		}
	}
	return s8Ret;	
}
    d6f6:	b016      	add	sp, #88	; 0x58
    d6f8:	bd70      	pop	{r4, r5, r6, pc}
	if(sock < TCP_SOCK_MAX)
    d6fa:	2806      	cmp	r0, #6
    d6fc:	dd00      	ble.n	d700 <setsockopt+0x60>
    d6fe:	e0a9      	b.n	d854 <setsockopt+0x1b4>
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d700:	4a56      	ldr	r2, [pc, #344]	; (d85c <setsockopt+0x1bc>)
    d702:	1912      	adds	r2, r2, r4
    d704:	7ad2      	ldrb	r2, [r2, #11]
    d706:	07d2      	lsls	r2, r2, #31
    d708:	d400      	bmi.n	d70c <setsockopt+0x6c>
    d70a:	e08c      	b.n	d826 <setsockopt+0x186>
			if(u8Opt == SO_SSL_BYPASS_X509_VERIF)
    d70c:	2d01      	cmp	r5, #1
    d70e:	d024      	beq.n	d75a <setsockopt+0xba>
			else if(u8Opt == SO_SSL_ENABLE_SESSION_CACHING)
    d710:	2d03      	cmp	r5, #3
    d712:	d036      	beq.n	d782 <setsockopt+0xe2>
			else if(u8Opt == SO_SSL_ENABLE_SNI_VALIDATION)
    d714:	2d04      	cmp	r5, #4
    d716:	d049      	beq.n	d7ac <setsockopt+0x10c>
			else if(u8Opt == SO_SSL_SNI)
    d718:	2d02      	cmp	r5, #2
    d71a:	d176      	bne.n	d80a <setsockopt+0x16a>
				if(u16OptLen < HOSTNAME_MAX_SIZE)
    d71c:	2e3f      	cmp	r6, #63	; 0x3f
    d71e:	d865      	bhi.n	d7ec <setsockopt+0x14c>
					strCmd.sock			= sock;
    d720:	ac04      	add	r4, sp, #16
    d722:	7020      	strb	r0, [r4, #0]
					strCmd.u16SessionID	= gastrSockets[sock].u16SessionID;
    d724:	0100      	lsls	r0, r0, #4
    d726:	4a4d      	ldr	r2, [pc, #308]	; (d85c <setsockopt+0x1bc>)
    d728:	1810      	adds	r0, r2, r0
    d72a:	88c2      	ldrh	r2, [r0, #6]
    d72c:	8062      	strh	r2, [r4, #2]
					strCmd.u8Option		= u8Opt;
    d72e:	2202      	movs	r2, #2
    d730:	7062      	strb	r2, [r4, #1]
					strCmd.u32OptLen	= u16OptLen;
    d732:	9605      	str	r6, [sp, #20]
					m2m_memcpy(strCmd.au8OptVal, pu8SNI, HOSTNAME_MAX_SIZE);
    d734:	323e      	adds	r2, #62	; 0x3e
    d736:	0019      	movs	r1, r3
    d738:	a806      	add	r0, sp, #24
    d73a:	4b4a      	ldr	r3, [pc, #296]	; (d864 <setsockopt+0x1c4>)
    d73c:	4798      	blx	r3
					if(SOCKET_REQUEST(SOCKET_CMD_SSL_SET_SOCK_OPT, (uint8*)&strCmd, sizeof(tstrSSLSetSockOptCmd),
    d73e:	2300      	movs	r3, #0
    d740:	9302      	str	r3, [sp, #8]
    d742:	9301      	str	r3, [sp, #4]
    d744:	9300      	str	r3, [sp, #0]
    d746:	3348      	adds	r3, #72	; 0x48
    d748:	0022      	movs	r2, r4
    d74a:	2151      	movs	r1, #81	; 0x51
    d74c:	2002      	movs	r0, #2
    d74e:	4c44      	ldr	r4, [pc, #272]	; (d860 <setsockopt+0x1c0>)
    d750:	47a0      	blx	r4
    d752:	1cc3      	adds	r3, r0, #3
    d754:	d03f      	beq.n	d7d6 <setsockopt+0x136>
					s8Ret = SOCK_ERR_NO_ERROR;
    d756:	2000      	movs	r0, #0
    d758:	e7cd      	b.n	d6f6 <setsockopt+0x56>
				if(optVal)
    d75a:	681b      	ldr	r3, [r3, #0]
    d75c:	2b00      	cmp	r3, #0
    d75e:	d007      	beq.n	d770 <setsockopt+0xd0>
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_BYPASS_X509;
    d760:	4b3e      	ldr	r3, [pc, #248]	; (d85c <setsockopt+0x1bc>)
    d762:	1918      	adds	r0, r3, r4
    d764:	7ac3      	ldrb	r3, [r0, #11]
    d766:	2202      	movs	r2, #2
    d768:	4313      	orrs	r3, r2
    d76a:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
    d76c:	2000      	movs	r0, #0
    d76e:	e7c2      	b.n	d6f6 <setsockopt+0x56>
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_BYPASS_X509;
    d770:	0100      	lsls	r0, r0, #4
    d772:	4b3a      	ldr	r3, [pc, #232]	; (d85c <setsockopt+0x1bc>)
    d774:	1818      	adds	r0, r3, r0
    d776:	7ac3      	ldrb	r3, [r0, #11]
    d778:	2202      	movs	r2, #2
    d77a:	4393      	bics	r3, r2
    d77c:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
    d77e:	2000      	movs	r0, #0
    d780:	e7b9      	b.n	d6f6 <setsockopt+0x56>
				if(optVal)
    d782:	681b      	ldr	r3, [r3, #0]
    d784:	2b00      	cmp	r3, #0
    d786:	d008      	beq.n	d79a <setsockopt+0xfa>
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CACHE_SESSION;
    d788:	0100      	lsls	r0, r0, #4
    d78a:	4b34      	ldr	r3, [pc, #208]	; (d85c <setsockopt+0x1bc>)
    d78c:	1818      	adds	r0, r3, r0
    d78e:	7ac3      	ldrb	r3, [r0, #11]
    d790:	2210      	movs	r2, #16
    d792:	4313      	orrs	r3, r2
    d794:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
    d796:	2000      	movs	r0, #0
    d798:	e7ad      	b.n	d6f6 <setsockopt+0x56>
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_CACHE_SESSION;
    d79a:	0100      	lsls	r0, r0, #4
    d79c:	4b2f      	ldr	r3, [pc, #188]	; (d85c <setsockopt+0x1bc>)
    d79e:	1818      	adds	r0, r3, r0
    d7a0:	7ac3      	ldrb	r3, [r0, #11]
    d7a2:	2210      	movs	r2, #16
    d7a4:	4393      	bics	r3, r2
    d7a6:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
    d7a8:	2000      	movs	r0, #0
    d7aa:	e7a4      	b.n	d6f6 <setsockopt+0x56>
				if(optVal)
    d7ac:	681b      	ldr	r3, [r3, #0]
    d7ae:	2b00      	cmp	r3, #0
    d7b0:	d008      	beq.n	d7c4 <setsockopt+0x124>
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CHECK_SNI;
    d7b2:	0100      	lsls	r0, r0, #4
    d7b4:	4b29      	ldr	r3, [pc, #164]	; (d85c <setsockopt+0x1bc>)
    d7b6:	1818      	adds	r0, r3, r0
    d7b8:	7ac3      	ldrb	r3, [r0, #11]
    d7ba:	2240      	movs	r2, #64	; 0x40
    d7bc:	4313      	orrs	r3, r2
    d7be:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
    d7c0:	2000      	movs	r0, #0
    d7c2:	e798      	b.n	d6f6 <setsockopt+0x56>
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_CHECK_SNI;
    d7c4:	0100      	lsls	r0, r0, #4
    d7c6:	4b25      	ldr	r3, [pc, #148]	; (d85c <setsockopt+0x1bc>)
    d7c8:	1818      	adds	r0, r3, r0
    d7ca:	7ac3      	ldrb	r3, [r0, #11]
    d7cc:	2240      	movs	r2, #64	; 0x40
    d7ce:	4393      	bics	r3, r2
    d7d0:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
    d7d2:	2000      	movs	r0, #0
    d7d4:	e78f      	b.n	d6f6 <setsockopt+0x56>
						s8Ret = SOCKET_REQUEST(SOCKET_CMD_SSL_SET_SOCK_OPT | M2M_REQ_DATA_PKT, 
    d7d6:	2300      	movs	r3, #0
    d7d8:	9302      	str	r3, [sp, #8]
    d7da:	9301      	str	r3, [sp, #4]
    d7dc:	9300      	str	r3, [sp, #0]
    d7de:	3348      	adds	r3, #72	; 0x48
    d7e0:	aa04      	add	r2, sp, #16
    d7e2:	21d1      	movs	r1, #209	; 0xd1
    d7e4:	3005      	adds	r0, #5
    d7e6:	4c1e      	ldr	r4, [pc, #120]	; (d860 <setsockopt+0x1c0>)
    d7e8:	47a0      	blx	r4
    d7ea:	e7b4      	b.n	d756 <setsockopt+0xb6>
					M2M_ERR("SNI Exceeds Max Length\n");
    d7ec:	2291      	movs	r2, #145	; 0x91
    d7ee:	00d2      	lsls	r2, r2, #3
    d7f0:	491d      	ldr	r1, [pc, #116]	; (d868 <setsockopt+0x1c8>)
    d7f2:	481e      	ldr	r0, [pc, #120]	; (d86c <setsockopt+0x1cc>)
    d7f4:	4b1e      	ldr	r3, [pc, #120]	; (d870 <setsockopt+0x1d0>)
    d7f6:	4798      	blx	r3
    d7f8:	481e      	ldr	r0, [pc, #120]	; (d874 <setsockopt+0x1d4>)
    d7fa:	4b1f      	ldr	r3, [pc, #124]	; (d878 <setsockopt+0x1d8>)
    d7fc:	4798      	blx	r3
    d7fe:	200d      	movs	r0, #13
    d800:	4b1e      	ldr	r3, [pc, #120]	; (d87c <setsockopt+0x1dc>)
    d802:	4798      	blx	r3
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    d804:	2006      	movs	r0, #6
    d806:	4240      	negs	r0, r0
    d808:	e775      	b.n	d6f6 <setsockopt+0x56>
				M2M_ERR("Unknown SSL Socket Option %d\n",u8Opt);
    d80a:	4a1d      	ldr	r2, [pc, #116]	; (d880 <setsockopt+0x1e0>)
    d80c:	4916      	ldr	r1, [pc, #88]	; (d868 <setsockopt+0x1c8>)
    d80e:	4817      	ldr	r0, [pc, #92]	; (d86c <setsockopt+0x1cc>)
    d810:	4c17      	ldr	r4, [pc, #92]	; (d870 <setsockopt+0x1d0>)
    d812:	47a0      	blx	r4
    d814:	0029      	movs	r1, r5
    d816:	481b      	ldr	r0, [pc, #108]	; (d884 <setsockopt+0x1e4>)
    d818:	47a0      	blx	r4
    d81a:	200d      	movs	r0, #13
    d81c:	4b17      	ldr	r3, [pc, #92]	; (d87c <setsockopt+0x1dc>)
    d81e:	4798      	blx	r3
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    d820:	2006      	movs	r0, #6
    d822:	4240      	negs	r0, r0
    d824:	e767      	b.n	d6f6 <setsockopt+0x56>
			M2M_ERR("Not SSL Socket\n");
    d826:	4a18      	ldr	r2, [pc, #96]	; (d888 <setsockopt+0x1e8>)
    d828:	490f      	ldr	r1, [pc, #60]	; (d868 <setsockopt+0x1c8>)
    d82a:	4810      	ldr	r0, [pc, #64]	; (d86c <setsockopt+0x1cc>)
    d82c:	4b10      	ldr	r3, [pc, #64]	; (d870 <setsockopt+0x1d0>)
    d82e:	4798      	blx	r3
    d830:	4816      	ldr	r0, [pc, #88]	; (d88c <setsockopt+0x1ec>)
    d832:	4b11      	ldr	r3, [pc, #68]	; (d878 <setsockopt+0x1d8>)
    d834:	4798      	blx	r3
    d836:	200d      	movs	r0, #13
    d838:	4b10      	ldr	r3, [pc, #64]	; (d87c <setsockopt+0x1dc>)
    d83a:	4798      	blx	r3
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    d83c:	2006      	movs	r0, #6
    d83e:	4240      	negs	r0, r0
    d840:	e759      	b.n	d6f6 <setsockopt+0x56>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    d842:	2006      	movs	r0, #6
    d844:	4240      	negs	r0, r0
    d846:	e756      	b.n	d6f6 <setsockopt+0x56>
    d848:	2006      	movs	r0, #6
    d84a:	4240      	negs	r0, r0
    d84c:	e753      	b.n	d6f6 <setsockopt+0x56>
    d84e:	2006      	movs	r0, #6
    d850:	4240      	negs	r0, r0
    d852:	e750      	b.n	d6f6 <setsockopt+0x56>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    d854:	2006      	movs	r0, #6
    d856:	4240      	negs	r0, r0
    d858:	e74d      	b.n	d6f6 <setsockopt+0x56>
    d85a:	46c0      	nop			; (mov r8, r8)
    d85c:	20002bb8 	.word	0x20002bb8
    d860:	0000a58d 	.word	0x0000a58d
    d864:	0000a465 	.word	0x0000a465
    d868:	000160c0 	.word	0x000160c0
    d86c:	000151a8 	.word	0x000151a8
    d870:	00010b61 	.word	0x00010b61
    d874:	000160e8 	.word	0x000160e8
    d878:	00010c7d 	.word	0x00010c7d
    d87c:	00010b95 	.word	0x00010b95
    d880:	0000048d 	.word	0x0000048d
    d884:	00016100 	.word	0x00016100
    d888:	00000492 	.word	0x00000492
    d88c:	00016120 	.word	0x00016120

0000d890 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    d890:	b570      	push	{r4, r5, r6, lr}
    d892:	b082      	sub	sp, #8
    d894:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    d896:	4b2a      	ldr	r3, [pc, #168]	; (d940 <spi_flash_enable+0xb0>)
    d898:	4798      	blx	r3
    d89a:	0500      	lsls	r0, r0, #20
    d89c:	0d00      	lsrs	r0, r0, #20
    d89e:	4b29      	ldr	r3, [pc, #164]	; (d944 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    d8a0:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    d8a2:	4298      	cmp	r0, r3
    d8a4:	d802      	bhi.n	d8ac <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    d8a6:	0028      	movs	r0, r5
    d8a8:	b002      	add	sp, #8
    d8aa:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    d8ac:	a901      	add	r1, sp, #4
    d8ae:	4826      	ldr	r0, [pc, #152]	; (d948 <spi_flash_enable+0xb8>)
    d8b0:	4b26      	ldr	r3, [pc, #152]	; (d94c <spi_flash_enable+0xbc>)
    d8b2:	4798      	blx	r3
    d8b4:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    d8b6:	d1f6      	bne.n	d8a6 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    d8b8:	4b25      	ldr	r3, [pc, #148]	; (d950 <spi_flash_enable+0xc0>)
    d8ba:	9a01      	ldr	r2, [sp, #4]
    d8bc:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    d8be:	4925      	ldr	r1, [pc, #148]	; (d954 <spi_flash_enable+0xc4>)
    d8c0:	4319      	orrs	r1, r3
    d8c2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    d8c4:	4820      	ldr	r0, [pc, #128]	; (d948 <spi_flash_enable+0xb8>)
    d8c6:	4b24      	ldr	r3, [pc, #144]	; (d958 <spi_flash_enable+0xc8>)
    d8c8:	4798      	blx	r3
		if(enable) {
    d8ca:	2c00      	cmp	r4, #0
    d8cc:	d020      	beq.n	d910 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    d8ce:	2100      	movs	r1, #0
    d8d0:	4822      	ldr	r0, [pc, #136]	; (d95c <spi_flash_enable+0xcc>)
    d8d2:	4c21      	ldr	r4, [pc, #132]	; (d958 <spi_flash_enable+0xc8>)
    d8d4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    d8d6:	21ab      	movs	r1, #171	; 0xab
    d8d8:	4821      	ldr	r0, [pc, #132]	; (d960 <spi_flash_enable+0xd0>)
    d8da:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    d8dc:	2101      	movs	r1, #1
    d8de:	4821      	ldr	r0, [pc, #132]	; (d964 <spi_flash_enable+0xd4>)
    d8e0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    d8e2:	2100      	movs	r1, #0
    d8e4:	4820      	ldr	r0, [pc, #128]	; (d968 <spi_flash_enable+0xd8>)
    d8e6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    d8e8:	2181      	movs	r1, #129	; 0x81
    d8ea:	4820      	ldr	r0, [pc, #128]	; (d96c <spi_flash_enable+0xdc>)
    d8ec:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    d8ee:	4e20      	ldr	r6, [pc, #128]	; (d970 <spi_flash_enable+0xe0>)
    d8f0:	4c20      	ldr	r4, [pc, #128]	; (d974 <spi_flash_enable+0xe4>)
    d8f2:	0030      	movs	r0, r6
    d8f4:	47a0      	blx	r4
    d8f6:	2801      	cmp	r0, #1
    d8f8:	d1fb      	bne.n	d8f2 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    d8fa:	4b15      	ldr	r3, [pc, #84]	; (d950 <spi_flash_enable+0xc0>)
    d8fc:	9a01      	ldr	r2, [sp, #4]
    d8fe:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    d900:	2180      	movs	r1, #128	; 0x80
    d902:	0249      	lsls	r1, r1, #9
    d904:	4319      	orrs	r1, r3
    d906:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    d908:	480f      	ldr	r0, [pc, #60]	; (d948 <spi_flash_enable+0xb8>)
    d90a:	4b13      	ldr	r3, [pc, #76]	; (d958 <spi_flash_enable+0xc8>)
    d90c:	4798      	blx	r3
    d90e:	e7ca      	b.n	d8a6 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    d910:	2100      	movs	r1, #0
    d912:	4812      	ldr	r0, [pc, #72]	; (d95c <spi_flash_enable+0xcc>)
    d914:	4c10      	ldr	r4, [pc, #64]	; (d958 <spi_flash_enable+0xc8>)
    d916:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    d918:	21b9      	movs	r1, #185	; 0xb9
    d91a:	4811      	ldr	r0, [pc, #68]	; (d960 <spi_flash_enable+0xd0>)
    d91c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    d91e:	2101      	movs	r1, #1
    d920:	4810      	ldr	r0, [pc, #64]	; (d964 <spi_flash_enable+0xd4>)
    d922:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    d924:	2100      	movs	r1, #0
    d926:	4810      	ldr	r0, [pc, #64]	; (d968 <spi_flash_enable+0xd8>)
    d928:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    d92a:	2181      	movs	r1, #129	; 0x81
    d92c:	480f      	ldr	r0, [pc, #60]	; (d96c <spi_flash_enable+0xdc>)
    d92e:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    d930:	4e0f      	ldr	r6, [pc, #60]	; (d970 <spi_flash_enable+0xe0>)
    d932:	4c10      	ldr	r4, [pc, #64]	; (d974 <spi_flash_enable+0xe4>)
    d934:	0030      	movs	r0, r6
    d936:	47a0      	blx	r4
    d938:	2801      	cmp	r0, #1
    d93a:	d1fb      	bne.n	d934 <spi_flash_enable+0xa4>
    d93c:	e7dd      	b.n	d8fa <spi_flash_enable+0x6a>
    d93e:	46c0      	nop			; (mov r8, r8)
    d940:	0000b979 	.word	0x0000b979
    d944:	0000039f 	.word	0x0000039f
    d948:	00001410 	.word	0x00001410
    d94c:	0000becd 	.word	0x0000becd
    d950:	f8888fff 	.word	0xf8888fff
    d954:	01111000 	.word	0x01111000
    d958:	0000bed9 	.word	0x0000bed9
    d95c:	00010208 	.word	0x00010208
    d960:	0001020c 	.word	0x0001020c
    d964:	00010214 	.word	0x00010214
    d968:	0001021c 	.word	0x0001021c
    d96c:	00010204 	.word	0x00010204
    d970:	00010218 	.word	0x00010218
    d974:	0000bec1 	.word	0x0000bec1

0000d978 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    d978:	b500      	push	{lr}
    d97a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    d97c:	ab01      	add	r3, sp, #4
    d97e:	2280      	movs	r2, #128	; 0x80
    d980:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    d982:	780a      	ldrb	r2, [r1, #0]
    d984:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    d986:	784a      	ldrb	r2, [r1, #1]
    d988:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    d98a:	788a      	ldrb	r2, [r1, #2]
    d98c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    d98e:	0019      	movs	r1, r3
    d990:	4b01      	ldr	r3, [pc, #4]	; (d998 <port_pin_set_config+0x20>)
    d992:	4798      	blx	r3
}
    d994:	b003      	add	sp, #12
    d996:	bd00      	pop	{pc}
    d998:	0000e279 	.word	0x0000e279

0000d99c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    d99c:	4770      	bx	lr
	...

0000d9a0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    d9a0:	4b0c      	ldr	r3, [pc, #48]	; (d9d4 <cpu_irq_enter_critical+0x34>)
    d9a2:	681b      	ldr	r3, [r3, #0]
    d9a4:	2b00      	cmp	r3, #0
    d9a6:	d106      	bne.n	d9b6 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d9a8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    d9ac:	2b00      	cmp	r3, #0
    d9ae:	d007      	beq.n	d9c0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    d9b0:	2200      	movs	r2, #0
    d9b2:	4b09      	ldr	r3, [pc, #36]	; (d9d8 <cpu_irq_enter_critical+0x38>)
    d9b4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    d9b6:	4a07      	ldr	r2, [pc, #28]	; (d9d4 <cpu_irq_enter_critical+0x34>)
    d9b8:	6813      	ldr	r3, [r2, #0]
    d9ba:	3301      	adds	r3, #1
    d9bc:	6013      	str	r3, [r2, #0]
}
    d9be:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    d9c0:	b672      	cpsid	i
    d9c2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    d9c6:	2200      	movs	r2, #0
    d9c8:	4b04      	ldr	r3, [pc, #16]	; (d9dc <cpu_irq_enter_critical+0x3c>)
    d9ca:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    d9cc:	3201      	adds	r2, #1
    d9ce:	4b02      	ldr	r3, [pc, #8]	; (d9d8 <cpu_irq_enter_critical+0x38>)
    d9d0:	701a      	strb	r2, [r3, #0]
    d9d2:	e7f0      	b.n	d9b6 <cpu_irq_enter_critical+0x16>
    d9d4:	20002768 	.word	0x20002768
    d9d8:	2000276c 	.word	0x2000276c
    d9dc:	200002c6 	.word	0x200002c6

0000d9e0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    d9e0:	4b08      	ldr	r3, [pc, #32]	; (da04 <cpu_irq_leave_critical+0x24>)
    d9e2:	681a      	ldr	r2, [r3, #0]
    d9e4:	3a01      	subs	r2, #1
    d9e6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    d9e8:	681b      	ldr	r3, [r3, #0]
    d9ea:	2b00      	cmp	r3, #0
    d9ec:	d109      	bne.n	da02 <cpu_irq_leave_critical+0x22>
    d9ee:	4b06      	ldr	r3, [pc, #24]	; (da08 <cpu_irq_leave_critical+0x28>)
    d9f0:	781b      	ldrb	r3, [r3, #0]
    d9f2:	2b00      	cmp	r3, #0
    d9f4:	d005      	beq.n	da02 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    d9f6:	2201      	movs	r2, #1
    d9f8:	4b04      	ldr	r3, [pc, #16]	; (da0c <cpu_irq_leave_critical+0x2c>)
    d9fa:	701a      	strb	r2, [r3, #0]
    d9fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    da00:	b662      	cpsie	i
	}
}
    da02:	4770      	bx	lr
    da04:	20002768 	.word	0x20002768
    da08:	2000276c 	.word	0x2000276c
    da0c:	200002c6 	.word	0x200002c6

0000da10 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    da10:	b510      	push	{r4, lr}
	switch (clock_source) {
    da12:	2808      	cmp	r0, #8
    da14:	d803      	bhi.n	da1e <system_clock_source_get_hz+0xe>
    da16:	0080      	lsls	r0, r0, #2
    da18:	4b1d      	ldr	r3, [pc, #116]	; (da90 <system_clock_source_get_hz+0x80>)
    da1a:	581b      	ldr	r3, [r3, r0]
    da1c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    da1e:	2000      	movs	r0, #0
    da20:	e034      	b.n	da8c <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc.frequency;
    da22:	4b1c      	ldr	r3, [pc, #112]	; (da94 <system_clock_source_get_hz+0x84>)
    da24:	6918      	ldr	r0, [r3, #16]
    da26:	e031      	b.n	da8c <system_clock_source_get_hz+0x7c>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    da28:	4b1b      	ldr	r3, [pc, #108]	; (da98 <system_clock_source_get_hz+0x88>)
    da2a:	7d18      	ldrb	r0, [r3, #20]
    da2c:	0700      	lsls	r0, r0, #28
    da2e:	0f80      	lsrs	r0, r0, #30
    da30:	1c43      	adds	r3, r0, #1
    da32:	481a      	ldr	r0, [pc, #104]	; (da9c <system_clock_source_get_hz+0x8c>)
    da34:	4358      	muls	r0, r3
    da36:	e029      	b.n	da8c <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc32k.frequency;
    da38:	4b16      	ldr	r3, [pc, #88]	; (da94 <system_clock_source_get_hz+0x84>)
    da3a:	6958      	ldr	r0, [r3, #20]
    da3c:	e026      	b.n	da8c <system_clock_source_get_hz+0x7c>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    da3e:	4b15      	ldr	r3, [pc, #84]	; (da94 <system_clock_source_get_hz+0x84>)
    da40:	681b      	ldr	r3, [r3, #0]
			return 0;
    da42:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    da44:	079b      	lsls	r3, r3, #30
    da46:	d521      	bpl.n	da8c <system_clock_source_get_hz+0x7c>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    da48:	4913      	ldr	r1, [pc, #76]	; (da98 <system_clock_source_get_hz+0x88>)
    da4a:	2280      	movs	r2, #128	; 0x80
    da4c:	0052      	lsls	r2, r2, #1
    da4e:	68cb      	ldr	r3, [r1, #12]
    da50:	4213      	tst	r3, r2
    da52:	d0fc      	beq.n	da4e <system_clock_source_get_hz+0x3e>
		switch(_system_clock_inst.dfll.control &
    da54:	4b0f      	ldr	r3, [pc, #60]	; (da94 <system_clock_source_get_hz+0x84>)
    da56:	681a      	ldr	r2, [r3, #0]
    da58:	2324      	movs	r3, #36	; 0x24
    da5a:	4013      	ands	r3, r2
    da5c:	2b04      	cmp	r3, #4
    da5e:	d001      	beq.n	da64 <system_clock_source_get_hz+0x54>
			return 48000000UL;
    da60:	480f      	ldr	r0, [pc, #60]	; (daa0 <system_clock_source_get_hz+0x90>)
    da62:	e013      	b.n	da8c <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    da64:	2000      	movs	r0, #0
    da66:	4b0f      	ldr	r3, [pc, #60]	; (daa4 <system_clock_source_get_hz+0x94>)
    da68:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    da6a:	4b0a      	ldr	r3, [pc, #40]	; (da94 <system_clock_source_get_hz+0x84>)
    da6c:	689b      	ldr	r3, [r3, #8]
    da6e:	041b      	lsls	r3, r3, #16
    da70:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    da72:	4358      	muls	r0, r3
    da74:	e00a      	b.n	da8c <system_clock_source_get_hz+0x7c>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    da76:	2328      	movs	r3, #40	; 0x28
    da78:	4a07      	ldr	r2, [pc, #28]	; (da98 <system_clock_source_get_hz+0x88>)
    da7a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    da7c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    da7e:	079b      	lsls	r3, r3, #30
    da80:	d504      	bpl.n	da8c <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.dpll.frequency;
    da82:	4b04      	ldr	r3, [pc, #16]	; (da94 <system_clock_source_get_hz+0x84>)
    da84:	68d8      	ldr	r0, [r3, #12]
    da86:	e001      	b.n	da8c <system_clock_source_get_hz+0x7c>
		return 32768UL;
    da88:	2080      	movs	r0, #128	; 0x80
    da8a:	0200      	lsls	r0, r0, #8
	}
}
    da8c:	bd10      	pop	{r4, pc}
    da8e:	46c0      	nop			; (mov r8, r8)
    da90:	0001614c 	.word	0x0001614c
    da94:	20002770 	.word	0x20002770
    da98:	40000c00 	.word	0x40000c00
    da9c:	003d0900 	.word	0x003d0900
    daa0:	02dc6c00 	.word	0x02dc6c00
    daa4:	0000e1a1 	.word	0x0000e1a1

0000daa8 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    daa8:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    daaa:	4c0b      	ldr	r4, [pc, #44]	; (dad8 <system_clock_source_osc16m_set_config+0x30>)
    daac:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    daae:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    dab0:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    dab2:	7802      	ldrb	r2, [r0, #0]
    dab4:	2103      	movs	r1, #3
    dab6:	4011      	ands	r1, r2
    dab8:	0089      	lsls	r1, r1, #2
    daba:	220c      	movs	r2, #12
    dabc:	4393      	bics	r3, r2
    dabe:	430b      	orrs	r3, r1
    dac0:	3a0b      	subs	r2, #11
    dac2:	4032      	ands	r2, r6
    dac4:	0192      	lsls	r2, r2, #6
    dac6:	2140      	movs	r1, #64	; 0x40
    dac8:	438b      	bics	r3, r1
    daca:	4313      	orrs	r3, r2
    dacc:	01ed      	lsls	r5, r5, #7
    dace:	227f      	movs	r2, #127	; 0x7f
    dad0:	4013      	ands	r3, r2
    dad2:	432b      	orrs	r3, r5
    dad4:	7523      	strb	r3, [r4, #20]
}
    dad6:	bd70      	pop	{r4, r5, r6, pc}
    dad8:	40000c00 	.word	0x40000c00

0000dadc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    dadc:	b5f0      	push	{r4, r5, r6, r7, lr}
    dade:	46d6      	mov	lr, sl
    dae0:	464f      	mov	r7, r9
    dae2:	4646      	mov	r6, r8
    dae4:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    dae6:	4b20      	ldr	r3, [pc, #128]	; (db68 <system_clock_source_xosc32k_set_config+0x8c>)
    dae8:	469a      	mov	sl, r3
    daea:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    daec:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    daee:	7801      	ldrb	r1, [r0, #0]
    daf0:	424c      	negs	r4, r1
    daf2:	414c      	adcs	r4, r1
    daf4:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    daf6:	7881      	ldrb	r1, [r0, #2]
    daf8:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    dafa:	78c1      	ldrb	r1, [r0, #3]
    dafc:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    dafe:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    db00:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    db02:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    db04:	6840      	ldr	r0, [r0, #4]
    db06:	4919      	ldr	r1, [pc, #100]	; (db6c <system_clock_source_xosc32k_set_config+0x90>)
    db08:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    db0a:	2101      	movs	r1, #1
    db0c:	4648      	mov	r0, r9
    db0e:	0080      	lsls	r0, r0, #2
    db10:	2204      	movs	r2, #4
    db12:	4393      	bics	r3, r2
    db14:	4303      	orrs	r3, r0
    db16:	4640      	mov	r0, r8
    db18:	4008      	ands	r0, r1
    db1a:	00c0      	lsls	r0, r0, #3
    db1c:	3204      	adds	r2, #4
    db1e:	4393      	bics	r3, r2
    db20:	4303      	orrs	r3, r0
    db22:	4660      	mov	r0, ip
    db24:	4008      	ands	r0, r1
    db26:	0100      	lsls	r0, r0, #4
    db28:	3208      	adds	r2, #8
    db2a:	4393      	bics	r3, r2
    db2c:	4303      	orrs	r3, r0
    db2e:	400f      	ands	r7, r1
    db30:	01bf      	lsls	r7, r7, #6
    db32:	2040      	movs	r0, #64	; 0x40
    db34:	4383      	bics	r3, r0
    db36:	433b      	orrs	r3, r7
    db38:	400e      	ands	r6, r1
    db3a:	01f6      	lsls	r6, r6, #7
    db3c:	3040      	adds	r0, #64	; 0x40
    db3e:	4383      	bics	r3, r0
    db40:	4333      	orrs	r3, r6
    db42:	3879      	subs	r0, #121	; 0x79
    db44:	4005      	ands	r5, r0
    db46:	022d      	lsls	r5, r5, #8
    db48:	4809      	ldr	r0, [pc, #36]	; (db70 <system_clock_source_xosc32k_set_config+0x94>)
    db4a:	4003      	ands	r3, r0
    db4c:	432b      	orrs	r3, r5
    db4e:	4021      	ands	r1, r4
    db50:	0309      	lsls	r1, r1, #12
    db52:	4808      	ldr	r0, [pc, #32]	; (db74 <system_clock_source_xosc32k_set_config+0x98>)
    db54:	4003      	ands	r3, r0
    db56:	430b      	orrs	r3, r1
    db58:	4652      	mov	r2, sl
    db5a:	6153      	str	r3, [r2, #20]
}
    db5c:	bc1c      	pop	{r2, r3, r4}
    db5e:	4690      	mov	r8, r2
    db60:	4699      	mov	r9, r3
    db62:	46a2      	mov	sl, r4
    db64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db66:	46c0      	nop			; (mov r8, r8)
    db68:	40001000 	.word	0x40001000
    db6c:	20002770 	.word	0x20002770
    db70:	fffff8ff 	.word	0xfffff8ff
    db74:	ffffefff 	.word	0xffffefff

0000db78 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    db78:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    db7a:	7a83      	ldrb	r3, [r0, #10]
    db7c:	069b      	lsls	r3, r3, #26
    db7e:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    db80:	8982      	ldrh	r2, [r0, #12]
    db82:	0592      	lsls	r2, r2, #22
    db84:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    db86:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    db88:	491a      	ldr	r1, [pc, #104]	; (dbf4 <system_clock_source_dfll_set_config+0x7c>)
    db8a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    db8c:	7a03      	ldrb	r3, [r0, #8]
    db8e:	7a42      	ldrb	r2, [r0, #9]
    db90:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    db92:	8882      	ldrh	r2, [r0, #4]
    db94:	88c4      	ldrh	r4, [r0, #6]
    db96:	4322      	orrs	r2, r4
    db98:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    db9a:	7842      	ldrb	r2, [r0, #1]
    db9c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    db9e:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    dba0:	7882      	ldrb	r2, [r0, #2]
    dba2:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    dba4:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    dba6:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    dba8:	7803      	ldrb	r3, [r0, #0]
    dbaa:	2b04      	cmp	r3, #4
    dbac:	d011      	beq.n	dbd2 <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    dbae:	2b20      	cmp	r3, #32
    dbb0:	d10e      	bne.n	dbd0 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    dbb2:	7b83      	ldrb	r3, [r0, #14]
    dbb4:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    dbb6:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    dbb8:	4313      	orrs	r3, r2
    dbba:	8a02      	ldrh	r2, [r0, #16]
    dbbc:	0412      	lsls	r2, r2, #16
    dbbe:	490e      	ldr	r1, [pc, #56]	; (dbf8 <system_clock_source_dfll_set_config+0x80>)
    dbc0:	400a      	ands	r2, r1
    dbc2:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    dbc4:	4a0b      	ldr	r2, [pc, #44]	; (dbf4 <system_clock_source_dfll_set_config+0x7c>)
    dbc6:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    dbc8:	6811      	ldr	r1, [r2, #0]
    dbca:	4b0c      	ldr	r3, [pc, #48]	; (dbfc <system_clock_source_dfll_set_config+0x84>)
    dbcc:	430b      	orrs	r3, r1
    dbce:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    dbd0:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    dbd2:	7b83      	ldrb	r3, [r0, #14]
    dbd4:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    dbd6:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    dbd8:	4313      	orrs	r3, r2
    dbda:	8a02      	ldrh	r2, [r0, #16]
    dbdc:	0412      	lsls	r2, r2, #16
    dbde:	4906      	ldr	r1, [pc, #24]	; (dbf8 <system_clock_source_dfll_set_config+0x80>)
    dbe0:	400a      	ands	r2, r1
    dbe2:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    dbe4:	4a03      	ldr	r2, [pc, #12]	; (dbf4 <system_clock_source_dfll_set_config+0x7c>)
    dbe6:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    dbe8:	6813      	ldr	r3, [r2, #0]
    dbea:	2104      	movs	r1, #4
    dbec:	430b      	orrs	r3, r1
    dbee:	6013      	str	r3, [r2, #0]
    dbf0:	e7ee      	b.n	dbd0 <system_clock_source_dfll_set_config+0x58>
    dbf2:	46c0      	nop			; (mov r8, r8)
    dbf4:	20002770 	.word	0x20002770
    dbf8:	03ff0000 	.word	0x03ff0000
    dbfc:	00000424 	.word	0x00000424

0000dc00 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    dc00:	2808      	cmp	r0, #8
    dc02:	d803      	bhi.n	dc0c <system_clock_source_enable+0xc>
    dc04:	0080      	lsls	r0, r0, #2
    dc06:	4b2d      	ldr	r3, [pc, #180]	; (dcbc <system_clock_source_enable+0xbc>)
    dc08:	581b      	ldr	r3, [r3, r0]
    dc0a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    dc0c:	2017      	movs	r0, #23
    dc0e:	e054      	b.n	dcba <system_clock_source_enable+0xba>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    dc10:	4a2b      	ldr	r2, [pc, #172]	; (dcc0 <system_clock_source_enable+0xc0>)
    dc12:	7d13      	ldrb	r3, [r2, #20]
    dc14:	2102      	movs	r1, #2
    dc16:	430b      	orrs	r3, r1
    dc18:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    dc1a:	2000      	movs	r0, #0
    dc1c:	e04d      	b.n	dcba <system_clock_source_enable+0xba>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    dc1e:	4a29      	ldr	r2, [pc, #164]	; (dcc4 <system_clock_source_enable+0xc4>)
    dc20:	6993      	ldr	r3, [r2, #24]
    dc22:	2102      	movs	r1, #2
    dc24:	430b      	orrs	r3, r1
    dc26:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    dc28:	2000      	movs	r0, #0
		break;
    dc2a:	e046      	b.n	dcba <system_clock_source_enable+0xba>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    dc2c:	4a24      	ldr	r2, [pc, #144]	; (dcc0 <system_clock_source_enable+0xc0>)
    dc2e:	8a13      	ldrh	r3, [r2, #16]
    dc30:	2102      	movs	r1, #2
    dc32:	430b      	orrs	r3, r1
    dc34:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    dc36:	2000      	movs	r0, #0
		break;
    dc38:	e03f      	b.n	dcba <system_clock_source_enable+0xba>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    dc3a:	4a22      	ldr	r2, [pc, #136]	; (dcc4 <system_clock_source_enable+0xc4>)
    dc3c:	6953      	ldr	r3, [r2, #20]
    dc3e:	2102      	movs	r1, #2
    dc40:	430b      	orrs	r3, r1
    dc42:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    dc44:	2000      	movs	r0, #0
		break;
    dc46:	e038      	b.n	dcba <system_clock_source_enable+0xba>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    dc48:	491f      	ldr	r1, [pc, #124]	; (dcc8 <system_clock_source_enable+0xc8>)
    dc4a:	680b      	ldr	r3, [r1, #0]
    dc4c:	2202      	movs	r2, #2
    dc4e:	4313      	orrs	r3, r2
    dc50:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    dc52:	4b1b      	ldr	r3, [pc, #108]	; (dcc0 <system_clock_source_enable+0xc0>)
    dc54:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    dc56:	0019      	movs	r1, r3
    dc58:	32fe      	adds	r2, #254	; 0xfe
    dc5a:	68cb      	ldr	r3, [r1, #12]
    dc5c:	4213      	tst	r3, r2
    dc5e:	d0fc      	beq.n	dc5a <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    dc60:	4b19      	ldr	r3, [pc, #100]	; (dcc8 <system_clock_source_enable+0xc8>)
    dc62:	689a      	ldr	r2, [r3, #8]
    dc64:	4b16      	ldr	r3, [pc, #88]	; (dcc0 <system_clock_source_enable+0xc0>)
    dc66:	621a      	str	r2, [r3, #32]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    dc68:	2202      	movs	r2, #2
    dc6a:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    dc6c:	0019      	movs	r1, r3
    dc6e:	32fe      	adds	r2, #254	; 0xfe
    dc70:	68cb      	ldr	r3, [r1, #12]
    dc72:	4213      	tst	r3, r2
    dc74:	d0fc      	beq.n	dc70 <system_clock_source_enable+0x70>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    dc76:	4b14      	ldr	r3, [pc, #80]	; (dcc8 <system_clock_source_enable+0xc8>)
    dc78:	685a      	ldr	r2, [r3, #4]
    dc7a:	4b11      	ldr	r3, [pc, #68]	; (dcc0 <system_clock_source_enable+0xc0>)
    dc7c:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    dc7e:	2200      	movs	r2, #0
    dc80:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    dc82:	0019      	movs	r1, r3
    dc84:	3201      	adds	r2, #1
    dc86:	32ff      	adds	r2, #255	; 0xff
    dc88:	68cb      	ldr	r3, [r1, #12]
    dc8a:	4213      	tst	r3, r2
    dc8c:	d0fc      	beq.n	dc88 <system_clock_source_enable+0x88>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    dc8e:	4b0e      	ldr	r3, [pc, #56]	; (dcc8 <system_clock_source_enable+0xc8>)
    dc90:	681b      	ldr	r3, [r3, #0]
    dc92:	b29b      	uxth	r3, r3
    dc94:	4a0a      	ldr	r2, [pc, #40]	; (dcc0 <system_clock_source_enable+0xc0>)
    dc96:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    dc98:	2000      	movs	r0, #0
    dc9a:	e00e      	b.n	dcba <system_clock_source_enable+0xba>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    dc9c:	4908      	ldr	r1, [pc, #32]	; (dcc0 <system_clock_source_enable+0xc0>)
    dc9e:	2228      	movs	r2, #40	; 0x28
    dca0:	5c8b      	ldrb	r3, [r1, r2]
    dca2:	2002      	movs	r0, #2
    dca4:	4303      	orrs	r3, r0
    dca6:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    dca8:	0008      	movs	r0, r1
    dcaa:	2138      	movs	r1, #56	; 0x38
    dcac:	3a26      	subs	r2, #38	; 0x26
    dcae:	5c43      	ldrb	r3, [r0, r1]
    dcb0:	4213      	tst	r3, r2
    dcb2:	d1fc      	bne.n	dcae <system_clock_source_enable+0xae>
	return STATUS_OK;
    dcb4:	2000      	movs	r0, #0
    dcb6:	e000      	b.n	dcba <system_clock_source_enable+0xba>
		return STATUS_OK;
    dcb8:	2000      	movs	r0, #0
}
    dcba:	4770      	bx	lr
    dcbc:	00016170 	.word	0x00016170
    dcc0:	40000c00 	.word	0x40000c00
    dcc4:	40001000 	.word	0x40001000
    dcc8:	20002770 	.word	0x20002770

0000dccc <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    dccc:	2808      	cmp	r0, #8
    dcce:	d832      	bhi.n	dd36 <system_clock_source_disable+0x6a>
    dcd0:	0080      	lsls	r0, r0, #2
    dcd2:	4b1a      	ldr	r3, [pc, #104]	; (dd3c <system_clock_source_disable+0x70>)
    dcd4:	581b      	ldr	r3, [r3, r0]
    dcd6:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    dcd8:	4a19      	ldr	r2, [pc, #100]	; (dd40 <system_clock_source_disable+0x74>)
    dcda:	7d13      	ldrb	r3, [r2, #20]
    dcdc:	2102      	movs	r1, #2
    dcde:	438b      	bics	r3, r1
    dce0:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    dce2:	2000      	movs	r0, #0
}
    dce4:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    dce6:	4a17      	ldr	r2, [pc, #92]	; (dd44 <system_clock_source_disable+0x78>)
    dce8:	6993      	ldr	r3, [r2, #24]
    dcea:	2102      	movs	r1, #2
    dcec:	438b      	bics	r3, r1
    dcee:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    dcf0:	2000      	movs	r0, #0
		break;
    dcf2:	e7f7      	b.n	dce4 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    dcf4:	4a12      	ldr	r2, [pc, #72]	; (dd40 <system_clock_source_disable+0x74>)
    dcf6:	8a13      	ldrh	r3, [r2, #16]
    dcf8:	2102      	movs	r1, #2
    dcfa:	438b      	bics	r3, r1
    dcfc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    dcfe:	2000      	movs	r0, #0
		break;
    dd00:	e7f0      	b.n	dce4 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    dd02:	4a10      	ldr	r2, [pc, #64]	; (dd44 <system_clock_source_disable+0x78>)
    dd04:	6953      	ldr	r3, [r2, #20]
    dd06:	2102      	movs	r1, #2
    dd08:	438b      	bics	r3, r1
    dd0a:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    dd0c:	2000      	movs	r0, #0
		break;
    dd0e:	e7e9      	b.n	dce4 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    dd10:	4b0d      	ldr	r3, [pc, #52]	; (dd48 <system_clock_source_disable+0x7c>)
    dd12:	681a      	ldr	r2, [r3, #0]
    dd14:	2102      	movs	r1, #2
    dd16:	438a      	bics	r2, r1
    dd18:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    dd1a:	681b      	ldr	r3, [r3, #0]
    dd1c:	b29b      	uxth	r3, r3
    dd1e:	4a08      	ldr	r2, [pc, #32]	; (dd40 <system_clock_source_disable+0x74>)
    dd20:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    dd22:	2000      	movs	r0, #0
		break;
    dd24:	e7de      	b.n	dce4 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    dd26:	4906      	ldr	r1, [pc, #24]	; (dd40 <system_clock_source_disable+0x74>)
    dd28:	2228      	movs	r2, #40	; 0x28
    dd2a:	5c8b      	ldrb	r3, [r1, r2]
    dd2c:	2002      	movs	r0, #2
    dd2e:	4383      	bics	r3, r0
    dd30:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    dd32:	2000      	movs	r0, #0
		break;
    dd34:	e7d6      	b.n	dce4 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    dd36:	2017      	movs	r0, #23
    dd38:	e7d4      	b.n	dce4 <system_clock_source_disable+0x18>
    dd3a:	46c0      	nop			; (mov r8, r8)
    dd3c:	00016194 	.word	0x00016194
    dd40:	40000c00 	.word	0x40000c00
    dd44:	40001000 	.word	0x40001000
    dd48:	20002770 	.word	0x20002770

0000dd4c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    dd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd4e:	46ce      	mov	lr, r9
    dd50:	4647      	mov	r7, r8
    dd52:	b580      	push	{r7, lr}
    dd54:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    dd56:	2280      	movs	r2, #128	; 0x80
    dd58:	0052      	lsls	r2, r2, #1
    dd5a:	4b79      	ldr	r3, [pc, #484]	; (df40 <system_clock_init+0x1f4>)
    dd5c:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    dd5e:	3afd      	subs	r2, #253	; 0xfd
    dd60:	4b78      	ldr	r3, [pc, #480]	; (df44 <system_clock_init+0x1f8>)
    dd62:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    dd64:	4a78      	ldr	r2, [pc, #480]	; (df48 <system_clock_init+0x1fc>)
    dd66:	6853      	ldr	r3, [r2, #4]
    dd68:	211e      	movs	r1, #30
    dd6a:	438b      	bics	r3, r1
    dd6c:	391a      	subs	r1, #26
    dd6e:	430b      	orrs	r3, r1
    dd70:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    dd72:	2380      	movs	r3, #128	; 0x80
    dd74:	05db      	lsls	r3, r3, #23
    dd76:	789b      	ldrb	r3, [r3, #2]
    dd78:	2b02      	cmp	r3, #2
    dd7a:	d00f      	beq.n	dd9c <system_clock_init+0x50>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    dd7c:	2380      	movs	r3, #128	; 0x80
    dd7e:	05db      	lsls	r3, r3, #23
    dd80:	789b      	ldrb	r3, [r3, #2]
    dd82:	b25b      	sxtb	r3, r3
    dd84:	2b00      	cmp	r3, #0
    dd86:	db09      	blt.n	dd9c <system_clock_init+0x50>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    dd88:	2380      	movs	r3, #128	; 0x80
    dd8a:	05db      	lsls	r3, r3, #23
    dd8c:	2201      	movs	r2, #1
    dd8e:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    dd90:	3201      	adds	r2, #1
    dd92:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    dd94:	001a      	movs	r2, r3
    dd96:	7993      	ldrb	r3, [r2, #6]
    dd98:	2b00      	cmp	r3, #0
    dd9a:	d0fc      	beq.n	dd96 <system_clock_init+0x4a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    dd9c:	a809      	add	r0, sp, #36	; 0x24
    dd9e:	2300      	movs	r3, #0
    dda0:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    dda2:	2280      	movs	r2, #128	; 0x80
    dda4:	0212      	lsls	r2, r2, #8
    dda6:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    dda8:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    ddaa:	2201      	movs	r2, #1
    ddac:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    ddae:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    ddb0:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    ddb2:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    ddb4:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    ddb6:	4b65      	ldr	r3, [pc, #404]	; (df4c <system_clock_init+0x200>)
    ddb8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    ddba:	2005      	movs	r0, #5
    ddbc:	4b64      	ldr	r3, [pc, #400]	; (df50 <system_clock_init+0x204>)
    ddbe:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    ddc0:	4964      	ldr	r1, [pc, #400]	; (df54 <system_clock_init+0x208>)
    ddc2:	2201      	movs	r2, #1
    ddc4:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    ddc6:	421a      	tst	r2, r3
    ddc8:	d0fc      	beq.n	ddc4 <system_clock_init+0x78>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    ddca:	4a62      	ldr	r2, [pc, #392]	; (df54 <system_clock_init+0x208>)
    ddcc:	6953      	ldr	r3, [r2, #20]
    ddce:	2180      	movs	r1, #128	; 0x80
    ddd0:	430b      	orrs	r3, r1
    ddd2:	6153      	str	r3, [r2, #20]
	config->division_factor    = 1;
    ddd4:	a901      	add	r1, sp, #4
    ddd6:	2301      	movs	r3, #1
    ddd8:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    ddda:	2400      	movs	r4, #0
    dddc:	704c      	strb	r4, [r1, #1]
	config->run_in_standby     = false;
    ddde:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    dde0:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    dde2:	2503      	movs	r5, #3
    dde4:	700d      	strb	r5, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    dde6:	2000      	movs	r0, #0
    dde8:	4b5b      	ldr	r3, [pc, #364]	; (df58 <system_clock_init+0x20c>)
    ddea:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    ddec:	2006      	movs	r0, #6
    ddee:	4b5b      	ldr	r3, [pc, #364]	; (df5c <system_clock_init+0x210>)
    ddf0:	4798      	blx	r3
	config->run_in_standby  = false;
    ddf2:	466b      	mov	r3, sp
    ddf4:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    ddf6:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    ddf8:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    ddfa:	4668      	mov	r0, sp
    ddfc:	4b58      	ldr	r3, [pc, #352]	; (df60 <system_clock_init+0x214>)
    ddfe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    de00:	2006      	movs	r0, #6
    de02:	4b53      	ldr	r3, [pc, #332]	; (df50 <system_clock_init+0x204>)
    de04:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    de06:	494e      	ldr	r1, [pc, #312]	; (df40 <system_clock_init+0x1f4>)
    de08:	2210      	movs	r2, #16
    de0a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    de0c:	421a      	tst	r2, r3
    de0e:	d0fc      	beq.n	de0a <system_clock_init+0xbe>
	config->division_factor    = 1;
    de10:	a901      	add	r1, sp, #4
    de12:	2301      	movs	r3, #1
    de14:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    de16:	2400      	movs	r4, #0
    de18:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    de1a:	3305      	adds	r3, #5
    de1c:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    de1e:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    de20:	724c      	strb	r4, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    de22:	2000      	movs	r0, #0
    de24:	4b4c      	ldr	r3, [pc, #304]	; (df58 <system_clock_init+0x20c>)
    de26:	4798      	blx	r3
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    de28:	4a45      	ldr	r2, [pc, #276]	; (df40 <system_clock_init+0x1f4>)
    de2a:	7d13      	ldrb	r3, [r2, #20]
    de2c:	2180      	movs	r1, #128	; 0x80
    de2e:	430b      	orrs	r3, r1
    de30:	7513      	strb	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    de32:	ab04      	add	r3, sp, #16
    de34:	2200      	movs	r2, #0
    de36:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    de38:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    de3a:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    de3c:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    de3e:	709a      	strb	r2, [r3, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    de40:	3941      	subs	r1, #65	; 0x41
    de42:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    de44:	393b      	subs	r1, #59	; 0x3b
    de46:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    de48:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    de4a:	4b46      	ldr	r3, [pc, #280]	; (df64 <system_clock_init+0x218>)
    de4c:	681b      	ldr	r3, [r3, #0]
    de4e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    de50:	2b3f      	cmp	r3, #63	; 0x3f
    de52:	d100      	bne.n	de56 <system_clock_init+0x10a>
    de54:	e071      	b.n	df3a <system_clock_init+0x1ee>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    de56:	a804      	add	r0, sp, #16
    de58:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    de5a:	4b43      	ldr	r3, [pc, #268]	; (df68 <system_clock_init+0x21c>)
    de5c:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    de5e:	2307      	movs	r3, #7
    de60:	4699      	mov	r9, r3
    de62:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    de64:	233f      	movs	r3, #63	; 0x3f
    de66:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    de68:	4b40      	ldr	r3, [pc, #256]	; (df6c <system_clock_init+0x220>)
    de6a:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    de6c:	4b40      	ldr	r3, [pc, #256]	; (df70 <system_clock_init+0x224>)
    de6e:	4798      	blx	r3
	config->division_factor    = 1;
    de70:	ac01      	add	r4, sp, #4
    de72:	2601      	movs	r6, #1
    de74:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    de76:	2500      	movs	r5, #0
    de78:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    de7a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    de7c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    de7e:	2305      	movs	r3, #5
    de80:	7023      	strb	r3, [r4, #0]
    de82:	0021      	movs	r1, r4
    de84:	2001      	movs	r0, #1
    de86:	4b34      	ldr	r3, [pc, #208]	; (df58 <system_clock_init+0x20c>)
    de88:	4698      	mov	r8, r3
    de8a:	4798      	blx	r3
    de8c:	2001      	movs	r0, #1
    de8e:	4f39      	ldr	r7, [pc, #228]	; (df74 <system_clock_init+0x228>)
    de90:	47b8      	blx	r7
	config->division_factor    = 1;
    de92:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    de94:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    de96:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    de98:	7265      	strb	r5, [r4, #9]
    de9a:	464b      	mov	r3, r9
    de9c:	7023      	strb	r3, [r4, #0]
    de9e:	0021      	movs	r1, r4
    dea0:	2003      	movs	r0, #3
    dea2:	47c0      	blx	r8
    dea4:	2003      	movs	r0, #3
    dea6:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    dea8:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    deaa:	0021      	movs	r1, r4
    deac:	2000      	movs	r0, #0
    deae:	4b32      	ldr	r3, [pc, #200]	; (df78 <system_clock_init+0x22c>)
    deb0:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    deb2:	2000      	movs	r0, #0
    deb4:	4b31      	ldr	r3, [pc, #196]	; (df7c <system_clock_init+0x230>)
    deb6:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    deb8:	2007      	movs	r0, #7
    deba:	4b25      	ldr	r3, [pc, #148]	; (df50 <system_clock_init+0x204>)
    debc:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    debe:	4920      	ldr	r1, [pc, #128]	; (df40 <system_clock_init+0x1f4>)
    dec0:	22d0      	movs	r2, #208	; 0xd0
    dec2:	0112      	lsls	r2, r2, #4
    dec4:	68cb      	ldr	r3, [r1, #12]
    dec6:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    dec8:	4293      	cmp	r3, r2
    deca:	d1fb      	bne.n	dec4 <system_clock_init+0x178>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    decc:	4c2c      	ldr	r4, [pc, #176]	; (df80 <system_clock_init+0x234>)
    dece:	2301      	movs	r3, #1
    ded0:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    ded2:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    ded4:	7123      	strb	r3, [r4, #4]
	config->division_factor    = 1;
    ded6:	a901      	add	r1, sp, #4
    ded8:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    deda:	2300      	movs	r3, #0
    dedc:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    dede:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    dee0:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    dee2:	3307      	adds	r3, #7
    dee4:	700b      	strb	r3, [r1, #0]
    dee6:	2000      	movs	r0, #0
    dee8:	4b1b      	ldr	r3, [pc, #108]	; (df58 <system_clock_init+0x20c>)
    deea:	4798      	blx	r3
    deec:	2000      	movs	r0, #0
    deee:	4b21      	ldr	r3, [pc, #132]	; (df74 <system_clock_init+0x228>)
    def0:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    def2:	2000      	movs	r0, #0
    def4:	4b23      	ldr	r3, [pc, #140]	; (df84 <system_clock_init+0x238>)
    def6:	4798      	blx	r3
    def8:	7921      	ldrb	r1, [r4, #4]
    defa:	b2c9      	uxtb	r1, r1
    defc:	4b22      	ldr	r3, [pc, #136]	; (df88 <system_clock_init+0x23c>)
    defe:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    df00:	4b22      	ldr	r3, [pc, #136]	; (df8c <system_clock_init+0x240>)
    df02:	4298      	cmp	r0, r3
    df04:	d814      	bhi.n	df30 <system_clock_init+0x1e4>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    df06:	2380      	movs	r3, #128	; 0x80
    df08:	05db      	lsls	r3, r3, #23
    df0a:	789b      	ldrb	r3, [r3, #2]
    df0c:	2b00      	cmp	r3, #0
    df0e:	d00f      	beq.n	df30 <system_clock_init+0x1e4>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    df10:	2380      	movs	r3, #128	; 0x80
    df12:	05db      	lsls	r3, r3, #23
    df14:	789b      	ldrb	r3, [r3, #2]
    df16:	b25b      	sxtb	r3, r3
    df18:	2b00      	cmp	r3, #0
    df1a:	db09      	blt.n	df30 <system_clock_init+0x1e4>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    df1c:	2380      	movs	r3, #128	; 0x80
    df1e:	05db      	lsls	r3, r3, #23
    df20:	2201      	movs	r2, #1
    df22:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    df24:	2200      	movs	r2, #0
    df26:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    df28:	001a      	movs	r2, r3
    df2a:	7993      	ldrb	r3, [r2, #6]
    df2c:	2b00      	cmp	r3, #0
    df2e:	d0fc      	beq.n	df2a <system_clock_init+0x1de>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    df30:	b00d      	add	sp, #52	; 0x34
    df32:	bc0c      	pop	{r2, r3}
    df34:	4690      	mov	r8, r2
    df36:	4699      	mov	r9, r3
    df38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    df3a:	3b20      	subs	r3, #32
    df3c:	e78b      	b.n	de56 <system_clock_init+0x10a>
    df3e:	46c0      	nop			; (mov r8, r8)
    df40:	40000c00 	.word	0x40000c00
    df44:	40001400 	.word	0x40001400
    df48:	41004000 	.word	0x41004000
    df4c:	0000dadd 	.word	0x0000dadd
    df50:	0000dc01 	.word	0x0000dc01
    df54:	40001000 	.word	0x40001000
    df58:	0000dfb5 	.word	0x0000dfb5
    df5c:	0000dccd 	.word	0x0000dccd
    df60:	0000daa9 	.word	0x0000daa9
    df64:	00806020 	.word	0x00806020
    df68:	000005b9 	.word	0x000005b9
    df6c:	0000db79 	.word	0x0000db79
    df70:	0000df91 	.word	0x0000df91
    df74:	0000e061 	.word	0x0000e061
    df78:	0000e17d 	.word	0x0000e17d
    df7c:	0000e10d 	.word	0x0000e10d
    df80:	40000400 	.word	0x40000400
    df84:	0000e0a1 	.word	0x0000e0a1
    df88:	0000e565 	.word	0x0000e565
    df8c:	00b71b00 	.word	0x00b71b00

0000df90 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    df90:	4a06      	ldr	r2, [pc, #24]	; (dfac <system_gclk_init+0x1c>)
    df92:	6953      	ldr	r3, [r2, #20]
    df94:	2140      	movs	r1, #64	; 0x40
    df96:	430b      	orrs	r3, r1
    df98:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    df9a:	2201      	movs	r2, #1
    df9c:	4b04      	ldr	r3, [pc, #16]	; (dfb0 <system_gclk_init+0x20>)
    df9e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    dfa0:	0019      	movs	r1, r3
    dfa2:	780b      	ldrb	r3, [r1, #0]
    dfa4:	4213      	tst	r3, r2
    dfa6:	d1fc      	bne.n	dfa2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    dfa8:	4770      	bx	lr
    dfaa:	46c0      	nop			; (mov r8, r8)
    dfac:	40000400 	.word	0x40000400
    dfb0:	40001800 	.word	0x40001800

0000dfb4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    dfb4:	b570      	push	{r4, r5, r6, lr}
    dfb6:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    dfb8:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    dfba:	784b      	ldrb	r3, [r1, #1]
    dfbc:	2b00      	cmp	r3, #0
    dfbe:	d002      	beq.n	dfc6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    dfc0:	2380      	movs	r3, #128	; 0x80
    dfc2:	00db      	lsls	r3, r3, #3
    dfc4:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    dfc6:	7a4b      	ldrb	r3, [r1, #9]
    dfc8:	2b00      	cmp	r3, #0
    dfca:	d002      	beq.n	dfd2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    dfcc:	2380      	movs	r3, #128	; 0x80
    dfce:	011b      	lsls	r3, r3, #4
    dfd0:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    dfd2:	6848      	ldr	r0, [r1, #4]
    dfd4:	2801      	cmp	r0, #1
    dfd6:	d90f      	bls.n	dff8 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    dfd8:	1e43      	subs	r3, r0, #1
    dfda:	4218      	tst	r0, r3
    dfdc:	d131      	bne.n	e042 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    dfde:	2802      	cmp	r0, #2
    dfe0:	d92d      	bls.n	e03e <system_gclk_gen_set_config+0x8a>
    dfe2:	2302      	movs	r3, #2
    dfe4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    dfe6:	3201      	adds	r2, #1
						mask <<= 1) {
    dfe8:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    dfea:	4298      	cmp	r0, r3
    dfec:	d8fb      	bhi.n	dfe6 <system_gclk_gen_set_config+0x32>
    dfee:	2380      	movs	r3, #128	; 0x80
    dff0:	015b      	lsls	r3, r3, #5
    dff2:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    dff4:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    dff6:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    dff8:	7a0b      	ldrb	r3, [r1, #8]
    dffa:	2b00      	cmp	r3, #0
    dffc:	d002      	beq.n	e004 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    dffe:	2380      	movs	r3, #128	; 0x80
    e000:	019b      	lsls	r3, r3, #6
    e002:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    e004:	2604      	movs	r6, #4
    e006:	40a6      	lsls	r6, r4
    e008:	4911      	ldr	r1, [pc, #68]	; (e050 <system_gclk_gen_set_config+0x9c>)
    e00a:	4a12      	ldr	r2, [pc, #72]	; (e054 <system_gclk_gen_set_config+0xa0>)
    e00c:	684b      	ldr	r3, [r1, #4]
    e00e:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    e010:	421e      	tst	r6, r3
    e012:	d1fb      	bne.n	e00c <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    e014:	4b10      	ldr	r3, [pc, #64]	; (e058 <system_gclk_gen_set_config+0xa4>)
    e016:	4798      	blx	r3
    e018:	00a4      	lsls	r4, r4, #2
    e01a:	4b0d      	ldr	r3, [pc, #52]	; (e050 <system_gclk_gen_set_config+0x9c>)
    e01c:	469c      	mov	ip, r3
    e01e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    e020:	6a22      	ldr	r2, [r4, #32]
    e022:	2380      	movs	r3, #128	; 0x80
    e024:	005b      	lsls	r3, r3, #1
    e026:	401a      	ands	r2, r3
    e028:	432a      	orrs	r2, r5
    e02a:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    e02c:	4661      	mov	r1, ip
    e02e:	4a09      	ldr	r2, [pc, #36]	; (e054 <system_gclk_gen_set_config+0xa0>)
    e030:	684b      	ldr	r3, [r1, #4]
    e032:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    e034:	421e      	tst	r6, r3
    e036:	d1fb      	bne.n	e030 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    e038:	4b08      	ldr	r3, [pc, #32]	; (e05c <system_gclk_gen_set_config+0xa8>)
    e03a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    e03c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    e03e:	2200      	movs	r2, #0
    e040:	e7d5      	b.n	dfee <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    e042:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    e044:	2380      	movs	r3, #128	; 0x80
    e046:	009b      	lsls	r3, r3, #2
    e048:	4318      	orrs	r0, r3
    e04a:	4305      	orrs	r5, r0
    e04c:	e7d4      	b.n	dff8 <system_gclk_gen_set_config+0x44>
    e04e:	46c0      	nop			; (mov r8, r8)
    e050:	40001800 	.word	0x40001800
    e054:	000007fc 	.word	0x000007fc
    e058:	0000d9a1 	.word	0x0000d9a1
    e05c:	0000d9e1 	.word	0x0000d9e1

0000e060 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    e060:	b510      	push	{r4, lr}
    e062:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    e064:	2204      	movs	r2, #4
    e066:	4082      	lsls	r2, r0
    e068:	4809      	ldr	r0, [pc, #36]	; (e090 <system_gclk_gen_enable+0x30>)
    e06a:	490a      	ldr	r1, [pc, #40]	; (e094 <system_gclk_gen_enable+0x34>)
    e06c:	6843      	ldr	r3, [r0, #4]
    e06e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    e070:	421a      	tst	r2, r3
    e072:	d1fb      	bne.n	e06c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    e074:	4b08      	ldr	r3, [pc, #32]	; (e098 <system_gclk_gen_enable+0x38>)
    e076:	4798      	blx	r3
    e078:	00a4      	lsls	r4, r4, #2
    e07a:	4b05      	ldr	r3, [pc, #20]	; (e090 <system_gclk_gen_enable+0x30>)
    e07c:	469c      	mov	ip, r3
    e07e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    e080:	6a22      	ldr	r2, [r4, #32]
    e082:	2380      	movs	r3, #128	; 0x80
    e084:	005b      	lsls	r3, r3, #1
    e086:	4313      	orrs	r3, r2
    e088:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    e08a:	4b04      	ldr	r3, [pc, #16]	; (e09c <system_gclk_gen_enable+0x3c>)
    e08c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    e08e:	bd10      	pop	{r4, pc}
    e090:	40001800 	.word	0x40001800
    e094:	000007fc 	.word	0x000007fc
    e098:	0000d9a1 	.word	0x0000d9a1
    e09c:	0000d9e1 	.word	0x0000d9e1

0000e0a0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    e0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e0a2:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    e0a4:	2204      	movs	r2, #4
    e0a6:	4082      	lsls	r2, r0
    e0a8:	4812      	ldr	r0, [pc, #72]	; (e0f4 <system_gclk_gen_get_hz+0x54>)
    e0aa:	4913      	ldr	r1, [pc, #76]	; (e0f8 <system_gclk_gen_get_hz+0x58>)
    e0ac:	6843      	ldr	r3, [r0, #4]
    e0ae:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    e0b0:	421a      	tst	r2, r3
    e0b2:	d1fb      	bne.n	e0ac <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    e0b4:	4b11      	ldr	r3, [pc, #68]	; (e0fc <system_gclk_gen_get_hz+0x5c>)
    e0b6:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    e0b8:	4f0e      	ldr	r7, [pc, #56]	; (e0f4 <system_gclk_gen_get_hz+0x54>)
    e0ba:	3408      	adds	r4, #8
    e0bc:	00a4      	lsls	r4, r4, #2
    e0be:	59e0      	ldr	r0, [r4, r7]
    e0c0:	0700      	lsls	r0, r0, #28
    e0c2:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    e0c4:	4b0e      	ldr	r3, [pc, #56]	; (e100 <system_gclk_gen_get_hz+0x60>)
    e0c6:	4798      	blx	r3
    e0c8:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    e0ca:	59e5      	ldr	r5, [r4, r7]
    e0cc:	04ed      	lsls	r5, r5, #19
    e0ce:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    e0d0:	59e4      	ldr	r4, [r4, r7]
    e0d2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    e0d4:	4b0b      	ldr	r3, [pc, #44]	; (e104 <system_gclk_gen_get_hz+0x64>)
    e0d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    e0d8:	2d00      	cmp	r5, #0
    e0da:	d107      	bne.n	e0ec <system_gclk_gen_get_hz+0x4c>
    e0dc:	2c01      	cmp	r4, #1
    e0de:	d907      	bls.n	e0f0 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    e0e0:	0021      	movs	r1, r4
    e0e2:	0030      	movs	r0, r6
    e0e4:	4b08      	ldr	r3, [pc, #32]	; (e108 <system_gclk_gen_get_hz+0x68>)
    e0e6:	4798      	blx	r3
    e0e8:	0006      	movs	r6, r0
    e0ea:	e001      	b.n	e0f0 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    e0ec:	3401      	adds	r4, #1
    e0ee:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    e0f0:	0030      	movs	r0, r6
    e0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e0f4:	40001800 	.word	0x40001800
    e0f8:	000007fc 	.word	0x000007fc
    e0fc:	0000d9a1 	.word	0x0000d9a1
    e100:	0000da11 	.word	0x0000da11
    e104:	0000d9e1 	.word	0x0000d9e1
    e108:	0000e565 	.word	0x0000e565

0000e10c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    e10c:	b510      	push	{r4, lr}
    e10e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    e110:	4b09      	ldr	r3, [pc, #36]	; (e138 <system_gclk_chan_enable+0x2c>)
    e112:	4798      	blx	r3
    e114:	00a0      	lsls	r0, r4, #2
    e116:	4b09      	ldr	r3, [pc, #36]	; (e13c <system_gclk_chan_enable+0x30>)
    e118:	469c      	mov	ip, r3
    e11a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    e11c:	2280      	movs	r2, #128	; 0x80
    e11e:	5883      	ldr	r3, [r0, r2]
    e120:	2140      	movs	r1, #64	; 0x40
    e122:	430b      	orrs	r3, r1
    e124:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    e126:	3140      	adds	r1, #64	; 0x40
    e128:	3a40      	subs	r2, #64	; 0x40
    e12a:	5843      	ldr	r3, [r0, r1]
    e12c:	421a      	tst	r2, r3
    e12e:	d0fc      	beq.n	e12a <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    e130:	4b03      	ldr	r3, [pc, #12]	; (e140 <system_gclk_chan_enable+0x34>)
    e132:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    e134:	bd10      	pop	{r4, pc}
    e136:	46c0      	nop			; (mov r8, r8)
    e138:	0000d9a1 	.word	0x0000d9a1
    e13c:	40001800 	.word	0x40001800
    e140:	0000d9e1 	.word	0x0000d9e1

0000e144 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    e144:	b510      	push	{r4, lr}
    e146:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    e148:	4b09      	ldr	r3, [pc, #36]	; (e170 <system_gclk_chan_disable+0x2c>)
    e14a:	4798      	blx	r3
    e14c:	00a0      	lsls	r0, r4, #2
    e14e:	4b09      	ldr	r3, [pc, #36]	; (e174 <system_gclk_chan_disable+0x30>)
    e150:	469c      	mov	ip, r3
    e152:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    e154:	2280      	movs	r2, #128	; 0x80
    e156:	5883      	ldr	r3, [r0, r2]
    e158:	2140      	movs	r1, #64	; 0x40
    e15a:	438b      	bics	r3, r1
    e15c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    e15e:	3140      	adds	r1, #64	; 0x40
    e160:	3a40      	subs	r2, #64	; 0x40
    e162:	5843      	ldr	r3, [r0, r1]
    e164:	421a      	tst	r2, r3
    e166:	d1fc      	bne.n	e162 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    e168:	4b03      	ldr	r3, [pc, #12]	; (e178 <system_gclk_chan_disable+0x34>)
    e16a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    e16c:	bd10      	pop	{r4, pc}
    e16e:	46c0      	nop			; (mov r8, r8)
    e170:	0000d9a1 	.word	0x0000d9a1
    e174:	40001800 	.word	0x40001800
    e178:	0000d9e1 	.word	0x0000d9e1

0000e17c <system_gclk_chan_set_config>:
{
    e17c:	b570      	push	{r4, r5, r6, lr}
    e17e:	0004      	movs	r4, r0
    e180:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    e182:	4b05      	ldr	r3, [pc, #20]	; (e198 <system_gclk_chan_set_config+0x1c>)
    e184:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    e186:	782a      	ldrb	r2, [r5, #0]
    e188:	230f      	movs	r3, #15
    e18a:	4013      	ands	r3, r2
    e18c:	3420      	adds	r4, #32
    e18e:	00a4      	lsls	r4, r4, #2
    e190:	4a02      	ldr	r2, [pc, #8]	; (e19c <system_gclk_chan_set_config+0x20>)
    e192:	50a3      	str	r3, [r4, r2]
}
    e194:	bd70      	pop	{r4, r5, r6, pc}
    e196:	46c0      	nop			; (mov r8, r8)
    e198:	0000e145 	.word	0x0000e145
    e19c:	40001800 	.word	0x40001800

0000e1a0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    e1a0:	b510      	push	{r4, lr}
    e1a2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    e1a4:	4b06      	ldr	r3, [pc, #24]	; (e1c0 <system_gclk_chan_get_hz+0x20>)
    e1a6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    e1a8:	3420      	adds	r4, #32
    e1aa:	00a4      	lsls	r4, r4, #2
    e1ac:	4b05      	ldr	r3, [pc, #20]	; (e1c4 <system_gclk_chan_get_hz+0x24>)
    e1ae:	58e4      	ldr	r4, [r4, r3]
    e1b0:	0724      	lsls	r4, r4, #28
    e1b2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    e1b4:	4b04      	ldr	r3, [pc, #16]	; (e1c8 <system_gclk_chan_get_hz+0x28>)
    e1b6:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    e1b8:	0020      	movs	r0, r4
    e1ba:	4b04      	ldr	r3, [pc, #16]	; (e1cc <system_gclk_chan_get_hz+0x2c>)
    e1bc:	4798      	blx	r3
}
    e1be:	bd10      	pop	{r4, pc}
    e1c0:	0000d9a1 	.word	0x0000d9a1
    e1c4:	40001800 	.word	0x40001800
    e1c8:	0000d9e1 	.word	0x0000d9e1
    e1cc:	0000e0a1 	.word	0x0000e0a1

0000e1d0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    e1d0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    e1d2:	78d3      	ldrb	r3, [r2, #3]
    e1d4:	2b00      	cmp	r3, #0
    e1d6:	d135      	bne.n	e244 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    e1d8:	7813      	ldrb	r3, [r2, #0]
    e1da:	2b80      	cmp	r3, #128	; 0x80
    e1dc:	d029      	beq.n	e232 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    e1de:	061b      	lsls	r3, r3, #24
    e1e0:	2480      	movs	r4, #128	; 0x80
    e1e2:	0264      	lsls	r4, r4, #9
    e1e4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    e1e6:	7854      	ldrb	r4, [r2, #1]
    e1e8:	2502      	movs	r5, #2
    e1ea:	43ac      	bics	r4, r5
    e1ec:	d106      	bne.n	e1fc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    e1ee:	7894      	ldrb	r4, [r2, #2]
    e1f0:	2c00      	cmp	r4, #0
    e1f2:	d120      	bne.n	e236 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    e1f4:	2480      	movs	r4, #128	; 0x80
    e1f6:	02a4      	lsls	r4, r4, #10
    e1f8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    e1fa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    e1fc:	7854      	ldrb	r4, [r2, #1]
    e1fe:	3c01      	subs	r4, #1
    e200:	2c01      	cmp	r4, #1
    e202:	d91c      	bls.n	e23e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    e204:	040d      	lsls	r5, r1, #16
    e206:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    e208:	24a0      	movs	r4, #160	; 0xa0
    e20a:	05e4      	lsls	r4, r4, #23
    e20c:	432c      	orrs	r4, r5
    e20e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    e210:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    e212:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    e214:	24d0      	movs	r4, #208	; 0xd0
    e216:	0624      	lsls	r4, r4, #24
    e218:	432c      	orrs	r4, r5
    e21a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    e21c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    e21e:	78d4      	ldrb	r4, [r2, #3]
    e220:	2c00      	cmp	r4, #0
    e222:	d122      	bne.n	e26a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    e224:	035b      	lsls	r3, r3, #13
    e226:	d51c      	bpl.n	e262 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    e228:	7893      	ldrb	r3, [r2, #2]
    e22a:	2b01      	cmp	r3, #1
    e22c:	d01e      	beq.n	e26c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    e22e:	6141      	str	r1, [r0, #20]
    e230:	e017      	b.n	e262 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    e232:	2300      	movs	r3, #0
    e234:	e7d7      	b.n	e1e6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    e236:	24c0      	movs	r4, #192	; 0xc0
    e238:	02e4      	lsls	r4, r4, #11
    e23a:	4323      	orrs	r3, r4
    e23c:	e7dd      	b.n	e1fa <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    e23e:	4c0d      	ldr	r4, [pc, #52]	; (e274 <_system_pinmux_config+0xa4>)
    e240:	4023      	ands	r3, r4
    e242:	e7df      	b.n	e204 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    e244:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    e246:	040c      	lsls	r4, r1, #16
    e248:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    e24a:	23a0      	movs	r3, #160	; 0xa0
    e24c:	05db      	lsls	r3, r3, #23
    e24e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    e250:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    e252:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    e254:	23d0      	movs	r3, #208	; 0xd0
    e256:	061b      	lsls	r3, r3, #24
    e258:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    e25a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    e25c:	78d3      	ldrb	r3, [r2, #3]
    e25e:	2b00      	cmp	r3, #0
    e260:	d103      	bne.n	e26a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    e262:	7853      	ldrb	r3, [r2, #1]
    e264:	3b01      	subs	r3, #1
    e266:	2b01      	cmp	r3, #1
    e268:	d902      	bls.n	e270 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    e26a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    e26c:	6181      	str	r1, [r0, #24]
    e26e:	e7f8      	b.n	e262 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    e270:	6081      	str	r1, [r0, #8]
}
    e272:	e7fa      	b.n	e26a <_system_pinmux_config+0x9a>
    e274:	fffbffff 	.word	0xfffbffff

0000e278 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    e278:	b510      	push	{r4, lr}
    e27a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    e27c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    e27e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e280:	2900      	cmp	r1, #0
    e282:	d104      	bne.n	e28e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    e284:	0943      	lsrs	r3, r0, #5
    e286:	01db      	lsls	r3, r3, #7
    e288:	4905      	ldr	r1, [pc, #20]	; (e2a0 <system_pinmux_pin_set_config+0x28>)
    e28a:	468c      	mov	ip, r1
    e28c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    e28e:	241f      	movs	r4, #31
    e290:	4020      	ands	r0, r4
    e292:	2101      	movs	r1, #1
    e294:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    e296:	0018      	movs	r0, r3
    e298:	4b02      	ldr	r3, [pc, #8]	; (e2a4 <system_pinmux_pin_set_config+0x2c>)
    e29a:	4798      	blx	r3
}
    e29c:	bd10      	pop	{r4, pc}
    e29e:	46c0      	nop			; (mov r8, r8)
    e2a0:	40002800 	.word	0x40002800
    e2a4:	0000e1d1 	.word	0x0000e1d1

0000e2a8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    e2a8:	4770      	bx	lr
	...

0000e2ac <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    e2ac:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    e2ae:	4b05      	ldr	r3, [pc, #20]	; (e2c4 <system_init+0x18>)
    e2b0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    e2b2:	4b05      	ldr	r3, [pc, #20]	; (e2c8 <system_init+0x1c>)
    e2b4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    e2b6:	4b05      	ldr	r3, [pc, #20]	; (e2cc <system_init+0x20>)
    e2b8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    e2ba:	4b05      	ldr	r3, [pc, #20]	; (e2d0 <system_init+0x24>)
    e2bc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    e2be:	4b05      	ldr	r3, [pc, #20]	; (e2d4 <system_init+0x28>)
    e2c0:	4798      	blx	r3
}
    e2c2:	bd10      	pop	{r4, pc}
    e2c4:	0000dd4d 	.word	0x0000dd4d
    e2c8:	0000d99d 	.word	0x0000d99d
    e2cc:	0000e2a9 	.word	0x0000e2a9
    e2d0:	00000ac5 	.word	0x00000ac5
    e2d4:	0000e2a9 	.word	0x0000e2a9

0000e2d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    e2d8:	e7fe      	b.n	e2d8 <Dummy_Handler>
	...

0000e2dc <Reset_Handler>:
{
    e2dc:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    e2de:	4a1a      	ldr	r2, [pc, #104]	; (e348 <Reset_Handler+0x6c>)
    e2e0:	4b1a      	ldr	r3, [pc, #104]	; (e34c <Reset_Handler+0x70>)
    e2e2:	429a      	cmp	r2, r3
    e2e4:	d011      	beq.n	e30a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    e2e6:	001a      	movs	r2, r3
    e2e8:	4b19      	ldr	r3, [pc, #100]	; (e350 <Reset_Handler+0x74>)
    e2ea:	429a      	cmp	r2, r3
    e2ec:	d20d      	bcs.n	e30a <Reset_Handler+0x2e>
    e2ee:	4a19      	ldr	r2, [pc, #100]	; (e354 <Reset_Handler+0x78>)
    e2f0:	3303      	adds	r3, #3
    e2f2:	1a9b      	subs	r3, r3, r2
    e2f4:	089b      	lsrs	r3, r3, #2
    e2f6:	3301      	adds	r3, #1
    e2f8:	009b      	lsls	r3, r3, #2
    e2fa:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    e2fc:	4813      	ldr	r0, [pc, #76]	; (e34c <Reset_Handler+0x70>)
    e2fe:	4912      	ldr	r1, [pc, #72]	; (e348 <Reset_Handler+0x6c>)
    e300:	588c      	ldr	r4, [r1, r2]
    e302:	5084      	str	r4, [r0, r2]
    e304:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    e306:	429a      	cmp	r2, r3
    e308:	d1fa      	bne.n	e300 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    e30a:	4a13      	ldr	r2, [pc, #76]	; (e358 <Reset_Handler+0x7c>)
    e30c:	4b13      	ldr	r3, [pc, #76]	; (e35c <Reset_Handler+0x80>)
    e30e:	429a      	cmp	r2, r3
    e310:	d20a      	bcs.n	e328 <Reset_Handler+0x4c>
    e312:	43d3      	mvns	r3, r2
    e314:	4911      	ldr	r1, [pc, #68]	; (e35c <Reset_Handler+0x80>)
    e316:	185b      	adds	r3, r3, r1
    e318:	2103      	movs	r1, #3
    e31a:	438b      	bics	r3, r1
    e31c:	3304      	adds	r3, #4
    e31e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    e320:	2100      	movs	r1, #0
    e322:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    e324:	4293      	cmp	r3, r2
    e326:	d1fc      	bne.n	e322 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    e328:	4a0d      	ldr	r2, [pc, #52]	; (e360 <Reset_Handler+0x84>)
    e32a:	21ff      	movs	r1, #255	; 0xff
    e32c:	4b0d      	ldr	r3, [pc, #52]	; (e364 <Reset_Handler+0x88>)
    e32e:	438b      	bics	r3, r1
    e330:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    e332:	4a0d      	ldr	r2, [pc, #52]	; (e368 <Reset_Handler+0x8c>)
    e334:	6853      	ldr	r3, [r2, #4]
    e336:	397f      	subs	r1, #127	; 0x7f
    e338:	430b      	orrs	r3, r1
    e33a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    e33c:	4b0b      	ldr	r3, [pc, #44]	; (e36c <Reset_Handler+0x90>)
    e33e:	4798      	blx	r3
        main();
    e340:	4b0b      	ldr	r3, [pc, #44]	; (e370 <Reset_Handler+0x94>)
    e342:	4798      	blx	r3
    e344:	e7fe      	b.n	e344 <Reset_Handler+0x68>
    e346:	46c0      	nop			; (mov r8, r8)
    e348:	000165a0 	.word	0x000165a0
    e34c:	20000000 	.word	0x20000000
    e350:	20000498 	.word	0x20000498
    e354:	20000004 	.word	0x20000004
    e358:	20000498 	.word	0x20000498
    e35c:	20002d00 	.word	0x20002d00
    e360:	e000ed00 	.word	0xe000ed00
    e364:	00000000 	.word	0x00000000
    e368:	41004000 	.word	0x41004000
    e36c:	00010805 	.word	0x00010805
    e370:	0000e3e1 	.word	0x0000e3e1

0000e374 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    e374:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    e376:	4a06      	ldr	r2, [pc, #24]	; (e390 <_sbrk+0x1c>)
    e378:	6812      	ldr	r2, [r2, #0]
    e37a:	2a00      	cmp	r2, #0
    e37c:	d004      	beq.n	e388 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    e37e:	4a04      	ldr	r2, [pc, #16]	; (e390 <_sbrk+0x1c>)
    e380:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    e382:	18c3      	adds	r3, r0, r3
    e384:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    e386:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    e388:	4902      	ldr	r1, [pc, #8]	; (e394 <_sbrk+0x20>)
    e38a:	4a01      	ldr	r2, [pc, #4]	; (e390 <_sbrk+0x1c>)
    e38c:	6011      	str	r1, [r2, #0]
    e38e:	e7f6      	b.n	e37e <_sbrk+0xa>
    e390:	20002788 	.word	0x20002788
    e394:	20004d00 	.word	0x20004d00

0000e398 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    e398:	2001      	movs	r0, #1
    e39a:	4240      	negs	r0, r0
    e39c:	4770      	bx	lr

0000e39e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    e39e:	2380      	movs	r3, #128	; 0x80
    e3a0:	019b      	lsls	r3, r3, #6
    e3a2:	604b      	str	r3, [r1, #4]

	return 0;
}
    e3a4:	2000      	movs	r0, #0
    e3a6:	4770      	bx	lr

0000e3a8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    e3a8:	2001      	movs	r0, #1
    e3aa:	4770      	bx	lr

0000e3ac <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    e3ac:	2000      	movs	r0, #0
    e3ae:	4770      	bx	lr

0000e3b0 <update_timers>:
    rtc_count_enable(&rtc_instance);

}

void update_timers(void)
{
    e3b0:	b510      	push	{r4, lr}
    wifi_timer_update();
    e3b2:	4b04      	ldr	r3, [pc, #16]	; (e3c4 <update_timers+0x14>)
    e3b4:	4798      	blx	r3
    client_timer_update();
    e3b6:	4b04      	ldr	r3, [pc, #16]	; (e3c8 <update_timers+0x18>)
    e3b8:	4798      	blx	r3
    TimerCallback();
    e3ba:	4b04      	ldr	r3, [pc, #16]	; (e3cc <update_timers+0x1c>)
    e3bc:	4798      	blx	r3
    atca_kit_timer_update();
    e3be:	4b04      	ldr	r3, [pc, #16]	; (e3d0 <update_timers+0x20>)
    e3c0:	4798      	blx	r3
}
    e3c2:	bd10      	pop	{r4, pc}
    e3c4:	000042b5 	.word	0x000042b5
    e3c8:	00005911 	.word	0x00005911
    e3cc:	00008465 	.word	0x00008465
    e3d0:	000049e1 	.word	0x000049e1

0000e3d4 <periodic_timer_cb>:

/* Timer callback function */
static void periodic_timer_cb(struct tc_module *const module)
{
    e3d4:	b510      	push	{r4, lr}
    update_timers();
    e3d6:	4b01      	ldr	r3, [pc, #4]	; (e3dc <periodic_timer_cb+0x8>)
    e3d8:	4798      	blx	r3
}
    e3da:	bd10      	pop	{r4, pc}
    e3dc:	0000e3b1 	.word	0x0000e3b1

0000e3e0 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    e3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3e2:	b08f      	sub	sp, #60	; 0x3c
    /* Initialize the board. */
	system_init();
    e3e4:	4b41      	ldr	r3, [pc, #260]	; (e4ec <main+0x10c>)
    e3e6:	4798      	blx	r3

    /* Enable basic drivers */
    delay_init();
    e3e8:	4b41      	ldr	r3, [pc, #260]	; (e4f0 <main+0x110>)
    e3ea:	4798      	blx	r3
	cpu_irq_enable();
    e3ec:	2601      	movs	r6, #1
    e3ee:	4b41      	ldr	r3, [pc, #260]	; (e4f4 <main+0x114>)
    e3f0:	701e      	strb	r6, [r3, #0]
    e3f2:	f3bf 8f5f 	dmb	sy
    e3f6:	b662      	cpsie	i
#if SAM0
    /* Enable Interrupts for Cortex-M0 */
    system_interrupt_enable_global();
#endif

	initialise_led();
    e3f8:	4b3f      	ldr	r3, [pc, #252]	; (e4f8 <main+0x118>)
    e3fa:	4798      	blx	r3
	initialise_button();
    e3fc:	4b3f      	ldr	r3, [pc, #252]	; (e4fc <main+0x11c>)
    e3fe:	4798      	blx	r3
	/* Initialize the UART console. */
	configure_console();
    e400:	4b3f      	ldr	r3, [pc, #252]	; (e500 <main+0x120>)
    e402:	4798      	blx	r3
    /* Print a diagnostic message to the console */
    DEBUG_PRINTF("Starting Example...\r\n");
    e404:	483f      	ldr	r0, [pc, #252]	; (e504 <main+0x124>)
    e406:	4b40      	ldr	r3, [pc, #256]	; (e508 <main+0x128>)
    e408:	4798      	blx	r3
{
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    e40a:	23b0      	movs	r3, #176	; 0xb0
    e40c:	011b      	lsls	r3, r3, #4
    e40e:	466a      	mov	r2, sp
    e410:	8013      	strh	r3, [r2, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    e412:	7096      	strb	r6, [r2, #2]
	config->clear_on_match      = false;
    e414:	2400      	movs	r4, #0
    e416:	2500      	movs	r5, #0
    e418:	70d4      	strb	r4, [r2, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
    e41a:	7116      	strb	r6, [r2, #4]
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    e41c:	9402      	str	r4, [sp, #8]
    e41e:	9403      	str	r4, [sp, #12]
    rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    e420:	4f3a      	ldr	r7, [pc, #232]	; (e50c <main+0x12c>)
    e422:	493b      	ldr	r1, [pc, #236]	; (e510 <main+0x130>)
    e424:	0038      	movs	r0, r7
    e426:	4b3b      	ldr	r3, [pc, #236]	; (e514 <main+0x134>)
    e428:	4798      	blx	r3
    rtc_count_enable(&rtc_instance);
    e42a:	0038      	movs	r0, r7
    e42c:	4b3a      	ldr	r3, [pc, #232]	; (e518 <main+0x138>)
    e42e:	4798      	blx	r3
	
    /* Initialize the RTC */
    configure_rtc();

    /* Set the local configuration for the cryptographic device being used */
    config_crypto();
    e430:	4b3a      	ldr	r3, [pc, #232]	; (e51c <main+0x13c>)
    e432:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    e434:	466b      	mov	r3, sp
    e436:	70dc      	strb	r4, [r3, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    e438:	2300      	movs	r3, #0
    e43a:	466a      	mov	r2, sp
    e43c:	8094      	strh	r4, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    e43e:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    e440:	7055      	strb	r5, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
    e442:	7095      	strb	r5, [r2, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    e444:	7215      	strb	r5, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    e446:	7255      	strb	r5, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    e448:	7295      	strb	r5, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    e44a:	72d5      	strb	r5, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    e44c:	7315      	strb	r5, [r2, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    e44e:	7395      	strb	r5, [r2, #14]
	config->oneshot                    = false;
    e450:	7355      	strb	r5, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    e452:	7415      	strb	r5, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    e454:	9405      	str	r4, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    e456:	9406      	str	r4, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    e458:	7715      	strb	r5, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    e45a:	9408      	str	r4, [sp, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    e45c:	9409      	str	r4, [sp, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    e45e:	8514      	strh	r4, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    e460:	8554      	strh	r4, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    e462:	8594      	strh	r4, [r2, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    e464:	2234      	movs	r2, #52	; 0x34
    e466:	4669      	mov	r1, sp
    e468:	548b      	strb	r3, [r1, r2]
    config_tc.clock_source = GCLK_GENERATOR_1;
    e46a:	700e      	strb	r6, [r1, #0]
    config_tc.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
    e46c:	718e      	strb	r6, [r1, #6]
    counts = TIMER_UPDATE_PERIOD * system_gclk_gen_get_hz(config_tc.clock_source);
    e46e:	2001      	movs	r0, #1
    e470:	4b2b      	ldr	r3, [pc, #172]	; (e520 <main+0x140>)
    e472:	4798      	blx	r3
    e474:	2364      	movs	r3, #100	; 0x64
    e476:	4358      	muls	r0, r3
    counts /= 1000;
    e478:	21fa      	movs	r1, #250	; 0xfa
    e47a:	0089      	lsls	r1, r1, #2
    e47c:	4b29      	ldr	r3, [pc, #164]	; (e524 <main+0x144>)
    e47e:	4798      	blx	r3
    config_tc.counter_16_bit.compare_capture_channel[0] = counts;
    e480:	466b      	mov	r3, sp
    e482:	8558      	strh	r0, [r3, #42]	; 0x2a
    tc_init(&tc3_inst, TC4, &config_tc);
    e484:	4c28      	ldr	r4, [pc, #160]	; (e528 <main+0x148>)
    e486:	466a      	mov	r2, sp
    e488:	4928      	ldr	r1, [pc, #160]	; (e52c <main+0x14c>)
    e48a:	0020      	movs	r0, r4
    e48c:	4b28      	ldr	r3, [pc, #160]	; (e530 <main+0x150>)
    e48e:	4798      	blx	r3
    tc_register_callback(&tc3_inst, periodic_timer_cb, TC_CALLBACK_OVERFLOW);
    e490:	2200      	movs	r2, #0
    e492:	4928      	ldr	r1, [pc, #160]	; (e534 <main+0x154>)
    e494:	0020      	movs	r0, r4
    e496:	4b28      	ldr	r3, [pc, #160]	; (e538 <main+0x158>)
    e498:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    e49a:	6820      	ldr	r0, [r4, #0]
    e49c:	4b27      	ldr	r3, [pc, #156]	; (e53c <main+0x15c>)
    e49e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    e4a0:	4b27      	ldr	r3, [pc, #156]	; (e540 <main+0x160>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    e4a2:	5c1a      	ldrb	r2, [r3, r0]
    e4a4:	231f      	movs	r3, #31
    e4a6:	4013      	ands	r3, r2
    e4a8:	0032      	movs	r2, r6
    e4aa:	409a      	lsls	r2, r3
    e4ac:	4b25      	ldr	r3, [pc, #148]	; (e544 <main+0x164>)
    e4ae:	601a      	str	r2, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    e4b0:	7e63      	ldrb	r3, [r4, #25]
    e4b2:	2201      	movs	r2, #1
    e4b4:	4313      	orrs	r3, r2
    e4b6:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    e4b8:	6823      	ldr	r3, [r4, #0]
    e4ba:	725e      	strb	r6, [r3, #9]
	return (tc_module->SYNCBUSY.reg);
    e4bc:	691a      	ldr	r2, [r3, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    e4be:	2a00      	cmp	r2, #0
    e4c0:	d1fc      	bne.n	e4bc <main+0xdc>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    e4c2:	681a      	ldr	r2, [r3, #0]
    e4c4:	2102      	movs	r1, #2
    e4c6:	430a      	orrs	r2, r1
    e4c8:	601a      	str	r2, [r3, #0]

    /* Initialize a periodic timer */
    configure_periodic_timer();

    /* Initialize the USB HID interface */
    usb_hid_init();
    e4ca:	4b1f      	ldr	r3, [pc, #124]	; (e548 <main+0x168>)
    e4cc:	4798      	blx	r3



    config_print_public_key();
    e4ce:	4b1f      	ldr	r3, [pc, #124]	; (e54c <main+0x16c>)
    e4d0:	4798      	blx	r3

    for(;;)
    {
        /* Handle WIFI state machine */
        wifi_task();
    e4d2:	4e1f      	ldr	r6, [pc, #124]	; (e550 <main+0x170>)

        /* Handle Data Interface */
        atca_kit_main_handler();
    e4d4:	4d1f      	ldr	r5, [pc, #124]	; (e554 <main+0x174>)

        /* Allows the kit protocol interface to have exclusive control
         of the I2C bus when it needs it */
        if(!atca_kit_lock())
    e4d6:	4c20      	ldr	r4, [pc, #128]	; (e558 <main+0x178>)
        wifi_task();
    e4d8:	47b0      	blx	r6
        atca_kit_main_handler();
    e4da:	47a8      	blx	r5
        if(!atca_kit_lock())
    e4dc:	47a0      	blx	r4
    e4de:	2800      	cmp	r0, #0
    e4e0:	d1fa      	bne.n	e4d8 <main+0xf8>
        {
            /* Handle Client State Machine */
            client_task();
    e4e2:	4b1e      	ldr	r3, [pc, #120]	; (e55c <main+0x17c>)
    e4e4:	4798      	blx	r3

            /* Handle Sensor State Machine */
            sensor_task();
    e4e6:	4b1e      	ldr	r3, [pc, #120]	; (e560 <main+0x180>)
    e4e8:	4798      	blx	r3
    e4ea:	e7f5      	b.n	e4d8 <main+0xf8>
    e4ec:	0000e2ad 	.word	0x0000e2ad
    e4f0:	00009fa9 	.word	0x00009fa9
    e4f4:	200002c6 	.word	0x200002c6
    e4f8:	0000719d 	.word	0x0000719d
    e4fc:	00003525 	.word	0x00003525
    e500:	00009245 	.word	0x00009245
    e504:	000161b8 	.word	0x000161b8
    e508:	00010c7d 	.word	0x00010c7d
    e50c:	20002c74 	.word	0x20002c74
    e510:	40002000 	.word	0x40002000
    e514:	00000d71 	.word	0x00000d71
    e518:	00000bf1 	.word	0x00000bf1
    e51c:	0000598d 	.word	0x0000598d
    e520:	0000e0a1 	.word	0x0000e0a1
    e524:	0000e565 	.word	0x0000e565
    e528:	20002ce0 	.word	0x20002ce0
    e52c:	43000800 	.word	0x43000800
    e530:	0000161d 	.word	0x0000161d
    e534:	0000e3d5 	.word	0x0000e3d5
    e538:	0000151d 	.word	0x0000151d
    e53c:	000015e5 	.word	0x000015e5
    e540:	000161d0 	.word	0x000161d0
    e544:	e000e100 	.word	0xe000e100
    e548:	00003bf9 	.word	0x00003bf9
    e54c:	00005bf9 	.word	0x00005bf9
    e550:	000042d9 	.word	0x000042d9
    e554:	000054ad 	.word	0x000054ad
    e558:	000049d1 	.word	0x000049d1
    e55c:	00005925 	.word	0x00005925
    e560:	00003b1d 	.word	0x00003b1d

0000e564 <__udivsi3>:
    e564:	2200      	movs	r2, #0
    e566:	0843      	lsrs	r3, r0, #1
    e568:	428b      	cmp	r3, r1
    e56a:	d374      	bcc.n	e656 <__udivsi3+0xf2>
    e56c:	0903      	lsrs	r3, r0, #4
    e56e:	428b      	cmp	r3, r1
    e570:	d35f      	bcc.n	e632 <__udivsi3+0xce>
    e572:	0a03      	lsrs	r3, r0, #8
    e574:	428b      	cmp	r3, r1
    e576:	d344      	bcc.n	e602 <__udivsi3+0x9e>
    e578:	0b03      	lsrs	r3, r0, #12
    e57a:	428b      	cmp	r3, r1
    e57c:	d328      	bcc.n	e5d0 <__udivsi3+0x6c>
    e57e:	0c03      	lsrs	r3, r0, #16
    e580:	428b      	cmp	r3, r1
    e582:	d30d      	bcc.n	e5a0 <__udivsi3+0x3c>
    e584:	22ff      	movs	r2, #255	; 0xff
    e586:	0209      	lsls	r1, r1, #8
    e588:	ba12      	rev	r2, r2
    e58a:	0c03      	lsrs	r3, r0, #16
    e58c:	428b      	cmp	r3, r1
    e58e:	d302      	bcc.n	e596 <__udivsi3+0x32>
    e590:	1212      	asrs	r2, r2, #8
    e592:	0209      	lsls	r1, r1, #8
    e594:	d065      	beq.n	e662 <__udivsi3+0xfe>
    e596:	0b03      	lsrs	r3, r0, #12
    e598:	428b      	cmp	r3, r1
    e59a:	d319      	bcc.n	e5d0 <__udivsi3+0x6c>
    e59c:	e000      	b.n	e5a0 <__udivsi3+0x3c>
    e59e:	0a09      	lsrs	r1, r1, #8
    e5a0:	0bc3      	lsrs	r3, r0, #15
    e5a2:	428b      	cmp	r3, r1
    e5a4:	d301      	bcc.n	e5aa <__udivsi3+0x46>
    e5a6:	03cb      	lsls	r3, r1, #15
    e5a8:	1ac0      	subs	r0, r0, r3
    e5aa:	4152      	adcs	r2, r2
    e5ac:	0b83      	lsrs	r3, r0, #14
    e5ae:	428b      	cmp	r3, r1
    e5b0:	d301      	bcc.n	e5b6 <__udivsi3+0x52>
    e5b2:	038b      	lsls	r3, r1, #14
    e5b4:	1ac0      	subs	r0, r0, r3
    e5b6:	4152      	adcs	r2, r2
    e5b8:	0b43      	lsrs	r3, r0, #13
    e5ba:	428b      	cmp	r3, r1
    e5bc:	d301      	bcc.n	e5c2 <__udivsi3+0x5e>
    e5be:	034b      	lsls	r3, r1, #13
    e5c0:	1ac0      	subs	r0, r0, r3
    e5c2:	4152      	adcs	r2, r2
    e5c4:	0b03      	lsrs	r3, r0, #12
    e5c6:	428b      	cmp	r3, r1
    e5c8:	d301      	bcc.n	e5ce <__udivsi3+0x6a>
    e5ca:	030b      	lsls	r3, r1, #12
    e5cc:	1ac0      	subs	r0, r0, r3
    e5ce:	4152      	adcs	r2, r2
    e5d0:	0ac3      	lsrs	r3, r0, #11
    e5d2:	428b      	cmp	r3, r1
    e5d4:	d301      	bcc.n	e5da <__udivsi3+0x76>
    e5d6:	02cb      	lsls	r3, r1, #11
    e5d8:	1ac0      	subs	r0, r0, r3
    e5da:	4152      	adcs	r2, r2
    e5dc:	0a83      	lsrs	r3, r0, #10
    e5de:	428b      	cmp	r3, r1
    e5e0:	d301      	bcc.n	e5e6 <__udivsi3+0x82>
    e5e2:	028b      	lsls	r3, r1, #10
    e5e4:	1ac0      	subs	r0, r0, r3
    e5e6:	4152      	adcs	r2, r2
    e5e8:	0a43      	lsrs	r3, r0, #9
    e5ea:	428b      	cmp	r3, r1
    e5ec:	d301      	bcc.n	e5f2 <__udivsi3+0x8e>
    e5ee:	024b      	lsls	r3, r1, #9
    e5f0:	1ac0      	subs	r0, r0, r3
    e5f2:	4152      	adcs	r2, r2
    e5f4:	0a03      	lsrs	r3, r0, #8
    e5f6:	428b      	cmp	r3, r1
    e5f8:	d301      	bcc.n	e5fe <__udivsi3+0x9a>
    e5fa:	020b      	lsls	r3, r1, #8
    e5fc:	1ac0      	subs	r0, r0, r3
    e5fe:	4152      	adcs	r2, r2
    e600:	d2cd      	bcs.n	e59e <__udivsi3+0x3a>
    e602:	09c3      	lsrs	r3, r0, #7
    e604:	428b      	cmp	r3, r1
    e606:	d301      	bcc.n	e60c <__udivsi3+0xa8>
    e608:	01cb      	lsls	r3, r1, #7
    e60a:	1ac0      	subs	r0, r0, r3
    e60c:	4152      	adcs	r2, r2
    e60e:	0983      	lsrs	r3, r0, #6
    e610:	428b      	cmp	r3, r1
    e612:	d301      	bcc.n	e618 <__udivsi3+0xb4>
    e614:	018b      	lsls	r3, r1, #6
    e616:	1ac0      	subs	r0, r0, r3
    e618:	4152      	adcs	r2, r2
    e61a:	0943      	lsrs	r3, r0, #5
    e61c:	428b      	cmp	r3, r1
    e61e:	d301      	bcc.n	e624 <__udivsi3+0xc0>
    e620:	014b      	lsls	r3, r1, #5
    e622:	1ac0      	subs	r0, r0, r3
    e624:	4152      	adcs	r2, r2
    e626:	0903      	lsrs	r3, r0, #4
    e628:	428b      	cmp	r3, r1
    e62a:	d301      	bcc.n	e630 <__udivsi3+0xcc>
    e62c:	010b      	lsls	r3, r1, #4
    e62e:	1ac0      	subs	r0, r0, r3
    e630:	4152      	adcs	r2, r2
    e632:	08c3      	lsrs	r3, r0, #3
    e634:	428b      	cmp	r3, r1
    e636:	d301      	bcc.n	e63c <__udivsi3+0xd8>
    e638:	00cb      	lsls	r3, r1, #3
    e63a:	1ac0      	subs	r0, r0, r3
    e63c:	4152      	adcs	r2, r2
    e63e:	0883      	lsrs	r3, r0, #2
    e640:	428b      	cmp	r3, r1
    e642:	d301      	bcc.n	e648 <__udivsi3+0xe4>
    e644:	008b      	lsls	r3, r1, #2
    e646:	1ac0      	subs	r0, r0, r3
    e648:	4152      	adcs	r2, r2
    e64a:	0843      	lsrs	r3, r0, #1
    e64c:	428b      	cmp	r3, r1
    e64e:	d301      	bcc.n	e654 <__udivsi3+0xf0>
    e650:	004b      	lsls	r3, r1, #1
    e652:	1ac0      	subs	r0, r0, r3
    e654:	4152      	adcs	r2, r2
    e656:	1a41      	subs	r1, r0, r1
    e658:	d200      	bcs.n	e65c <__udivsi3+0xf8>
    e65a:	4601      	mov	r1, r0
    e65c:	4152      	adcs	r2, r2
    e65e:	4610      	mov	r0, r2
    e660:	4770      	bx	lr
    e662:	e7ff      	b.n	e664 <__udivsi3+0x100>
    e664:	b501      	push	{r0, lr}
    e666:	2000      	movs	r0, #0
    e668:	f000 f8f0 	bl	e84c <__aeabi_idiv0>
    e66c:	bd02      	pop	{r1, pc}
    e66e:	46c0      	nop			; (mov r8, r8)

0000e670 <__aeabi_uidivmod>:
    e670:	2900      	cmp	r1, #0
    e672:	d0f7      	beq.n	e664 <__udivsi3+0x100>
    e674:	e776      	b.n	e564 <__udivsi3>
    e676:	4770      	bx	lr

0000e678 <__divsi3>:
    e678:	4603      	mov	r3, r0
    e67a:	430b      	orrs	r3, r1
    e67c:	d47f      	bmi.n	e77e <__divsi3+0x106>
    e67e:	2200      	movs	r2, #0
    e680:	0843      	lsrs	r3, r0, #1
    e682:	428b      	cmp	r3, r1
    e684:	d374      	bcc.n	e770 <__divsi3+0xf8>
    e686:	0903      	lsrs	r3, r0, #4
    e688:	428b      	cmp	r3, r1
    e68a:	d35f      	bcc.n	e74c <__divsi3+0xd4>
    e68c:	0a03      	lsrs	r3, r0, #8
    e68e:	428b      	cmp	r3, r1
    e690:	d344      	bcc.n	e71c <__divsi3+0xa4>
    e692:	0b03      	lsrs	r3, r0, #12
    e694:	428b      	cmp	r3, r1
    e696:	d328      	bcc.n	e6ea <__divsi3+0x72>
    e698:	0c03      	lsrs	r3, r0, #16
    e69a:	428b      	cmp	r3, r1
    e69c:	d30d      	bcc.n	e6ba <__divsi3+0x42>
    e69e:	22ff      	movs	r2, #255	; 0xff
    e6a0:	0209      	lsls	r1, r1, #8
    e6a2:	ba12      	rev	r2, r2
    e6a4:	0c03      	lsrs	r3, r0, #16
    e6a6:	428b      	cmp	r3, r1
    e6a8:	d302      	bcc.n	e6b0 <__divsi3+0x38>
    e6aa:	1212      	asrs	r2, r2, #8
    e6ac:	0209      	lsls	r1, r1, #8
    e6ae:	d065      	beq.n	e77c <__divsi3+0x104>
    e6b0:	0b03      	lsrs	r3, r0, #12
    e6b2:	428b      	cmp	r3, r1
    e6b4:	d319      	bcc.n	e6ea <__divsi3+0x72>
    e6b6:	e000      	b.n	e6ba <__divsi3+0x42>
    e6b8:	0a09      	lsrs	r1, r1, #8
    e6ba:	0bc3      	lsrs	r3, r0, #15
    e6bc:	428b      	cmp	r3, r1
    e6be:	d301      	bcc.n	e6c4 <__divsi3+0x4c>
    e6c0:	03cb      	lsls	r3, r1, #15
    e6c2:	1ac0      	subs	r0, r0, r3
    e6c4:	4152      	adcs	r2, r2
    e6c6:	0b83      	lsrs	r3, r0, #14
    e6c8:	428b      	cmp	r3, r1
    e6ca:	d301      	bcc.n	e6d0 <__divsi3+0x58>
    e6cc:	038b      	lsls	r3, r1, #14
    e6ce:	1ac0      	subs	r0, r0, r3
    e6d0:	4152      	adcs	r2, r2
    e6d2:	0b43      	lsrs	r3, r0, #13
    e6d4:	428b      	cmp	r3, r1
    e6d6:	d301      	bcc.n	e6dc <__divsi3+0x64>
    e6d8:	034b      	lsls	r3, r1, #13
    e6da:	1ac0      	subs	r0, r0, r3
    e6dc:	4152      	adcs	r2, r2
    e6de:	0b03      	lsrs	r3, r0, #12
    e6e0:	428b      	cmp	r3, r1
    e6e2:	d301      	bcc.n	e6e8 <__divsi3+0x70>
    e6e4:	030b      	lsls	r3, r1, #12
    e6e6:	1ac0      	subs	r0, r0, r3
    e6e8:	4152      	adcs	r2, r2
    e6ea:	0ac3      	lsrs	r3, r0, #11
    e6ec:	428b      	cmp	r3, r1
    e6ee:	d301      	bcc.n	e6f4 <__divsi3+0x7c>
    e6f0:	02cb      	lsls	r3, r1, #11
    e6f2:	1ac0      	subs	r0, r0, r3
    e6f4:	4152      	adcs	r2, r2
    e6f6:	0a83      	lsrs	r3, r0, #10
    e6f8:	428b      	cmp	r3, r1
    e6fa:	d301      	bcc.n	e700 <__divsi3+0x88>
    e6fc:	028b      	lsls	r3, r1, #10
    e6fe:	1ac0      	subs	r0, r0, r3
    e700:	4152      	adcs	r2, r2
    e702:	0a43      	lsrs	r3, r0, #9
    e704:	428b      	cmp	r3, r1
    e706:	d301      	bcc.n	e70c <__divsi3+0x94>
    e708:	024b      	lsls	r3, r1, #9
    e70a:	1ac0      	subs	r0, r0, r3
    e70c:	4152      	adcs	r2, r2
    e70e:	0a03      	lsrs	r3, r0, #8
    e710:	428b      	cmp	r3, r1
    e712:	d301      	bcc.n	e718 <__divsi3+0xa0>
    e714:	020b      	lsls	r3, r1, #8
    e716:	1ac0      	subs	r0, r0, r3
    e718:	4152      	adcs	r2, r2
    e71a:	d2cd      	bcs.n	e6b8 <__divsi3+0x40>
    e71c:	09c3      	lsrs	r3, r0, #7
    e71e:	428b      	cmp	r3, r1
    e720:	d301      	bcc.n	e726 <__divsi3+0xae>
    e722:	01cb      	lsls	r3, r1, #7
    e724:	1ac0      	subs	r0, r0, r3
    e726:	4152      	adcs	r2, r2
    e728:	0983      	lsrs	r3, r0, #6
    e72a:	428b      	cmp	r3, r1
    e72c:	d301      	bcc.n	e732 <__divsi3+0xba>
    e72e:	018b      	lsls	r3, r1, #6
    e730:	1ac0      	subs	r0, r0, r3
    e732:	4152      	adcs	r2, r2
    e734:	0943      	lsrs	r3, r0, #5
    e736:	428b      	cmp	r3, r1
    e738:	d301      	bcc.n	e73e <__divsi3+0xc6>
    e73a:	014b      	lsls	r3, r1, #5
    e73c:	1ac0      	subs	r0, r0, r3
    e73e:	4152      	adcs	r2, r2
    e740:	0903      	lsrs	r3, r0, #4
    e742:	428b      	cmp	r3, r1
    e744:	d301      	bcc.n	e74a <__divsi3+0xd2>
    e746:	010b      	lsls	r3, r1, #4
    e748:	1ac0      	subs	r0, r0, r3
    e74a:	4152      	adcs	r2, r2
    e74c:	08c3      	lsrs	r3, r0, #3
    e74e:	428b      	cmp	r3, r1
    e750:	d301      	bcc.n	e756 <__divsi3+0xde>
    e752:	00cb      	lsls	r3, r1, #3
    e754:	1ac0      	subs	r0, r0, r3
    e756:	4152      	adcs	r2, r2
    e758:	0883      	lsrs	r3, r0, #2
    e75a:	428b      	cmp	r3, r1
    e75c:	d301      	bcc.n	e762 <__divsi3+0xea>
    e75e:	008b      	lsls	r3, r1, #2
    e760:	1ac0      	subs	r0, r0, r3
    e762:	4152      	adcs	r2, r2
    e764:	0843      	lsrs	r3, r0, #1
    e766:	428b      	cmp	r3, r1
    e768:	d301      	bcc.n	e76e <__divsi3+0xf6>
    e76a:	004b      	lsls	r3, r1, #1
    e76c:	1ac0      	subs	r0, r0, r3
    e76e:	4152      	adcs	r2, r2
    e770:	1a41      	subs	r1, r0, r1
    e772:	d200      	bcs.n	e776 <__divsi3+0xfe>
    e774:	4601      	mov	r1, r0
    e776:	4152      	adcs	r2, r2
    e778:	4610      	mov	r0, r2
    e77a:	4770      	bx	lr
    e77c:	e05d      	b.n	e83a <__divsi3+0x1c2>
    e77e:	0fca      	lsrs	r2, r1, #31
    e780:	d000      	beq.n	e784 <__divsi3+0x10c>
    e782:	4249      	negs	r1, r1
    e784:	1003      	asrs	r3, r0, #32
    e786:	d300      	bcc.n	e78a <__divsi3+0x112>
    e788:	4240      	negs	r0, r0
    e78a:	4053      	eors	r3, r2
    e78c:	2200      	movs	r2, #0
    e78e:	469c      	mov	ip, r3
    e790:	0903      	lsrs	r3, r0, #4
    e792:	428b      	cmp	r3, r1
    e794:	d32d      	bcc.n	e7f2 <__divsi3+0x17a>
    e796:	0a03      	lsrs	r3, r0, #8
    e798:	428b      	cmp	r3, r1
    e79a:	d312      	bcc.n	e7c2 <__divsi3+0x14a>
    e79c:	22fc      	movs	r2, #252	; 0xfc
    e79e:	0189      	lsls	r1, r1, #6
    e7a0:	ba12      	rev	r2, r2
    e7a2:	0a03      	lsrs	r3, r0, #8
    e7a4:	428b      	cmp	r3, r1
    e7a6:	d30c      	bcc.n	e7c2 <__divsi3+0x14a>
    e7a8:	0189      	lsls	r1, r1, #6
    e7aa:	1192      	asrs	r2, r2, #6
    e7ac:	428b      	cmp	r3, r1
    e7ae:	d308      	bcc.n	e7c2 <__divsi3+0x14a>
    e7b0:	0189      	lsls	r1, r1, #6
    e7b2:	1192      	asrs	r2, r2, #6
    e7b4:	428b      	cmp	r3, r1
    e7b6:	d304      	bcc.n	e7c2 <__divsi3+0x14a>
    e7b8:	0189      	lsls	r1, r1, #6
    e7ba:	d03a      	beq.n	e832 <__divsi3+0x1ba>
    e7bc:	1192      	asrs	r2, r2, #6
    e7be:	e000      	b.n	e7c2 <__divsi3+0x14a>
    e7c0:	0989      	lsrs	r1, r1, #6
    e7c2:	09c3      	lsrs	r3, r0, #7
    e7c4:	428b      	cmp	r3, r1
    e7c6:	d301      	bcc.n	e7cc <__divsi3+0x154>
    e7c8:	01cb      	lsls	r3, r1, #7
    e7ca:	1ac0      	subs	r0, r0, r3
    e7cc:	4152      	adcs	r2, r2
    e7ce:	0983      	lsrs	r3, r0, #6
    e7d0:	428b      	cmp	r3, r1
    e7d2:	d301      	bcc.n	e7d8 <__divsi3+0x160>
    e7d4:	018b      	lsls	r3, r1, #6
    e7d6:	1ac0      	subs	r0, r0, r3
    e7d8:	4152      	adcs	r2, r2
    e7da:	0943      	lsrs	r3, r0, #5
    e7dc:	428b      	cmp	r3, r1
    e7de:	d301      	bcc.n	e7e4 <__divsi3+0x16c>
    e7e0:	014b      	lsls	r3, r1, #5
    e7e2:	1ac0      	subs	r0, r0, r3
    e7e4:	4152      	adcs	r2, r2
    e7e6:	0903      	lsrs	r3, r0, #4
    e7e8:	428b      	cmp	r3, r1
    e7ea:	d301      	bcc.n	e7f0 <__divsi3+0x178>
    e7ec:	010b      	lsls	r3, r1, #4
    e7ee:	1ac0      	subs	r0, r0, r3
    e7f0:	4152      	adcs	r2, r2
    e7f2:	08c3      	lsrs	r3, r0, #3
    e7f4:	428b      	cmp	r3, r1
    e7f6:	d301      	bcc.n	e7fc <__divsi3+0x184>
    e7f8:	00cb      	lsls	r3, r1, #3
    e7fa:	1ac0      	subs	r0, r0, r3
    e7fc:	4152      	adcs	r2, r2
    e7fe:	0883      	lsrs	r3, r0, #2
    e800:	428b      	cmp	r3, r1
    e802:	d301      	bcc.n	e808 <__divsi3+0x190>
    e804:	008b      	lsls	r3, r1, #2
    e806:	1ac0      	subs	r0, r0, r3
    e808:	4152      	adcs	r2, r2
    e80a:	d2d9      	bcs.n	e7c0 <__divsi3+0x148>
    e80c:	0843      	lsrs	r3, r0, #1
    e80e:	428b      	cmp	r3, r1
    e810:	d301      	bcc.n	e816 <__divsi3+0x19e>
    e812:	004b      	lsls	r3, r1, #1
    e814:	1ac0      	subs	r0, r0, r3
    e816:	4152      	adcs	r2, r2
    e818:	1a41      	subs	r1, r0, r1
    e81a:	d200      	bcs.n	e81e <__divsi3+0x1a6>
    e81c:	4601      	mov	r1, r0
    e81e:	4663      	mov	r3, ip
    e820:	4152      	adcs	r2, r2
    e822:	105b      	asrs	r3, r3, #1
    e824:	4610      	mov	r0, r2
    e826:	d301      	bcc.n	e82c <__divsi3+0x1b4>
    e828:	4240      	negs	r0, r0
    e82a:	2b00      	cmp	r3, #0
    e82c:	d500      	bpl.n	e830 <__divsi3+0x1b8>
    e82e:	4249      	negs	r1, r1
    e830:	4770      	bx	lr
    e832:	4663      	mov	r3, ip
    e834:	105b      	asrs	r3, r3, #1
    e836:	d300      	bcc.n	e83a <__divsi3+0x1c2>
    e838:	4240      	negs	r0, r0
    e83a:	b501      	push	{r0, lr}
    e83c:	2000      	movs	r0, #0
    e83e:	f000 f805 	bl	e84c <__aeabi_idiv0>
    e842:	bd02      	pop	{r1, pc}

0000e844 <__aeabi_idivmod>:
    e844:	2900      	cmp	r1, #0
    e846:	d0f8      	beq.n	e83a <__divsi3+0x1c2>
    e848:	e716      	b.n	e678 <__divsi3>
    e84a:	4770      	bx	lr

0000e84c <__aeabi_idiv0>:
    e84c:	4770      	bx	lr
    e84e:	46c0      	nop			; (mov r8, r8)

0000e850 <__aeabi_cdrcmple>:
    e850:	4684      	mov	ip, r0
    e852:	1c10      	adds	r0, r2, #0
    e854:	4662      	mov	r2, ip
    e856:	468c      	mov	ip, r1
    e858:	1c19      	adds	r1, r3, #0
    e85a:	4663      	mov	r3, ip
    e85c:	e000      	b.n	e860 <__aeabi_cdcmpeq>
    e85e:	46c0      	nop			; (mov r8, r8)

0000e860 <__aeabi_cdcmpeq>:
    e860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e862:	f000 ff9b 	bl	f79c <__ledf2>
    e866:	2800      	cmp	r0, #0
    e868:	d401      	bmi.n	e86e <__aeabi_cdcmpeq+0xe>
    e86a:	2100      	movs	r1, #0
    e86c:	42c8      	cmn	r0, r1
    e86e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000e870 <__aeabi_dcmpeq>:
    e870:	b510      	push	{r4, lr}
    e872:	f000 fef5 	bl	f660 <__eqdf2>
    e876:	4240      	negs	r0, r0
    e878:	3001      	adds	r0, #1
    e87a:	bd10      	pop	{r4, pc}

0000e87c <__aeabi_dcmplt>:
    e87c:	b510      	push	{r4, lr}
    e87e:	f000 ff8d 	bl	f79c <__ledf2>
    e882:	2800      	cmp	r0, #0
    e884:	db01      	blt.n	e88a <__aeabi_dcmplt+0xe>
    e886:	2000      	movs	r0, #0
    e888:	bd10      	pop	{r4, pc}
    e88a:	2001      	movs	r0, #1
    e88c:	bd10      	pop	{r4, pc}
    e88e:	46c0      	nop			; (mov r8, r8)

0000e890 <__aeabi_dcmple>:
    e890:	b510      	push	{r4, lr}
    e892:	f000 ff83 	bl	f79c <__ledf2>
    e896:	2800      	cmp	r0, #0
    e898:	dd01      	ble.n	e89e <__aeabi_dcmple+0xe>
    e89a:	2000      	movs	r0, #0
    e89c:	bd10      	pop	{r4, pc}
    e89e:	2001      	movs	r0, #1
    e8a0:	bd10      	pop	{r4, pc}
    e8a2:	46c0      	nop			; (mov r8, r8)

0000e8a4 <__aeabi_dcmpgt>:
    e8a4:	b510      	push	{r4, lr}
    e8a6:	f000 ff15 	bl	f6d4 <__gedf2>
    e8aa:	2800      	cmp	r0, #0
    e8ac:	dc01      	bgt.n	e8b2 <__aeabi_dcmpgt+0xe>
    e8ae:	2000      	movs	r0, #0
    e8b0:	bd10      	pop	{r4, pc}
    e8b2:	2001      	movs	r0, #1
    e8b4:	bd10      	pop	{r4, pc}
    e8b6:	46c0      	nop			; (mov r8, r8)

0000e8b8 <__aeabi_dcmpge>:
    e8b8:	b510      	push	{r4, lr}
    e8ba:	f000 ff0b 	bl	f6d4 <__gedf2>
    e8be:	2800      	cmp	r0, #0
    e8c0:	da01      	bge.n	e8c6 <__aeabi_dcmpge+0xe>
    e8c2:	2000      	movs	r0, #0
    e8c4:	bd10      	pop	{r4, pc}
    e8c6:	2001      	movs	r0, #1
    e8c8:	bd10      	pop	{r4, pc}
    e8ca:	46c0      	nop			; (mov r8, r8)

0000e8cc <__clzsi2>:
    e8cc:	211c      	movs	r1, #28
    e8ce:	2301      	movs	r3, #1
    e8d0:	041b      	lsls	r3, r3, #16
    e8d2:	4298      	cmp	r0, r3
    e8d4:	d301      	bcc.n	e8da <__clzsi2+0xe>
    e8d6:	0c00      	lsrs	r0, r0, #16
    e8d8:	3910      	subs	r1, #16
    e8da:	0a1b      	lsrs	r3, r3, #8
    e8dc:	4298      	cmp	r0, r3
    e8de:	d301      	bcc.n	e8e4 <__clzsi2+0x18>
    e8e0:	0a00      	lsrs	r0, r0, #8
    e8e2:	3908      	subs	r1, #8
    e8e4:	091b      	lsrs	r3, r3, #4
    e8e6:	4298      	cmp	r0, r3
    e8e8:	d301      	bcc.n	e8ee <__clzsi2+0x22>
    e8ea:	0900      	lsrs	r0, r0, #4
    e8ec:	3904      	subs	r1, #4
    e8ee:	a202      	add	r2, pc, #8	; (adr r2, e8f8 <__clzsi2+0x2c>)
    e8f0:	5c10      	ldrb	r0, [r2, r0]
    e8f2:	1840      	adds	r0, r0, r1
    e8f4:	4770      	bx	lr
    e8f6:	46c0      	nop			; (mov r8, r8)
    e8f8:	02020304 	.word	0x02020304
    e8fc:	01010101 	.word	0x01010101
	...

0000e908 <__ctzsi2>:
    e908:	4241      	negs	r1, r0
    e90a:	4008      	ands	r0, r1
    e90c:	211c      	movs	r1, #28
    e90e:	2301      	movs	r3, #1
    e910:	041b      	lsls	r3, r3, #16
    e912:	4298      	cmp	r0, r3
    e914:	d301      	bcc.n	e91a <__ctzsi2+0x12>
    e916:	0c00      	lsrs	r0, r0, #16
    e918:	3910      	subs	r1, #16
    e91a:	0a1b      	lsrs	r3, r3, #8
    e91c:	4298      	cmp	r0, r3
    e91e:	d301      	bcc.n	e924 <__ctzsi2+0x1c>
    e920:	0a00      	lsrs	r0, r0, #8
    e922:	3908      	subs	r1, #8
    e924:	091b      	lsrs	r3, r3, #4
    e926:	4298      	cmp	r0, r3
    e928:	d301      	bcc.n	e92e <__ctzsi2+0x26>
    e92a:	0900      	lsrs	r0, r0, #4
    e92c:	3904      	subs	r1, #4
    e92e:	a202      	add	r2, pc, #8	; (adr r2, e938 <__ctzsi2+0x30>)
    e930:	5c10      	ldrb	r0, [r2, r0]
    e932:	1a40      	subs	r0, r0, r1
    e934:	4770      	bx	lr
    e936:	46c0      	nop			; (mov r8, r8)
    e938:	1d1d1c1b 	.word	0x1d1d1c1b
    e93c:	1e1e1e1e 	.word	0x1e1e1e1e
    e940:	1f1f1f1f 	.word	0x1f1f1f1f
    e944:	1f1f1f1f 	.word	0x1f1f1f1f

0000e948 <__aeabi_lmul>:
    e948:	b5f0      	push	{r4, r5, r6, r7, lr}
    e94a:	46ce      	mov	lr, r9
    e94c:	4647      	mov	r7, r8
    e94e:	0415      	lsls	r5, r2, #16
    e950:	0c2d      	lsrs	r5, r5, #16
    e952:	002e      	movs	r6, r5
    e954:	b580      	push	{r7, lr}
    e956:	0407      	lsls	r7, r0, #16
    e958:	0c14      	lsrs	r4, r2, #16
    e95a:	0c3f      	lsrs	r7, r7, #16
    e95c:	4699      	mov	r9, r3
    e95e:	0c03      	lsrs	r3, r0, #16
    e960:	437e      	muls	r6, r7
    e962:	435d      	muls	r5, r3
    e964:	4367      	muls	r7, r4
    e966:	4363      	muls	r3, r4
    e968:	197f      	adds	r7, r7, r5
    e96a:	0c34      	lsrs	r4, r6, #16
    e96c:	19e4      	adds	r4, r4, r7
    e96e:	469c      	mov	ip, r3
    e970:	42a5      	cmp	r5, r4
    e972:	d903      	bls.n	e97c <__aeabi_lmul+0x34>
    e974:	2380      	movs	r3, #128	; 0x80
    e976:	025b      	lsls	r3, r3, #9
    e978:	4698      	mov	r8, r3
    e97a:	44c4      	add	ip, r8
    e97c:	464b      	mov	r3, r9
    e97e:	4351      	muls	r1, r2
    e980:	4343      	muls	r3, r0
    e982:	0436      	lsls	r6, r6, #16
    e984:	0c36      	lsrs	r6, r6, #16
    e986:	0c25      	lsrs	r5, r4, #16
    e988:	0424      	lsls	r4, r4, #16
    e98a:	4465      	add	r5, ip
    e98c:	19a4      	adds	r4, r4, r6
    e98e:	1859      	adds	r1, r3, r1
    e990:	1949      	adds	r1, r1, r5
    e992:	0020      	movs	r0, r4
    e994:	bc0c      	pop	{r2, r3}
    e996:	4690      	mov	r8, r2
    e998:	4699      	mov	r9, r3
    e99a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e99c <__aeabi_d2uiz>:
    e99c:	b570      	push	{r4, r5, r6, lr}
    e99e:	2200      	movs	r2, #0
    e9a0:	4b0c      	ldr	r3, [pc, #48]	; (e9d4 <__aeabi_d2uiz+0x38>)
    e9a2:	0004      	movs	r4, r0
    e9a4:	000d      	movs	r5, r1
    e9a6:	f7ff ff87 	bl	e8b8 <__aeabi_dcmpge>
    e9aa:	2800      	cmp	r0, #0
    e9ac:	d104      	bne.n	e9b8 <__aeabi_d2uiz+0x1c>
    e9ae:	0020      	movs	r0, r4
    e9b0:	0029      	movs	r1, r5
    e9b2:	f001 fceb 	bl	1038c <__aeabi_d2iz>
    e9b6:	bd70      	pop	{r4, r5, r6, pc}
    e9b8:	4b06      	ldr	r3, [pc, #24]	; (e9d4 <__aeabi_d2uiz+0x38>)
    e9ba:	2200      	movs	r2, #0
    e9bc:	0020      	movs	r0, r4
    e9be:	0029      	movs	r1, r5
    e9c0:	f001 f9ce 	bl	fd60 <__aeabi_dsub>
    e9c4:	f001 fce2 	bl	1038c <__aeabi_d2iz>
    e9c8:	2380      	movs	r3, #128	; 0x80
    e9ca:	061b      	lsls	r3, r3, #24
    e9cc:	469c      	mov	ip, r3
    e9ce:	4460      	add	r0, ip
    e9d0:	e7f1      	b.n	e9b6 <__aeabi_d2uiz+0x1a>
    e9d2:	46c0      	nop			; (mov r8, r8)
    e9d4:	41e00000 	.word	0x41e00000

0000e9d8 <__aeabi_dadd>:
    e9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e9da:	4645      	mov	r5, r8
    e9dc:	46de      	mov	lr, fp
    e9de:	4657      	mov	r7, sl
    e9e0:	464e      	mov	r6, r9
    e9e2:	030c      	lsls	r4, r1, #12
    e9e4:	b5e0      	push	{r5, r6, r7, lr}
    e9e6:	004e      	lsls	r6, r1, #1
    e9e8:	0fc9      	lsrs	r1, r1, #31
    e9ea:	4688      	mov	r8, r1
    e9ec:	000d      	movs	r5, r1
    e9ee:	0a61      	lsrs	r1, r4, #9
    e9f0:	0f44      	lsrs	r4, r0, #29
    e9f2:	430c      	orrs	r4, r1
    e9f4:	00c7      	lsls	r7, r0, #3
    e9f6:	0319      	lsls	r1, r3, #12
    e9f8:	0058      	lsls	r0, r3, #1
    e9fa:	0fdb      	lsrs	r3, r3, #31
    e9fc:	469b      	mov	fp, r3
    e9fe:	0a4b      	lsrs	r3, r1, #9
    ea00:	0f51      	lsrs	r1, r2, #29
    ea02:	430b      	orrs	r3, r1
    ea04:	0d76      	lsrs	r6, r6, #21
    ea06:	0d40      	lsrs	r0, r0, #21
    ea08:	0019      	movs	r1, r3
    ea0a:	00d2      	lsls	r2, r2, #3
    ea0c:	45d8      	cmp	r8, fp
    ea0e:	d100      	bne.n	ea12 <__aeabi_dadd+0x3a>
    ea10:	e0ae      	b.n	eb70 <__aeabi_dadd+0x198>
    ea12:	1a35      	subs	r5, r6, r0
    ea14:	2d00      	cmp	r5, #0
    ea16:	dc00      	bgt.n	ea1a <__aeabi_dadd+0x42>
    ea18:	e0f6      	b.n	ec08 <__aeabi_dadd+0x230>
    ea1a:	2800      	cmp	r0, #0
    ea1c:	d10f      	bne.n	ea3e <__aeabi_dadd+0x66>
    ea1e:	4313      	orrs	r3, r2
    ea20:	d100      	bne.n	ea24 <__aeabi_dadd+0x4c>
    ea22:	e0db      	b.n	ebdc <__aeabi_dadd+0x204>
    ea24:	1e6b      	subs	r3, r5, #1
    ea26:	2b00      	cmp	r3, #0
    ea28:	d000      	beq.n	ea2c <__aeabi_dadd+0x54>
    ea2a:	e137      	b.n	ec9c <__aeabi_dadd+0x2c4>
    ea2c:	1aba      	subs	r2, r7, r2
    ea2e:	4297      	cmp	r7, r2
    ea30:	41bf      	sbcs	r7, r7
    ea32:	1a64      	subs	r4, r4, r1
    ea34:	427f      	negs	r7, r7
    ea36:	1be4      	subs	r4, r4, r7
    ea38:	2601      	movs	r6, #1
    ea3a:	0017      	movs	r7, r2
    ea3c:	e024      	b.n	ea88 <__aeabi_dadd+0xb0>
    ea3e:	4bc6      	ldr	r3, [pc, #792]	; (ed58 <__aeabi_dadd+0x380>)
    ea40:	429e      	cmp	r6, r3
    ea42:	d04d      	beq.n	eae0 <__aeabi_dadd+0x108>
    ea44:	2380      	movs	r3, #128	; 0x80
    ea46:	041b      	lsls	r3, r3, #16
    ea48:	4319      	orrs	r1, r3
    ea4a:	2d38      	cmp	r5, #56	; 0x38
    ea4c:	dd00      	ble.n	ea50 <__aeabi_dadd+0x78>
    ea4e:	e107      	b.n	ec60 <__aeabi_dadd+0x288>
    ea50:	2d1f      	cmp	r5, #31
    ea52:	dd00      	ble.n	ea56 <__aeabi_dadd+0x7e>
    ea54:	e138      	b.n	ecc8 <__aeabi_dadd+0x2f0>
    ea56:	2020      	movs	r0, #32
    ea58:	1b43      	subs	r3, r0, r5
    ea5a:	469a      	mov	sl, r3
    ea5c:	000b      	movs	r3, r1
    ea5e:	4650      	mov	r0, sl
    ea60:	4083      	lsls	r3, r0
    ea62:	4699      	mov	r9, r3
    ea64:	0013      	movs	r3, r2
    ea66:	4648      	mov	r0, r9
    ea68:	40eb      	lsrs	r3, r5
    ea6a:	4318      	orrs	r0, r3
    ea6c:	0003      	movs	r3, r0
    ea6e:	4650      	mov	r0, sl
    ea70:	4082      	lsls	r2, r0
    ea72:	1e50      	subs	r0, r2, #1
    ea74:	4182      	sbcs	r2, r0
    ea76:	40e9      	lsrs	r1, r5
    ea78:	431a      	orrs	r2, r3
    ea7a:	1aba      	subs	r2, r7, r2
    ea7c:	1a61      	subs	r1, r4, r1
    ea7e:	4297      	cmp	r7, r2
    ea80:	41a4      	sbcs	r4, r4
    ea82:	0017      	movs	r7, r2
    ea84:	4264      	negs	r4, r4
    ea86:	1b0c      	subs	r4, r1, r4
    ea88:	0223      	lsls	r3, r4, #8
    ea8a:	d562      	bpl.n	eb52 <__aeabi_dadd+0x17a>
    ea8c:	0264      	lsls	r4, r4, #9
    ea8e:	0a65      	lsrs	r5, r4, #9
    ea90:	2d00      	cmp	r5, #0
    ea92:	d100      	bne.n	ea96 <__aeabi_dadd+0xbe>
    ea94:	e0df      	b.n	ec56 <__aeabi_dadd+0x27e>
    ea96:	0028      	movs	r0, r5
    ea98:	f7ff ff18 	bl	e8cc <__clzsi2>
    ea9c:	0003      	movs	r3, r0
    ea9e:	3b08      	subs	r3, #8
    eaa0:	2b1f      	cmp	r3, #31
    eaa2:	dd00      	ble.n	eaa6 <__aeabi_dadd+0xce>
    eaa4:	e0d2      	b.n	ec4c <__aeabi_dadd+0x274>
    eaa6:	2220      	movs	r2, #32
    eaa8:	003c      	movs	r4, r7
    eaaa:	1ad2      	subs	r2, r2, r3
    eaac:	409d      	lsls	r5, r3
    eaae:	40d4      	lsrs	r4, r2
    eab0:	409f      	lsls	r7, r3
    eab2:	4325      	orrs	r5, r4
    eab4:	429e      	cmp	r6, r3
    eab6:	dd00      	ble.n	eaba <__aeabi_dadd+0xe2>
    eab8:	e0c4      	b.n	ec44 <__aeabi_dadd+0x26c>
    eaba:	1b9e      	subs	r6, r3, r6
    eabc:	1c73      	adds	r3, r6, #1
    eabe:	2b1f      	cmp	r3, #31
    eac0:	dd00      	ble.n	eac4 <__aeabi_dadd+0xec>
    eac2:	e0f1      	b.n	eca8 <__aeabi_dadd+0x2d0>
    eac4:	2220      	movs	r2, #32
    eac6:	0038      	movs	r0, r7
    eac8:	0029      	movs	r1, r5
    eaca:	1ad2      	subs	r2, r2, r3
    eacc:	40d8      	lsrs	r0, r3
    eace:	4091      	lsls	r1, r2
    ead0:	4097      	lsls	r7, r2
    ead2:	002c      	movs	r4, r5
    ead4:	4301      	orrs	r1, r0
    ead6:	1e78      	subs	r0, r7, #1
    ead8:	4187      	sbcs	r7, r0
    eada:	40dc      	lsrs	r4, r3
    eadc:	2600      	movs	r6, #0
    eade:	430f      	orrs	r7, r1
    eae0:	077b      	lsls	r3, r7, #29
    eae2:	d009      	beq.n	eaf8 <__aeabi_dadd+0x120>
    eae4:	230f      	movs	r3, #15
    eae6:	403b      	ands	r3, r7
    eae8:	2b04      	cmp	r3, #4
    eaea:	d005      	beq.n	eaf8 <__aeabi_dadd+0x120>
    eaec:	1d3b      	adds	r3, r7, #4
    eaee:	42bb      	cmp	r3, r7
    eaf0:	41bf      	sbcs	r7, r7
    eaf2:	427f      	negs	r7, r7
    eaf4:	19e4      	adds	r4, r4, r7
    eaf6:	001f      	movs	r7, r3
    eaf8:	0223      	lsls	r3, r4, #8
    eafa:	d52c      	bpl.n	eb56 <__aeabi_dadd+0x17e>
    eafc:	4b96      	ldr	r3, [pc, #600]	; (ed58 <__aeabi_dadd+0x380>)
    eafe:	3601      	adds	r6, #1
    eb00:	429e      	cmp	r6, r3
    eb02:	d100      	bne.n	eb06 <__aeabi_dadd+0x12e>
    eb04:	e09a      	b.n	ec3c <__aeabi_dadd+0x264>
    eb06:	4645      	mov	r5, r8
    eb08:	4b94      	ldr	r3, [pc, #592]	; (ed5c <__aeabi_dadd+0x384>)
    eb0a:	08ff      	lsrs	r7, r7, #3
    eb0c:	401c      	ands	r4, r3
    eb0e:	0760      	lsls	r0, r4, #29
    eb10:	0576      	lsls	r6, r6, #21
    eb12:	0264      	lsls	r4, r4, #9
    eb14:	4307      	orrs	r7, r0
    eb16:	0b24      	lsrs	r4, r4, #12
    eb18:	0d76      	lsrs	r6, r6, #21
    eb1a:	2100      	movs	r1, #0
    eb1c:	0324      	lsls	r4, r4, #12
    eb1e:	0b23      	lsrs	r3, r4, #12
    eb20:	0d0c      	lsrs	r4, r1, #20
    eb22:	4a8f      	ldr	r2, [pc, #572]	; (ed60 <__aeabi_dadd+0x388>)
    eb24:	0524      	lsls	r4, r4, #20
    eb26:	431c      	orrs	r4, r3
    eb28:	4014      	ands	r4, r2
    eb2a:	0533      	lsls	r3, r6, #20
    eb2c:	4323      	orrs	r3, r4
    eb2e:	005b      	lsls	r3, r3, #1
    eb30:	07ed      	lsls	r5, r5, #31
    eb32:	085b      	lsrs	r3, r3, #1
    eb34:	432b      	orrs	r3, r5
    eb36:	0038      	movs	r0, r7
    eb38:	0019      	movs	r1, r3
    eb3a:	bc3c      	pop	{r2, r3, r4, r5}
    eb3c:	4690      	mov	r8, r2
    eb3e:	4699      	mov	r9, r3
    eb40:	46a2      	mov	sl, r4
    eb42:	46ab      	mov	fp, r5
    eb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb46:	4664      	mov	r4, ip
    eb48:	4304      	orrs	r4, r0
    eb4a:	d100      	bne.n	eb4e <__aeabi_dadd+0x176>
    eb4c:	e211      	b.n	ef72 <__aeabi_dadd+0x59a>
    eb4e:	0004      	movs	r4, r0
    eb50:	4667      	mov	r7, ip
    eb52:	077b      	lsls	r3, r7, #29
    eb54:	d1c6      	bne.n	eae4 <__aeabi_dadd+0x10c>
    eb56:	4645      	mov	r5, r8
    eb58:	0760      	lsls	r0, r4, #29
    eb5a:	08ff      	lsrs	r7, r7, #3
    eb5c:	4307      	orrs	r7, r0
    eb5e:	08e4      	lsrs	r4, r4, #3
    eb60:	4b7d      	ldr	r3, [pc, #500]	; (ed58 <__aeabi_dadd+0x380>)
    eb62:	429e      	cmp	r6, r3
    eb64:	d030      	beq.n	ebc8 <__aeabi_dadd+0x1f0>
    eb66:	0324      	lsls	r4, r4, #12
    eb68:	0576      	lsls	r6, r6, #21
    eb6a:	0b24      	lsrs	r4, r4, #12
    eb6c:	0d76      	lsrs	r6, r6, #21
    eb6e:	e7d4      	b.n	eb1a <__aeabi_dadd+0x142>
    eb70:	1a33      	subs	r3, r6, r0
    eb72:	469a      	mov	sl, r3
    eb74:	2b00      	cmp	r3, #0
    eb76:	dd78      	ble.n	ec6a <__aeabi_dadd+0x292>
    eb78:	2800      	cmp	r0, #0
    eb7a:	d031      	beq.n	ebe0 <__aeabi_dadd+0x208>
    eb7c:	4876      	ldr	r0, [pc, #472]	; (ed58 <__aeabi_dadd+0x380>)
    eb7e:	4286      	cmp	r6, r0
    eb80:	d0ae      	beq.n	eae0 <__aeabi_dadd+0x108>
    eb82:	2080      	movs	r0, #128	; 0x80
    eb84:	0400      	lsls	r0, r0, #16
    eb86:	4301      	orrs	r1, r0
    eb88:	4653      	mov	r3, sl
    eb8a:	2b38      	cmp	r3, #56	; 0x38
    eb8c:	dc00      	bgt.n	eb90 <__aeabi_dadd+0x1b8>
    eb8e:	e0e9      	b.n	ed64 <__aeabi_dadd+0x38c>
    eb90:	430a      	orrs	r2, r1
    eb92:	1e51      	subs	r1, r2, #1
    eb94:	418a      	sbcs	r2, r1
    eb96:	2100      	movs	r1, #0
    eb98:	19d2      	adds	r2, r2, r7
    eb9a:	42ba      	cmp	r2, r7
    eb9c:	41bf      	sbcs	r7, r7
    eb9e:	1909      	adds	r1, r1, r4
    eba0:	427c      	negs	r4, r7
    eba2:	0017      	movs	r7, r2
    eba4:	190c      	adds	r4, r1, r4
    eba6:	0223      	lsls	r3, r4, #8
    eba8:	d5d3      	bpl.n	eb52 <__aeabi_dadd+0x17a>
    ebaa:	4b6b      	ldr	r3, [pc, #428]	; (ed58 <__aeabi_dadd+0x380>)
    ebac:	3601      	adds	r6, #1
    ebae:	429e      	cmp	r6, r3
    ebb0:	d100      	bne.n	ebb4 <__aeabi_dadd+0x1dc>
    ebb2:	e13a      	b.n	ee2a <__aeabi_dadd+0x452>
    ebb4:	2001      	movs	r0, #1
    ebb6:	4b69      	ldr	r3, [pc, #420]	; (ed5c <__aeabi_dadd+0x384>)
    ebb8:	401c      	ands	r4, r3
    ebba:	087b      	lsrs	r3, r7, #1
    ebbc:	4007      	ands	r7, r0
    ebbe:	431f      	orrs	r7, r3
    ebc0:	07e0      	lsls	r0, r4, #31
    ebc2:	4307      	orrs	r7, r0
    ebc4:	0864      	lsrs	r4, r4, #1
    ebc6:	e78b      	b.n	eae0 <__aeabi_dadd+0x108>
    ebc8:	0023      	movs	r3, r4
    ebca:	433b      	orrs	r3, r7
    ebcc:	d100      	bne.n	ebd0 <__aeabi_dadd+0x1f8>
    ebce:	e1cb      	b.n	ef68 <__aeabi_dadd+0x590>
    ebd0:	2280      	movs	r2, #128	; 0x80
    ebd2:	0312      	lsls	r2, r2, #12
    ebd4:	4314      	orrs	r4, r2
    ebd6:	0324      	lsls	r4, r4, #12
    ebd8:	0b24      	lsrs	r4, r4, #12
    ebda:	e79e      	b.n	eb1a <__aeabi_dadd+0x142>
    ebdc:	002e      	movs	r6, r5
    ebde:	e77f      	b.n	eae0 <__aeabi_dadd+0x108>
    ebe0:	0008      	movs	r0, r1
    ebe2:	4310      	orrs	r0, r2
    ebe4:	d100      	bne.n	ebe8 <__aeabi_dadd+0x210>
    ebe6:	e0b4      	b.n	ed52 <__aeabi_dadd+0x37a>
    ebe8:	1e58      	subs	r0, r3, #1
    ebea:	2800      	cmp	r0, #0
    ebec:	d000      	beq.n	ebf0 <__aeabi_dadd+0x218>
    ebee:	e0de      	b.n	edae <__aeabi_dadd+0x3d6>
    ebf0:	18ba      	adds	r2, r7, r2
    ebf2:	42ba      	cmp	r2, r7
    ebf4:	419b      	sbcs	r3, r3
    ebf6:	1864      	adds	r4, r4, r1
    ebf8:	425b      	negs	r3, r3
    ebfa:	18e4      	adds	r4, r4, r3
    ebfc:	0017      	movs	r7, r2
    ebfe:	2601      	movs	r6, #1
    ec00:	0223      	lsls	r3, r4, #8
    ec02:	d5a6      	bpl.n	eb52 <__aeabi_dadd+0x17a>
    ec04:	2602      	movs	r6, #2
    ec06:	e7d5      	b.n	ebb4 <__aeabi_dadd+0x1dc>
    ec08:	2d00      	cmp	r5, #0
    ec0a:	d16e      	bne.n	ecea <__aeabi_dadd+0x312>
    ec0c:	1c70      	adds	r0, r6, #1
    ec0e:	0540      	lsls	r0, r0, #21
    ec10:	0d40      	lsrs	r0, r0, #21
    ec12:	2801      	cmp	r0, #1
    ec14:	dc00      	bgt.n	ec18 <__aeabi_dadd+0x240>
    ec16:	e0f9      	b.n	ee0c <__aeabi_dadd+0x434>
    ec18:	1ab8      	subs	r0, r7, r2
    ec1a:	4684      	mov	ip, r0
    ec1c:	4287      	cmp	r7, r0
    ec1e:	4180      	sbcs	r0, r0
    ec20:	1ae5      	subs	r5, r4, r3
    ec22:	4240      	negs	r0, r0
    ec24:	1a2d      	subs	r5, r5, r0
    ec26:	0228      	lsls	r0, r5, #8
    ec28:	d400      	bmi.n	ec2c <__aeabi_dadd+0x254>
    ec2a:	e089      	b.n	ed40 <__aeabi_dadd+0x368>
    ec2c:	1bd7      	subs	r7, r2, r7
    ec2e:	42ba      	cmp	r2, r7
    ec30:	4192      	sbcs	r2, r2
    ec32:	1b1c      	subs	r4, r3, r4
    ec34:	4252      	negs	r2, r2
    ec36:	1aa5      	subs	r5, r4, r2
    ec38:	46d8      	mov	r8, fp
    ec3a:	e729      	b.n	ea90 <__aeabi_dadd+0xb8>
    ec3c:	4645      	mov	r5, r8
    ec3e:	2400      	movs	r4, #0
    ec40:	2700      	movs	r7, #0
    ec42:	e76a      	b.n	eb1a <__aeabi_dadd+0x142>
    ec44:	4c45      	ldr	r4, [pc, #276]	; (ed5c <__aeabi_dadd+0x384>)
    ec46:	1af6      	subs	r6, r6, r3
    ec48:	402c      	ands	r4, r5
    ec4a:	e749      	b.n	eae0 <__aeabi_dadd+0x108>
    ec4c:	003d      	movs	r5, r7
    ec4e:	3828      	subs	r0, #40	; 0x28
    ec50:	4085      	lsls	r5, r0
    ec52:	2700      	movs	r7, #0
    ec54:	e72e      	b.n	eab4 <__aeabi_dadd+0xdc>
    ec56:	0038      	movs	r0, r7
    ec58:	f7ff fe38 	bl	e8cc <__clzsi2>
    ec5c:	3020      	adds	r0, #32
    ec5e:	e71d      	b.n	ea9c <__aeabi_dadd+0xc4>
    ec60:	430a      	orrs	r2, r1
    ec62:	1e51      	subs	r1, r2, #1
    ec64:	418a      	sbcs	r2, r1
    ec66:	2100      	movs	r1, #0
    ec68:	e707      	b.n	ea7a <__aeabi_dadd+0xa2>
    ec6a:	2b00      	cmp	r3, #0
    ec6c:	d000      	beq.n	ec70 <__aeabi_dadd+0x298>
    ec6e:	e0f3      	b.n	ee58 <__aeabi_dadd+0x480>
    ec70:	1c70      	adds	r0, r6, #1
    ec72:	0543      	lsls	r3, r0, #21
    ec74:	0d5b      	lsrs	r3, r3, #21
    ec76:	2b01      	cmp	r3, #1
    ec78:	dc00      	bgt.n	ec7c <__aeabi_dadd+0x2a4>
    ec7a:	e0ad      	b.n	edd8 <__aeabi_dadd+0x400>
    ec7c:	4b36      	ldr	r3, [pc, #216]	; (ed58 <__aeabi_dadd+0x380>)
    ec7e:	4298      	cmp	r0, r3
    ec80:	d100      	bne.n	ec84 <__aeabi_dadd+0x2ac>
    ec82:	e0d1      	b.n	ee28 <__aeabi_dadd+0x450>
    ec84:	18ba      	adds	r2, r7, r2
    ec86:	42ba      	cmp	r2, r7
    ec88:	41bf      	sbcs	r7, r7
    ec8a:	1864      	adds	r4, r4, r1
    ec8c:	427f      	negs	r7, r7
    ec8e:	19e4      	adds	r4, r4, r7
    ec90:	07e7      	lsls	r7, r4, #31
    ec92:	0852      	lsrs	r2, r2, #1
    ec94:	4317      	orrs	r7, r2
    ec96:	0864      	lsrs	r4, r4, #1
    ec98:	0006      	movs	r6, r0
    ec9a:	e721      	b.n	eae0 <__aeabi_dadd+0x108>
    ec9c:	482e      	ldr	r0, [pc, #184]	; (ed58 <__aeabi_dadd+0x380>)
    ec9e:	4285      	cmp	r5, r0
    eca0:	d100      	bne.n	eca4 <__aeabi_dadd+0x2cc>
    eca2:	e093      	b.n	edcc <__aeabi_dadd+0x3f4>
    eca4:	001d      	movs	r5, r3
    eca6:	e6d0      	b.n	ea4a <__aeabi_dadd+0x72>
    eca8:	0029      	movs	r1, r5
    ecaa:	3e1f      	subs	r6, #31
    ecac:	40f1      	lsrs	r1, r6
    ecae:	2b20      	cmp	r3, #32
    ecb0:	d100      	bne.n	ecb4 <__aeabi_dadd+0x2dc>
    ecb2:	e08d      	b.n	edd0 <__aeabi_dadd+0x3f8>
    ecb4:	2240      	movs	r2, #64	; 0x40
    ecb6:	1ad3      	subs	r3, r2, r3
    ecb8:	409d      	lsls	r5, r3
    ecba:	432f      	orrs	r7, r5
    ecbc:	1e7d      	subs	r5, r7, #1
    ecbe:	41af      	sbcs	r7, r5
    ecc0:	2400      	movs	r4, #0
    ecc2:	430f      	orrs	r7, r1
    ecc4:	2600      	movs	r6, #0
    ecc6:	e744      	b.n	eb52 <__aeabi_dadd+0x17a>
    ecc8:	002b      	movs	r3, r5
    ecca:	0008      	movs	r0, r1
    eccc:	3b20      	subs	r3, #32
    ecce:	40d8      	lsrs	r0, r3
    ecd0:	0003      	movs	r3, r0
    ecd2:	2d20      	cmp	r5, #32
    ecd4:	d100      	bne.n	ecd8 <__aeabi_dadd+0x300>
    ecd6:	e07d      	b.n	edd4 <__aeabi_dadd+0x3fc>
    ecd8:	2040      	movs	r0, #64	; 0x40
    ecda:	1b45      	subs	r5, r0, r5
    ecdc:	40a9      	lsls	r1, r5
    ecde:	430a      	orrs	r2, r1
    ece0:	1e51      	subs	r1, r2, #1
    ece2:	418a      	sbcs	r2, r1
    ece4:	2100      	movs	r1, #0
    ece6:	431a      	orrs	r2, r3
    ece8:	e6c7      	b.n	ea7a <__aeabi_dadd+0xa2>
    ecea:	2e00      	cmp	r6, #0
    ecec:	d050      	beq.n	ed90 <__aeabi_dadd+0x3b8>
    ecee:	4e1a      	ldr	r6, [pc, #104]	; (ed58 <__aeabi_dadd+0x380>)
    ecf0:	42b0      	cmp	r0, r6
    ecf2:	d057      	beq.n	eda4 <__aeabi_dadd+0x3cc>
    ecf4:	2680      	movs	r6, #128	; 0x80
    ecf6:	426b      	negs	r3, r5
    ecf8:	4699      	mov	r9, r3
    ecfa:	0436      	lsls	r6, r6, #16
    ecfc:	4334      	orrs	r4, r6
    ecfe:	464b      	mov	r3, r9
    ed00:	2b38      	cmp	r3, #56	; 0x38
    ed02:	dd00      	ble.n	ed06 <__aeabi_dadd+0x32e>
    ed04:	e0d6      	b.n	eeb4 <__aeabi_dadd+0x4dc>
    ed06:	2b1f      	cmp	r3, #31
    ed08:	dd00      	ble.n	ed0c <__aeabi_dadd+0x334>
    ed0a:	e135      	b.n	ef78 <__aeabi_dadd+0x5a0>
    ed0c:	2620      	movs	r6, #32
    ed0e:	1af5      	subs	r5, r6, r3
    ed10:	0026      	movs	r6, r4
    ed12:	40ae      	lsls	r6, r5
    ed14:	46b2      	mov	sl, r6
    ed16:	003e      	movs	r6, r7
    ed18:	40de      	lsrs	r6, r3
    ed1a:	46ac      	mov	ip, r5
    ed1c:	0035      	movs	r5, r6
    ed1e:	4656      	mov	r6, sl
    ed20:	432e      	orrs	r6, r5
    ed22:	4665      	mov	r5, ip
    ed24:	40af      	lsls	r7, r5
    ed26:	1e7d      	subs	r5, r7, #1
    ed28:	41af      	sbcs	r7, r5
    ed2a:	40dc      	lsrs	r4, r3
    ed2c:	4337      	orrs	r7, r6
    ed2e:	1bd7      	subs	r7, r2, r7
    ed30:	42ba      	cmp	r2, r7
    ed32:	4192      	sbcs	r2, r2
    ed34:	1b0c      	subs	r4, r1, r4
    ed36:	4252      	negs	r2, r2
    ed38:	1aa4      	subs	r4, r4, r2
    ed3a:	0006      	movs	r6, r0
    ed3c:	46d8      	mov	r8, fp
    ed3e:	e6a3      	b.n	ea88 <__aeabi_dadd+0xb0>
    ed40:	4664      	mov	r4, ip
    ed42:	4667      	mov	r7, ip
    ed44:	432c      	orrs	r4, r5
    ed46:	d000      	beq.n	ed4a <__aeabi_dadd+0x372>
    ed48:	e6a2      	b.n	ea90 <__aeabi_dadd+0xb8>
    ed4a:	2500      	movs	r5, #0
    ed4c:	2600      	movs	r6, #0
    ed4e:	2700      	movs	r7, #0
    ed50:	e706      	b.n	eb60 <__aeabi_dadd+0x188>
    ed52:	001e      	movs	r6, r3
    ed54:	e6c4      	b.n	eae0 <__aeabi_dadd+0x108>
    ed56:	46c0      	nop			; (mov r8, r8)
    ed58:	000007ff 	.word	0x000007ff
    ed5c:	ff7fffff 	.word	0xff7fffff
    ed60:	800fffff 	.word	0x800fffff
    ed64:	2b1f      	cmp	r3, #31
    ed66:	dc63      	bgt.n	ee30 <__aeabi_dadd+0x458>
    ed68:	2020      	movs	r0, #32
    ed6a:	1ac3      	subs	r3, r0, r3
    ed6c:	0008      	movs	r0, r1
    ed6e:	4098      	lsls	r0, r3
    ed70:	469c      	mov	ip, r3
    ed72:	4683      	mov	fp, r0
    ed74:	4653      	mov	r3, sl
    ed76:	0010      	movs	r0, r2
    ed78:	40d8      	lsrs	r0, r3
    ed7a:	0003      	movs	r3, r0
    ed7c:	4658      	mov	r0, fp
    ed7e:	4318      	orrs	r0, r3
    ed80:	4663      	mov	r3, ip
    ed82:	409a      	lsls	r2, r3
    ed84:	1e53      	subs	r3, r2, #1
    ed86:	419a      	sbcs	r2, r3
    ed88:	4653      	mov	r3, sl
    ed8a:	4302      	orrs	r2, r0
    ed8c:	40d9      	lsrs	r1, r3
    ed8e:	e703      	b.n	eb98 <__aeabi_dadd+0x1c0>
    ed90:	0026      	movs	r6, r4
    ed92:	433e      	orrs	r6, r7
    ed94:	d006      	beq.n	eda4 <__aeabi_dadd+0x3cc>
    ed96:	43eb      	mvns	r3, r5
    ed98:	4699      	mov	r9, r3
    ed9a:	2b00      	cmp	r3, #0
    ed9c:	d0c7      	beq.n	ed2e <__aeabi_dadd+0x356>
    ed9e:	4e94      	ldr	r6, [pc, #592]	; (eff0 <__aeabi_dadd+0x618>)
    eda0:	42b0      	cmp	r0, r6
    eda2:	d1ac      	bne.n	ecfe <__aeabi_dadd+0x326>
    eda4:	000c      	movs	r4, r1
    eda6:	0017      	movs	r7, r2
    eda8:	0006      	movs	r6, r0
    edaa:	46d8      	mov	r8, fp
    edac:	e698      	b.n	eae0 <__aeabi_dadd+0x108>
    edae:	4b90      	ldr	r3, [pc, #576]	; (eff0 <__aeabi_dadd+0x618>)
    edb0:	459a      	cmp	sl, r3
    edb2:	d00b      	beq.n	edcc <__aeabi_dadd+0x3f4>
    edb4:	4682      	mov	sl, r0
    edb6:	e6e7      	b.n	eb88 <__aeabi_dadd+0x1b0>
    edb8:	2800      	cmp	r0, #0
    edba:	d000      	beq.n	edbe <__aeabi_dadd+0x3e6>
    edbc:	e09e      	b.n	eefc <__aeabi_dadd+0x524>
    edbe:	0018      	movs	r0, r3
    edc0:	4310      	orrs	r0, r2
    edc2:	d100      	bne.n	edc6 <__aeabi_dadd+0x3ee>
    edc4:	e0e9      	b.n	ef9a <__aeabi_dadd+0x5c2>
    edc6:	001c      	movs	r4, r3
    edc8:	0017      	movs	r7, r2
    edca:	46d8      	mov	r8, fp
    edcc:	4e88      	ldr	r6, [pc, #544]	; (eff0 <__aeabi_dadd+0x618>)
    edce:	e687      	b.n	eae0 <__aeabi_dadd+0x108>
    edd0:	2500      	movs	r5, #0
    edd2:	e772      	b.n	ecba <__aeabi_dadd+0x2e2>
    edd4:	2100      	movs	r1, #0
    edd6:	e782      	b.n	ecde <__aeabi_dadd+0x306>
    edd8:	0023      	movs	r3, r4
    edda:	433b      	orrs	r3, r7
    eddc:	2e00      	cmp	r6, #0
    edde:	d000      	beq.n	ede2 <__aeabi_dadd+0x40a>
    ede0:	e0ab      	b.n	ef3a <__aeabi_dadd+0x562>
    ede2:	2b00      	cmp	r3, #0
    ede4:	d100      	bne.n	ede8 <__aeabi_dadd+0x410>
    ede6:	e0e7      	b.n	efb8 <__aeabi_dadd+0x5e0>
    ede8:	000b      	movs	r3, r1
    edea:	4313      	orrs	r3, r2
    edec:	d100      	bne.n	edf0 <__aeabi_dadd+0x418>
    edee:	e677      	b.n	eae0 <__aeabi_dadd+0x108>
    edf0:	18ba      	adds	r2, r7, r2
    edf2:	42ba      	cmp	r2, r7
    edf4:	41bf      	sbcs	r7, r7
    edf6:	1864      	adds	r4, r4, r1
    edf8:	427f      	negs	r7, r7
    edfa:	19e4      	adds	r4, r4, r7
    edfc:	0223      	lsls	r3, r4, #8
    edfe:	d400      	bmi.n	ee02 <__aeabi_dadd+0x42a>
    ee00:	e0f2      	b.n	efe8 <__aeabi_dadd+0x610>
    ee02:	4b7c      	ldr	r3, [pc, #496]	; (eff4 <__aeabi_dadd+0x61c>)
    ee04:	0017      	movs	r7, r2
    ee06:	401c      	ands	r4, r3
    ee08:	0006      	movs	r6, r0
    ee0a:	e669      	b.n	eae0 <__aeabi_dadd+0x108>
    ee0c:	0020      	movs	r0, r4
    ee0e:	4338      	orrs	r0, r7
    ee10:	2e00      	cmp	r6, #0
    ee12:	d1d1      	bne.n	edb8 <__aeabi_dadd+0x3e0>
    ee14:	2800      	cmp	r0, #0
    ee16:	d15b      	bne.n	eed0 <__aeabi_dadd+0x4f8>
    ee18:	001c      	movs	r4, r3
    ee1a:	4314      	orrs	r4, r2
    ee1c:	d100      	bne.n	ee20 <__aeabi_dadd+0x448>
    ee1e:	e0a8      	b.n	ef72 <__aeabi_dadd+0x59a>
    ee20:	001c      	movs	r4, r3
    ee22:	0017      	movs	r7, r2
    ee24:	46d8      	mov	r8, fp
    ee26:	e65b      	b.n	eae0 <__aeabi_dadd+0x108>
    ee28:	0006      	movs	r6, r0
    ee2a:	2400      	movs	r4, #0
    ee2c:	2700      	movs	r7, #0
    ee2e:	e697      	b.n	eb60 <__aeabi_dadd+0x188>
    ee30:	4650      	mov	r0, sl
    ee32:	000b      	movs	r3, r1
    ee34:	3820      	subs	r0, #32
    ee36:	40c3      	lsrs	r3, r0
    ee38:	4699      	mov	r9, r3
    ee3a:	4653      	mov	r3, sl
    ee3c:	2b20      	cmp	r3, #32
    ee3e:	d100      	bne.n	ee42 <__aeabi_dadd+0x46a>
    ee40:	e095      	b.n	ef6e <__aeabi_dadd+0x596>
    ee42:	2340      	movs	r3, #64	; 0x40
    ee44:	4650      	mov	r0, sl
    ee46:	1a1b      	subs	r3, r3, r0
    ee48:	4099      	lsls	r1, r3
    ee4a:	430a      	orrs	r2, r1
    ee4c:	1e51      	subs	r1, r2, #1
    ee4e:	418a      	sbcs	r2, r1
    ee50:	464b      	mov	r3, r9
    ee52:	2100      	movs	r1, #0
    ee54:	431a      	orrs	r2, r3
    ee56:	e69f      	b.n	eb98 <__aeabi_dadd+0x1c0>
    ee58:	2e00      	cmp	r6, #0
    ee5a:	d130      	bne.n	eebe <__aeabi_dadd+0x4e6>
    ee5c:	0026      	movs	r6, r4
    ee5e:	433e      	orrs	r6, r7
    ee60:	d067      	beq.n	ef32 <__aeabi_dadd+0x55a>
    ee62:	43db      	mvns	r3, r3
    ee64:	469a      	mov	sl, r3
    ee66:	2b00      	cmp	r3, #0
    ee68:	d01c      	beq.n	eea4 <__aeabi_dadd+0x4cc>
    ee6a:	4e61      	ldr	r6, [pc, #388]	; (eff0 <__aeabi_dadd+0x618>)
    ee6c:	42b0      	cmp	r0, r6
    ee6e:	d060      	beq.n	ef32 <__aeabi_dadd+0x55a>
    ee70:	4653      	mov	r3, sl
    ee72:	2b38      	cmp	r3, #56	; 0x38
    ee74:	dd00      	ble.n	ee78 <__aeabi_dadd+0x4a0>
    ee76:	e096      	b.n	efa6 <__aeabi_dadd+0x5ce>
    ee78:	2b1f      	cmp	r3, #31
    ee7a:	dd00      	ble.n	ee7e <__aeabi_dadd+0x4a6>
    ee7c:	e09f      	b.n	efbe <__aeabi_dadd+0x5e6>
    ee7e:	2620      	movs	r6, #32
    ee80:	1af3      	subs	r3, r6, r3
    ee82:	0026      	movs	r6, r4
    ee84:	409e      	lsls	r6, r3
    ee86:	469c      	mov	ip, r3
    ee88:	46b3      	mov	fp, r6
    ee8a:	4653      	mov	r3, sl
    ee8c:	003e      	movs	r6, r7
    ee8e:	40de      	lsrs	r6, r3
    ee90:	0033      	movs	r3, r6
    ee92:	465e      	mov	r6, fp
    ee94:	431e      	orrs	r6, r3
    ee96:	4663      	mov	r3, ip
    ee98:	409f      	lsls	r7, r3
    ee9a:	1e7b      	subs	r3, r7, #1
    ee9c:	419f      	sbcs	r7, r3
    ee9e:	4653      	mov	r3, sl
    eea0:	40dc      	lsrs	r4, r3
    eea2:	4337      	orrs	r7, r6
    eea4:	18bf      	adds	r7, r7, r2
    eea6:	4297      	cmp	r7, r2
    eea8:	4192      	sbcs	r2, r2
    eeaa:	1864      	adds	r4, r4, r1
    eeac:	4252      	negs	r2, r2
    eeae:	18a4      	adds	r4, r4, r2
    eeb0:	0006      	movs	r6, r0
    eeb2:	e678      	b.n	eba6 <__aeabi_dadd+0x1ce>
    eeb4:	4327      	orrs	r7, r4
    eeb6:	1e7c      	subs	r4, r7, #1
    eeb8:	41a7      	sbcs	r7, r4
    eeba:	2400      	movs	r4, #0
    eebc:	e737      	b.n	ed2e <__aeabi_dadd+0x356>
    eebe:	4e4c      	ldr	r6, [pc, #304]	; (eff0 <__aeabi_dadd+0x618>)
    eec0:	42b0      	cmp	r0, r6
    eec2:	d036      	beq.n	ef32 <__aeabi_dadd+0x55a>
    eec4:	2680      	movs	r6, #128	; 0x80
    eec6:	425b      	negs	r3, r3
    eec8:	0436      	lsls	r6, r6, #16
    eeca:	469a      	mov	sl, r3
    eecc:	4334      	orrs	r4, r6
    eece:	e7cf      	b.n	ee70 <__aeabi_dadd+0x498>
    eed0:	0018      	movs	r0, r3
    eed2:	4310      	orrs	r0, r2
    eed4:	d100      	bne.n	eed8 <__aeabi_dadd+0x500>
    eed6:	e603      	b.n	eae0 <__aeabi_dadd+0x108>
    eed8:	1ab8      	subs	r0, r7, r2
    eeda:	4684      	mov	ip, r0
    eedc:	4567      	cmp	r7, ip
    eede:	41ad      	sbcs	r5, r5
    eee0:	1ae0      	subs	r0, r4, r3
    eee2:	426d      	negs	r5, r5
    eee4:	1b40      	subs	r0, r0, r5
    eee6:	0205      	lsls	r5, r0, #8
    eee8:	d400      	bmi.n	eeec <__aeabi_dadd+0x514>
    eeea:	e62c      	b.n	eb46 <__aeabi_dadd+0x16e>
    eeec:	1bd7      	subs	r7, r2, r7
    eeee:	42ba      	cmp	r2, r7
    eef0:	4192      	sbcs	r2, r2
    eef2:	1b1c      	subs	r4, r3, r4
    eef4:	4252      	negs	r2, r2
    eef6:	1aa4      	subs	r4, r4, r2
    eef8:	46d8      	mov	r8, fp
    eefa:	e5f1      	b.n	eae0 <__aeabi_dadd+0x108>
    eefc:	0018      	movs	r0, r3
    eefe:	4310      	orrs	r0, r2
    ef00:	d100      	bne.n	ef04 <__aeabi_dadd+0x52c>
    ef02:	e763      	b.n	edcc <__aeabi_dadd+0x3f4>
    ef04:	08f8      	lsrs	r0, r7, #3
    ef06:	0767      	lsls	r7, r4, #29
    ef08:	4307      	orrs	r7, r0
    ef0a:	2080      	movs	r0, #128	; 0x80
    ef0c:	08e4      	lsrs	r4, r4, #3
    ef0e:	0300      	lsls	r0, r0, #12
    ef10:	4204      	tst	r4, r0
    ef12:	d008      	beq.n	ef26 <__aeabi_dadd+0x54e>
    ef14:	08dd      	lsrs	r5, r3, #3
    ef16:	4205      	tst	r5, r0
    ef18:	d105      	bne.n	ef26 <__aeabi_dadd+0x54e>
    ef1a:	08d2      	lsrs	r2, r2, #3
    ef1c:	0759      	lsls	r1, r3, #29
    ef1e:	4311      	orrs	r1, r2
    ef20:	000f      	movs	r7, r1
    ef22:	002c      	movs	r4, r5
    ef24:	46d8      	mov	r8, fp
    ef26:	0f7b      	lsrs	r3, r7, #29
    ef28:	00e4      	lsls	r4, r4, #3
    ef2a:	431c      	orrs	r4, r3
    ef2c:	00ff      	lsls	r7, r7, #3
    ef2e:	4e30      	ldr	r6, [pc, #192]	; (eff0 <__aeabi_dadd+0x618>)
    ef30:	e5d6      	b.n	eae0 <__aeabi_dadd+0x108>
    ef32:	000c      	movs	r4, r1
    ef34:	0017      	movs	r7, r2
    ef36:	0006      	movs	r6, r0
    ef38:	e5d2      	b.n	eae0 <__aeabi_dadd+0x108>
    ef3a:	2b00      	cmp	r3, #0
    ef3c:	d038      	beq.n	efb0 <__aeabi_dadd+0x5d8>
    ef3e:	000b      	movs	r3, r1
    ef40:	4313      	orrs	r3, r2
    ef42:	d100      	bne.n	ef46 <__aeabi_dadd+0x56e>
    ef44:	e742      	b.n	edcc <__aeabi_dadd+0x3f4>
    ef46:	08f8      	lsrs	r0, r7, #3
    ef48:	0767      	lsls	r7, r4, #29
    ef4a:	4307      	orrs	r7, r0
    ef4c:	2080      	movs	r0, #128	; 0x80
    ef4e:	08e4      	lsrs	r4, r4, #3
    ef50:	0300      	lsls	r0, r0, #12
    ef52:	4204      	tst	r4, r0
    ef54:	d0e7      	beq.n	ef26 <__aeabi_dadd+0x54e>
    ef56:	08cb      	lsrs	r3, r1, #3
    ef58:	4203      	tst	r3, r0
    ef5a:	d1e4      	bne.n	ef26 <__aeabi_dadd+0x54e>
    ef5c:	08d2      	lsrs	r2, r2, #3
    ef5e:	0749      	lsls	r1, r1, #29
    ef60:	4311      	orrs	r1, r2
    ef62:	000f      	movs	r7, r1
    ef64:	001c      	movs	r4, r3
    ef66:	e7de      	b.n	ef26 <__aeabi_dadd+0x54e>
    ef68:	2700      	movs	r7, #0
    ef6a:	2400      	movs	r4, #0
    ef6c:	e5d5      	b.n	eb1a <__aeabi_dadd+0x142>
    ef6e:	2100      	movs	r1, #0
    ef70:	e76b      	b.n	ee4a <__aeabi_dadd+0x472>
    ef72:	2500      	movs	r5, #0
    ef74:	2700      	movs	r7, #0
    ef76:	e5f3      	b.n	eb60 <__aeabi_dadd+0x188>
    ef78:	464e      	mov	r6, r9
    ef7a:	0025      	movs	r5, r4
    ef7c:	3e20      	subs	r6, #32
    ef7e:	40f5      	lsrs	r5, r6
    ef80:	464b      	mov	r3, r9
    ef82:	002e      	movs	r6, r5
    ef84:	2b20      	cmp	r3, #32
    ef86:	d02d      	beq.n	efe4 <__aeabi_dadd+0x60c>
    ef88:	2540      	movs	r5, #64	; 0x40
    ef8a:	1aed      	subs	r5, r5, r3
    ef8c:	40ac      	lsls	r4, r5
    ef8e:	4327      	orrs	r7, r4
    ef90:	1e7c      	subs	r4, r7, #1
    ef92:	41a7      	sbcs	r7, r4
    ef94:	2400      	movs	r4, #0
    ef96:	4337      	orrs	r7, r6
    ef98:	e6c9      	b.n	ed2e <__aeabi_dadd+0x356>
    ef9a:	2480      	movs	r4, #128	; 0x80
    ef9c:	2500      	movs	r5, #0
    ef9e:	0324      	lsls	r4, r4, #12
    efa0:	4e13      	ldr	r6, [pc, #76]	; (eff0 <__aeabi_dadd+0x618>)
    efa2:	2700      	movs	r7, #0
    efa4:	e5dc      	b.n	eb60 <__aeabi_dadd+0x188>
    efa6:	4327      	orrs	r7, r4
    efa8:	1e7c      	subs	r4, r7, #1
    efaa:	41a7      	sbcs	r7, r4
    efac:	2400      	movs	r4, #0
    efae:	e779      	b.n	eea4 <__aeabi_dadd+0x4cc>
    efb0:	000c      	movs	r4, r1
    efb2:	0017      	movs	r7, r2
    efb4:	4e0e      	ldr	r6, [pc, #56]	; (eff0 <__aeabi_dadd+0x618>)
    efb6:	e593      	b.n	eae0 <__aeabi_dadd+0x108>
    efb8:	000c      	movs	r4, r1
    efba:	0017      	movs	r7, r2
    efbc:	e590      	b.n	eae0 <__aeabi_dadd+0x108>
    efbe:	4656      	mov	r6, sl
    efc0:	0023      	movs	r3, r4
    efc2:	3e20      	subs	r6, #32
    efc4:	40f3      	lsrs	r3, r6
    efc6:	4699      	mov	r9, r3
    efc8:	4653      	mov	r3, sl
    efca:	2b20      	cmp	r3, #32
    efcc:	d00e      	beq.n	efec <__aeabi_dadd+0x614>
    efce:	2340      	movs	r3, #64	; 0x40
    efd0:	4656      	mov	r6, sl
    efd2:	1b9b      	subs	r3, r3, r6
    efd4:	409c      	lsls	r4, r3
    efd6:	4327      	orrs	r7, r4
    efd8:	1e7c      	subs	r4, r7, #1
    efda:	41a7      	sbcs	r7, r4
    efdc:	464b      	mov	r3, r9
    efde:	2400      	movs	r4, #0
    efe0:	431f      	orrs	r7, r3
    efe2:	e75f      	b.n	eea4 <__aeabi_dadd+0x4cc>
    efe4:	2400      	movs	r4, #0
    efe6:	e7d2      	b.n	ef8e <__aeabi_dadd+0x5b6>
    efe8:	0017      	movs	r7, r2
    efea:	e5b2      	b.n	eb52 <__aeabi_dadd+0x17a>
    efec:	2400      	movs	r4, #0
    efee:	e7f2      	b.n	efd6 <__aeabi_dadd+0x5fe>
    eff0:	000007ff 	.word	0x000007ff
    eff4:	ff7fffff 	.word	0xff7fffff

0000eff8 <__aeabi_ddiv>:
    eff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    effa:	4657      	mov	r7, sl
    effc:	4645      	mov	r5, r8
    effe:	46de      	mov	lr, fp
    f000:	464e      	mov	r6, r9
    f002:	b5e0      	push	{r5, r6, r7, lr}
    f004:	004c      	lsls	r4, r1, #1
    f006:	030e      	lsls	r6, r1, #12
    f008:	b087      	sub	sp, #28
    f00a:	4683      	mov	fp, r0
    f00c:	4692      	mov	sl, r2
    f00e:	001d      	movs	r5, r3
    f010:	4680      	mov	r8, r0
    f012:	0b36      	lsrs	r6, r6, #12
    f014:	0d64      	lsrs	r4, r4, #21
    f016:	0fcf      	lsrs	r7, r1, #31
    f018:	2c00      	cmp	r4, #0
    f01a:	d04f      	beq.n	f0bc <__aeabi_ddiv+0xc4>
    f01c:	4b6f      	ldr	r3, [pc, #444]	; (f1dc <__aeabi_ddiv+0x1e4>)
    f01e:	429c      	cmp	r4, r3
    f020:	d035      	beq.n	f08e <__aeabi_ddiv+0x96>
    f022:	2380      	movs	r3, #128	; 0x80
    f024:	0f42      	lsrs	r2, r0, #29
    f026:	041b      	lsls	r3, r3, #16
    f028:	00f6      	lsls	r6, r6, #3
    f02a:	4313      	orrs	r3, r2
    f02c:	4333      	orrs	r3, r6
    f02e:	4699      	mov	r9, r3
    f030:	00c3      	lsls	r3, r0, #3
    f032:	4698      	mov	r8, r3
    f034:	4b6a      	ldr	r3, [pc, #424]	; (f1e0 <__aeabi_ddiv+0x1e8>)
    f036:	2600      	movs	r6, #0
    f038:	469c      	mov	ip, r3
    f03a:	2300      	movs	r3, #0
    f03c:	4464      	add	r4, ip
    f03e:	9303      	str	r3, [sp, #12]
    f040:	032b      	lsls	r3, r5, #12
    f042:	0b1b      	lsrs	r3, r3, #12
    f044:	469b      	mov	fp, r3
    f046:	006b      	lsls	r3, r5, #1
    f048:	0fed      	lsrs	r5, r5, #31
    f04a:	4650      	mov	r0, sl
    f04c:	0d5b      	lsrs	r3, r3, #21
    f04e:	9501      	str	r5, [sp, #4]
    f050:	d05e      	beq.n	f110 <__aeabi_ddiv+0x118>
    f052:	4a62      	ldr	r2, [pc, #392]	; (f1dc <__aeabi_ddiv+0x1e4>)
    f054:	4293      	cmp	r3, r2
    f056:	d053      	beq.n	f100 <__aeabi_ddiv+0x108>
    f058:	465a      	mov	r2, fp
    f05a:	00d1      	lsls	r1, r2, #3
    f05c:	2280      	movs	r2, #128	; 0x80
    f05e:	0f40      	lsrs	r0, r0, #29
    f060:	0412      	lsls	r2, r2, #16
    f062:	4302      	orrs	r2, r0
    f064:	430a      	orrs	r2, r1
    f066:	4693      	mov	fp, r2
    f068:	4652      	mov	r2, sl
    f06a:	00d1      	lsls	r1, r2, #3
    f06c:	4a5c      	ldr	r2, [pc, #368]	; (f1e0 <__aeabi_ddiv+0x1e8>)
    f06e:	4694      	mov	ip, r2
    f070:	2200      	movs	r2, #0
    f072:	4463      	add	r3, ip
    f074:	0038      	movs	r0, r7
    f076:	4068      	eors	r0, r5
    f078:	4684      	mov	ip, r0
    f07a:	9002      	str	r0, [sp, #8]
    f07c:	1ae4      	subs	r4, r4, r3
    f07e:	4316      	orrs	r6, r2
    f080:	2e0f      	cmp	r6, #15
    f082:	d900      	bls.n	f086 <__aeabi_ddiv+0x8e>
    f084:	e0b4      	b.n	f1f0 <__aeabi_ddiv+0x1f8>
    f086:	4b57      	ldr	r3, [pc, #348]	; (f1e4 <__aeabi_ddiv+0x1ec>)
    f088:	00b6      	lsls	r6, r6, #2
    f08a:	599b      	ldr	r3, [r3, r6]
    f08c:	469f      	mov	pc, r3
    f08e:	0003      	movs	r3, r0
    f090:	4333      	orrs	r3, r6
    f092:	4699      	mov	r9, r3
    f094:	d16c      	bne.n	f170 <__aeabi_ddiv+0x178>
    f096:	2300      	movs	r3, #0
    f098:	4698      	mov	r8, r3
    f09a:	3302      	adds	r3, #2
    f09c:	2608      	movs	r6, #8
    f09e:	9303      	str	r3, [sp, #12]
    f0a0:	e7ce      	b.n	f040 <__aeabi_ddiv+0x48>
    f0a2:	46cb      	mov	fp, r9
    f0a4:	4641      	mov	r1, r8
    f0a6:	9a03      	ldr	r2, [sp, #12]
    f0a8:	9701      	str	r7, [sp, #4]
    f0aa:	2a02      	cmp	r2, #2
    f0ac:	d165      	bne.n	f17a <__aeabi_ddiv+0x182>
    f0ae:	9b01      	ldr	r3, [sp, #4]
    f0b0:	4c4a      	ldr	r4, [pc, #296]	; (f1dc <__aeabi_ddiv+0x1e4>)
    f0b2:	469c      	mov	ip, r3
    f0b4:	2300      	movs	r3, #0
    f0b6:	2200      	movs	r2, #0
    f0b8:	4698      	mov	r8, r3
    f0ba:	e06b      	b.n	f194 <__aeabi_ddiv+0x19c>
    f0bc:	0003      	movs	r3, r0
    f0be:	4333      	orrs	r3, r6
    f0c0:	4699      	mov	r9, r3
    f0c2:	d04e      	beq.n	f162 <__aeabi_ddiv+0x16a>
    f0c4:	2e00      	cmp	r6, #0
    f0c6:	d100      	bne.n	f0ca <__aeabi_ddiv+0xd2>
    f0c8:	e1bc      	b.n	f444 <__aeabi_ddiv+0x44c>
    f0ca:	0030      	movs	r0, r6
    f0cc:	f7ff fbfe 	bl	e8cc <__clzsi2>
    f0d0:	0003      	movs	r3, r0
    f0d2:	3b0b      	subs	r3, #11
    f0d4:	2b1c      	cmp	r3, #28
    f0d6:	dd00      	ble.n	f0da <__aeabi_ddiv+0xe2>
    f0d8:	e1ac      	b.n	f434 <__aeabi_ddiv+0x43c>
    f0da:	221d      	movs	r2, #29
    f0dc:	1ad3      	subs	r3, r2, r3
    f0de:	465a      	mov	r2, fp
    f0e0:	0001      	movs	r1, r0
    f0e2:	40da      	lsrs	r2, r3
    f0e4:	3908      	subs	r1, #8
    f0e6:	408e      	lsls	r6, r1
    f0e8:	0013      	movs	r3, r2
    f0ea:	4333      	orrs	r3, r6
    f0ec:	4699      	mov	r9, r3
    f0ee:	465b      	mov	r3, fp
    f0f0:	408b      	lsls	r3, r1
    f0f2:	4698      	mov	r8, r3
    f0f4:	2300      	movs	r3, #0
    f0f6:	4c3c      	ldr	r4, [pc, #240]	; (f1e8 <__aeabi_ddiv+0x1f0>)
    f0f8:	2600      	movs	r6, #0
    f0fa:	1a24      	subs	r4, r4, r0
    f0fc:	9303      	str	r3, [sp, #12]
    f0fe:	e79f      	b.n	f040 <__aeabi_ddiv+0x48>
    f100:	4651      	mov	r1, sl
    f102:	465a      	mov	r2, fp
    f104:	4311      	orrs	r1, r2
    f106:	d129      	bne.n	f15c <__aeabi_ddiv+0x164>
    f108:	2200      	movs	r2, #0
    f10a:	4693      	mov	fp, r2
    f10c:	3202      	adds	r2, #2
    f10e:	e7b1      	b.n	f074 <__aeabi_ddiv+0x7c>
    f110:	4659      	mov	r1, fp
    f112:	4301      	orrs	r1, r0
    f114:	d01e      	beq.n	f154 <__aeabi_ddiv+0x15c>
    f116:	465b      	mov	r3, fp
    f118:	2b00      	cmp	r3, #0
    f11a:	d100      	bne.n	f11e <__aeabi_ddiv+0x126>
    f11c:	e19e      	b.n	f45c <__aeabi_ddiv+0x464>
    f11e:	4658      	mov	r0, fp
    f120:	f7ff fbd4 	bl	e8cc <__clzsi2>
    f124:	0003      	movs	r3, r0
    f126:	3b0b      	subs	r3, #11
    f128:	2b1c      	cmp	r3, #28
    f12a:	dd00      	ble.n	f12e <__aeabi_ddiv+0x136>
    f12c:	e18f      	b.n	f44e <__aeabi_ddiv+0x456>
    f12e:	0002      	movs	r2, r0
    f130:	4659      	mov	r1, fp
    f132:	3a08      	subs	r2, #8
    f134:	4091      	lsls	r1, r2
    f136:	468b      	mov	fp, r1
    f138:	211d      	movs	r1, #29
    f13a:	1acb      	subs	r3, r1, r3
    f13c:	4651      	mov	r1, sl
    f13e:	40d9      	lsrs	r1, r3
    f140:	000b      	movs	r3, r1
    f142:	4659      	mov	r1, fp
    f144:	430b      	orrs	r3, r1
    f146:	4651      	mov	r1, sl
    f148:	469b      	mov	fp, r3
    f14a:	4091      	lsls	r1, r2
    f14c:	4b26      	ldr	r3, [pc, #152]	; (f1e8 <__aeabi_ddiv+0x1f0>)
    f14e:	2200      	movs	r2, #0
    f150:	1a1b      	subs	r3, r3, r0
    f152:	e78f      	b.n	f074 <__aeabi_ddiv+0x7c>
    f154:	2300      	movs	r3, #0
    f156:	2201      	movs	r2, #1
    f158:	469b      	mov	fp, r3
    f15a:	e78b      	b.n	f074 <__aeabi_ddiv+0x7c>
    f15c:	4651      	mov	r1, sl
    f15e:	2203      	movs	r2, #3
    f160:	e788      	b.n	f074 <__aeabi_ddiv+0x7c>
    f162:	2300      	movs	r3, #0
    f164:	4698      	mov	r8, r3
    f166:	3301      	adds	r3, #1
    f168:	2604      	movs	r6, #4
    f16a:	2400      	movs	r4, #0
    f16c:	9303      	str	r3, [sp, #12]
    f16e:	e767      	b.n	f040 <__aeabi_ddiv+0x48>
    f170:	2303      	movs	r3, #3
    f172:	46b1      	mov	r9, r6
    f174:	9303      	str	r3, [sp, #12]
    f176:	260c      	movs	r6, #12
    f178:	e762      	b.n	f040 <__aeabi_ddiv+0x48>
    f17a:	2a03      	cmp	r2, #3
    f17c:	d100      	bne.n	f180 <__aeabi_ddiv+0x188>
    f17e:	e25c      	b.n	f63a <__aeabi_ddiv+0x642>
    f180:	9b01      	ldr	r3, [sp, #4]
    f182:	2a01      	cmp	r2, #1
    f184:	d000      	beq.n	f188 <__aeabi_ddiv+0x190>
    f186:	e1e4      	b.n	f552 <__aeabi_ddiv+0x55a>
    f188:	4013      	ands	r3, r2
    f18a:	469c      	mov	ip, r3
    f18c:	2300      	movs	r3, #0
    f18e:	2400      	movs	r4, #0
    f190:	2200      	movs	r2, #0
    f192:	4698      	mov	r8, r3
    f194:	2100      	movs	r1, #0
    f196:	0312      	lsls	r2, r2, #12
    f198:	0b13      	lsrs	r3, r2, #12
    f19a:	0d0a      	lsrs	r2, r1, #20
    f19c:	0512      	lsls	r2, r2, #20
    f19e:	431a      	orrs	r2, r3
    f1a0:	0523      	lsls	r3, r4, #20
    f1a2:	4c12      	ldr	r4, [pc, #72]	; (f1ec <__aeabi_ddiv+0x1f4>)
    f1a4:	4640      	mov	r0, r8
    f1a6:	4022      	ands	r2, r4
    f1a8:	4313      	orrs	r3, r2
    f1aa:	4662      	mov	r2, ip
    f1ac:	005b      	lsls	r3, r3, #1
    f1ae:	07d2      	lsls	r2, r2, #31
    f1b0:	085b      	lsrs	r3, r3, #1
    f1b2:	4313      	orrs	r3, r2
    f1b4:	0019      	movs	r1, r3
    f1b6:	b007      	add	sp, #28
    f1b8:	bc3c      	pop	{r2, r3, r4, r5}
    f1ba:	4690      	mov	r8, r2
    f1bc:	4699      	mov	r9, r3
    f1be:	46a2      	mov	sl, r4
    f1c0:	46ab      	mov	fp, r5
    f1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1c4:	2300      	movs	r3, #0
    f1c6:	2280      	movs	r2, #128	; 0x80
    f1c8:	469c      	mov	ip, r3
    f1ca:	0312      	lsls	r2, r2, #12
    f1cc:	4698      	mov	r8, r3
    f1ce:	4c03      	ldr	r4, [pc, #12]	; (f1dc <__aeabi_ddiv+0x1e4>)
    f1d0:	e7e0      	b.n	f194 <__aeabi_ddiv+0x19c>
    f1d2:	2300      	movs	r3, #0
    f1d4:	4c01      	ldr	r4, [pc, #4]	; (f1dc <__aeabi_ddiv+0x1e4>)
    f1d6:	2200      	movs	r2, #0
    f1d8:	4698      	mov	r8, r3
    f1da:	e7db      	b.n	f194 <__aeabi_ddiv+0x19c>
    f1dc:	000007ff 	.word	0x000007ff
    f1e0:	fffffc01 	.word	0xfffffc01
    f1e4:	000161d4 	.word	0x000161d4
    f1e8:	fffffc0d 	.word	0xfffffc0d
    f1ec:	800fffff 	.word	0x800fffff
    f1f0:	45d9      	cmp	r9, fp
    f1f2:	d900      	bls.n	f1f6 <__aeabi_ddiv+0x1fe>
    f1f4:	e139      	b.n	f46a <__aeabi_ddiv+0x472>
    f1f6:	d100      	bne.n	f1fa <__aeabi_ddiv+0x202>
    f1f8:	e134      	b.n	f464 <__aeabi_ddiv+0x46c>
    f1fa:	2300      	movs	r3, #0
    f1fc:	4646      	mov	r6, r8
    f1fe:	464d      	mov	r5, r9
    f200:	469a      	mov	sl, r3
    f202:	3c01      	subs	r4, #1
    f204:	465b      	mov	r3, fp
    f206:	0e0a      	lsrs	r2, r1, #24
    f208:	021b      	lsls	r3, r3, #8
    f20a:	431a      	orrs	r2, r3
    f20c:	020b      	lsls	r3, r1, #8
    f20e:	0c17      	lsrs	r7, r2, #16
    f210:	9303      	str	r3, [sp, #12]
    f212:	0413      	lsls	r3, r2, #16
    f214:	0c1b      	lsrs	r3, r3, #16
    f216:	0039      	movs	r1, r7
    f218:	0028      	movs	r0, r5
    f21a:	4690      	mov	r8, r2
    f21c:	9301      	str	r3, [sp, #4]
    f21e:	f7ff f9a1 	bl	e564 <__udivsi3>
    f222:	0002      	movs	r2, r0
    f224:	9b01      	ldr	r3, [sp, #4]
    f226:	4683      	mov	fp, r0
    f228:	435a      	muls	r2, r3
    f22a:	0028      	movs	r0, r5
    f22c:	0039      	movs	r1, r7
    f22e:	4691      	mov	r9, r2
    f230:	f7ff fa1e 	bl	e670 <__aeabi_uidivmod>
    f234:	0c35      	lsrs	r5, r6, #16
    f236:	0409      	lsls	r1, r1, #16
    f238:	430d      	orrs	r5, r1
    f23a:	45a9      	cmp	r9, r5
    f23c:	d90d      	bls.n	f25a <__aeabi_ddiv+0x262>
    f23e:	465b      	mov	r3, fp
    f240:	4445      	add	r5, r8
    f242:	3b01      	subs	r3, #1
    f244:	45a8      	cmp	r8, r5
    f246:	d900      	bls.n	f24a <__aeabi_ddiv+0x252>
    f248:	e13a      	b.n	f4c0 <__aeabi_ddiv+0x4c8>
    f24a:	45a9      	cmp	r9, r5
    f24c:	d800      	bhi.n	f250 <__aeabi_ddiv+0x258>
    f24e:	e137      	b.n	f4c0 <__aeabi_ddiv+0x4c8>
    f250:	2302      	movs	r3, #2
    f252:	425b      	negs	r3, r3
    f254:	469c      	mov	ip, r3
    f256:	4445      	add	r5, r8
    f258:	44e3      	add	fp, ip
    f25a:	464b      	mov	r3, r9
    f25c:	1aeb      	subs	r3, r5, r3
    f25e:	0039      	movs	r1, r7
    f260:	0018      	movs	r0, r3
    f262:	9304      	str	r3, [sp, #16]
    f264:	f7ff f97e 	bl	e564 <__udivsi3>
    f268:	9b01      	ldr	r3, [sp, #4]
    f26a:	0005      	movs	r5, r0
    f26c:	4343      	muls	r3, r0
    f26e:	0039      	movs	r1, r7
    f270:	9804      	ldr	r0, [sp, #16]
    f272:	4699      	mov	r9, r3
    f274:	f7ff f9fc 	bl	e670 <__aeabi_uidivmod>
    f278:	0433      	lsls	r3, r6, #16
    f27a:	0409      	lsls	r1, r1, #16
    f27c:	0c1b      	lsrs	r3, r3, #16
    f27e:	430b      	orrs	r3, r1
    f280:	4599      	cmp	r9, r3
    f282:	d909      	bls.n	f298 <__aeabi_ddiv+0x2a0>
    f284:	4443      	add	r3, r8
    f286:	1e6a      	subs	r2, r5, #1
    f288:	4598      	cmp	r8, r3
    f28a:	d900      	bls.n	f28e <__aeabi_ddiv+0x296>
    f28c:	e11a      	b.n	f4c4 <__aeabi_ddiv+0x4cc>
    f28e:	4599      	cmp	r9, r3
    f290:	d800      	bhi.n	f294 <__aeabi_ddiv+0x29c>
    f292:	e117      	b.n	f4c4 <__aeabi_ddiv+0x4cc>
    f294:	3d02      	subs	r5, #2
    f296:	4443      	add	r3, r8
    f298:	464a      	mov	r2, r9
    f29a:	1a9b      	subs	r3, r3, r2
    f29c:	465a      	mov	r2, fp
    f29e:	0412      	lsls	r2, r2, #16
    f2a0:	432a      	orrs	r2, r5
    f2a2:	9903      	ldr	r1, [sp, #12]
    f2a4:	4693      	mov	fp, r2
    f2a6:	0c10      	lsrs	r0, r2, #16
    f2a8:	0c0a      	lsrs	r2, r1, #16
    f2aa:	4691      	mov	r9, r2
    f2ac:	0409      	lsls	r1, r1, #16
    f2ae:	465a      	mov	r2, fp
    f2b0:	0c09      	lsrs	r1, r1, #16
    f2b2:	464e      	mov	r6, r9
    f2b4:	000d      	movs	r5, r1
    f2b6:	0412      	lsls	r2, r2, #16
    f2b8:	0c12      	lsrs	r2, r2, #16
    f2ba:	4345      	muls	r5, r0
    f2bc:	9105      	str	r1, [sp, #20]
    f2be:	4351      	muls	r1, r2
    f2c0:	4372      	muls	r2, r6
    f2c2:	4370      	muls	r0, r6
    f2c4:	1952      	adds	r2, r2, r5
    f2c6:	0c0e      	lsrs	r6, r1, #16
    f2c8:	18b2      	adds	r2, r6, r2
    f2ca:	4295      	cmp	r5, r2
    f2cc:	d903      	bls.n	f2d6 <__aeabi_ddiv+0x2de>
    f2ce:	2580      	movs	r5, #128	; 0x80
    f2d0:	026d      	lsls	r5, r5, #9
    f2d2:	46ac      	mov	ip, r5
    f2d4:	4460      	add	r0, ip
    f2d6:	0c15      	lsrs	r5, r2, #16
    f2d8:	0409      	lsls	r1, r1, #16
    f2da:	0412      	lsls	r2, r2, #16
    f2dc:	0c09      	lsrs	r1, r1, #16
    f2de:	1828      	adds	r0, r5, r0
    f2e0:	1852      	adds	r2, r2, r1
    f2e2:	4283      	cmp	r3, r0
    f2e4:	d200      	bcs.n	f2e8 <__aeabi_ddiv+0x2f0>
    f2e6:	e0ce      	b.n	f486 <__aeabi_ddiv+0x48e>
    f2e8:	d100      	bne.n	f2ec <__aeabi_ddiv+0x2f4>
    f2ea:	e0c8      	b.n	f47e <__aeabi_ddiv+0x486>
    f2ec:	1a1d      	subs	r5, r3, r0
    f2ee:	4653      	mov	r3, sl
    f2f0:	1a9e      	subs	r6, r3, r2
    f2f2:	45b2      	cmp	sl, r6
    f2f4:	4192      	sbcs	r2, r2
    f2f6:	4252      	negs	r2, r2
    f2f8:	1aab      	subs	r3, r5, r2
    f2fa:	469a      	mov	sl, r3
    f2fc:	4598      	cmp	r8, r3
    f2fe:	d100      	bne.n	f302 <__aeabi_ddiv+0x30a>
    f300:	e117      	b.n	f532 <__aeabi_ddiv+0x53a>
    f302:	0039      	movs	r1, r7
    f304:	0018      	movs	r0, r3
    f306:	f7ff f92d 	bl	e564 <__udivsi3>
    f30a:	9b01      	ldr	r3, [sp, #4]
    f30c:	0005      	movs	r5, r0
    f30e:	4343      	muls	r3, r0
    f310:	0039      	movs	r1, r7
    f312:	4650      	mov	r0, sl
    f314:	9304      	str	r3, [sp, #16]
    f316:	f7ff f9ab 	bl	e670 <__aeabi_uidivmod>
    f31a:	9804      	ldr	r0, [sp, #16]
    f31c:	040b      	lsls	r3, r1, #16
    f31e:	0c31      	lsrs	r1, r6, #16
    f320:	4319      	orrs	r1, r3
    f322:	4288      	cmp	r0, r1
    f324:	d909      	bls.n	f33a <__aeabi_ddiv+0x342>
    f326:	4441      	add	r1, r8
    f328:	1e6b      	subs	r3, r5, #1
    f32a:	4588      	cmp	r8, r1
    f32c:	d900      	bls.n	f330 <__aeabi_ddiv+0x338>
    f32e:	e107      	b.n	f540 <__aeabi_ddiv+0x548>
    f330:	4288      	cmp	r0, r1
    f332:	d800      	bhi.n	f336 <__aeabi_ddiv+0x33e>
    f334:	e104      	b.n	f540 <__aeabi_ddiv+0x548>
    f336:	3d02      	subs	r5, #2
    f338:	4441      	add	r1, r8
    f33a:	9b04      	ldr	r3, [sp, #16]
    f33c:	1acb      	subs	r3, r1, r3
    f33e:	0018      	movs	r0, r3
    f340:	0039      	movs	r1, r7
    f342:	9304      	str	r3, [sp, #16]
    f344:	f7ff f90e 	bl	e564 <__udivsi3>
    f348:	9b01      	ldr	r3, [sp, #4]
    f34a:	4682      	mov	sl, r0
    f34c:	4343      	muls	r3, r0
    f34e:	0039      	movs	r1, r7
    f350:	9804      	ldr	r0, [sp, #16]
    f352:	9301      	str	r3, [sp, #4]
    f354:	f7ff f98c 	bl	e670 <__aeabi_uidivmod>
    f358:	9801      	ldr	r0, [sp, #4]
    f35a:	040b      	lsls	r3, r1, #16
    f35c:	0431      	lsls	r1, r6, #16
    f35e:	0c09      	lsrs	r1, r1, #16
    f360:	4319      	orrs	r1, r3
    f362:	4288      	cmp	r0, r1
    f364:	d90d      	bls.n	f382 <__aeabi_ddiv+0x38a>
    f366:	4653      	mov	r3, sl
    f368:	4441      	add	r1, r8
    f36a:	3b01      	subs	r3, #1
    f36c:	4588      	cmp	r8, r1
    f36e:	d900      	bls.n	f372 <__aeabi_ddiv+0x37a>
    f370:	e0e8      	b.n	f544 <__aeabi_ddiv+0x54c>
    f372:	4288      	cmp	r0, r1
    f374:	d800      	bhi.n	f378 <__aeabi_ddiv+0x380>
    f376:	e0e5      	b.n	f544 <__aeabi_ddiv+0x54c>
    f378:	2302      	movs	r3, #2
    f37a:	425b      	negs	r3, r3
    f37c:	469c      	mov	ip, r3
    f37e:	4441      	add	r1, r8
    f380:	44e2      	add	sl, ip
    f382:	9b01      	ldr	r3, [sp, #4]
    f384:	042d      	lsls	r5, r5, #16
    f386:	1ace      	subs	r6, r1, r3
    f388:	4651      	mov	r1, sl
    f38a:	4329      	orrs	r1, r5
    f38c:	9d05      	ldr	r5, [sp, #20]
    f38e:	464f      	mov	r7, r9
    f390:	002a      	movs	r2, r5
    f392:	040b      	lsls	r3, r1, #16
    f394:	0c08      	lsrs	r0, r1, #16
    f396:	0c1b      	lsrs	r3, r3, #16
    f398:	435a      	muls	r2, r3
    f39a:	4345      	muls	r5, r0
    f39c:	437b      	muls	r3, r7
    f39e:	4378      	muls	r0, r7
    f3a0:	195b      	adds	r3, r3, r5
    f3a2:	0c17      	lsrs	r7, r2, #16
    f3a4:	18fb      	adds	r3, r7, r3
    f3a6:	429d      	cmp	r5, r3
    f3a8:	d903      	bls.n	f3b2 <__aeabi_ddiv+0x3ba>
    f3aa:	2580      	movs	r5, #128	; 0x80
    f3ac:	026d      	lsls	r5, r5, #9
    f3ae:	46ac      	mov	ip, r5
    f3b0:	4460      	add	r0, ip
    f3b2:	0c1d      	lsrs	r5, r3, #16
    f3b4:	0412      	lsls	r2, r2, #16
    f3b6:	041b      	lsls	r3, r3, #16
    f3b8:	0c12      	lsrs	r2, r2, #16
    f3ba:	1828      	adds	r0, r5, r0
    f3bc:	189b      	adds	r3, r3, r2
    f3be:	4286      	cmp	r6, r0
    f3c0:	d200      	bcs.n	f3c4 <__aeabi_ddiv+0x3cc>
    f3c2:	e093      	b.n	f4ec <__aeabi_ddiv+0x4f4>
    f3c4:	d100      	bne.n	f3c8 <__aeabi_ddiv+0x3d0>
    f3c6:	e08e      	b.n	f4e6 <__aeabi_ddiv+0x4ee>
    f3c8:	2301      	movs	r3, #1
    f3ca:	4319      	orrs	r1, r3
    f3cc:	4ba0      	ldr	r3, [pc, #640]	; (f650 <__aeabi_ddiv+0x658>)
    f3ce:	18e3      	adds	r3, r4, r3
    f3d0:	2b00      	cmp	r3, #0
    f3d2:	dc00      	bgt.n	f3d6 <__aeabi_ddiv+0x3de>
    f3d4:	e099      	b.n	f50a <__aeabi_ddiv+0x512>
    f3d6:	074a      	lsls	r2, r1, #29
    f3d8:	d000      	beq.n	f3dc <__aeabi_ddiv+0x3e4>
    f3da:	e09e      	b.n	f51a <__aeabi_ddiv+0x522>
    f3dc:	465a      	mov	r2, fp
    f3de:	01d2      	lsls	r2, r2, #7
    f3e0:	d506      	bpl.n	f3f0 <__aeabi_ddiv+0x3f8>
    f3e2:	465a      	mov	r2, fp
    f3e4:	4b9b      	ldr	r3, [pc, #620]	; (f654 <__aeabi_ddiv+0x65c>)
    f3e6:	401a      	ands	r2, r3
    f3e8:	2380      	movs	r3, #128	; 0x80
    f3ea:	4693      	mov	fp, r2
    f3ec:	00db      	lsls	r3, r3, #3
    f3ee:	18e3      	adds	r3, r4, r3
    f3f0:	4a99      	ldr	r2, [pc, #612]	; (f658 <__aeabi_ddiv+0x660>)
    f3f2:	4293      	cmp	r3, r2
    f3f4:	dd68      	ble.n	f4c8 <__aeabi_ddiv+0x4d0>
    f3f6:	2301      	movs	r3, #1
    f3f8:	9a02      	ldr	r2, [sp, #8]
    f3fa:	4c98      	ldr	r4, [pc, #608]	; (f65c <__aeabi_ddiv+0x664>)
    f3fc:	401a      	ands	r2, r3
    f3fe:	2300      	movs	r3, #0
    f400:	4694      	mov	ip, r2
    f402:	4698      	mov	r8, r3
    f404:	2200      	movs	r2, #0
    f406:	e6c5      	b.n	f194 <__aeabi_ddiv+0x19c>
    f408:	2280      	movs	r2, #128	; 0x80
    f40a:	464b      	mov	r3, r9
    f40c:	0312      	lsls	r2, r2, #12
    f40e:	4213      	tst	r3, r2
    f410:	d00a      	beq.n	f428 <__aeabi_ddiv+0x430>
    f412:	465b      	mov	r3, fp
    f414:	4213      	tst	r3, r2
    f416:	d106      	bne.n	f426 <__aeabi_ddiv+0x42e>
    f418:	431a      	orrs	r2, r3
    f41a:	0312      	lsls	r2, r2, #12
    f41c:	0b12      	lsrs	r2, r2, #12
    f41e:	46ac      	mov	ip, r5
    f420:	4688      	mov	r8, r1
    f422:	4c8e      	ldr	r4, [pc, #568]	; (f65c <__aeabi_ddiv+0x664>)
    f424:	e6b6      	b.n	f194 <__aeabi_ddiv+0x19c>
    f426:	464b      	mov	r3, r9
    f428:	431a      	orrs	r2, r3
    f42a:	0312      	lsls	r2, r2, #12
    f42c:	0b12      	lsrs	r2, r2, #12
    f42e:	46bc      	mov	ip, r7
    f430:	4c8a      	ldr	r4, [pc, #552]	; (f65c <__aeabi_ddiv+0x664>)
    f432:	e6af      	b.n	f194 <__aeabi_ddiv+0x19c>
    f434:	0003      	movs	r3, r0
    f436:	465a      	mov	r2, fp
    f438:	3b28      	subs	r3, #40	; 0x28
    f43a:	409a      	lsls	r2, r3
    f43c:	2300      	movs	r3, #0
    f43e:	4691      	mov	r9, r2
    f440:	4698      	mov	r8, r3
    f442:	e657      	b.n	f0f4 <__aeabi_ddiv+0xfc>
    f444:	4658      	mov	r0, fp
    f446:	f7ff fa41 	bl	e8cc <__clzsi2>
    f44a:	3020      	adds	r0, #32
    f44c:	e640      	b.n	f0d0 <__aeabi_ddiv+0xd8>
    f44e:	0003      	movs	r3, r0
    f450:	4652      	mov	r2, sl
    f452:	3b28      	subs	r3, #40	; 0x28
    f454:	409a      	lsls	r2, r3
    f456:	2100      	movs	r1, #0
    f458:	4693      	mov	fp, r2
    f45a:	e677      	b.n	f14c <__aeabi_ddiv+0x154>
    f45c:	f7ff fa36 	bl	e8cc <__clzsi2>
    f460:	3020      	adds	r0, #32
    f462:	e65f      	b.n	f124 <__aeabi_ddiv+0x12c>
    f464:	4588      	cmp	r8, r1
    f466:	d200      	bcs.n	f46a <__aeabi_ddiv+0x472>
    f468:	e6c7      	b.n	f1fa <__aeabi_ddiv+0x202>
    f46a:	464b      	mov	r3, r9
    f46c:	07de      	lsls	r6, r3, #31
    f46e:	085d      	lsrs	r5, r3, #1
    f470:	4643      	mov	r3, r8
    f472:	085b      	lsrs	r3, r3, #1
    f474:	431e      	orrs	r6, r3
    f476:	4643      	mov	r3, r8
    f478:	07db      	lsls	r3, r3, #31
    f47a:	469a      	mov	sl, r3
    f47c:	e6c2      	b.n	f204 <__aeabi_ddiv+0x20c>
    f47e:	2500      	movs	r5, #0
    f480:	4592      	cmp	sl, r2
    f482:	d300      	bcc.n	f486 <__aeabi_ddiv+0x48e>
    f484:	e733      	b.n	f2ee <__aeabi_ddiv+0x2f6>
    f486:	9e03      	ldr	r6, [sp, #12]
    f488:	4659      	mov	r1, fp
    f48a:	46b4      	mov	ip, r6
    f48c:	44e2      	add	sl, ip
    f48e:	45b2      	cmp	sl, r6
    f490:	41ad      	sbcs	r5, r5
    f492:	426d      	negs	r5, r5
    f494:	4445      	add	r5, r8
    f496:	18eb      	adds	r3, r5, r3
    f498:	3901      	subs	r1, #1
    f49a:	4598      	cmp	r8, r3
    f49c:	d207      	bcs.n	f4ae <__aeabi_ddiv+0x4b6>
    f49e:	4298      	cmp	r0, r3
    f4a0:	d900      	bls.n	f4a4 <__aeabi_ddiv+0x4ac>
    f4a2:	e07f      	b.n	f5a4 <__aeabi_ddiv+0x5ac>
    f4a4:	d100      	bne.n	f4a8 <__aeabi_ddiv+0x4b0>
    f4a6:	e0bc      	b.n	f622 <__aeabi_ddiv+0x62a>
    f4a8:	1a1d      	subs	r5, r3, r0
    f4aa:	468b      	mov	fp, r1
    f4ac:	e71f      	b.n	f2ee <__aeabi_ddiv+0x2f6>
    f4ae:	4598      	cmp	r8, r3
    f4b0:	d1fa      	bne.n	f4a8 <__aeabi_ddiv+0x4b0>
    f4b2:	9d03      	ldr	r5, [sp, #12]
    f4b4:	4555      	cmp	r5, sl
    f4b6:	d9f2      	bls.n	f49e <__aeabi_ddiv+0x4a6>
    f4b8:	4643      	mov	r3, r8
    f4ba:	468b      	mov	fp, r1
    f4bc:	1a1d      	subs	r5, r3, r0
    f4be:	e716      	b.n	f2ee <__aeabi_ddiv+0x2f6>
    f4c0:	469b      	mov	fp, r3
    f4c2:	e6ca      	b.n	f25a <__aeabi_ddiv+0x262>
    f4c4:	0015      	movs	r5, r2
    f4c6:	e6e7      	b.n	f298 <__aeabi_ddiv+0x2a0>
    f4c8:	465a      	mov	r2, fp
    f4ca:	08c9      	lsrs	r1, r1, #3
    f4cc:	0752      	lsls	r2, r2, #29
    f4ce:	430a      	orrs	r2, r1
    f4d0:	055b      	lsls	r3, r3, #21
    f4d2:	4690      	mov	r8, r2
    f4d4:	0d5c      	lsrs	r4, r3, #21
    f4d6:	465a      	mov	r2, fp
    f4d8:	2301      	movs	r3, #1
    f4da:	9902      	ldr	r1, [sp, #8]
    f4dc:	0252      	lsls	r2, r2, #9
    f4de:	4019      	ands	r1, r3
    f4e0:	0b12      	lsrs	r2, r2, #12
    f4e2:	468c      	mov	ip, r1
    f4e4:	e656      	b.n	f194 <__aeabi_ddiv+0x19c>
    f4e6:	2b00      	cmp	r3, #0
    f4e8:	d100      	bne.n	f4ec <__aeabi_ddiv+0x4f4>
    f4ea:	e76f      	b.n	f3cc <__aeabi_ddiv+0x3d4>
    f4ec:	4446      	add	r6, r8
    f4ee:	1e4a      	subs	r2, r1, #1
    f4f0:	45b0      	cmp	r8, r6
    f4f2:	d929      	bls.n	f548 <__aeabi_ddiv+0x550>
    f4f4:	0011      	movs	r1, r2
    f4f6:	4286      	cmp	r6, r0
    f4f8:	d000      	beq.n	f4fc <__aeabi_ddiv+0x504>
    f4fa:	e765      	b.n	f3c8 <__aeabi_ddiv+0x3d0>
    f4fc:	9a03      	ldr	r2, [sp, #12]
    f4fe:	4293      	cmp	r3, r2
    f500:	d000      	beq.n	f504 <__aeabi_ddiv+0x50c>
    f502:	e761      	b.n	f3c8 <__aeabi_ddiv+0x3d0>
    f504:	e762      	b.n	f3cc <__aeabi_ddiv+0x3d4>
    f506:	2101      	movs	r1, #1
    f508:	4249      	negs	r1, r1
    f50a:	2001      	movs	r0, #1
    f50c:	1ac2      	subs	r2, r0, r3
    f50e:	2a38      	cmp	r2, #56	; 0x38
    f510:	dd21      	ble.n	f556 <__aeabi_ddiv+0x55e>
    f512:	9b02      	ldr	r3, [sp, #8]
    f514:	4003      	ands	r3, r0
    f516:	469c      	mov	ip, r3
    f518:	e638      	b.n	f18c <__aeabi_ddiv+0x194>
    f51a:	220f      	movs	r2, #15
    f51c:	400a      	ands	r2, r1
    f51e:	2a04      	cmp	r2, #4
    f520:	d100      	bne.n	f524 <__aeabi_ddiv+0x52c>
    f522:	e75b      	b.n	f3dc <__aeabi_ddiv+0x3e4>
    f524:	000a      	movs	r2, r1
    f526:	1d11      	adds	r1, r2, #4
    f528:	4291      	cmp	r1, r2
    f52a:	4192      	sbcs	r2, r2
    f52c:	4252      	negs	r2, r2
    f52e:	4493      	add	fp, r2
    f530:	e754      	b.n	f3dc <__aeabi_ddiv+0x3e4>
    f532:	4b47      	ldr	r3, [pc, #284]	; (f650 <__aeabi_ddiv+0x658>)
    f534:	18e3      	adds	r3, r4, r3
    f536:	2b00      	cmp	r3, #0
    f538:	dde5      	ble.n	f506 <__aeabi_ddiv+0x50e>
    f53a:	2201      	movs	r2, #1
    f53c:	4252      	negs	r2, r2
    f53e:	e7f2      	b.n	f526 <__aeabi_ddiv+0x52e>
    f540:	001d      	movs	r5, r3
    f542:	e6fa      	b.n	f33a <__aeabi_ddiv+0x342>
    f544:	469a      	mov	sl, r3
    f546:	e71c      	b.n	f382 <__aeabi_ddiv+0x38a>
    f548:	42b0      	cmp	r0, r6
    f54a:	d839      	bhi.n	f5c0 <__aeabi_ddiv+0x5c8>
    f54c:	d06e      	beq.n	f62c <__aeabi_ddiv+0x634>
    f54e:	0011      	movs	r1, r2
    f550:	e73a      	b.n	f3c8 <__aeabi_ddiv+0x3d0>
    f552:	9302      	str	r3, [sp, #8]
    f554:	e73a      	b.n	f3cc <__aeabi_ddiv+0x3d4>
    f556:	2a1f      	cmp	r2, #31
    f558:	dc3c      	bgt.n	f5d4 <__aeabi_ddiv+0x5dc>
    f55a:	2320      	movs	r3, #32
    f55c:	1a9b      	subs	r3, r3, r2
    f55e:	000c      	movs	r4, r1
    f560:	4658      	mov	r0, fp
    f562:	4099      	lsls	r1, r3
    f564:	4098      	lsls	r0, r3
    f566:	1e4b      	subs	r3, r1, #1
    f568:	4199      	sbcs	r1, r3
    f56a:	465b      	mov	r3, fp
    f56c:	40d4      	lsrs	r4, r2
    f56e:	40d3      	lsrs	r3, r2
    f570:	4320      	orrs	r0, r4
    f572:	4308      	orrs	r0, r1
    f574:	001a      	movs	r2, r3
    f576:	0743      	lsls	r3, r0, #29
    f578:	d009      	beq.n	f58e <__aeabi_ddiv+0x596>
    f57a:	230f      	movs	r3, #15
    f57c:	4003      	ands	r3, r0
    f57e:	2b04      	cmp	r3, #4
    f580:	d005      	beq.n	f58e <__aeabi_ddiv+0x596>
    f582:	0001      	movs	r1, r0
    f584:	1d08      	adds	r0, r1, #4
    f586:	4288      	cmp	r0, r1
    f588:	419b      	sbcs	r3, r3
    f58a:	425b      	negs	r3, r3
    f58c:	18d2      	adds	r2, r2, r3
    f58e:	0213      	lsls	r3, r2, #8
    f590:	d53a      	bpl.n	f608 <__aeabi_ddiv+0x610>
    f592:	2301      	movs	r3, #1
    f594:	9a02      	ldr	r2, [sp, #8]
    f596:	2401      	movs	r4, #1
    f598:	401a      	ands	r2, r3
    f59a:	2300      	movs	r3, #0
    f59c:	4694      	mov	ip, r2
    f59e:	4698      	mov	r8, r3
    f5a0:	2200      	movs	r2, #0
    f5a2:	e5f7      	b.n	f194 <__aeabi_ddiv+0x19c>
    f5a4:	2102      	movs	r1, #2
    f5a6:	4249      	negs	r1, r1
    f5a8:	468c      	mov	ip, r1
    f5aa:	9d03      	ldr	r5, [sp, #12]
    f5ac:	44e3      	add	fp, ip
    f5ae:	46ac      	mov	ip, r5
    f5b0:	44e2      	add	sl, ip
    f5b2:	45aa      	cmp	sl, r5
    f5b4:	41ad      	sbcs	r5, r5
    f5b6:	426d      	negs	r5, r5
    f5b8:	4445      	add	r5, r8
    f5ba:	18ed      	adds	r5, r5, r3
    f5bc:	1a2d      	subs	r5, r5, r0
    f5be:	e696      	b.n	f2ee <__aeabi_ddiv+0x2f6>
    f5c0:	1e8a      	subs	r2, r1, #2
    f5c2:	9903      	ldr	r1, [sp, #12]
    f5c4:	004d      	lsls	r5, r1, #1
    f5c6:	428d      	cmp	r5, r1
    f5c8:	4189      	sbcs	r1, r1
    f5ca:	4249      	negs	r1, r1
    f5cc:	4441      	add	r1, r8
    f5ce:	1876      	adds	r6, r6, r1
    f5d0:	9503      	str	r5, [sp, #12]
    f5d2:	e78f      	b.n	f4f4 <__aeabi_ddiv+0x4fc>
    f5d4:	201f      	movs	r0, #31
    f5d6:	4240      	negs	r0, r0
    f5d8:	1ac3      	subs	r3, r0, r3
    f5da:	4658      	mov	r0, fp
    f5dc:	40d8      	lsrs	r0, r3
    f5de:	0003      	movs	r3, r0
    f5e0:	2a20      	cmp	r2, #32
    f5e2:	d028      	beq.n	f636 <__aeabi_ddiv+0x63e>
    f5e4:	2040      	movs	r0, #64	; 0x40
    f5e6:	465d      	mov	r5, fp
    f5e8:	1a82      	subs	r2, r0, r2
    f5ea:	4095      	lsls	r5, r2
    f5ec:	4329      	orrs	r1, r5
    f5ee:	1e4a      	subs	r2, r1, #1
    f5f0:	4191      	sbcs	r1, r2
    f5f2:	4319      	orrs	r1, r3
    f5f4:	2307      	movs	r3, #7
    f5f6:	2200      	movs	r2, #0
    f5f8:	400b      	ands	r3, r1
    f5fa:	d009      	beq.n	f610 <__aeabi_ddiv+0x618>
    f5fc:	230f      	movs	r3, #15
    f5fe:	2200      	movs	r2, #0
    f600:	400b      	ands	r3, r1
    f602:	0008      	movs	r0, r1
    f604:	2b04      	cmp	r3, #4
    f606:	d1bd      	bne.n	f584 <__aeabi_ddiv+0x58c>
    f608:	0001      	movs	r1, r0
    f60a:	0753      	lsls	r3, r2, #29
    f60c:	0252      	lsls	r2, r2, #9
    f60e:	0b12      	lsrs	r2, r2, #12
    f610:	08c9      	lsrs	r1, r1, #3
    f612:	4319      	orrs	r1, r3
    f614:	2301      	movs	r3, #1
    f616:	4688      	mov	r8, r1
    f618:	9902      	ldr	r1, [sp, #8]
    f61a:	2400      	movs	r4, #0
    f61c:	4019      	ands	r1, r3
    f61e:	468c      	mov	ip, r1
    f620:	e5b8      	b.n	f194 <__aeabi_ddiv+0x19c>
    f622:	4552      	cmp	r2, sl
    f624:	d8be      	bhi.n	f5a4 <__aeabi_ddiv+0x5ac>
    f626:	468b      	mov	fp, r1
    f628:	2500      	movs	r5, #0
    f62a:	e660      	b.n	f2ee <__aeabi_ddiv+0x2f6>
    f62c:	9d03      	ldr	r5, [sp, #12]
    f62e:	429d      	cmp	r5, r3
    f630:	d3c6      	bcc.n	f5c0 <__aeabi_ddiv+0x5c8>
    f632:	0011      	movs	r1, r2
    f634:	e762      	b.n	f4fc <__aeabi_ddiv+0x504>
    f636:	2500      	movs	r5, #0
    f638:	e7d8      	b.n	f5ec <__aeabi_ddiv+0x5f4>
    f63a:	2280      	movs	r2, #128	; 0x80
    f63c:	465b      	mov	r3, fp
    f63e:	0312      	lsls	r2, r2, #12
    f640:	431a      	orrs	r2, r3
    f642:	9b01      	ldr	r3, [sp, #4]
    f644:	0312      	lsls	r2, r2, #12
    f646:	0b12      	lsrs	r2, r2, #12
    f648:	469c      	mov	ip, r3
    f64a:	4688      	mov	r8, r1
    f64c:	4c03      	ldr	r4, [pc, #12]	; (f65c <__aeabi_ddiv+0x664>)
    f64e:	e5a1      	b.n	f194 <__aeabi_ddiv+0x19c>
    f650:	000003ff 	.word	0x000003ff
    f654:	feffffff 	.word	0xfeffffff
    f658:	000007fe 	.word	0x000007fe
    f65c:	000007ff 	.word	0x000007ff

0000f660 <__eqdf2>:
    f660:	b5f0      	push	{r4, r5, r6, r7, lr}
    f662:	464f      	mov	r7, r9
    f664:	4646      	mov	r6, r8
    f666:	46d6      	mov	lr, sl
    f668:	005c      	lsls	r4, r3, #1
    f66a:	b5c0      	push	{r6, r7, lr}
    f66c:	031f      	lsls	r7, r3, #12
    f66e:	0fdb      	lsrs	r3, r3, #31
    f670:	469a      	mov	sl, r3
    f672:	4b17      	ldr	r3, [pc, #92]	; (f6d0 <__eqdf2+0x70>)
    f674:	030e      	lsls	r6, r1, #12
    f676:	004d      	lsls	r5, r1, #1
    f678:	4684      	mov	ip, r0
    f67a:	4680      	mov	r8, r0
    f67c:	0b36      	lsrs	r6, r6, #12
    f67e:	0d6d      	lsrs	r5, r5, #21
    f680:	0fc9      	lsrs	r1, r1, #31
    f682:	4691      	mov	r9, r2
    f684:	0b3f      	lsrs	r7, r7, #12
    f686:	0d64      	lsrs	r4, r4, #21
    f688:	2001      	movs	r0, #1
    f68a:	429d      	cmp	r5, r3
    f68c:	d008      	beq.n	f6a0 <__eqdf2+0x40>
    f68e:	429c      	cmp	r4, r3
    f690:	d001      	beq.n	f696 <__eqdf2+0x36>
    f692:	42a5      	cmp	r5, r4
    f694:	d00b      	beq.n	f6ae <__eqdf2+0x4e>
    f696:	bc1c      	pop	{r2, r3, r4}
    f698:	4690      	mov	r8, r2
    f69a:	4699      	mov	r9, r3
    f69c:	46a2      	mov	sl, r4
    f69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f6a0:	4663      	mov	r3, ip
    f6a2:	4333      	orrs	r3, r6
    f6a4:	d1f7      	bne.n	f696 <__eqdf2+0x36>
    f6a6:	42ac      	cmp	r4, r5
    f6a8:	d1f5      	bne.n	f696 <__eqdf2+0x36>
    f6aa:	433a      	orrs	r2, r7
    f6ac:	d1f3      	bne.n	f696 <__eqdf2+0x36>
    f6ae:	2001      	movs	r0, #1
    f6b0:	42be      	cmp	r6, r7
    f6b2:	d1f0      	bne.n	f696 <__eqdf2+0x36>
    f6b4:	45c8      	cmp	r8, r9
    f6b6:	d1ee      	bne.n	f696 <__eqdf2+0x36>
    f6b8:	4551      	cmp	r1, sl
    f6ba:	d007      	beq.n	f6cc <__eqdf2+0x6c>
    f6bc:	2d00      	cmp	r5, #0
    f6be:	d1ea      	bne.n	f696 <__eqdf2+0x36>
    f6c0:	4663      	mov	r3, ip
    f6c2:	431e      	orrs	r6, r3
    f6c4:	0030      	movs	r0, r6
    f6c6:	1e46      	subs	r6, r0, #1
    f6c8:	41b0      	sbcs	r0, r6
    f6ca:	e7e4      	b.n	f696 <__eqdf2+0x36>
    f6cc:	2000      	movs	r0, #0
    f6ce:	e7e2      	b.n	f696 <__eqdf2+0x36>
    f6d0:	000007ff 	.word	0x000007ff

0000f6d4 <__gedf2>:
    f6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6d6:	4645      	mov	r5, r8
    f6d8:	46de      	mov	lr, fp
    f6da:	4657      	mov	r7, sl
    f6dc:	464e      	mov	r6, r9
    f6de:	b5e0      	push	{r5, r6, r7, lr}
    f6e0:	031f      	lsls	r7, r3, #12
    f6e2:	0b3d      	lsrs	r5, r7, #12
    f6e4:	4f2c      	ldr	r7, [pc, #176]	; (f798 <__gedf2+0xc4>)
    f6e6:	030e      	lsls	r6, r1, #12
    f6e8:	004c      	lsls	r4, r1, #1
    f6ea:	46ab      	mov	fp, r5
    f6ec:	005d      	lsls	r5, r3, #1
    f6ee:	4684      	mov	ip, r0
    f6f0:	0b36      	lsrs	r6, r6, #12
    f6f2:	0d64      	lsrs	r4, r4, #21
    f6f4:	0fc9      	lsrs	r1, r1, #31
    f6f6:	4690      	mov	r8, r2
    f6f8:	0d6d      	lsrs	r5, r5, #21
    f6fa:	0fdb      	lsrs	r3, r3, #31
    f6fc:	42bc      	cmp	r4, r7
    f6fe:	d02a      	beq.n	f756 <__gedf2+0x82>
    f700:	4f25      	ldr	r7, [pc, #148]	; (f798 <__gedf2+0xc4>)
    f702:	42bd      	cmp	r5, r7
    f704:	d02d      	beq.n	f762 <__gedf2+0x8e>
    f706:	2c00      	cmp	r4, #0
    f708:	d10f      	bne.n	f72a <__gedf2+0x56>
    f70a:	4330      	orrs	r0, r6
    f70c:	0007      	movs	r7, r0
    f70e:	4681      	mov	r9, r0
    f710:	4278      	negs	r0, r7
    f712:	4178      	adcs	r0, r7
    f714:	b2c0      	uxtb	r0, r0
    f716:	2d00      	cmp	r5, #0
    f718:	d117      	bne.n	f74a <__gedf2+0x76>
    f71a:	465f      	mov	r7, fp
    f71c:	433a      	orrs	r2, r7
    f71e:	d114      	bne.n	f74a <__gedf2+0x76>
    f720:	464b      	mov	r3, r9
    f722:	2000      	movs	r0, #0
    f724:	2b00      	cmp	r3, #0
    f726:	d00a      	beq.n	f73e <__gedf2+0x6a>
    f728:	e006      	b.n	f738 <__gedf2+0x64>
    f72a:	2d00      	cmp	r5, #0
    f72c:	d102      	bne.n	f734 <__gedf2+0x60>
    f72e:	4658      	mov	r0, fp
    f730:	4302      	orrs	r2, r0
    f732:	d001      	beq.n	f738 <__gedf2+0x64>
    f734:	4299      	cmp	r1, r3
    f736:	d018      	beq.n	f76a <__gedf2+0x96>
    f738:	4248      	negs	r0, r1
    f73a:	2101      	movs	r1, #1
    f73c:	4308      	orrs	r0, r1
    f73e:	bc3c      	pop	{r2, r3, r4, r5}
    f740:	4690      	mov	r8, r2
    f742:	4699      	mov	r9, r3
    f744:	46a2      	mov	sl, r4
    f746:	46ab      	mov	fp, r5
    f748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f74a:	2800      	cmp	r0, #0
    f74c:	d0f2      	beq.n	f734 <__gedf2+0x60>
    f74e:	2001      	movs	r0, #1
    f750:	3b01      	subs	r3, #1
    f752:	4318      	orrs	r0, r3
    f754:	e7f3      	b.n	f73e <__gedf2+0x6a>
    f756:	0037      	movs	r7, r6
    f758:	4307      	orrs	r7, r0
    f75a:	d0d1      	beq.n	f700 <__gedf2+0x2c>
    f75c:	2002      	movs	r0, #2
    f75e:	4240      	negs	r0, r0
    f760:	e7ed      	b.n	f73e <__gedf2+0x6a>
    f762:	465f      	mov	r7, fp
    f764:	4317      	orrs	r7, r2
    f766:	d0ce      	beq.n	f706 <__gedf2+0x32>
    f768:	e7f8      	b.n	f75c <__gedf2+0x88>
    f76a:	42ac      	cmp	r4, r5
    f76c:	dce4      	bgt.n	f738 <__gedf2+0x64>
    f76e:	da03      	bge.n	f778 <__gedf2+0xa4>
    f770:	1e48      	subs	r0, r1, #1
    f772:	2101      	movs	r1, #1
    f774:	4308      	orrs	r0, r1
    f776:	e7e2      	b.n	f73e <__gedf2+0x6a>
    f778:	455e      	cmp	r6, fp
    f77a:	d8dd      	bhi.n	f738 <__gedf2+0x64>
    f77c:	d006      	beq.n	f78c <__gedf2+0xb8>
    f77e:	2000      	movs	r0, #0
    f780:	455e      	cmp	r6, fp
    f782:	d2dc      	bcs.n	f73e <__gedf2+0x6a>
    f784:	2301      	movs	r3, #1
    f786:	1e48      	subs	r0, r1, #1
    f788:	4318      	orrs	r0, r3
    f78a:	e7d8      	b.n	f73e <__gedf2+0x6a>
    f78c:	45c4      	cmp	ip, r8
    f78e:	d8d3      	bhi.n	f738 <__gedf2+0x64>
    f790:	2000      	movs	r0, #0
    f792:	45c4      	cmp	ip, r8
    f794:	d3f6      	bcc.n	f784 <__gedf2+0xb0>
    f796:	e7d2      	b.n	f73e <__gedf2+0x6a>
    f798:	000007ff 	.word	0x000007ff

0000f79c <__ledf2>:
    f79c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f79e:	464e      	mov	r6, r9
    f7a0:	4645      	mov	r5, r8
    f7a2:	46de      	mov	lr, fp
    f7a4:	4657      	mov	r7, sl
    f7a6:	005c      	lsls	r4, r3, #1
    f7a8:	b5e0      	push	{r5, r6, r7, lr}
    f7aa:	031f      	lsls	r7, r3, #12
    f7ac:	0fdb      	lsrs	r3, r3, #31
    f7ae:	4699      	mov	r9, r3
    f7b0:	4b2a      	ldr	r3, [pc, #168]	; (f85c <__ledf2+0xc0>)
    f7b2:	030e      	lsls	r6, r1, #12
    f7b4:	004d      	lsls	r5, r1, #1
    f7b6:	0fc9      	lsrs	r1, r1, #31
    f7b8:	4684      	mov	ip, r0
    f7ba:	0b36      	lsrs	r6, r6, #12
    f7bc:	0d6d      	lsrs	r5, r5, #21
    f7be:	468b      	mov	fp, r1
    f7c0:	4690      	mov	r8, r2
    f7c2:	0b3f      	lsrs	r7, r7, #12
    f7c4:	0d64      	lsrs	r4, r4, #21
    f7c6:	429d      	cmp	r5, r3
    f7c8:	d020      	beq.n	f80c <__ledf2+0x70>
    f7ca:	4b24      	ldr	r3, [pc, #144]	; (f85c <__ledf2+0xc0>)
    f7cc:	429c      	cmp	r4, r3
    f7ce:	d022      	beq.n	f816 <__ledf2+0x7a>
    f7d0:	2d00      	cmp	r5, #0
    f7d2:	d112      	bne.n	f7fa <__ledf2+0x5e>
    f7d4:	4330      	orrs	r0, r6
    f7d6:	4243      	negs	r3, r0
    f7d8:	4143      	adcs	r3, r0
    f7da:	b2db      	uxtb	r3, r3
    f7dc:	2c00      	cmp	r4, #0
    f7de:	d01f      	beq.n	f820 <__ledf2+0x84>
    f7e0:	2b00      	cmp	r3, #0
    f7e2:	d00c      	beq.n	f7fe <__ledf2+0x62>
    f7e4:	464b      	mov	r3, r9
    f7e6:	2001      	movs	r0, #1
    f7e8:	3b01      	subs	r3, #1
    f7ea:	4303      	orrs	r3, r0
    f7ec:	0018      	movs	r0, r3
    f7ee:	bc3c      	pop	{r2, r3, r4, r5}
    f7f0:	4690      	mov	r8, r2
    f7f2:	4699      	mov	r9, r3
    f7f4:	46a2      	mov	sl, r4
    f7f6:	46ab      	mov	fp, r5
    f7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f7fa:	2c00      	cmp	r4, #0
    f7fc:	d016      	beq.n	f82c <__ledf2+0x90>
    f7fe:	45cb      	cmp	fp, r9
    f800:	d017      	beq.n	f832 <__ledf2+0x96>
    f802:	465b      	mov	r3, fp
    f804:	4259      	negs	r1, r3
    f806:	2301      	movs	r3, #1
    f808:	430b      	orrs	r3, r1
    f80a:	e7ef      	b.n	f7ec <__ledf2+0x50>
    f80c:	0031      	movs	r1, r6
    f80e:	2302      	movs	r3, #2
    f810:	4301      	orrs	r1, r0
    f812:	d1eb      	bne.n	f7ec <__ledf2+0x50>
    f814:	e7d9      	b.n	f7ca <__ledf2+0x2e>
    f816:	0039      	movs	r1, r7
    f818:	2302      	movs	r3, #2
    f81a:	4311      	orrs	r1, r2
    f81c:	d1e6      	bne.n	f7ec <__ledf2+0x50>
    f81e:	e7d7      	b.n	f7d0 <__ledf2+0x34>
    f820:	433a      	orrs	r2, r7
    f822:	d1dd      	bne.n	f7e0 <__ledf2+0x44>
    f824:	2300      	movs	r3, #0
    f826:	2800      	cmp	r0, #0
    f828:	d0e0      	beq.n	f7ec <__ledf2+0x50>
    f82a:	e7ea      	b.n	f802 <__ledf2+0x66>
    f82c:	433a      	orrs	r2, r7
    f82e:	d1e6      	bne.n	f7fe <__ledf2+0x62>
    f830:	e7e7      	b.n	f802 <__ledf2+0x66>
    f832:	42a5      	cmp	r5, r4
    f834:	dce5      	bgt.n	f802 <__ledf2+0x66>
    f836:	db05      	blt.n	f844 <__ledf2+0xa8>
    f838:	42be      	cmp	r6, r7
    f83a:	d8e2      	bhi.n	f802 <__ledf2+0x66>
    f83c:	d007      	beq.n	f84e <__ledf2+0xb2>
    f83e:	2300      	movs	r3, #0
    f840:	42be      	cmp	r6, r7
    f842:	d2d3      	bcs.n	f7ec <__ledf2+0x50>
    f844:	4659      	mov	r1, fp
    f846:	2301      	movs	r3, #1
    f848:	3901      	subs	r1, #1
    f84a:	430b      	orrs	r3, r1
    f84c:	e7ce      	b.n	f7ec <__ledf2+0x50>
    f84e:	45c4      	cmp	ip, r8
    f850:	d8d7      	bhi.n	f802 <__ledf2+0x66>
    f852:	2300      	movs	r3, #0
    f854:	45c4      	cmp	ip, r8
    f856:	d3f5      	bcc.n	f844 <__ledf2+0xa8>
    f858:	e7c8      	b.n	f7ec <__ledf2+0x50>
    f85a:	46c0      	nop			; (mov r8, r8)
    f85c:	000007ff 	.word	0x000007ff

0000f860 <__aeabi_dmul>:
    f860:	b5f0      	push	{r4, r5, r6, r7, lr}
    f862:	4657      	mov	r7, sl
    f864:	4645      	mov	r5, r8
    f866:	46de      	mov	lr, fp
    f868:	464e      	mov	r6, r9
    f86a:	b5e0      	push	{r5, r6, r7, lr}
    f86c:	030c      	lsls	r4, r1, #12
    f86e:	4698      	mov	r8, r3
    f870:	004e      	lsls	r6, r1, #1
    f872:	0b23      	lsrs	r3, r4, #12
    f874:	b087      	sub	sp, #28
    f876:	0007      	movs	r7, r0
    f878:	4692      	mov	sl, r2
    f87a:	469b      	mov	fp, r3
    f87c:	0d76      	lsrs	r6, r6, #21
    f87e:	0fcd      	lsrs	r5, r1, #31
    f880:	2e00      	cmp	r6, #0
    f882:	d06b      	beq.n	f95c <__aeabi_dmul+0xfc>
    f884:	4b6d      	ldr	r3, [pc, #436]	; (fa3c <__aeabi_dmul+0x1dc>)
    f886:	429e      	cmp	r6, r3
    f888:	d035      	beq.n	f8f6 <__aeabi_dmul+0x96>
    f88a:	2480      	movs	r4, #128	; 0x80
    f88c:	465b      	mov	r3, fp
    f88e:	0f42      	lsrs	r2, r0, #29
    f890:	0424      	lsls	r4, r4, #16
    f892:	00db      	lsls	r3, r3, #3
    f894:	4314      	orrs	r4, r2
    f896:	431c      	orrs	r4, r3
    f898:	00c3      	lsls	r3, r0, #3
    f89a:	4699      	mov	r9, r3
    f89c:	4b68      	ldr	r3, [pc, #416]	; (fa40 <__aeabi_dmul+0x1e0>)
    f89e:	46a3      	mov	fp, r4
    f8a0:	469c      	mov	ip, r3
    f8a2:	2300      	movs	r3, #0
    f8a4:	2700      	movs	r7, #0
    f8a6:	4466      	add	r6, ip
    f8a8:	9302      	str	r3, [sp, #8]
    f8aa:	4643      	mov	r3, r8
    f8ac:	031c      	lsls	r4, r3, #12
    f8ae:	005a      	lsls	r2, r3, #1
    f8b0:	0fdb      	lsrs	r3, r3, #31
    f8b2:	4650      	mov	r0, sl
    f8b4:	0b24      	lsrs	r4, r4, #12
    f8b6:	0d52      	lsrs	r2, r2, #21
    f8b8:	4698      	mov	r8, r3
    f8ba:	d100      	bne.n	f8be <__aeabi_dmul+0x5e>
    f8bc:	e076      	b.n	f9ac <__aeabi_dmul+0x14c>
    f8be:	4b5f      	ldr	r3, [pc, #380]	; (fa3c <__aeabi_dmul+0x1dc>)
    f8c0:	429a      	cmp	r2, r3
    f8c2:	d06d      	beq.n	f9a0 <__aeabi_dmul+0x140>
    f8c4:	2380      	movs	r3, #128	; 0x80
    f8c6:	0f41      	lsrs	r1, r0, #29
    f8c8:	041b      	lsls	r3, r3, #16
    f8ca:	430b      	orrs	r3, r1
    f8cc:	495c      	ldr	r1, [pc, #368]	; (fa40 <__aeabi_dmul+0x1e0>)
    f8ce:	00e4      	lsls	r4, r4, #3
    f8d0:	468c      	mov	ip, r1
    f8d2:	431c      	orrs	r4, r3
    f8d4:	00c3      	lsls	r3, r0, #3
    f8d6:	2000      	movs	r0, #0
    f8d8:	4462      	add	r2, ip
    f8da:	4641      	mov	r1, r8
    f8dc:	18b6      	adds	r6, r6, r2
    f8de:	4069      	eors	r1, r5
    f8e0:	1c72      	adds	r2, r6, #1
    f8e2:	9101      	str	r1, [sp, #4]
    f8e4:	4694      	mov	ip, r2
    f8e6:	4307      	orrs	r7, r0
    f8e8:	2f0f      	cmp	r7, #15
    f8ea:	d900      	bls.n	f8ee <__aeabi_dmul+0x8e>
    f8ec:	e0b0      	b.n	fa50 <__aeabi_dmul+0x1f0>
    f8ee:	4a55      	ldr	r2, [pc, #340]	; (fa44 <__aeabi_dmul+0x1e4>)
    f8f0:	00bf      	lsls	r7, r7, #2
    f8f2:	59d2      	ldr	r2, [r2, r7]
    f8f4:	4697      	mov	pc, r2
    f8f6:	465b      	mov	r3, fp
    f8f8:	4303      	orrs	r3, r0
    f8fa:	4699      	mov	r9, r3
    f8fc:	d000      	beq.n	f900 <__aeabi_dmul+0xa0>
    f8fe:	e087      	b.n	fa10 <__aeabi_dmul+0x1b0>
    f900:	2300      	movs	r3, #0
    f902:	469b      	mov	fp, r3
    f904:	3302      	adds	r3, #2
    f906:	2708      	movs	r7, #8
    f908:	9302      	str	r3, [sp, #8]
    f90a:	e7ce      	b.n	f8aa <__aeabi_dmul+0x4a>
    f90c:	4642      	mov	r2, r8
    f90e:	9201      	str	r2, [sp, #4]
    f910:	2802      	cmp	r0, #2
    f912:	d067      	beq.n	f9e4 <__aeabi_dmul+0x184>
    f914:	2803      	cmp	r0, #3
    f916:	d100      	bne.n	f91a <__aeabi_dmul+0xba>
    f918:	e20e      	b.n	fd38 <__aeabi_dmul+0x4d8>
    f91a:	2801      	cmp	r0, #1
    f91c:	d000      	beq.n	f920 <__aeabi_dmul+0xc0>
    f91e:	e162      	b.n	fbe6 <__aeabi_dmul+0x386>
    f920:	2300      	movs	r3, #0
    f922:	2400      	movs	r4, #0
    f924:	2200      	movs	r2, #0
    f926:	4699      	mov	r9, r3
    f928:	9901      	ldr	r1, [sp, #4]
    f92a:	4001      	ands	r1, r0
    f92c:	b2cd      	uxtb	r5, r1
    f92e:	2100      	movs	r1, #0
    f930:	0312      	lsls	r2, r2, #12
    f932:	0d0b      	lsrs	r3, r1, #20
    f934:	0b12      	lsrs	r2, r2, #12
    f936:	051b      	lsls	r3, r3, #20
    f938:	4313      	orrs	r3, r2
    f93a:	4a43      	ldr	r2, [pc, #268]	; (fa48 <__aeabi_dmul+0x1e8>)
    f93c:	0524      	lsls	r4, r4, #20
    f93e:	4013      	ands	r3, r2
    f940:	431c      	orrs	r4, r3
    f942:	0064      	lsls	r4, r4, #1
    f944:	07ed      	lsls	r5, r5, #31
    f946:	0864      	lsrs	r4, r4, #1
    f948:	432c      	orrs	r4, r5
    f94a:	4648      	mov	r0, r9
    f94c:	0021      	movs	r1, r4
    f94e:	b007      	add	sp, #28
    f950:	bc3c      	pop	{r2, r3, r4, r5}
    f952:	4690      	mov	r8, r2
    f954:	4699      	mov	r9, r3
    f956:	46a2      	mov	sl, r4
    f958:	46ab      	mov	fp, r5
    f95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f95c:	4303      	orrs	r3, r0
    f95e:	4699      	mov	r9, r3
    f960:	d04f      	beq.n	fa02 <__aeabi_dmul+0x1a2>
    f962:	465b      	mov	r3, fp
    f964:	2b00      	cmp	r3, #0
    f966:	d100      	bne.n	f96a <__aeabi_dmul+0x10a>
    f968:	e189      	b.n	fc7e <__aeabi_dmul+0x41e>
    f96a:	4658      	mov	r0, fp
    f96c:	f7fe ffae 	bl	e8cc <__clzsi2>
    f970:	0003      	movs	r3, r0
    f972:	3b0b      	subs	r3, #11
    f974:	2b1c      	cmp	r3, #28
    f976:	dd00      	ble.n	f97a <__aeabi_dmul+0x11a>
    f978:	e17a      	b.n	fc70 <__aeabi_dmul+0x410>
    f97a:	221d      	movs	r2, #29
    f97c:	1ad3      	subs	r3, r2, r3
    f97e:	003a      	movs	r2, r7
    f980:	0001      	movs	r1, r0
    f982:	465c      	mov	r4, fp
    f984:	40da      	lsrs	r2, r3
    f986:	3908      	subs	r1, #8
    f988:	408c      	lsls	r4, r1
    f98a:	0013      	movs	r3, r2
    f98c:	408f      	lsls	r7, r1
    f98e:	4323      	orrs	r3, r4
    f990:	469b      	mov	fp, r3
    f992:	46b9      	mov	r9, r7
    f994:	2300      	movs	r3, #0
    f996:	4e2d      	ldr	r6, [pc, #180]	; (fa4c <__aeabi_dmul+0x1ec>)
    f998:	2700      	movs	r7, #0
    f99a:	1a36      	subs	r6, r6, r0
    f99c:	9302      	str	r3, [sp, #8]
    f99e:	e784      	b.n	f8aa <__aeabi_dmul+0x4a>
    f9a0:	4653      	mov	r3, sl
    f9a2:	4323      	orrs	r3, r4
    f9a4:	d12a      	bne.n	f9fc <__aeabi_dmul+0x19c>
    f9a6:	2400      	movs	r4, #0
    f9a8:	2002      	movs	r0, #2
    f9aa:	e796      	b.n	f8da <__aeabi_dmul+0x7a>
    f9ac:	4653      	mov	r3, sl
    f9ae:	4323      	orrs	r3, r4
    f9b0:	d020      	beq.n	f9f4 <__aeabi_dmul+0x194>
    f9b2:	2c00      	cmp	r4, #0
    f9b4:	d100      	bne.n	f9b8 <__aeabi_dmul+0x158>
    f9b6:	e157      	b.n	fc68 <__aeabi_dmul+0x408>
    f9b8:	0020      	movs	r0, r4
    f9ba:	f7fe ff87 	bl	e8cc <__clzsi2>
    f9be:	0003      	movs	r3, r0
    f9c0:	3b0b      	subs	r3, #11
    f9c2:	2b1c      	cmp	r3, #28
    f9c4:	dd00      	ble.n	f9c8 <__aeabi_dmul+0x168>
    f9c6:	e149      	b.n	fc5c <__aeabi_dmul+0x3fc>
    f9c8:	211d      	movs	r1, #29
    f9ca:	1acb      	subs	r3, r1, r3
    f9cc:	4651      	mov	r1, sl
    f9ce:	0002      	movs	r2, r0
    f9d0:	40d9      	lsrs	r1, r3
    f9d2:	4653      	mov	r3, sl
    f9d4:	3a08      	subs	r2, #8
    f9d6:	4094      	lsls	r4, r2
    f9d8:	4093      	lsls	r3, r2
    f9da:	430c      	orrs	r4, r1
    f9dc:	4a1b      	ldr	r2, [pc, #108]	; (fa4c <__aeabi_dmul+0x1ec>)
    f9de:	1a12      	subs	r2, r2, r0
    f9e0:	2000      	movs	r0, #0
    f9e2:	e77a      	b.n	f8da <__aeabi_dmul+0x7a>
    f9e4:	2501      	movs	r5, #1
    f9e6:	9b01      	ldr	r3, [sp, #4]
    f9e8:	4c14      	ldr	r4, [pc, #80]	; (fa3c <__aeabi_dmul+0x1dc>)
    f9ea:	401d      	ands	r5, r3
    f9ec:	2300      	movs	r3, #0
    f9ee:	2200      	movs	r2, #0
    f9f0:	4699      	mov	r9, r3
    f9f2:	e79c      	b.n	f92e <__aeabi_dmul+0xce>
    f9f4:	2400      	movs	r4, #0
    f9f6:	2200      	movs	r2, #0
    f9f8:	2001      	movs	r0, #1
    f9fa:	e76e      	b.n	f8da <__aeabi_dmul+0x7a>
    f9fc:	4653      	mov	r3, sl
    f9fe:	2003      	movs	r0, #3
    fa00:	e76b      	b.n	f8da <__aeabi_dmul+0x7a>
    fa02:	2300      	movs	r3, #0
    fa04:	469b      	mov	fp, r3
    fa06:	3301      	adds	r3, #1
    fa08:	2704      	movs	r7, #4
    fa0a:	2600      	movs	r6, #0
    fa0c:	9302      	str	r3, [sp, #8]
    fa0e:	e74c      	b.n	f8aa <__aeabi_dmul+0x4a>
    fa10:	2303      	movs	r3, #3
    fa12:	4681      	mov	r9, r0
    fa14:	270c      	movs	r7, #12
    fa16:	9302      	str	r3, [sp, #8]
    fa18:	e747      	b.n	f8aa <__aeabi_dmul+0x4a>
    fa1a:	2280      	movs	r2, #128	; 0x80
    fa1c:	2300      	movs	r3, #0
    fa1e:	2500      	movs	r5, #0
    fa20:	0312      	lsls	r2, r2, #12
    fa22:	4699      	mov	r9, r3
    fa24:	4c05      	ldr	r4, [pc, #20]	; (fa3c <__aeabi_dmul+0x1dc>)
    fa26:	e782      	b.n	f92e <__aeabi_dmul+0xce>
    fa28:	465c      	mov	r4, fp
    fa2a:	464b      	mov	r3, r9
    fa2c:	9802      	ldr	r0, [sp, #8]
    fa2e:	e76f      	b.n	f910 <__aeabi_dmul+0xb0>
    fa30:	465c      	mov	r4, fp
    fa32:	464b      	mov	r3, r9
    fa34:	9501      	str	r5, [sp, #4]
    fa36:	9802      	ldr	r0, [sp, #8]
    fa38:	e76a      	b.n	f910 <__aeabi_dmul+0xb0>
    fa3a:	46c0      	nop			; (mov r8, r8)
    fa3c:	000007ff 	.word	0x000007ff
    fa40:	fffffc01 	.word	0xfffffc01
    fa44:	00016214 	.word	0x00016214
    fa48:	800fffff 	.word	0x800fffff
    fa4c:	fffffc0d 	.word	0xfffffc0d
    fa50:	464a      	mov	r2, r9
    fa52:	4649      	mov	r1, r9
    fa54:	0c17      	lsrs	r7, r2, #16
    fa56:	0c1a      	lsrs	r2, r3, #16
    fa58:	041b      	lsls	r3, r3, #16
    fa5a:	0c1b      	lsrs	r3, r3, #16
    fa5c:	0408      	lsls	r0, r1, #16
    fa5e:	0019      	movs	r1, r3
    fa60:	0c00      	lsrs	r0, r0, #16
    fa62:	4341      	muls	r1, r0
    fa64:	0015      	movs	r5, r2
    fa66:	4688      	mov	r8, r1
    fa68:	0019      	movs	r1, r3
    fa6a:	437d      	muls	r5, r7
    fa6c:	4379      	muls	r1, r7
    fa6e:	9503      	str	r5, [sp, #12]
    fa70:	4689      	mov	r9, r1
    fa72:	0029      	movs	r1, r5
    fa74:	0015      	movs	r5, r2
    fa76:	4345      	muls	r5, r0
    fa78:	444d      	add	r5, r9
    fa7a:	9502      	str	r5, [sp, #8]
    fa7c:	4645      	mov	r5, r8
    fa7e:	0c2d      	lsrs	r5, r5, #16
    fa80:	46aa      	mov	sl, r5
    fa82:	9d02      	ldr	r5, [sp, #8]
    fa84:	4455      	add	r5, sl
    fa86:	45a9      	cmp	r9, r5
    fa88:	d906      	bls.n	fa98 <__aeabi_dmul+0x238>
    fa8a:	468a      	mov	sl, r1
    fa8c:	2180      	movs	r1, #128	; 0x80
    fa8e:	0249      	lsls	r1, r1, #9
    fa90:	4689      	mov	r9, r1
    fa92:	44ca      	add	sl, r9
    fa94:	4651      	mov	r1, sl
    fa96:	9103      	str	r1, [sp, #12]
    fa98:	0c29      	lsrs	r1, r5, #16
    fa9a:	9104      	str	r1, [sp, #16]
    fa9c:	4641      	mov	r1, r8
    fa9e:	0409      	lsls	r1, r1, #16
    faa0:	042d      	lsls	r5, r5, #16
    faa2:	0c09      	lsrs	r1, r1, #16
    faa4:	4688      	mov	r8, r1
    faa6:	0029      	movs	r1, r5
    faa8:	0c25      	lsrs	r5, r4, #16
    faaa:	0424      	lsls	r4, r4, #16
    faac:	4441      	add	r1, r8
    faae:	0c24      	lsrs	r4, r4, #16
    fab0:	9105      	str	r1, [sp, #20]
    fab2:	0021      	movs	r1, r4
    fab4:	4341      	muls	r1, r0
    fab6:	4688      	mov	r8, r1
    fab8:	0021      	movs	r1, r4
    faba:	4379      	muls	r1, r7
    fabc:	468a      	mov	sl, r1
    fabe:	4368      	muls	r0, r5
    fac0:	4641      	mov	r1, r8
    fac2:	4450      	add	r0, sl
    fac4:	4681      	mov	r9, r0
    fac6:	0c08      	lsrs	r0, r1, #16
    fac8:	4448      	add	r0, r9
    faca:	436f      	muls	r7, r5
    facc:	4582      	cmp	sl, r0
    face:	d903      	bls.n	fad8 <__aeabi_dmul+0x278>
    fad0:	2180      	movs	r1, #128	; 0x80
    fad2:	0249      	lsls	r1, r1, #9
    fad4:	4689      	mov	r9, r1
    fad6:	444f      	add	r7, r9
    fad8:	0c01      	lsrs	r1, r0, #16
    fada:	4689      	mov	r9, r1
    fadc:	0039      	movs	r1, r7
    fade:	4449      	add	r1, r9
    fae0:	9102      	str	r1, [sp, #8]
    fae2:	4641      	mov	r1, r8
    fae4:	040f      	lsls	r7, r1, #16
    fae6:	9904      	ldr	r1, [sp, #16]
    fae8:	0c3f      	lsrs	r7, r7, #16
    faea:	4688      	mov	r8, r1
    faec:	0400      	lsls	r0, r0, #16
    faee:	19c0      	adds	r0, r0, r7
    faf0:	4480      	add	r8, r0
    faf2:	4641      	mov	r1, r8
    faf4:	9104      	str	r1, [sp, #16]
    faf6:	4659      	mov	r1, fp
    faf8:	0c0f      	lsrs	r7, r1, #16
    fafa:	0409      	lsls	r1, r1, #16
    fafc:	0c09      	lsrs	r1, r1, #16
    fafe:	4688      	mov	r8, r1
    fb00:	4359      	muls	r1, r3
    fb02:	468a      	mov	sl, r1
    fb04:	0039      	movs	r1, r7
    fb06:	4351      	muls	r1, r2
    fb08:	4689      	mov	r9, r1
    fb0a:	4641      	mov	r1, r8
    fb0c:	434a      	muls	r2, r1
    fb0e:	4651      	mov	r1, sl
    fb10:	0c09      	lsrs	r1, r1, #16
    fb12:	468b      	mov	fp, r1
    fb14:	437b      	muls	r3, r7
    fb16:	18d2      	adds	r2, r2, r3
    fb18:	445a      	add	r2, fp
    fb1a:	4293      	cmp	r3, r2
    fb1c:	d903      	bls.n	fb26 <__aeabi_dmul+0x2c6>
    fb1e:	2380      	movs	r3, #128	; 0x80
    fb20:	025b      	lsls	r3, r3, #9
    fb22:	469b      	mov	fp, r3
    fb24:	44d9      	add	r9, fp
    fb26:	4651      	mov	r1, sl
    fb28:	0409      	lsls	r1, r1, #16
    fb2a:	0c09      	lsrs	r1, r1, #16
    fb2c:	468a      	mov	sl, r1
    fb2e:	4641      	mov	r1, r8
    fb30:	4361      	muls	r1, r4
    fb32:	437c      	muls	r4, r7
    fb34:	0c13      	lsrs	r3, r2, #16
    fb36:	0412      	lsls	r2, r2, #16
    fb38:	444b      	add	r3, r9
    fb3a:	4452      	add	r2, sl
    fb3c:	46a1      	mov	r9, r4
    fb3e:	468a      	mov	sl, r1
    fb40:	003c      	movs	r4, r7
    fb42:	4641      	mov	r1, r8
    fb44:	436c      	muls	r4, r5
    fb46:	434d      	muls	r5, r1
    fb48:	4651      	mov	r1, sl
    fb4a:	444d      	add	r5, r9
    fb4c:	0c0f      	lsrs	r7, r1, #16
    fb4e:	197d      	adds	r5, r7, r5
    fb50:	45a9      	cmp	r9, r5
    fb52:	d903      	bls.n	fb5c <__aeabi_dmul+0x2fc>
    fb54:	2180      	movs	r1, #128	; 0x80
    fb56:	0249      	lsls	r1, r1, #9
    fb58:	4688      	mov	r8, r1
    fb5a:	4444      	add	r4, r8
    fb5c:	9f04      	ldr	r7, [sp, #16]
    fb5e:	9903      	ldr	r1, [sp, #12]
    fb60:	46b8      	mov	r8, r7
    fb62:	4441      	add	r1, r8
    fb64:	468b      	mov	fp, r1
    fb66:	4583      	cmp	fp, r0
    fb68:	4180      	sbcs	r0, r0
    fb6a:	4241      	negs	r1, r0
    fb6c:	4688      	mov	r8, r1
    fb6e:	4651      	mov	r1, sl
    fb70:	0408      	lsls	r0, r1, #16
    fb72:	042f      	lsls	r7, r5, #16
    fb74:	0c00      	lsrs	r0, r0, #16
    fb76:	183f      	adds	r7, r7, r0
    fb78:	4658      	mov	r0, fp
    fb7a:	9902      	ldr	r1, [sp, #8]
    fb7c:	1810      	adds	r0, r2, r0
    fb7e:	4689      	mov	r9, r1
    fb80:	4290      	cmp	r0, r2
    fb82:	4192      	sbcs	r2, r2
    fb84:	444f      	add	r7, r9
    fb86:	46ba      	mov	sl, r7
    fb88:	4252      	negs	r2, r2
    fb8a:	4699      	mov	r9, r3
    fb8c:	4693      	mov	fp, r2
    fb8e:	44c2      	add	sl, r8
    fb90:	44d1      	add	r9, sl
    fb92:	44cb      	add	fp, r9
    fb94:	428f      	cmp	r7, r1
    fb96:	41bf      	sbcs	r7, r7
    fb98:	45c2      	cmp	sl, r8
    fb9a:	4189      	sbcs	r1, r1
    fb9c:	4599      	cmp	r9, r3
    fb9e:	419b      	sbcs	r3, r3
    fba0:	4593      	cmp	fp, r2
    fba2:	4192      	sbcs	r2, r2
    fba4:	427f      	negs	r7, r7
    fba6:	4249      	negs	r1, r1
    fba8:	0c2d      	lsrs	r5, r5, #16
    fbaa:	4252      	negs	r2, r2
    fbac:	430f      	orrs	r7, r1
    fbae:	425b      	negs	r3, r3
    fbb0:	4313      	orrs	r3, r2
    fbb2:	197f      	adds	r7, r7, r5
    fbb4:	18ff      	adds	r7, r7, r3
    fbb6:	465b      	mov	r3, fp
    fbb8:	193c      	adds	r4, r7, r4
    fbba:	0ddb      	lsrs	r3, r3, #23
    fbbc:	9a05      	ldr	r2, [sp, #20]
    fbbe:	0264      	lsls	r4, r4, #9
    fbc0:	431c      	orrs	r4, r3
    fbc2:	0243      	lsls	r3, r0, #9
    fbc4:	4313      	orrs	r3, r2
    fbc6:	1e5d      	subs	r5, r3, #1
    fbc8:	41ab      	sbcs	r3, r5
    fbca:	465a      	mov	r2, fp
    fbcc:	0dc0      	lsrs	r0, r0, #23
    fbce:	4303      	orrs	r3, r0
    fbd0:	0252      	lsls	r2, r2, #9
    fbd2:	4313      	orrs	r3, r2
    fbd4:	01e2      	lsls	r2, r4, #7
    fbd6:	d556      	bpl.n	fc86 <__aeabi_dmul+0x426>
    fbd8:	2001      	movs	r0, #1
    fbda:	085a      	lsrs	r2, r3, #1
    fbdc:	4003      	ands	r3, r0
    fbde:	4313      	orrs	r3, r2
    fbe0:	07e2      	lsls	r2, r4, #31
    fbe2:	4313      	orrs	r3, r2
    fbe4:	0864      	lsrs	r4, r4, #1
    fbe6:	485a      	ldr	r0, [pc, #360]	; (fd50 <__aeabi_dmul+0x4f0>)
    fbe8:	4460      	add	r0, ip
    fbea:	2800      	cmp	r0, #0
    fbec:	dd4d      	ble.n	fc8a <__aeabi_dmul+0x42a>
    fbee:	075a      	lsls	r2, r3, #29
    fbf0:	d009      	beq.n	fc06 <__aeabi_dmul+0x3a6>
    fbf2:	220f      	movs	r2, #15
    fbf4:	401a      	ands	r2, r3
    fbf6:	2a04      	cmp	r2, #4
    fbf8:	d005      	beq.n	fc06 <__aeabi_dmul+0x3a6>
    fbfa:	1d1a      	adds	r2, r3, #4
    fbfc:	429a      	cmp	r2, r3
    fbfe:	419b      	sbcs	r3, r3
    fc00:	425b      	negs	r3, r3
    fc02:	18e4      	adds	r4, r4, r3
    fc04:	0013      	movs	r3, r2
    fc06:	01e2      	lsls	r2, r4, #7
    fc08:	d504      	bpl.n	fc14 <__aeabi_dmul+0x3b4>
    fc0a:	2080      	movs	r0, #128	; 0x80
    fc0c:	4a51      	ldr	r2, [pc, #324]	; (fd54 <__aeabi_dmul+0x4f4>)
    fc0e:	00c0      	lsls	r0, r0, #3
    fc10:	4014      	ands	r4, r2
    fc12:	4460      	add	r0, ip
    fc14:	4a50      	ldr	r2, [pc, #320]	; (fd58 <__aeabi_dmul+0x4f8>)
    fc16:	4290      	cmp	r0, r2
    fc18:	dd00      	ble.n	fc1c <__aeabi_dmul+0x3bc>
    fc1a:	e6e3      	b.n	f9e4 <__aeabi_dmul+0x184>
    fc1c:	2501      	movs	r5, #1
    fc1e:	08db      	lsrs	r3, r3, #3
    fc20:	0762      	lsls	r2, r4, #29
    fc22:	431a      	orrs	r2, r3
    fc24:	0264      	lsls	r4, r4, #9
    fc26:	9b01      	ldr	r3, [sp, #4]
    fc28:	4691      	mov	r9, r2
    fc2a:	0b22      	lsrs	r2, r4, #12
    fc2c:	0544      	lsls	r4, r0, #21
    fc2e:	0d64      	lsrs	r4, r4, #21
    fc30:	401d      	ands	r5, r3
    fc32:	e67c      	b.n	f92e <__aeabi_dmul+0xce>
    fc34:	2280      	movs	r2, #128	; 0x80
    fc36:	4659      	mov	r1, fp
    fc38:	0312      	lsls	r2, r2, #12
    fc3a:	4211      	tst	r1, r2
    fc3c:	d008      	beq.n	fc50 <__aeabi_dmul+0x3f0>
    fc3e:	4214      	tst	r4, r2
    fc40:	d106      	bne.n	fc50 <__aeabi_dmul+0x3f0>
    fc42:	4322      	orrs	r2, r4
    fc44:	0312      	lsls	r2, r2, #12
    fc46:	0b12      	lsrs	r2, r2, #12
    fc48:	4645      	mov	r5, r8
    fc4a:	4699      	mov	r9, r3
    fc4c:	4c43      	ldr	r4, [pc, #268]	; (fd5c <__aeabi_dmul+0x4fc>)
    fc4e:	e66e      	b.n	f92e <__aeabi_dmul+0xce>
    fc50:	465b      	mov	r3, fp
    fc52:	431a      	orrs	r2, r3
    fc54:	0312      	lsls	r2, r2, #12
    fc56:	0b12      	lsrs	r2, r2, #12
    fc58:	4c40      	ldr	r4, [pc, #256]	; (fd5c <__aeabi_dmul+0x4fc>)
    fc5a:	e668      	b.n	f92e <__aeabi_dmul+0xce>
    fc5c:	0003      	movs	r3, r0
    fc5e:	4654      	mov	r4, sl
    fc60:	3b28      	subs	r3, #40	; 0x28
    fc62:	409c      	lsls	r4, r3
    fc64:	2300      	movs	r3, #0
    fc66:	e6b9      	b.n	f9dc <__aeabi_dmul+0x17c>
    fc68:	f7fe fe30 	bl	e8cc <__clzsi2>
    fc6c:	3020      	adds	r0, #32
    fc6e:	e6a6      	b.n	f9be <__aeabi_dmul+0x15e>
    fc70:	0003      	movs	r3, r0
    fc72:	3b28      	subs	r3, #40	; 0x28
    fc74:	409f      	lsls	r7, r3
    fc76:	2300      	movs	r3, #0
    fc78:	46bb      	mov	fp, r7
    fc7a:	4699      	mov	r9, r3
    fc7c:	e68a      	b.n	f994 <__aeabi_dmul+0x134>
    fc7e:	f7fe fe25 	bl	e8cc <__clzsi2>
    fc82:	3020      	adds	r0, #32
    fc84:	e674      	b.n	f970 <__aeabi_dmul+0x110>
    fc86:	46b4      	mov	ip, r6
    fc88:	e7ad      	b.n	fbe6 <__aeabi_dmul+0x386>
    fc8a:	2501      	movs	r5, #1
    fc8c:	1a2a      	subs	r2, r5, r0
    fc8e:	2a38      	cmp	r2, #56	; 0x38
    fc90:	dd06      	ble.n	fca0 <__aeabi_dmul+0x440>
    fc92:	9b01      	ldr	r3, [sp, #4]
    fc94:	2400      	movs	r4, #0
    fc96:	401d      	ands	r5, r3
    fc98:	2300      	movs	r3, #0
    fc9a:	2200      	movs	r2, #0
    fc9c:	4699      	mov	r9, r3
    fc9e:	e646      	b.n	f92e <__aeabi_dmul+0xce>
    fca0:	2a1f      	cmp	r2, #31
    fca2:	dc21      	bgt.n	fce8 <__aeabi_dmul+0x488>
    fca4:	2520      	movs	r5, #32
    fca6:	0020      	movs	r0, r4
    fca8:	1aad      	subs	r5, r5, r2
    fcaa:	001e      	movs	r6, r3
    fcac:	40ab      	lsls	r3, r5
    fcae:	40a8      	lsls	r0, r5
    fcb0:	40d6      	lsrs	r6, r2
    fcb2:	1e5d      	subs	r5, r3, #1
    fcb4:	41ab      	sbcs	r3, r5
    fcb6:	4330      	orrs	r0, r6
    fcb8:	4318      	orrs	r0, r3
    fcba:	40d4      	lsrs	r4, r2
    fcbc:	0743      	lsls	r3, r0, #29
    fcbe:	d009      	beq.n	fcd4 <__aeabi_dmul+0x474>
    fcc0:	230f      	movs	r3, #15
    fcc2:	4003      	ands	r3, r0
    fcc4:	2b04      	cmp	r3, #4
    fcc6:	d005      	beq.n	fcd4 <__aeabi_dmul+0x474>
    fcc8:	0003      	movs	r3, r0
    fcca:	1d18      	adds	r0, r3, #4
    fccc:	4298      	cmp	r0, r3
    fcce:	419b      	sbcs	r3, r3
    fcd0:	425b      	negs	r3, r3
    fcd2:	18e4      	adds	r4, r4, r3
    fcd4:	0223      	lsls	r3, r4, #8
    fcd6:	d521      	bpl.n	fd1c <__aeabi_dmul+0x4bc>
    fcd8:	2501      	movs	r5, #1
    fcda:	9b01      	ldr	r3, [sp, #4]
    fcdc:	2401      	movs	r4, #1
    fcde:	401d      	ands	r5, r3
    fce0:	2300      	movs	r3, #0
    fce2:	2200      	movs	r2, #0
    fce4:	4699      	mov	r9, r3
    fce6:	e622      	b.n	f92e <__aeabi_dmul+0xce>
    fce8:	251f      	movs	r5, #31
    fcea:	0021      	movs	r1, r4
    fcec:	426d      	negs	r5, r5
    fcee:	1a28      	subs	r0, r5, r0
    fcf0:	40c1      	lsrs	r1, r0
    fcf2:	0008      	movs	r0, r1
    fcf4:	2a20      	cmp	r2, #32
    fcf6:	d01d      	beq.n	fd34 <__aeabi_dmul+0x4d4>
    fcf8:	355f      	adds	r5, #95	; 0x5f
    fcfa:	1aaa      	subs	r2, r5, r2
    fcfc:	4094      	lsls	r4, r2
    fcfe:	4323      	orrs	r3, r4
    fd00:	1e5c      	subs	r4, r3, #1
    fd02:	41a3      	sbcs	r3, r4
    fd04:	2507      	movs	r5, #7
    fd06:	4303      	orrs	r3, r0
    fd08:	401d      	ands	r5, r3
    fd0a:	2200      	movs	r2, #0
    fd0c:	2d00      	cmp	r5, #0
    fd0e:	d009      	beq.n	fd24 <__aeabi_dmul+0x4c4>
    fd10:	220f      	movs	r2, #15
    fd12:	2400      	movs	r4, #0
    fd14:	401a      	ands	r2, r3
    fd16:	0018      	movs	r0, r3
    fd18:	2a04      	cmp	r2, #4
    fd1a:	d1d6      	bne.n	fcca <__aeabi_dmul+0x46a>
    fd1c:	0003      	movs	r3, r0
    fd1e:	0765      	lsls	r5, r4, #29
    fd20:	0264      	lsls	r4, r4, #9
    fd22:	0b22      	lsrs	r2, r4, #12
    fd24:	08db      	lsrs	r3, r3, #3
    fd26:	432b      	orrs	r3, r5
    fd28:	2501      	movs	r5, #1
    fd2a:	4699      	mov	r9, r3
    fd2c:	9b01      	ldr	r3, [sp, #4]
    fd2e:	2400      	movs	r4, #0
    fd30:	401d      	ands	r5, r3
    fd32:	e5fc      	b.n	f92e <__aeabi_dmul+0xce>
    fd34:	2400      	movs	r4, #0
    fd36:	e7e2      	b.n	fcfe <__aeabi_dmul+0x49e>
    fd38:	2280      	movs	r2, #128	; 0x80
    fd3a:	2501      	movs	r5, #1
    fd3c:	0312      	lsls	r2, r2, #12
    fd3e:	4322      	orrs	r2, r4
    fd40:	9901      	ldr	r1, [sp, #4]
    fd42:	0312      	lsls	r2, r2, #12
    fd44:	0b12      	lsrs	r2, r2, #12
    fd46:	400d      	ands	r5, r1
    fd48:	4699      	mov	r9, r3
    fd4a:	4c04      	ldr	r4, [pc, #16]	; (fd5c <__aeabi_dmul+0x4fc>)
    fd4c:	e5ef      	b.n	f92e <__aeabi_dmul+0xce>
    fd4e:	46c0      	nop			; (mov r8, r8)
    fd50:	000003ff 	.word	0x000003ff
    fd54:	feffffff 	.word	0xfeffffff
    fd58:	000007fe 	.word	0x000007fe
    fd5c:	000007ff 	.word	0x000007ff

0000fd60 <__aeabi_dsub>:
    fd60:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd62:	4646      	mov	r6, r8
    fd64:	46d6      	mov	lr, sl
    fd66:	464f      	mov	r7, r9
    fd68:	030c      	lsls	r4, r1, #12
    fd6a:	b5c0      	push	{r6, r7, lr}
    fd6c:	0fcd      	lsrs	r5, r1, #31
    fd6e:	004e      	lsls	r6, r1, #1
    fd70:	0a61      	lsrs	r1, r4, #9
    fd72:	0f44      	lsrs	r4, r0, #29
    fd74:	430c      	orrs	r4, r1
    fd76:	00c1      	lsls	r1, r0, #3
    fd78:	0058      	lsls	r0, r3, #1
    fd7a:	0d40      	lsrs	r0, r0, #21
    fd7c:	4684      	mov	ip, r0
    fd7e:	468a      	mov	sl, r1
    fd80:	000f      	movs	r7, r1
    fd82:	0319      	lsls	r1, r3, #12
    fd84:	0f50      	lsrs	r0, r2, #29
    fd86:	0a49      	lsrs	r1, r1, #9
    fd88:	4301      	orrs	r1, r0
    fd8a:	48c6      	ldr	r0, [pc, #792]	; (100a4 <__aeabi_dsub+0x344>)
    fd8c:	0d76      	lsrs	r6, r6, #21
    fd8e:	46a8      	mov	r8, r5
    fd90:	0fdb      	lsrs	r3, r3, #31
    fd92:	00d2      	lsls	r2, r2, #3
    fd94:	4584      	cmp	ip, r0
    fd96:	d100      	bne.n	fd9a <__aeabi_dsub+0x3a>
    fd98:	e0d8      	b.n	ff4c <__aeabi_dsub+0x1ec>
    fd9a:	2001      	movs	r0, #1
    fd9c:	4043      	eors	r3, r0
    fd9e:	42ab      	cmp	r3, r5
    fda0:	d100      	bne.n	fda4 <__aeabi_dsub+0x44>
    fda2:	e0a6      	b.n	fef2 <__aeabi_dsub+0x192>
    fda4:	4660      	mov	r0, ip
    fda6:	1a35      	subs	r5, r6, r0
    fda8:	2d00      	cmp	r5, #0
    fdaa:	dc00      	bgt.n	fdae <__aeabi_dsub+0x4e>
    fdac:	e105      	b.n	ffba <__aeabi_dsub+0x25a>
    fdae:	2800      	cmp	r0, #0
    fdb0:	d110      	bne.n	fdd4 <__aeabi_dsub+0x74>
    fdb2:	000b      	movs	r3, r1
    fdb4:	4313      	orrs	r3, r2
    fdb6:	d100      	bne.n	fdba <__aeabi_dsub+0x5a>
    fdb8:	e0d7      	b.n	ff6a <__aeabi_dsub+0x20a>
    fdba:	1e6b      	subs	r3, r5, #1
    fdbc:	2b00      	cmp	r3, #0
    fdbe:	d000      	beq.n	fdc2 <__aeabi_dsub+0x62>
    fdc0:	e14b      	b.n	1005a <__aeabi_dsub+0x2fa>
    fdc2:	4653      	mov	r3, sl
    fdc4:	1a9f      	subs	r7, r3, r2
    fdc6:	45ba      	cmp	sl, r7
    fdc8:	4180      	sbcs	r0, r0
    fdca:	1a64      	subs	r4, r4, r1
    fdcc:	4240      	negs	r0, r0
    fdce:	1a24      	subs	r4, r4, r0
    fdd0:	2601      	movs	r6, #1
    fdd2:	e01e      	b.n	fe12 <__aeabi_dsub+0xb2>
    fdd4:	4bb3      	ldr	r3, [pc, #716]	; (100a4 <__aeabi_dsub+0x344>)
    fdd6:	429e      	cmp	r6, r3
    fdd8:	d048      	beq.n	fe6c <__aeabi_dsub+0x10c>
    fdda:	2380      	movs	r3, #128	; 0x80
    fddc:	041b      	lsls	r3, r3, #16
    fdde:	4319      	orrs	r1, r3
    fde0:	2d38      	cmp	r5, #56	; 0x38
    fde2:	dd00      	ble.n	fde6 <__aeabi_dsub+0x86>
    fde4:	e119      	b.n	1001a <__aeabi_dsub+0x2ba>
    fde6:	2d1f      	cmp	r5, #31
    fde8:	dd00      	ble.n	fdec <__aeabi_dsub+0x8c>
    fdea:	e14c      	b.n	10086 <__aeabi_dsub+0x326>
    fdec:	2320      	movs	r3, #32
    fdee:	000f      	movs	r7, r1
    fdf0:	1b5b      	subs	r3, r3, r5
    fdf2:	0010      	movs	r0, r2
    fdf4:	409a      	lsls	r2, r3
    fdf6:	409f      	lsls	r7, r3
    fdf8:	40e8      	lsrs	r0, r5
    fdfa:	1e53      	subs	r3, r2, #1
    fdfc:	419a      	sbcs	r2, r3
    fdfe:	40e9      	lsrs	r1, r5
    fe00:	4307      	orrs	r7, r0
    fe02:	4317      	orrs	r7, r2
    fe04:	4653      	mov	r3, sl
    fe06:	1bdf      	subs	r7, r3, r7
    fe08:	1a61      	subs	r1, r4, r1
    fe0a:	45ba      	cmp	sl, r7
    fe0c:	41a4      	sbcs	r4, r4
    fe0e:	4264      	negs	r4, r4
    fe10:	1b0c      	subs	r4, r1, r4
    fe12:	0223      	lsls	r3, r4, #8
    fe14:	d400      	bmi.n	fe18 <__aeabi_dsub+0xb8>
    fe16:	e0c5      	b.n	ffa4 <__aeabi_dsub+0x244>
    fe18:	0264      	lsls	r4, r4, #9
    fe1a:	0a65      	lsrs	r5, r4, #9
    fe1c:	2d00      	cmp	r5, #0
    fe1e:	d100      	bne.n	fe22 <__aeabi_dsub+0xc2>
    fe20:	e0f6      	b.n	10010 <__aeabi_dsub+0x2b0>
    fe22:	0028      	movs	r0, r5
    fe24:	f7fe fd52 	bl	e8cc <__clzsi2>
    fe28:	0003      	movs	r3, r0
    fe2a:	3b08      	subs	r3, #8
    fe2c:	2b1f      	cmp	r3, #31
    fe2e:	dd00      	ble.n	fe32 <__aeabi_dsub+0xd2>
    fe30:	e0e9      	b.n	10006 <__aeabi_dsub+0x2a6>
    fe32:	2220      	movs	r2, #32
    fe34:	003c      	movs	r4, r7
    fe36:	1ad2      	subs	r2, r2, r3
    fe38:	409d      	lsls	r5, r3
    fe3a:	40d4      	lsrs	r4, r2
    fe3c:	409f      	lsls	r7, r3
    fe3e:	4325      	orrs	r5, r4
    fe40:	429e      	cmp	r6, r3
    fe42:	dd00      	ble.n	fe46 <__aeabi_dsub+0xe6>
    fe44:	e0db      	b.n	fffe <__aeabi_dsub+0x29e>
    fe46:	1b9e      	subs	r6, r3, r6
    fe48:	1c73      	adds	r3, r6, #1
    fe4a:	2b1f      	cmp	r3, #31
    fe4c:	dd00      	ble.n	fe50 <__aeabi_dsub+0xf0>
    fe4e:	e10a      	b.n	10066 <__aeabi_dsub+0x306>
    fe50:	2220      	movs	r2, #32
    fe52:	0038      	movs	r0, r7
    fe54:	1ad2      	subs	r2, r2, r3
    fe56:	0029      	movs	r1, r5
    fe58:	4097      	lsls	r7, r2
    fe5a:	002c      	movs	r4, r5
    fe5c:	4091      	lsls	r1, r2
    fe5e:	40d8      	lsrs	r0, r3
    fe60:	1e7a      	subs	r2, r7, #1
    fe62:	4197      	sbcs	r7, r2
    fe64:	40dc      	lsrs	r4, r3
    fe66:	2600      	movs	r6, #0
    fe68:	4301      	orrs	r1, r0
    fe6a:	430f      	orrs	r7, r1
    fe6c:	077b      	lsls	r3, r7, #29
    fe6e:	d009      	beq.n	fe84 <__aeabi_dsub+0x124>
    fe70:	230f      	movs	r3, #15
    fe72:	403b      	ands	r3, r7
    fe74:	2b04      	cmp	r3, #4
    fe76:	d005      	beq.n	fe84 <__aeabi_dsub+0x124>
    fe78:	1d3b      	adds	r3, r7, #4
    fe7a:	42bb      	cmp	r3, r7
    fe7c:	41bf      	sbcs	r7, r7
    fe7e:	427f      	negs	r7, r7
    fe80:	19e4      	adds	r4, r4, r7
    fe82:	001f      	movs	r7, r3
    fe84:	0223      	lsls	r3, r4, #8
    fe86:	d525      	bpl.n	fed4 <__aeabi_dsub+0x174>
    fe88:	4b86      	ldr	r3, [pc, #536]	; (100a4 <__aeabi_dsub+0x344>)
    fe8a:	3601      	adds	r6, #1
    fe8c:	429e      	cmp	r6, r3
    fe8e:	d100      	bne.n	fe92 <__aeabi_dsub+0x132>
    fe90:	e0af      	b.n	fff2 <__aeabi_dsub+0x292>
    fe92:	4b85      	ldr	r3, [pc, #532]	; (100a8 <__aeabi_dsub+0x348>)
    fe94:	2501      	movs	r5, #1
    fe96:	401c      	ands	r4, r3
    fe98:	4643      	mov	r3, r8
    fe9a:	0762      	lsls	r2, r4, #29
    fe9c:	08ff      	lsrs	r7, r7, #3
    fe9e:	0264      	lsls	r4, r4, #9
    fea0:	0576      	lsls	r6, r6, #21
    fea2:	4317      	orrs	r7, r2
    fea4:	0b24      	lsrs	r4, r4, #12
    fea6:	0d76      	lsrs	r6, r6, #21
    fea8:	401d      	ands	r5, r3
    feaa:	2100      	movs	r1, #0
    feac:	0324      	lsls	r4, r4, #12
    feae:	0b23      	lsrs	r3, r4, #12
    feb0:	0d0c      	lsrs	r4, r1, #20
    feb2:	4a7e      	ldr	r2, [pc, #504]	; (100ac <__aeabi_dsub+0x34c>)
    feb4:	0524      	lsls	r4, r4, #20
    feb6:	431c      	orrs	r4, r3
    feb8:	4014      	ands	r4, r2
    feba:	0533      	lsls	r3, r6, #20
    febc:	4323      	orrs	r3, r4
    febe:	005b      	lsls	r3, r3, #1
    fec0:	07ed      	lsls	r5, r5, #31
    fec2:	085b      	lsrs	r3, r3, #1
    fec4:	432b      	orrs	r3, r5
    fec6:	0038      	movs	r0, r7
    fec8:	0019      	movs	r1, r3
    feca:	bc1c      	pop	{r2, r3, r4}
    fecc:	4690      	mov	r8, r2
    fece:	4699      	mov	r9, r3
    fed0:	46a2      	mov	sl, r4
    fed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fed4:	2501      	movs	r5, #1
    fed6:	4643      	mov	r3, r8
    fed8:	0762      	lsls	r2, r4, #29
    feda:	08ff      	lsrs	r7, r7, #3
    fedc:	4317      	orrs	r7, r2
    fede:	08e4      	lsrs	r4, r4, #3
    fee0:	401d      	ands	r5, r3
    fee2:	4b70      	ldr	r3, [pc, #448]	; (100a4 <__aeabi_dsub+0x344>)
    fee4:	429e      	cmp	r6, r3
    fee6:	d036      	beq.n	ff56 <__aeabi_dsub+0x1f6>
    fee8:	0324      	lsls	r4, r4, #12
    feea:	0576      	lsls	r6, r6, #21
    feec:	0b24      	lsrs	r4, r4, #12
    feee:	0d76      	lsrs	r6, r6, #21
    fef0:	e7db      	b.n	feaa <__aeabi_dsub+0x14a>
    fef2:	4663      	mov	r3, ip
    fef4:	1af3      	subs	r3, r6, r3
    fef6:	2b00      	cmp	r3, #0
    fef8:	dc00      	bgt.n	fefc <__aeabi_dsub+0x19c>
    fefa:	e094      	b.n	10026 <__aeabi_dsub+0x2c6>
    fefc:	4660      	mov	r0, ip
    fefe:	2800      	cmp	r0, #0
    ff00:	d035      	beq.n	ff6e <__aeabi_dsub+0x20e>
    ff02:	4868      	ldr	r0, [pc, #416]	; (100a4 <__aeabi_dsub+0x344>)
    ff04:	4286      	cmp	r6, r0
    ff06:	d0b1      	beq.n	fe6c <__aeabi_dsub+0x10c>
    ff08:	2780      	movs	r7, #128	; 0x80
    ff0a:	043f      	lsls	r7, r7, #16
    ff0c:	4339      	orrs	r1, r7
    ff0e:	2b38      	cmp	r3, #56	; 0x38
    ff10:	dc00      	bgt.n	ff14 <__aeabi_dsub+0x1b4>
    ff12:	e0fd      	b.n	10110 <__aeabi_dsub+0x3b0>
    ff14:	430a      	orrs	r2, r1
    ff16:	0017      	movs	r7, r2
    ff18:	2100      	movs	r1, #0
    ff1a:	1e7a      	subs	r2, r7, #1
    ff1c:	4197      	sbcs	r7, r2
    ff1e:	4457      	add	r7, sl
    ff20:	4557      	cmp	r7, sl
    ff22:	4180      	sbcs	r0, r0
    ff24:	1909      	adds	r1, r1, r4
    ff26:	4244      	negs	r4, r0
    ff28:	190c      	adds	r4, r1, r4
    ff2a:	0223      	lsls	r3, r4, #8
    ff2c:	d53a      	bpl.n	ffa4 <__aeabi_dsub+0x244>
    ff2e:	4b5d      	ldr	r3, [pc, #372]	; (100a4 <__aeabi_dsub+0x344>)
    ff30:	3601      	adds	r6, #1
    ff32:	429e      	cmp	r6, r3
    ff34:	d100      	bne.n	ff38 <__aeabi_dsub+0x1d8>
    ff36:	e14b      	b.n	101d0 <__aeabi_dsub+0x470>
    ff38:	2201      	movs	r2, #1
    ff3a:	4b5b      	ldr	r3, [pc, #364]	; (100a8 <__aeabi_dsub+0x348>)
    ff3c:	401c      	ands	r4, r3
    ff3e:	087b      	lsrs	r3, r7, #1
    ff40:	4017      	ands	r7, r2
    ff42:	431f      	orrs	r7, r3
    ff44:	07e2      	lsls	r2, r4, #31
    ff46:	4317      	orrs	r7, r2
    ff48:	0864      	lsrs	r4, r4, #1
    ff4a:	e78f      	b.n	fe6c <__aeabi_dsub+0x10c>
    ff4c:	0008      	movs	r0, r1
    ff4e:	4310      	orrs	r0, r2
    ff50:	d000      	beq.n	ff54 <__aeabi_dsub+0x1f4>
    ff52:	e724      	b.n	fd9e <__aeabi_dsub+0x3e>
    ff54:	e721      	b.n	fd9a <__aeabi_dsub+0x3a>
    ff56:	0023      	movs	r3, r4
    ff58:	433b      	orrs	r3, r7
    ff5a:	d100      	bne.n	ff5e <__aeabi_dsub+0x1fe>
    ff5c:	e1b9      	b.n	102d2 <__aeabi_dsub+0x572>
    ff5e:	2280      	movs	r2, #128	; 0x80
    ff60:	0312      	lsls	r2, r2, #12
    ff62:	4314      	orrs	r4, r2
    ff64:	0324      	lsls	r4, r4, #12
    ff66:	0b24      	lsrs	r4, r4, #12
    ff68:	e79f      	b.n	feaa <__aeabi_dsub+0x14a>
    ff6a:	002e      	movs	r6, r5
    ff6c:	e77e      	b.n	fe6c <__aeabi_dsub+0x10c>
    ff6e:	0008      	movs	r0, r1
    ff70:	4310      	orrs	r0, r2
    ff72:	d100      	bne.n	ff76 <__aeabi_dsub+0x216>
    ff74:	e0ca      	b.n	1010c <__aeabi_dsub+0x3ac>
    ff76:	1e58      	subs	r0, r3, #1
    ff78:	4684      	mov	ip, r0
    ff7a:	2800      	cmp	r0, #0
    ff7c:	d000      	beq.n	ff80 <__aeabi_dsub+0x220>
    ff7e:	e0e7      	b.n	10150 <__aeabi_dsub+0x3f0>
    ff80:	4452      	add	r2, sl
    ff82:	4552      	cmp	r2, sl
    ff84:	4180      	sbcs	r0, r0
    ff86:	1864      	adds	r4, r4, r1
    ff88:	4240      	negs	r0, r0
    ff8a:	1824      	adds	r4, r4, r0
    ff8c:	0017      	movs	r7, r2
    ff8e:	2601      	movs	r6, #1
    ff90:	0223      	lsls	r3, r4, #8
    ff92:	d507      	bpl.n	ffa4 <__aeabi_dsub+0x244>
    ff94:	2602      	movs	r6, #2
    ff96:	e7cf      	b.n	ff38 <__aeabi_dsub+0x1d8>
    ff98:	4664      	mov	r4, ip
    ff9a:	432c      	orrs	r4, r5
    ff9c:	d100      	bne.n	ffa0 <__aeabi_dsub+0x240>
    ff9e:	e1b3      	b.n	10308 <__aeabi_dsub+0x5a8>
    ffa0:	002c      	movs	r4, r5
    ffa2:	4667      	mov	r7, ip
    ffa4:	077b      	lsls	r3, r7, #29
    ffa6:	d000      	beq.n	ffaa <__aeabi_dsub+0x24a>
    ffa8:	e762      	b.n	fe70 <__aeabi_dsub+0x110>
    ffaa:	0763      	lsls	r3, r4, #29
    ffac:	08ff      	lsrs	r7, r7, #3
    ffae:	431f      	orrs	r7, r3
    ffb0:	2501      	movs	r5, #1
    ffb2:	4643      	mov	r3, r8
    ffb4:	08e4      	lsrs	r4, r4, #3
    ffb6:	401d      	ands	r5, r3
    ffb8:	e793      	b.n	fee2 <__aeabi_dsub+0x182>
    ffba:	2d00      	cmp	r5, #0
    ffbc:	d178      	bne.n	100b0 <__aeabi_dsub+0x350>
    ffbe:	1c75      	adds	r5, r6, #1
    ffc0:	056d      	lsls	r5, r5, #21
    ffc2:	0d6d      	lsrs	r5, r5, #21
    ffc4:	2d01      	cmp	r5, #1
    ffc6:	dc00      	bgt.n	ffca <__aeabi_dsub+0x26a>
    ffc8:	e0f2      	b.n	101b0 <__aeabi_dsub+0x450>
    ffca:	4650      	mov	r0, sl
    ffcc:	1a80      	subs	r0, r0, r2
    ffce:	4582      	cmp	sl, r0
    ffd0:	41bf      	sbcs	r7, r7
    ffd2:	1a65      	subs	r5, r4, r1
    ffd4:	427f      	negs	r7, r7
    ffd6:	1bed      	subs	r5, r5, r7
    ffd8:	4684      	mov	ip, r0
    ffda:	0228      	lsls	r0, r5, #8
    ffdc:	d400      	bmi.n	ffe0 <__aeabi_dsub+0x280>
    ffde:	e08c      	b.n	100fa <__aeabi_dsub+0x39a>
    ffe0:	4650      	mov	r0, sl
    ffe2:	1a17      	subs	r7, r2, r0
    ffe4:	42ba      	cmp	r2, r7
    ffe6:	4192      	sbcs	r2, r2
    ffe8:	1b0c      	subs	r4, r1, r4
    ffea:	4255      	negs	r5, r2
    ffec:	1b65      	subs	r5, r4, r5
    ffee:	4698      	mov	r8, r3
    fff0:	e714      	b.n	fe1c <__aeabi_dsub+0xbc>
    fff2:	2501      	movs	r5, #1
    fff4:	4643      	mov	r3, r8
    fff6:	2400      	movs	r4, #0
    fff8:	401d      	ands	r5, r3
    fffa:	2700      	movs	r7, #0
    fffc:	e755      	b.n	feaa <__aeabi_dsub+0x14a>
    fffe:	4c2a      	ldr	r4, [pc, #168]	; (100a8 <__aeabi_dsub+0x348>)
   10000:	1af6      	subs	r6, r6, r3
   10002:	402c      	ands	r4, r5
   10004:	e732      	b.n	fe6c <__aeabi_dsub+0x10c>
   10006:	003d      	movs	r5, r7
   10008:	3828      	subs	r0, #40	; 0x28
   1000a:	4085      	lsls	r5, r0
   1000c:	2700      	movs	r7, #0
   1000e:	e717      	b.n	fe40 <__aeabi_dsub+0xe0>
   10010:	0038      	movs	r0, r7
   10012:	f7fe fc5b 	bl	e8cc <__clzsi2>
   10016:	3020      	adds	r0, #32
   10018:	e706      	b.n	fe28 <__aeabi_dsub+0xc8>
   1001a:	430a      	orrs	r2, r1
   1001c:	0017      	movs	r7, r2
   1001e:	2100      	movs	r1, #0
   10020:	1e7a      	subs	r2, r7, #1
   10022:	4197      	sbcs	r7, r2
   10024:	e6ee      	b.n	fe04 <__aeabi_dsub+0xa4>
   10026:	2b00      	cmp	r3, #0
   10028:	d000      	beq.n	1002c <__aeabi_dsub+0x2cc>
   1002a:	e0e5      	b.n	101f8 <__aeabi_dsub+0x498>
   1002c:	1c73      	adds	r3, r6, #1
   1002e:	469c      	mov	ip, r3
   10030:	055b      	lsls	r3, r3, #21
   10032:	0d5b      	lsrs	r3, r3, #21
   10034:	2b01      	cmp	r3, #1
   10036:	dc00      	bgt.n	1003a <__aeabi_dsub+0x2da>
   10038:	e09f      	b.n	1017a <__aeabi_dsub+0x41a>
   1003a:	4b1a      	ldr	r3, [pc, #104]	; (100a4 <__aeabi_dsub+0x344>)
   1003c:	459c      	cmp	ip, r3
   1003e:	d100      	bne.n	10042 <__aeabi_dsub+0x2e2>
   10040:	e0c5      	b.n	101ce <__aeabi_dsub+0x46e>
   10042:	4452      	add	r2, sl
   10044:	4552      	cmp	r2, sl
   10046:	4180      	sbcs	r0, r0
   10048:	1864      	adds	r4, r4, r1
   1004a:	4240      	negs	r0, r0
   1004c:	1824      	adds	r4, r4, r0
   1004e:	07e7      	lsls	r7, r4, #31
   10050:	0852      	lsrs	r2, r2, #1
   10052:	4317      	orrs	r7, r2
   10054:	0864      	lsrs	r4, r4, #1
   10056:	4666      	mov	r6, ip
   10058:	e708      	b.n	fe6c <__aeabi_dsub+0x10c>
   1005a:	4812      	ldr	r0, [pc, #72]	; (100a4 <__aeabi_dsub+0x344>)
   1005c:	4285      	cmp	r5, r0
   1005e:	d100      	bne.n	10062 <__aeabi_dsub+0x302>
   10060:	e085      	b.n	1016e <__aeabi_dsub+0x40e>
   10062:	001d      	movs	r5, r3
   10064:	e6bc      	b.n	fde0 <__aeabi_dsub+0x80>
   10066:	0029      	movs	r1, r5
   10068:	3e1f      	subs	r6, #31
   1006a:	40f1      	lsrs	r1, r6
   1006c:	2b20      	cmp	r3, #32
   1006e:	d100      	bne.n	10072 <__aeabi_dsub+0x312>
   10070:	e07f      	b.n	10172 <__aeabi_dsub+0x412>
   10072:	2240      	movs	r2, #64	; 0x40
   10074:	1ad3      	subs	r3, r2, r3
   10076:	409d      	lsls	r5, r3
   10078:	432f      	orrs	r7, r5
   1007a:	1e7d      	subs	r5, r7, #1
   1007c:	41af      	sbcs	r7, r5
   1007e:	2400      	movs	r4, #0
   10080:	430f      	orrs	r7, r1
   10082:	2600      	movs	r6, #0
   10084:	e78e      	b.n	ffa4 <__aeabi_dsub+0x244>
   10086:	002b      	movs	r3, r5
   10088:	000f      	movs	r7, r1
   1008a:	3b20      	subs	r3, #32
   1008c:	40df      	lsrs	r7, r3
   1008e:	2d20      	cmp	r5, #32
   10090:	d071      	beq.n	10176 <__aeabi_dsub+0x416>
   10092:	2340      	movs	r3, #64	; 0x40
   10094:	1b5d      	subs	r5, r3, r5
   10096:	40a9      	lsls	r1, r5
   10098:	430a      	orrs	r2, r1
   1009a:	1e51      	subs	r1, r2, #1
   1009c:	418a      	sbcs	r2, r1
   1009e:	2100      	movs	r1, #0
   100a0:	4317      	orrs	r7, r2
   100a2:	e6af      	b.n	fe04 <__aeabi_dsub+0xa4>
   100a4:	000007ff 	.word	0x000007ff
   100a8:	ff7fffff 	.word	0xff7fffff
   100ac:	800fffff 	.word	0x800fffff
   100b0:	2e00      	cmp	r6, #0
   100b2:	d03e      	beq.n	10132 <__aeabi_dsub+0x3d2>
   100b4:	4eb3      	ldr	r6, [pc, #716]	; (10384 <__aeabi_dsub+0x624>)
   100b6:	45b4      	cmp	ip, r6
   100b8:	d045      	beq.n	10146 <__aeabi_dsub+0x3e6>
   100ba:	2680      	movs	r6, #128	; 0x80
   100bc:	0436      	lsls	r6, r6, #16
   100be:	426d      	negs	r5, r5
   100c0:	4334      	orrs	r4, r6
   100c2:	2d38      	cmp	r5, #56	; 0x38
   100c4:	dd00      	ble.n	100c8 <__aeabi_dsub+0x368>
   100c6:	e0a8      	b.n	1021a <__aeabi_dsub+0x4ba>
   100c8:	2d1f      	cmp	r5, #31
   100ca:	dd00      	ble.n	100ce <__aeabi_dsub+0x36e>
   100cc:	e11f      	b.n	1030e <__aeabi_dsub+0x5ae>
   100ce:	2620      	movs	r6, #32
   100d0:	0027      	movs	r7, r4
   100d2:	4650      	mov	r0, sl
   100d4:	1b76      	subs	r6, r6, r5
   100d6:	40b7      	lsls	r7, r6
   100d8:	40e8      	lsrs	r0, r5
   100da:	4307      	orrs	r7, r0
   100dc:	4650      	mov	r0, sl
   100de:	40b0      	lsls	r0, r6
   100e0:	1e46      	subs	r6, r0, #1
   100e2:	41b0      	sbcs	r0, r6
   100e4:	40ec      	lsrs	r4, r5
   100e6:	4338      	orrs	r0, r7
   100e8:	1a17      	subs	r7, r2, r0
   100ea:	42ba      	cmp	r2, r7
   100ec:	4192      	sbcs	r2, r2
   100ee:	1b0c      	subs	r4, r1, r4
   100f0:	4252      	negs	r2, r2
   100f2:	1aa4      	subs	r4, r4, r2
   100f4:	4666      	mov	r6, ip
   100f6:	4698      	mov	r8, r3
   100f8:	e68b      	b.n	fe12 <__aeabi_dsub+0xb2>
   100fa:	4664      	mov	r4, ip
   100fc:	4667      	mov	r7, ip
   100fe:	432c      	orrs	r4, r5
   10100:	d000      	beq.n	10104 <__aeabi_dsub+0x3a4>
   10102:	e68b      	b.n	fe1c <__aeabi_dsub+0xbc>
   10104:	2500      	movs	r5, #0
   10106:	2600      	movs	r6, #0
   10108:	2700      	movs	r7, #0
   1010a:	e6ea      	b.n	fee2 <__aeabi_dsub+0x182>
   1010c:	001e      	movs	r6, r3
   1010e:	e6ad      	b.n	fe6c <__aeabi_dsub+0x10c>
   10110:	2b1f      	cmp	r3, #31
   10112:	dc60      	bgt.n	101d6 <__aeabi_dsub+0x476>
   10114:	2720      	movs	r7, #32
   10116:	1af8      	subs	r0, r7, r3
   10118:	000f      	movs	r7, r1
   1011a:	4684      	mov	ip, r0
   1011c:	4087      	lsls	r7, r0
   1011e:	0010      	movs	r0, r2
   10120:	40d8      	lsrs	r0, r3
   10122:	4307      	orrs	r7, r0
   10124:	4660      	mov	r0, ip
   10126:	4082      	lsls	r2, r0
   10128:	1e50      	subs	r0, r2, #1
   1012a:	4182      	sbcs	r2, r0
   1012c:	40d9      	lsrs	r1, r3
   1012e:	4317      	orrs	r7, r2
   10130:	e6f5      	b.n	ff1e <__aeabi_dsub+0x1be>
   10132:	0026      	movs	r6, r4
   10134:	4650      	mov	r0, sl
   10136:	4306      	orrs	r6, r0
   10138:	d005      	beq.n	10146 <__aeabi_dsub+0x3e6>
   1013a:	43ed      	mvns	r5, r5
   1013c:	2d00      	cmp	r5, #0
   1013e:	d0d3      	beq.n	100e8 <__aeabi_dsub+0x388>
   10140:	4e90      	ldr	r6, [pc, #576]	; (10384 <__aeabi_dsub+0x624>)
   10142:	45b4      	cmp	ip, r6
   10144:	d1bd      	bne.n	100c2 <__aeabi_dsub+0x362>
   10146:	000c      	movs	r4, r1
   10148:	0017      	movs	r7, r2
   1014a:	4666      	mov	r6, ip
   1014c:	4698      	mov	r8, r3
   1014e:	e68d      	b.n	fe6c <__aeabi_dsub+0x10c>
   10150:	488c      	ldr	r0, [pc, #560]	; (10384 <__aeabi_dsub+0x624>)
   10152:	4283      	cmp	r3, r0
   10154:	d00b      	beq.n	1016e <__aeabi_dsub+0x40e>
   10156:	4663      	mov	r3, ip
   10158:	e6d9      	b.n	ff0e <__aeabi_dsub+0x1ae>
   1015a:	2d00      	cmp	r5, #0
   1015c:	d000      	beq.n	10160 <__aeabi_dsub+0x400>
   1015e:	e096      	b.n	1028e <__aeabi_dsub+0x52e>
   10160:	0008      	movs	r0, r1
   10162:	4310      	orrs	r0, r2
   10164:	d100      	bne.n	10168 <__aeabi_dsub+0x408>
   10166:	e0e2      	b.n	1032e <__aeabi_dsub+0x5ce>
   10168:	000c      	movs	r4, r1
   1016a:	0017      	movs	r7, r2
   1016c:	4698      	mov	r8, r3
   1016e:	4e85      	ldr	r6, [pc, #532]	; (10384 <__aeabi_dsub+0x624>)
   10170:	e67c      	b.n	fe6c <__aeabi_dsub+0x10c>
   10172:	2500      	movs	r5, #0
   10174:	e780      	b.n	10078 <__aeabi_dsub+0x318>
   10176:	2100      	movs	r1, #0
   10178:	e78e      	b.n	10098 <__aeabi_dsub+0x338>
   1017a:	0023      	movs	r3, r4
   1017c:	4650      	mov	r0, sl
   1017e:	4303      	orrs	r3, r0
   10180:	2e00      	cmp	r6, #0
   10182:	d000      	beq.n	10186 <__aeabi_dsub+0x426>
   10184:	e0a8      	b.n	102d8 <__aeabi_dsub+0x578>
   10186:	2b00      	cmp	r3, #0
   10188:	d100      	bne.n	1018c <__aeabi_dsub+0x42c>
   1018a:	e0de      	b.n	1034a <__aeabi_dsub+0x5ea>
   1018c:	000b      	movs	r3, r1
   1018e:	4313      	orrs	r3, r2
   10190:	d100      	bne.n	10194 <__aeabi_dsub+0x434>
   10192:	e66b      	b.n	fe6c <__aeabi_dsub+0x10c>
   10194:	4452      	add	r2, sl
   10196:	4552      	cmp	r2, sl
   10198:	4180      	sbcs	r0, r0
   1019a:	1864      	adds	r4, r4, r1
   1019c:	4240      	negs	r0, r0
   1019e:	1824      	adds	r4, r4, r0
   101a0:	0017      	movs	r7, r2
   101a2:	0223      	lsls	r3, r4, #8
   101a4:	d400      	bmi.n	101a8 <__aeabi_dsub+0x448>
   101a6:	e6fd      	b.n	ffa4 <__aeabi_dsub+0x244>
   101a8:	4b77      	ldr	r3, [pc, #476]	; (10388 <__aeabi_dsub+0x628>)
   101aa:	4666      	mov	r6, ip
   101ac:	401c      	ands	r4, r3
   101ae:	e65d      	b.n	fe6c <__aeabi_dsub+0x10c>
   101b0:	0025      	movs	r5, r4
   101b2:	4650      	mov	r0, sl
   101b4:	4305      	orrs	r5, r0
   101b6:	2e00      	cmp	r6, #0
   101b8:	d1cf      	bne.n	1015a <__aeabi_dsub+0x3fa>
   101ba:	2d00      	cmp	r5, #0
   101bc:	d14f      	bne.n	1025e <__aeabi_dsub+0x4fe>
   101be:	000c      	movs	r4, r1
   101c0:	4314      	orrs	r4, r2
   101c2:	d100      	bne.n	101c6 <__aeabi_dsub+0x466>
   101c4:	e0a0      	b.n	10308 <__aeabi_dsub+0x5a8>
   101c6:	000c      	movs	r4, r1
   101c8:	0017      	movs	r7, r2
   101ca:	4698      	mov	r8, r3
   101cc:	e64e      	b.n	fe6c <__aeabi_dsub+0x10c>
   101ce:	4666      	mov	r6, ip
   101d0:	2400      	movs	r4, #0
   101d2:	2700      	movs	r7, #0
   101d4:	e685      	b.n	fee2 <__aeabi_dsub+0x182>
   101d6:	001f      	movs	r7, r3
   101d8:	0008      	movs	r0, r1
   101da:	3f20      	subs	r7, #32
   101dc:	40f8      	lsrs	r0, r7
   101de:	0007      	movs	r7, r0
   101e0:	2b20      	cmp	r3, #32
   101e2:	d100      	bne.n	101e6 <__aeabi_dsub+0x486>
   101e4:	e08e      	b.n	10304 <__aeabi_dsub+0x5a4>
   101e6:	2040      	movs	r0, #64	; 0x40
   101e8:	1ac3      	subs	r3, r0, r3
   101ea:	4099      	lsls	r1, r3
   101ec:	430a      	orrs	r2, r1
   101ee:	1e51      	subs	r1, r2, #1
   101f0:	418a      	sbcs	r2, r1
   101f2:	2100      	movs	r1, #0
   101f4:	4317      	orrs	r7, r2
   101f6:	e692      	b.n	ff1e <__aeabi_dsub+0x1be>
   101f8:	2e00      	cmp	r6, #0
   101fa:	d114      	bne.n	10226 <__aeabi_dsub+0x4c6>
   101fc:	0026      	movs	r6, r4
   101fe:	4650      	mov	r0, sl
   10200:	4306      	orrs	r6, r0
   10202:	d062      	beq.n	102ca <__aeabi_dsub+0x56a>
   10204:	43db      	mvns	r3, r3
   10206:	2b00      	cmp	r3, #0
   10208:	d15c      	bne.n	102c4 <__aeabi_dsub+0x564>
   1020a:	1887      	adds	r7, r0, r2
   1020c:	4297      	cmp	r7, r2
   1020e:	4192      	sbcs	r2, r2
   10210:	1864      	adds	r4, r4, r1
   10212:	4252      	negs	r2, r2
   10214:	18a4      	adds	r4, r4, r2
   10216:	4666      	mov	r6, ip
   10218:	e687      	b.n	ff2a <__aeabi_dsub+0x1ca>
   1021a:	4650      	mov	r0, sl
   1021c:	4320      	orrs	r0, r4
   1021e:	1e44      	subs	r4, r0, #1
   10220:	41a0      	sbcs	r0, r4
   10222:	2400      	movs	r4, #0
   10224:	e760      	b.n	100e8 <__aeabi_dsub+0x388>
   10226:	4e57      	ldr	r6, [pc, #348]	; (10384 <__aeabi_dsub+0x624>)
   10228:	45b4      	cmp	ip, r6
   1022a:	d04e      	beq.n	102ca <__aeabi_dsub+0x56a>
   1022c:	2680      	movs	r6, #128	; 0x80
   1022e:	0436      	lsls	r6, r6, #16
   10230:	425b      	negs	r3, r3
   10232:	4334      	orrs	r4, r6
   10234:	2b38      	cmp	r3, #56	; 0x38
   10236:	dd00      	ble.n	1023a <__aeabi_dsub+0x4da>
   10238:	e07f      	b.n	1033a <__aeabi_dsub+0x5da>
   1023a:	2b1f      	cmp	r3, #31
   1023c:	dd00      	ble.n	10240 <__aeabi_dsub+0x4e0>
   1023e:	e08b      	b.n	10358 <__aeabi_dsub+0x5f8>
   10240:	2620      	movs	r6, #32
   10242:	0027      	movs	r7, r4
   10244:	4650      	mov	r0, sl
   10246:	1af6      	subs	r6, r6, r3
   10248:	40b7      	lsls	r7, r6
   1024a:	40d8      	lsrs	r0, r3
   1024c:	4307      	orrs	r7, r0
   1024e:	4650      	mov	r0, sl
   10250:	40b0      	lsls	r0, r6
   10252:	1e46      	subs	r6, r0, #1
   10254:	41b0      	sbcs	r0, r6
   10256:	4307      	orrs	r7, r0
   10258:	40dc      	lsrs	r4, r3
   1025a:	18bf      	adds	r7, r7, r2
   1025c:	e7d6      	b.n	1020c <__aeabi_dsub+0x4ac>
   1025e:	000d      	movs	r5, r1
   10260:	4315      	orrs	r5, r2
   10262:	d100      	bne.n	10266 <__aeabi_dsub+0x506>
   10264:	e602      	b.n	fe6c <__aeabi_dsub+0x10c>
   10266:	4650      	mov	r0, sl
   10268:	1a80      	subs	r0, r0, r2
   1026a:	4582      	cmp	sl, r0
   1026c:	41bf      	sbcs	r7, r7
   1026e:	1a65      	subs	r5, r4, r1
   10270:	427f      	negs	r7, r7
   10272:	1bed      	subs	r5, r5, r7
   10274:	4684      	mov	ip, r0
   10276:	0228      	lsls	r0, r5, #8
   10278:	d400      	bmi.n	1027c <__aeabi_dsub+0x51c>
   1027a:	e68d      	b.n	ff98 <__aeabi_dsub+0x238>
   1027c:	4650      	mov	r0, sl
   1027e:	1a17      	subs	r7, r2, r0
   10280:	42ba      	cmp	r2, r7
   10282:	4192      	sbcs	r2, r2
   10284:	1b0c      	subs	r4, r1, r4
   10286:	4252      	negs	r2, r2
   10288:	1aa4      	subs	r4, r4, r2
   1028a:	4698      	mov	r8, r3
   1028c:	e5ee      	b.n	fe6c <__aeabi_dsub+0x10c>
   1028e:	000d      	movs	r5, r1
   10290:	4315      	orrs	r5, r2
   10292:	d100      	bne.n	10296 <__aeabi_dsub+0x536>
   10294:	e76b      	b.n	1016e <__aeabi_dsub+0x40e>
   10296:	4650      	mov	r0, sl
   10298:	0767      	lsls	r7, r4, #29
   1029a:	08c0      	lsrs	r0, r0, #3
   1029c:	4307      	orrs	r7, r0
   1029e:	2080      	movs	r0, #128	; 0x80
   102a0:	08e4      	lsrs	r4, r4, #3
   102a2:	0300      	lsls	r0, r0, #12
   102a4:	4204      	tst	r4, r0
   102a6:	d007      	beq.n	102b8 <__aeabi_dsub+0x558>
   102a8:	08cd      	lsrs	r5, r1, #3
   102aa:	4205      	tst	r5, r0
   102ac:	d104      	bne.n	102b8 <__aeabi_dsub+0x558>
   102ae:	002c      	movs	r4, r5
   102b0:	4698      	mov	r8, r3
   102b2:	08d7      	lsrs	r7, r2, #3
   102b4:	0749      	lsls	r1, r1, #29
   102b6:	430f      	orrs	r7, r1
   102b8:	0f7b      	lsrs	r3, r7, #29
   102ba:	00e4      	lsls	r4, r4, #3
   102bc:	431c      	orrs	r4, r3
   102be:	00ff      	lsls	r7, r7, #3
   102c0:	4e30      	ldr	r6, [pc, #192]	; (10384 <__aeabi_dsub+0x624>)
   102c2:	e5d3      	b.n	fe6c <__aeabi_dsub+0x10c>
   102c4:	4e2f      	ldr	r6, [pc, #188]	; (10384 <__aeabi_dsub+0x624>)
   102c6:	45b4      	cmp	ip, r6
   102c8:	d1b4      	bne.n	10234 <__aeabi_dsub+0x4d4>
   102ca:	000c      	movs	r4, r1
   102cc:	0017      	movs	r7, r2
   102ce:	4666      	mov	r6, ip
   102d0:	e5cc      	b.n	fe6c <__aeabi_dsub+0x10c>
   102d2:	2700      	movs	r7, #0
   102d4:	2400      	movs	r4, #0
   102d6:	e5e8      	b.n	feaa <__aeabi_dsub+0x14a>
   102d8:	2b00      	cmp	r3, #0
   102da:	d039      	beq.n	10350 <__aeabi_dsub+0x5f0>
   102dc:	000b      	movs	r3, r1
   102de:	4313      	orrs	r3, r2
   102e0:	d100      	bne.n	102e4 <__aeabi_dsub+0x584>
   102e2:	e744      	b.n	1016e <__aeabi_dsub+0x40e>
   102e4:	08c0      	lsrs	r0, r0, #3
   102e6:	0767      	lsls	r7, r4, #29
   102e8:	4307      	orrs	r7, r0
   102ea:	2080      	movs	r0, #128	; 0x80
   102ec:	08e4      	lsrs	r4, r4, #3
   102ee:	0300      	lsls	r0, r0, #12
   102f0:	4204      	tst	r4, r0
   102f2:	d0e1      	beq.n	102b8 <__aeabi_dsub+0x558>
   102f4:	08cb      	lsrs	r3, r1, #3
   102f6:	4203      	tst	r3, r0
   102f8:	d1de      	bne.n	102b8 <__aeabi_dsub+0x558>
   102fa:	08d7      	lsrs	r7, r2, #3
   102fc:	0749      	lsls	r1, r1, #29
   102fe:	430f      	orrs	r7, r1
   10300:	001c      	movs	r4, r3
   10302:	e7d9      	b.n	102b8 <__aeabi_dsub+0x558>
   10304:	2100      	movs	r1, #0
   10306:	e771      	b.n	101ec <__aeabi_dsub+0x48c>
   10308:	2500      	movs	r5, #0
   1030a:	2700      	movs	r7, #0
   1030c:	e5e9      	b.n	fee2 <__aeabi_dsub+0x182>
   1030e:	002e      	movs	r6, r5
   10310:	0027      	movs	r7, r4
   10312:	3e20      	subs	r6, #32
   10314:	40f7      	lsrs	r7, r6
   10316:	2d20      	cmp	r5, #32
   10318:	d02f      	beq.n	1037a <__aeabi_dsub+0x61a>
   1031a:	2640      	movs	r6, #64	; 0x40
   1031c:	1b75      	subs	r5, r6, r5
   1031e:	40ac      	lsls	r4, r5
   10320:	4650      	mov	r0, sl
   10322:	4320      	orrs	r0, r4
   10324:	1e44      	subs	r4, r0, #1
   10326:	41a0      	sbcs	r0, r4
   10328:	2400      	movs	r4, #0
   1032a:	4338      	orrs	r0, r7
   1032c:	e6dc      	b.n	100e8 <__aeabi_dsub+0x388>
   1032e:	2480      	movs	r4, #128	; 0x80
   10330:	2500      	movs	r5, #0
   10332:	0324      	lsls	r4, r4, #12
   10334:	4e13      	ldr	r6, [pc, #76]	; (10384 <__aeabi_dsub+0x624>)
   10336:	2700      	movs	r7, #0
   10338:	e5d3      	b.n	fee2 <__aeabi_dsub+0x182>
   1033a:	4650      	mov	r0, sl
   1033c:	4320      	orrs	r0, r4
   1033e:	0007      	movs	r7, r0
   10340:	1e78      	subs	r0, r7, #1
   10342:	4187      	sbcs	r7, r0
   10344:	2400      	movs	r4, #0
   10346:	18bf      	adds	r7, r7, r2
   10348:	e760      	b.n	1020c <__aeabi_dsub+0x4ac>
   1034a:	000c      	movs	r4, r1
   1034c:	0017      	movs	r7, r2
   1034e:	e58d      	b.n	fe6c <__aeabi_dsub+0x10c>
   10350:	000c      	movs	r4, r1
   10352:	0017      	movs	r7, r2
   10354:	4e0b      	ldr	r6, [pc, #44]	; (10384 <__aeabi_dsub+0x624>)
   10356:	e589      	b.n	fe6c <__aeabi_dsub+0x10c>
   10358:	001e      	movs	r6, r3
   1035a:	0027      	movs	r7, r4
   1035c:	3e20      	subs	r6, #32
   1035e:	40f7      	lsrs	r7, r6
   10360:	2b20      	cmp	r3, #32
   10362:	d00c      	beq.n	1037e <__aeabi_dsub+0x61e>
   10364:	2640      	movs	r6, #64	; 0x40
   10366:	1af3      	subs	r3, r6, r3
   10368:	409c      	lsls	r4, r3
   1036a:	4650      	mov	r0, sl
   1036c:	4320      	orrs	r0, r4
   1036e:	1e44      	subs	r4, r0, #1
   10370:	41a0      	sbcs	r0, r4
   10372:	4307      	orrs	r7, r0
   10374:	2400      	movs	r4, #0
   10376:	18bf      	adds	r7, r7, r2
   10378:	e748      	b.n	1020c <__aeabi_dsub+0x4ac>
   1037a:	2400      	movs	r4, #0
   1037c:	e7d0      	b.n	10320 <__aeabi_dsub+0x5c0>
   1037e:	2400      	movs	r4, #0
   10380:	e7f3      	b.n	1036a <__aeabi_dsub+0x60a>
   10382:	46c0      	nop			; (mov r8, r8)
   10384:	000007ff 	.word	0x000007ff
   10388:	ff7fffff 	.word	0xff7fffff

0001038c <__aeabi_d2iz>:
   1038c:	b530      	push	{r4, r5, lr}
   1038e:	4d13      	ldr	r5, [pc, #76]	; (103dc <__aeabi_d2iz+0x50>)
   10390:	030a      	lsls	r2, r1, #12
   10392:	004b      	lsls	r3, r1, #1
   10394:	0b12      	lsrs	r2, r2, #12
   10396:	0d5b      	lsrs	r3, r3, #21
   10398:	0fc9      	lsrs	r1, r1, #31
   1039a:	2400      	movs	r4, #0
   1039c:	42ab      	cmp	r3, r5
   1039e:	dd10      	ble.n	103c2 <__aeabi_d2iz+0x36>
   103a0:	4c0f      	ldr	r4, [pc, #60]	; (103e0 <__aeabi_d2iz+0x54>)
   103a2:	42a3      	cmp	r3, r4
   103a4:	dc0f      	bgt.n	103c6 <__aeabi_d2iz+0x3a>
   103a6:	2480      	movs	r4, #128	; 0x80
   103a8:	4d0e      	ldr	r5, [pc, #56]	; (103e4 <__aeabi_d2iz+0x58>)
   103aa:	0364      	lsls	r4, r4, #13
   103ac:	4322      	orrs	r2, r4
   103ae:	1aed      	subs	r5, r5, r3
   103b0:	2d1f      	cmp	r5, #31
   103b2:	dd0b      	ble.n	103cc <__aeabi_d2iz+0x40>
   103b4:	480c      	ldr	r0, [pc, #48]	; (103e8 <__aeabi_d2iz+0x5c>)
   103b6:	1ac3      	subs	r3, r0, r3
   103b8:	40da      	lsrs	r2, r3
   103ba:	4254      	negs	r4, r2
   103bc:	2900      	cmp	r1, #0
   103be:	d100      	bne.n	103c2 <__aeabi_d2iz+0x36>
   103c0:	0014      	movs	r4, r2
   103c2:	0020      	movs	r0, r4
   103c4:	bd30      	pop	{r4, r5, pc}
   103c6:	4b09      	ldr	r3, [pc, #36]	; (103ec <__aeabi_d2iz+0x60>)
   103c8:	18cc      	adds	r4, r1, r3
   103ca:	e7fa      	b.n	103c2 <__aeabi_d2iz+0x36>
   103cc:	4c08      	ldr	r4, [pc, #32]	; (103f0 <__aeabi_d2iz+0x64>)
   103ce:	40e8      	lsrs	r0, r5
   103d0:	46a4      	mov	ip, r4
   103d2:	4463      	add	r3, ip
   103d4:	409a      	lsls	r2, r3
   103d6:	4302      	orrs	r2, r0
   103d8:	e7ef      	b.n	103ba <__aeabi_d2iz+0x2e>
   103da:	46c0      	nop			; (mov r8, r8)
   103dc:	000003fe 	.word	0x000003fe
   103e0:	0000041d 	.word	0x0000041d
   103e4:	00000433 	.word	0x00000433
   103e8:	00000413 	.word	0x00000413
   103ec:	7fffffff 	.word	0x7fffffff
   103f0:	fffffbed 	.word	0xfffffbed

000103f4 <__aeabi_i2d>:
   103f4:	b570      	push	{r4, r5, r6, lr}
   103f6:	2800      	cmp	r0, #0
   103f8:	d030      	beq.n	1045c <__aeabi_i2d+0x68>
   103fa:	17c3      	asrs	r3, r0, #31
   103fc:	18c4      	adds	r4, r0, r3
   103fe:	405c      	eors	r4, r3
   10400:	0fc5      	lsrs	r5, r0, #31
   10402:	0020      	movs	r0, r4
   10404:	f7fe fa62 	bl	e8cc <__clzsi2>
   10408:	4b17      	ldr	r3, [pc, #92]	; (10468 <__aeabi_i2d+0x74>)
   1040a:	4a18      	ldr	r2, [pc, #96]	; (1046c <__aeabi_i2d+0x78>)
   1040c:	1a1b      	subs	r3, r3, r0
   1040e:	1ad2      	subs	r2, r2, r3
   10410:	2a1f      	cmp	r2, #31
   10412:	dd18      	ble.n	10446 <__aeabi_i2d+0x52>
   10414:	4a16      	ldr	r2, [pc, #88]	; (10470 <__aeabi_i2d+0x7c>)
   10416:	1ad2      	subs	r2, r2, r3
   10418:	4094      	lsls	r4, r2
   1041a:	2200      	movs	r2, #0
   1041c:	0324      	lsls	r4, r4, #12
   1041e:	055b      	lsls	r3, r3, #21
   10420:	0b24      	lsrs	r4, r4, #12
   10422:	0d5b      	lsrs	r3, r3, #21
   10424:	2100      	movs	r1, #0
   10426:	0010      	movs	r0, r2
   10428:	0324      	lsls	r4, r4, #12
   1042a:	0d0a      	lsrs	r2, r1, #20
   1042c:	0b24      	lsrs	r4, r4, #12
   1042e:	0512      	lsls	r2, r2, #20
   10430:	4322      	orrs	r2, r4
   10432:	4c10      	ldr	r4, [pc, #64]	; (10474 <__aeabi_i2d+0x80>)
   10434:	051b      	lsls	r3, r3, #20
   10436:	4022      	ands	r2, r4
   10438:	4313      	orrs	r3, r2
   1043a:	005b      	lsls	r3, r3, #1
   1043c:	07ed      	lsls	r5, r5, #31
   1043e:	085b      	lsrs	r3, r3, #1
   10440:	432b      	orrs	r3, r5
   10442:	0019      	movs	r1, r3
   10444:	bd70      	pop	{r4, r5, r6, pc}
   10446:	0021      	movs	r1, r4
   10448:	4091      	lsls	r1, r2
   1044a:	000a      	movs	r2, r1
   1044c:	210b      	movs	r1, #11
   1044e:	1a08      	subs	r0, r1, r0
   10450:	40c4      	lsrs	r4, r0
   10452:	055b      	lsls	r3, r3, #21
   10454:	0324      	lsls	r4, r4, #12
   10456:	0b24      	lsrs	r4, r4, #12
   10458:	0d5b      	lsrs	r3, r3, #21
   1045a:	e7e3      	b.n	10424 <__aeabi_i2d+0x30>
   1045c:	2500      	movs	r5, #0
   1045e:	2300      	movs	r3, #0
   10460:	2400      	movs	r4, #0
   10462:	2200      	movs	r2, #0
   10464:	e7de      	b.n	10424 <__aeabi_i2d+0x30>
   10466:	46c0      	nop			; (mov r8, r8)
   10468:	0000041e 	.word	0x0000041e
   1046c:	00000433 	.word	0x00000433
   10470:	00000413 	.word	0x00000413
   10474:	800fffff 	.word	0x800fffff

00010478 <__aeabi_ui2d>:
   10478:	b510      	push	{r4, lr}
   1047a:	1e04      	subs	r4, r0, #0
   1047c:	d028      	beq.n	104d0 <__aeabi_ui2d+0x58>
   1047e:	f7fe fa25 	bl	e8cc <__clzsi2>
   10482:	4b15      	ldr	r3, [pc, #84]	; (104d8 <__aeabi_ui2d+0x60>)
   10484:	4a15      	ldr	r2, [pc, #84]	; (104dc <__aeabi_ui2d+0x64>)
   10486:	1a1b      	subs	r3, r3, r0
   10488:	1ad2      	subs	r2, r2, r3
   1048a:	2a1f      	cmp	r2, #31
   1048c:	dd15      	ble.n	104ba <__aeabi_ui2d+0x42>
   1048e:	4a14      	ldr	r2, [pc, #80]	; (104e0 <__aeabi_ui2d+0x68>)
   10490:	1ad2      	subs	r2, r2, r3
   10492:	4094      	lsls	r4, r2
   10494:	2200      	movs	r2, #0
   10496:	0324      	lsls	r4, r4, #12
   10498:	055b      	lsls	r3, r3, #21
   1049a:	0b24      	lsrs	r4, r4, #12
   1049c:	0d5b      	lsrs	r3, r3, #21
   1049e:	2100      	movs	r1, #0
   104a0:	0010      	movs	r0, r2
   104a2:	0324      	lsls	r4, r4, #12
   104a4:	0d0a      	lsrs	r2, r1, #20
   104a6:	0b24      	lsrs	r4, r4, #12
   104a8:	0512      	lsls	r2, r2, #20
   104aa:	4322      	orrs	r2, r4
   104ac:	4c0d      	ldr	r4, [pc, #52]	; (104e4 <__aeabi_ui2d+0x6c>)
   104ae:	051b      	lsls	r3, r3, #20
   104b0:	4022      	ands	r2, r4
   104b2:	4313      	orrs	r3, r2
   104b4:	005b      	lsls	r3, r3, #1
   104b6:	0859      	lsrs	r1, r3, #1
   104b8:	bd10      	pop	{r4, pc}
   104ba:	0021      	movs	r1, r4
   104bc:	4091      	lsls	r1, r2
   104be:	000a      	movs	r2, r1
   104c0:	210b      	movs	r1, #11
   104c2:	1a08      	subs	r0, r1, r0
   104c4:	40c4      	lsrs	r4, r0
   104c6:	055b      	lsls	r3, r3, #21
   104c8:	0324      	lsls	r4, r4, #12
   104ca:	0b24      	lsrs	r4, r4, #12
   104cc:	0d5b      	lsrs	r3, r3, #21
   104ce:	e7e6      	b.n	1049e <__aeabi_ui2d+0x26>
   104d0:	2300      	movs	r3, #0
   104d2:	2400      	movs	r4, #0
   104d4:	2200      	movs	r2, #0
   104d6:	e7e2      	b.n	1049e <__aeabi_ui2d+0x26>
   104d8:	0000041e 	.word	0x0000041e
   104dc:	00000433 	.word	0x00000433
   104e0:	00000413 	.word	0x00000413
   104e4:	800fffff 	.word	0x800fffff

000104e8 <__sflush_r>:
   104e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   104ea:	898a      	ldrh	r2, [r1, #12]
   104ec:	0005      	movs	r5, r0
   104ee:	000c      	movs	r4, r1
   104f0:	0713      	lsls	r3, r2, #28
   104f2:	d460      	bmi.n	105b6 <__sflush_r+0xce>
   104f4:	684b      	ldr	r3, [r1, #4]
   104f6:	2b00      	cmp	r3, #0
   104f8:	dc04      	bgt.n	10504 <__sflush_r+0x1c>
   104fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   104fc:	2b00      	cmp	r3, #0
   104fe:	dc01      	bgt.n	10504 <__sflush_r+0x1c>
   10500:	2000      	movs	r0, #0
   10502:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10504:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10506:	2f00      	cmp	r7, #0
   10508:	d0fa      	beq.n	10500 <__sflush_r+0x18>
   1050a:	2300      	movs	r3, #0
   1050c:	682e      	ldr	r6, [r5, #0]
   1050e:	602b      	str	r3, [r5, #0]
   10510:	2380      	movs	r3, #128	; 0x80
   10512:	015b      	lsls	r3, r3, #5
   10514:	401a      	ands	r2, r3
   10516:	d034      	beq.n	10582 <__sflush_r+0x9a>
   10518:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1051a:	89a3      	ldrh	r3, [r4, #12]
   1051c:	075b      	lsls	r3, r3, #29
   1051e:	d506      	bpl.n	1052e <__sflush_r+0x46>
   10520:	6863      	ldr	r3, [r4, #4]
   10522:	1ac0      	subs	r0, r0, r3
   10524:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10526:	2b00      	cmp	r3, #0
   10528:	d001      	beq.n	1052e <__sflush_r+0x46>
   1052a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1052c:	1ac0      	subs	r0, r0, r3
   1052e:	0002      	movs	r2, r0
   10530:	6a21      	ldr	r1, [r4, #32]
   10532:	2300      	movs	r3, #0
   10534:	0028      	movs	r0, r5
   10536:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10538:	47b8      	blx	r7
   1053a:	89a1      	ldrh	r1, [r4, #12]
   1053c:	1c43      	adds	r3, r0, #1
   1053e:	d106      	bne.n	1054e <__sflush_r+0x66>
   10540:	682b      	ldr	r3, [r5, #0]
   10542:	2b1d      	cmp	r3, #29
   10544:	d831      	bhi.n	105aa <__sflush_r+0xc2>
   10546:	4a2c      	ldr	r2, [pc, #176]	; (105f8 <__sflush_r+0x110>)
   10548:	40da      	lsrs	r2, r3
   1054a:	07d3      	lsls	r3, r2, #31
   1054c:	d52d      	bpl.n	105aa <__sflush_r+0xc2>
   1054e:	2300      	movs	r3, #0
   10550:	6063      	str	r3, [r4, #4]
   10552:	6923      	ldr	r3, [r4, #16]
   10554:	6023      	str	r3, [r4, #0]
   10556:	04cb      	lsls	r3, r1, #19
   10558:	d505      	bpl.n	10566 <__sflush_r+0x7e>
   1055a:	1c43      	adds	r3, r0, #1
   1055c:	d102      	bne.n	10564 <__sflush_r+0x7c>
   1055e:	682b      	ldr	r3, [r5, #0]
   10560:	2b00      	cmp	r3, #0
   10562:	d100      	bne.n	10566 <__sflush_r+0x7e>
   10564:	6560      	str	r0, [r4, #84]	; 0x54
   10566:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10568:	602e      	str	r6, [r5, #0]
   1056a:	2900      	cmp	r1, #0
   1056c:	d0c8      	beq.n	10500 <__sflush_r+0x18>
   1056e:	0023      	movs	r3, r4
   10570:	3344      	adds	r3, #68	; 0x44
   10572:	4299      	cmp	r1, r3
   10574:	d002      	beq.n	1057c <__sflush_r+0x94>
   10576:	0028      	movs	r0, r5
   10578:	f000 fa4a 	bl	10a10 <_free_r>
   1057c:	2000      	movs	r0, #0
   1057e:	6360      	str	r0, [r4, #52]	; 0x34
   10580:	e7bf      	b.n	10502 <__sflush_r+0x1a>
   10582:	2301      	movs	r3, #1
   10584:	6a21      	ldr	r1, [r4, #32]
   10586:	0028      	movs	r0, r5
   10588:	47b8      	blx	r7
   1058a:	1c43      	adds	r3, r0, #1
   1058c:	d1c5      	bne.n	1051a <__sflush_r+0x32>
   1058e:	682b      	ldr	r3, [r5, #0]
   10590:	2b00      	cmp	r3, #0
   10592:	d0c2      	beq.n	1051a <__sflush_r+0x32>
   10594:	2b1d      	cmp	r3, #29
   10596:	d001      	beq.n	1059c <__sflush_r+0xb4>
   10598:	2b16      	cmp	r3, #22
   1059a:	d101      	bne.n	105a0 <__sflush_r+0xb8>
   1059c:	602e      	str	r6, [r5, #0]
   1059e:	e7af      	b.n	10500 <__sflush_r+0x18>
   105a0:	2340      	movs	r3, #64	; 0x40
   105a2:	89a2      	ldrh	r2, [r4, #12]
   105a4:	4313      	orrs	r3, r2
   105a6:	81a3      	strh	r3, [r4, #12]
   105a8:	e7ab      	b.n	10502 <__sflush_r+0x1a>
   105aa:	2340      	movs	r3, #64	; 0x40
   105ac:	430b      	orrs	r3, r1
   105ae:	2001      	movs	r0, #1
   105b0:	81a3      	strh	r3, [r4, #12]
   105b2:	4240      	negs	r0, r0
   105b4:	e7a5      	b.n	10502 <__sflush_r+0x1a>
   105b6:	690f      	ldr	r7, [r1, #16]
   105b8:	2f00      	cmp	r7, #0
   105ba:	d0a1      	beq.n	10500 <__sflush_r+0x18>
   105bc:	680b      	ldr	r3, [r1, #0]
   105be:	600f      	str	r7, [r1, #0]
   105c0:	1bdb      	subs	r3, r3, r7
   105c2:	9301      	str	r3, [sp, #4]
   105c4:	2300      	movs	r3, #0
   105c6:	0792      	lsls	r2, r2, #30
   105c8:	d100      	bne.n	105cc <__sflush_r+0xe4>
   105ca:	694b      	ldr	r3, [r1, #20]
   105cc:	60a3      	str	r3, [r4, #8]
   105ce:	9b01      	ldr	r3, [sp, #4]
   105d0:	2b00      	cmp	r3, #0
   105d2:	dc00      	bgt.n	105d6 <__sflush_r+0xee>
   105d4:	e794      	b.n	10500 <__sflush_r+0x18>
   105d6:	9b01      	ldr	r3, [sp, #4]
   105d8:	003a      	movs	r2, r7
   105da:	6a21      	ldr	r1, [r4, #32]
   105dc:	0028      	movs	r0, r5
   105de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   105e0:	47b0      	blx	r6
   105e2:	2800      	cmp	r0, #0
   105e4:	dc03      	bgt.n	105ee <__sflush_r+0x106>
   105e6:	2340      	movs	r3, #64	; 0x40
   105e8:	89a2      	ldrh	r2, [r4, #12]
   105ea:	4313      	orrs	r3, r2
   105ec:	e7df      	b.n	105ae <__sflush_r+0xc6>
   105ee:	9b01      	ldr	r3, [sp, #4]
   105f0:	183f      	adds	r7, r7, r0
   105f2:	1a1b      	subs	r3, r3, r0
   105f4:	9301      	str	r3, [sp, #4]
   105f6:	e7ea      	b.n	105ce <__sflush_r+0xe6>
   105f8:	20400001 	.word	0x20400001

000105fc <_fflush_r>:
   105fc:	690b      	ldr	r3, [r1, #16]
   105fe:	b570      	push	{r4, r5, r6, lr}
   10600:	0005      	movs	r5, r0
   10602:	000c      	movs	r4, r1
   10604:	2b00      	cmp	r3, #0
   10606:	d101      	bne.n	1060c <_fflush_r+0x10>
   10608:	2000      	movs	r0, #0
   1060a:	bd70      	pop	{r4, r5, r6, pc}
   1060c:	2800      	cmp	r0, #0
   1060e:	d004      	beq.n	1061a <_fflush_r+0x1e>
   10610:	6983      	ldr	r3, [r0, #24]
   10612:	2b00      	cmp	r3, #0
   10614:	d101      	bne.n	1061a <_fflush_r+0x1e>
   10616:	f000 f85f 	bl	106d8 <__sinit>
   1061a:	4b0b      	ldr	r3, [pc, #44]	; (10648 <_fflush_r+0x4c>)
   1061c:	429c      	cmp	r4, r3
   1061e:	d109      	bne.n	10634 <_fflush_r+0x38>
   10620:	686c      	ldr	r4, [r5, #4]
   10622:	220c      	movs	r2, #12
   10624:	5ea3      	ldrsh	r3, [r4, r2]
   10626:	2b00      	cmp	r3, #0
   10628:	d0ee      	beq.n	10608 <_fflush_r+0xc>
   1062a:	0021      	movs	r1, r4
   1062c:	0028      	movs	r0, r5
   1062e:	f7ff ff5b 	bl	104e8 <__sflush_r>
   10632:	e7ea      	b.n	1060a <_fflush_r+0xe>
   10634:	4b05      	ldr	r3, [pc, #20]	; (1064c <_fflush_r+0x50>)
   10636:	429c      	cmp	r4, r3
   10638:	d101      	bne.n	1063e <_fflush_r+0x42>
   1063a:	68ac      	ldr	r4, [r5, #8]
   1063c:	e7f1      	b.n	10622 <_fflush_r+0x26>
   1063e:	4b04      	ldr	r3, [pc, #16]	; (10650 <_fflush_r+0x54>)
   10640:	429c      	cmp	r4, r3
   10642:	d1ee      	bne.n	10622 <_fflush_r+0x26>
   10644:	68ec      	ldr	r4, [r5, #12]
   10646:	e7ec      	b.n	10622 <_fflush_r+0x26>
   10648:	00016274 	.word	0x00016274
   1064c:	00016294 	.word	0x00016294
   10650:	00016254 	.word	0x00016254

00010654 <_cleanup_r>:
   10654:	b510      	push	{r4, lr}
   10656:	4902      	ldr	r1, [pc, #8]	; (10660 <_cleanup_r+0xc>)
   10658:	f000 f8b2 	bl	107c0 <_fwalk_reent>
   1065c:	bd10      	pop	{r4, pc}
   1065e:	46c0      	nop			; (mov r8, r8)
   10660:	000105fd 	.word	0x000105fd

00010664 <std.isra.0>:
   10664:	2300      	movs	r3, #0
   10666:	b510      	push	{r4, lr}
   10668:	0004      	movs	r4, r0
   1066a:	6003      	str	r3, [r0, #0]
   1066c:	6043      	str	r3, [r0, #4]
   1066e:	6083      	str	r3, [r0, #8]
   10670:	8181      	strh	r1, [r0, #12]
   10672:	6643      	str	r3, [r0, #100]	; 0x64
   10674:	81c2      	strh	r2, [r0, #14]
   10676:	6103      	str	r3, [r0, #16]
   10678:	6143      	str	r3, [r0, #20]
   1067a:	6183      	str	r3, [r0, #24]
   1067c:	0019      	movs	r1, r3
   1067e:	2208      	movs	r2, #8
   10680:	305c      	adds	r0, #92	; 0x5c
   10682:	f000 f9bc 	bl	109fe <memset>
   10686:	4b05      	ldr	r3, [pc, #20]	; (1069c <std.isra.0+0x38>)
   10688:	6224      	str	r4, [r4, #32]
   1068a:	6263      	str	r3, [r4, #36]	; 0x24
   1068c:	4b04      	ldr	r3, [pc, #16]	; (106a0 <std.isra.0+0x3c>)
   1068e:	62a3      	str	r3, [r4, #40]	; 0x28
   10690:	4b04      	ldr	r3, [pc, #16]	; (106a4 <std.isra.0+0x40>)
   10692:	62e3      	str	r3, [r4, #44]	; 0x2c
   10694:	4b04      	ldr	r3, [pc, #16]	; (106a8 <std.isra.0+0x44>)
   10696:	6323      	str	r3, [r4, #48]	; 0x30
   10698:	bd10      	pop	{r4, pc}
   1069a:	46c0      	nop			; (mov r8, r8)
   1069c:	00010ed5 	.word	0x00010ed5
   106a0:	00010f01 	.word	0x00010f01
   106a4:	00010f39 	.word	0x00010f39
   106a8:	00010f65 	.word	0x00010f65

000106ac <__sfmoreglue>:
   106ac:	b570      	push	{r4, r5, r6, lr}
   106ae:	2568      	movs	r5, #104	; 0x68
   106b0:	1e4a      	subs	r2, r1, #1
   106b2:	4355      	muls	r5, r2
   106b4:	000e      	movs	r6, r1
   106b6:	0029      	movs	r1, r5
   106b8:	3174      	adds	r1, #116	; 0x74
   106ba:	f000 f9f3 	bl	10aa4 <_malloc_r>
   106be:	1e04      	subs	r4, r0, #0
   106c0:	d008      	beq.n	106d4 <__sfmoreglue+0x28>
   106c2:	2100      	movs	r1, #0
   106c4:	002a      	movs	r2, r5
   106c6:	6001      	str	r1, [r0, #0]
   106c8:	6046      	str	r6, [r0, #4]
   106ca:	300c      	adds	r0, #12
   106cc:	60a0      	str	r0, [r4, #8]
   106ce:	3268      	adds	r2, #104	; 0x68
   106d0:	f000 f995 	bl	109fe <memset>
   106d4:	0020      	movs	r0, r4
   106d6:	bd70      	pop	{r4, r5, r6, pc}

000106d8 <__sinit>:
   106d8:	6983      	ldr	r3, [r0, #24]
   106da:	b513      	push	{r0, r1, r4, lr}
   106dc:	0004      	movs	r4, r0
   106de:	2b00      	cmp	r3, #0
   106e0:	d128      	bne.n	10734 <__sinit+0x5c>
   106e2:	6483      	str	r3, [r0, #72]	; 0x48
   106e4:	64c3      	str	r3, [r0, #76]	; 0x4c
   106e6:	6503      	str	r3, [r0, #80]	; 0x50
   106e8:	4b13      	ldr	r3, [pc, #76]	; (10738 <__sinit+0x60>)
   106ea:	4a14      	ldr	r2, [pc, #80]	; (1073c <__sinit+0x64>)
   106ec:	681b      	ldr	r3, [r3, #0]
   106ee:	6282      	str	r2, [r0, #40]	; 0x28
   106f0:	9301      	str	r3, [sp, #4]
   106f2:	4298      	cmp	r0, r3
   106f4:	d101      	bne.n	106fa <__sinit+0x22>
   106f6:	2301      	movs	r3, #1
   106f8:	6183      	str	r3, [r0, #24]
   106fa:	0020      	movs	r0, r4
   106fc:	f000 f820 	bl	10740 <__sfp>
   10700:	6060      	str	r0, [r4, #4]
   10702:	0020      	movs	r0, r4
   10704:	f000 f81c 	bl	10740 <__sfp>
   10708:	60a0      	str	r0, [r4, #8]
   1070a:	0020      	movs	r0, r4
   1070c:	f000 f818 	bl	10740 <__sfp>
   10710:	2200      	movs	r2, #0
   10712:	60e0      	str	r0, [r4, #12]
   10714:	2104      	movs	r1, #4
   10716:	6860      	ldr	r0, [r4, #4]
   10718:	f7ff ffa4 	bl	10664 <std.isra.0>
   1071c:	2201      	movs	r2, #1
   1071e:	2109      	movs	r1, #9
   10720:	68a0      	ldr	r0, [r4, #8]
   10722:	f7ff ff9f 	bl	10664 <std.isra.0>
   10726:	2202      	movs	r2, #2
   10728:	2112      	movs	r1, #18
   1072a:	68e0      	ldr	r0, [r4, #12]
   1072c:	f7ff ff9a 	bl	10664 <std.isra.0>
   10730:	2301      	movs	r3, #1
   10732:	61a3      	str	r3, [r4, #24]
   10734:	bd13      	pop	{r0, r1, r4, pc}
   10736:	46c0      	nop			; (mov r8, r8)
   10738:	000162b4 	.word	0x000162b4
   1073c:	00010655 	.word	0x00010655

00010740 <__sfp>:
   10740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10742:	4b1e      	ldr	r3, [pc, #120]	; (107bc <__sfp+0x7c>)
   10744:	0007      	movs	r7, r0
   10746:	681e      	ldr	r6, [r3, #0]
   10748:	69b3      	ldr	r3, [r6, #24]
   1074a:	2b00      	cmp	r3, #0
   1074c:	d102      	bne.n	10754 <__sfp+0x14>
   1074e:	0030      	movs	r0, r6
   10750:	f7ff ffc2 	bl	106d8 <__sinit>
   10754:	3648      	adds	r6, #72	; 0x48
   10756:	68b4      	ldr	r4, [r6, #8]
   10758:	6873      	ldr	r3, [r6, #4]
   1075a:	3b01      	subs	r3, #1
   1075c:	d504      	bpl.n	10768 <__sfp+0x28>
   1075e:	6833      	ldr	r3, [r6, #0]
   10760:	2b00      	cmp	r3, #0
   10762:	d007      	beq.n	10774 <__sfp+0x34>
   10764:	6836      	ldr	r6, [r6, #0]
   10766:	e7f6      	b.n	10756 <__sfp+0x16>
   10768:	220c      	movs	r2, #12
   1076a:	5ea5      	ldrsh	r5, [r4, r2]
   1076c:	2d00      	cmp	r5, #0
   1076e:	d00d      	beq.n	1078c <__sfp+0x4c>
   10770:	3468      	adds	r4, #104	; 0x68
   10772:	e7f2      	b.n	1075a <__sfp+0x1a>
   10774:	2104      	movs	r1, #4
   10776:	0038      	movs	r0, r7
   10778:	f7ff ff98 	bl	106ac <__sfmoreglue>
   1077c:	6030      	str	r0, [r6, #0]
   1077e:	2800      	cmp	r0, #0
   10780:	d1f0      	bne.n	10764 <__sfp+0x24>
   10782:	230c      	movs	r3, #12
   10784:	0004      	movs	r4, r0
   10786:	603b      	str	r3, [r7, #0]
   10788:	0020      	movs	r0, r4
   1078a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1078c:	2301      	movs	r3, #1
   1078e:	0020      	movs	r0, r4
   10790:	425b      	negs	r3, r3
   10792:	81e3      	strh	r3, [r4, #14]
   10794:	3302      	adds	r3, #2
   10796:	81a3      	strh	r3, [r4, #12]
   10798:	6665      	str	r5, [r4, #100]	; 0x64
   1079a:	6025      	str	r5, [r4, #0]
   1079c:	60a5      	str	r5, [r4, #8]
   1079e:	6065      	str	r5, [r4, #4]
   107a0:	6125      	str	r5, [r4, #16]
   107a2:	6165      	str	r5, [r4, #20]
   107a4:	61a5      	str	r5, [r4, #24]
   107a6:	2208      	movs	r2, #8
   107a8:	0029      	movs	r1, r5
   107aa:	305c      	adds	r0, #92	; 0x5c
   107ac:	f000 f927 	bl	109fe <memset>
   107b0:	6365      	str	r5, [r4, #52]	; 0x34
   107b2:	63a5      	str	r5, [r4, #56]	; 0x38
   107b4:	64a5      	str	r5, [r4, #72]	; 0x48
   107b6:	64e5      	str	r5, [r4, #76]	; 0x4c
   107b8:	e7e6      	b.n	10788 <__sfp+0x48>
   107ba:	46c0      	nop			; (mov r8, r8)
   107bc:	000162b4 	.word	0x000162b4

000107c0 <_fwalk_reent>:
   107c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   107c2:	0004      	movs	r4, r0
   107c4:	0007      	movs	r7, r0
   107c6:	2600      	movs	r6, #0
   107c8:	9101      	str	r1, [sp, #4]
   107ca:	3448      	adds	r4, #72	; 0x48
   107cc:	2c00      	cmp	r4, #0
   107ce:	d101      	bne.n	107d4 <_fwalk_reent+0x14>
   107d0:	0030      	movs	r0, r6
   107d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   107d4:	6863      	ldr	r3, [r4, #4]
   107d6:	68a5      	ldr	r5, [r4, #8]
   107d8:	9300      	str	r3, [sp, #0]
   107da:	9b00      	ldr	r3, [sp, #0]
   107dc:	3b01      	subs	r3, #1
   107de:	9300      	str	r3, [sp, #0]
   107e0:	d501      	bpl.n	107e6 <_fwalk_reent+0x26>
   107e2:	6824      	ldr	r4, [r4, #0]
   107e4:	e7f2      	b.n	107cc <_fwalk_reent+0xc>
   107e6:	89ab      	ldrh	r3, [r5, #12]
   107e8:	2b01      	cmp	r3, #1
   107ea:	d908      	bls.n	107fe <_fwalk_reent+0x3e>
   107ec:	220e      	movs	r2, #14
   107ee:	5eab      	ldrsh	r3, [r5, r2]
   107f0:	3301      	adds	r3, #1
   107f2:	d004      	beq.n	107fe <_fwalk_reent+0x3e>
   107f4:	0029      	movs	r1, r5
   107f6:	0038      	movs	r0, r7
   107f8:	9b01      	ldr	r3, [sp, #4]
   107fa:	4798      	blx	r3
   107fc:	4306      	orrs	r6, r0
   107fe:	3568      	adds	r5, #104	; 0x68
   10800:	e7eb      	b.n	107da <_fwalk_reent+0x1a>
	...

00010804 <__libc_init_array>:
   10804:	b570      	push	{r4, r5, r6, lr}
   10806:	2600      	movs	r6, #0
   10808:	4d0c      	ldr	r5, [pc, #48]	; (1083c <__libc_init_array+0x38>)
   1080a:	4c0d      	ldr	r4, [pc, #52]	; (10840 <__libc_init_array+0x3c>)
   1080c:	1b64      	subs	r4, r4, r5
   1080e:	10a4      	asrs	r4, r4, #2
   10810:	42a6      	cmp	r6, r4
   10812:	d109      	bne.n	10828 <__libc_init_array+0x24>
   10814:	2600      	movs	r6, #0
   10816:	f005 feb3 	bl	16580 <_init>
   1081a:	4d0a      	ldr	r5, [pc, #40]	; (10844 <__libc_init_array+0x40>)
   1081c:	4c0a      	ldr	r4, [pc, #40]	; (10848 <__libc_init_array+0x44>)
   1081e:	1b64      	subs	r4, r4, r5
   10820:	10a4      	asrs	r4, r4, #2
   10822:	42a6      	cmp	r6, r4
   10824:	d105      	bne.n	10832 <__libc_init_array+0x2e>
   10826:	bd70      	pop	{r4, r5, r6, pc}
   10828:	00b3      	lsls	r3, r6, #2
   1082a:	58eb      	ldr	r3, [r5, r3]
   1082c:	4798      	blx	r3
   1082e:	3601      	adds	r6, #1
   10830:	e7ee      	b.n	10810 <__libc_init_array+0xc>
   10832:	00b3      	lsls	r3, r6, #2
   10834:	58eb      	ldr	r3, [r5, r3]
   10836:	4798      	blx	r3
   10838:	3601      	adds	r6, #1
   1083a:	e7f2      	b.n	10822 <__libc_init_array+0x1e>
   1083c:	0001658c 	.word	0x0001658c
   10840:	0001658c 	.word	0x0001658c
   10844:	0001658c 	.word	0x0001658c
   10848:	00016590 	.word	0x00016590

0001084c <__locale_ctype_ptr_l>:
   1084c:	30ec      	adds	r0, #236	; 0xec
   1084e:	6800      	ldr	r0, [r0, #0]
   10850:	4770      	bx	lr
	...

00010854 <__locale_ctype_ptr>:
   10854:	4b04      	ldr	r3, [pc, #16]	; (10868 <__locale_ctype_ptr+0x14>)
   10856:	681b      	ldr	r3, [r3, #0]
   10858:	6a1b      	ldr	r3, [r3, #32]
   1085a:	2b00      	cmp	r3, #0
   1085c:	d100      	bne.n	10860 <__locale_ctype_ptr+0xc>
   1085e:	4b03      	ldr	r3, [pc, #12]	; (1086c <__locale_ctype_ptr+0x18>)
   10860:	33ec      	adds	r3, #236	; 0xec
   10862:	6818      	ldr	r0, [r3, #0]
   10864:	4770      	bx	lr
   10866:	46c0      	nop			; (mov r8, r8)
   10868:	200002c8 	.word	0x200002c8
   1086c:	2000032c 	.word	0x2000032c

00010870 <__swhatbuf_r>:
   10870:	b570      	push	{r4, r5, r6, lr}
   10872:	000e      	movs	r6, r1
   10874:	001d      	movs	r5, r3
   10876:	230e      	movs	r3, #14
   10878:	5ec9      	ldrsh	r1, [r1, r3]
   1087a:	b090      	sub	sp, #64	; 0x40
   1087c:	0014      	movs	r4, r2
   1087e:	2900      	cmp	r1, #0
   10880:	da07      	bge.n	10892 <__swhatbuf_r+0x22>
   10882:	2300      	movs	r3, #0
   10884:	602b      	str	r3, [r5, #0]
   10886:	89b3      	ldrh	r3, [r6, #12]
   10888:	061b      	lsls	r3, r3, #24
   1088a:	d411      	bmi.n	108b0 <__swhatbuf_r+0x40>
   1088c:	2380      	movs	r3, #128	; 0x80
   1088e:	00db      	lsls	r3, r3, #3
   10890:	e00f      	b.n	108b2 <__swhatbuf_r+0x42>
   10892:	aa01      	add	r2, sp, #4
   10894:	f001 fae4 	bl	11e60 <_fstat_r>
   10898:	2800      	cmp	r0, #0
   1089a:	dbf2      	blt.n	10882 <__swhatbuf_r+0x12>
   1089c:	22f0      	movs	r2, #240	; 0xf0
   1089e:	9b02      	ldr	r3, [sp, #8]
   108a0:	0212      	lsls	r2, r2, #8
   108a2:	4013      	ands	r3, r2
   108a4:	4a05      	ldr	r2, [pc, #20]	; (108bc <__swhatbuf_r+0x4c>)
   108a6:	189b      	adds	r3, r3, r2
   108a8:	425a      	negs	r2, r3
   108aa:	4153      	adcs	r3, r2
   108ac:	602b      	str	r3, [r5, #0]
   108ae:	e7ed      	b.n	1088c <__swhatbuf_r+0x1c>
   108b0:	2340      	movs	r3, #64	; 0x40
   108b2:	2000      	movs	r0, #0
   108b4:	6023      	str	r3, [r4, #0]
   108b6:	b010      	add	sp, #64	; 0x40
   108b8:	bd70      	pop	{r4, r5, r6, pc}
   108ba:	46c0      	nop			; (mov r8, r8)
   108bc:	ffffe000 	.word	0xffffe000

000108c0 <__smakebuf_r>:
   108c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   108c2:	2602      	movs	r6, #2
   108c4:	898b      	ldrh	r3, [r1, #12]
   108c6:	0005      	movs	r5, r0
   108c8:	000c      	movs	r4, r1
   108ca:	4233      	tst	r3, r6
   108cc:	d006      	beq.n	108dc <__smakebuf_r+0x1c>
   108ce:	0023      	movs	r3, r4
   108d0:	3347      	adds	r3, #71	; 0x47
   108d2:	6023      	str	r3, [r4, #0]
   108d4:	6123      	str	r3, [r4, #16]
   108d6:	2301      	movs	r3, #1
   108d8:	6163      	str	r3, [r4, #20]
   108da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   108dc:	ab01      	add	r3, sp, #4
   108de:	466a      	mov	r2, sp
   108e0:	f7ff ffc6 	bl	10870 <__swhatbuf_r>
   108e4:	9900      	ldr	r1, [sp, #0]
   108e6:	0007      	movs	r7, r0
   108e8:	0028      	movs	r0, r5
   108ea:	f000 f8db 	bl	10aa4 <_malloc_r>
   108ee:	2800      	cmp	r0, #0
   108f0:	d108      	bne.n	10904 <__smakebuf_r+0x44>
   108f2:	220c      	movs	r2, #12
   108f4:	5ea3      	ldrsh	r3, [r4, r2]
   108f6:	059a      	lsls	r2, r3, #22
   108f8:	d4ef      	bmi.n	108da <__smakebuf_r+0x1a>
   108fa:	2203      	movs	r2, #3
   108fc:	4393      	bics	r3, r2
   108fe:	431e      	orrs	r6, r3
   10900:	81a6      	strh	r6, [r4, #12]
   10902:	e7e4      	b.n	108ce <__smakebuf_r+0xe>
   10904:	4b0f      	ldr	r3, [pc, #60]	; (10944 <__smakebuf_r+0x84>)
   10906:	62ab      	str	r3, [r5, #40]	; 0x28
   10908:	2380      	movs	r3, #128	; 0x80
   1090a:	89a2      	ldrh	r2, [r4, #12]
   1090c:	6020      	str	r0, [r4, #0]
   1090e:	4313      	orrs	r3, r2
   10910:	81a3      	strh	r3, [r4, #12]
   10912:	9b00      	ldr	r3, [sp, #0]
   10914:	6120      	str	r0, [r4, #16]
   10916:	6163      	str	r3, [r4, #20]
   10918:	9b01      	ldr	r3, [sp, #4]
   1091a:	2b00      	cmp	r3, #0
   1091c:	d00d      	beq.n	1093a <__smakebuf_r+0x7a>
   1091e:	230e      	movs	r3, #14
   10920:	5ee1      	ldrsh	r1, [r4, r3]
   10922:	0028      	movs	r0, r5
   10924:	f001 fdda 	bl	124dc <_isatty_r>
   10928:	2800      	cmp	r0, #0
   1092a:	d006      	beq.n	1093a <__smakebuf_r+0x7a>
   1092c:	2203      	movs	r2, #3
   1092e:	89a3      	ldrh	r3, [r4, #12]
   10930:	4393      	bics	r3, r2
   10932:	001a      	movs	r2, r3
   10934:	2301      	movs	r3, #1
   10936:	4313      	orrs	r3, r2
   10938:	81a3      	strh	r3, [r4, #12]
   1093a:	89a0      	ldrh	r0, [r4, #12]
   1093c:	4338      	orrs	r0, r7
   1093e:	81a0      	strh	r0, [r4, #12]
   10940:	e7cb      	b.n	108da <__smakebuf_r+0x1a>
   10942:	46c0      	nop			; (mov r8, r8)
   10944:	00010655 	.word	0x00010655

00010948 <malloc>:
   10948:	b510      	push	{r4, lr}
   1094a:	4b03      	ldr	r3, [pc, #12]	; (10958 <malloc+0x10>)
   1094c:	0001      	movs	r1, r0
   1094e:	6818      	ldr	r0, [r3, #0]
   10950:	f000 f8a8 	bl	10aa4 <_malloc_r>
   10954:	bd10      	pop	{r4, pc}
   10956:	46c0      	nop			; (mov r8, r8)
   10958:	200002c8 	.word	0x200002c8

0001095c <free>:
   1095c:	b510      	push	{r4, lr}
   1095e:	4b03      	ldr	r3, [pc, #12]	; (1096c <free+0x10>)
   10960:	0001      	movs	r1, r0
   10962:	6818      	ldr	r0, [r3, #0]
   10964:	f000 f854 	bl	10a10 <_free_r>
   10968:	bd10      	pop	{r4, pc}
   1096a:	46c0      	nop			; (mov r8, r8)
   1096c:	200002c8 	.word	0x200002c8

00010970 <__ascii_mbtowc>:
   10970:	b082      	sub	sp, #8
   10972:	2900      	cmp	r1, #0
   10974:	d100      	bne.n	10978 <__ascii_mbtowc+0x8>
   10976:	a901      	add	r1, sp, #4
   10978:	1e10      	subs	r0, r2, #0
   1097a:	d006      	beq.n	1098a <__ascii_mbtowc+0x1a>
   1097c:	2b00      	cmp	r3, #0
   1097e:	d006      	beq.n	1098e <__ascii_mbtowc+0x1e>
   10980:	7813      	ldrb	r3, [r2, #0]
   10982:	600b      	str	r3, [r1, #0]
   10984:	7810      	ldrb	r0, [r2, #0]
   10986:	1e43      	subs	r3, r0, #1
   10988:	4198      	sbcs	r0, r3
   1098a:	b002      	add	sp, #8
   1098c:	4770      	bx	lr
   1098e:	2002      	movs	r0, #2
   10990:	4240      	negs	r0, r0
   10992:	e7fa      	b.n	1098a <__ascii_mbtowc+0x1a>

00010994 <memchr>:
   10994:	b2c9      	uxtb	r1, r1
   10996:	1882      	adds	r2, r0, r2
   10998:	4290      	cmp	r0, r2
   1099a:	d101      	bne.n	109a0 <memchr+0xc>
   1099c:	2000      	movs	r0, #0
   1099e:	4770      	bx	lr
   109a0:	7803      	ldrb	r3, [r0, #0]
   109a2:	428b      	cmp	r3, r1
   109a4:	d0fb      	beq.n	1099e <memchr+0xa>
   109a6:	3001      	adds	r0, #1
   109a8:	e7f6      	b.n	10998 <memchr+0x4>

000109aa <memcmp>:
   109aa:	b530      	push	{r4, r5, lr}
   109ac:	2400      	movs	r4, #0
   109ae:	42a2      	cmp	r2, r4
   109b0:	d101      	bne.n	109b6 <memcmp+0xc>
   109b2:	2000      	movs	r0, #0
   109b4:	e005      	b.n	109c2 <memcmp+0x18>
   109b6:	5d03      	ldrb	r3, [r0, r4]
   109b8:	1c65      	adds	r5, r4, #1
   109ba:	5d0c      	ldrb	r4, [r1, r4]
   109bc:	42a3      	cmp	r3, r4
   109be:	d001      	beq.n	109c4 <memcmp+0x1a>
   109c0:	1b18      	subs	r0, r3, r4
   109c2:	bd30      	pop	{r4, r5, pc}
   109c4:	002c      	movs	r4, r5
   109c6:	e7f2      	b.n	109ae <memcmp+0x4>

000109c8 <memcpy>:
   109c8:	2300      	movs	r3, #0
   109ca:	b510      	push	{r4, lr}
   109cc:	429a      	cmp	r2, r3
   109ce:	d100      	bne.n	109d2 <memcpy+0xa>
   109d0:	bd10      	pop	{r4, pc}
   109d2:	5ccc      	ldrb	r4, [r1, r3]
   109d4:	54c4      	strb	r4, [r0, r3]
   109d6:	3301      	adds	r3, #1
   109d8:	e7f8      	b.n	109cc <memcpy+0x4>

000109da <memmove>:
   109da:	b510      	push	{r4, lr}
   109dc:	4288      	cmp	r0, r1
   109de:	d902      	bls.n	109e6 <memmove+0xc>
   109e0:	188b      	adds	r3, r1, r2
   109e2:	4298      	cmp	r0, r3
   109e4:	d308      	bcc.n	109f8 <memmove+0x1e>
   109e6:	2300      	movs	r3, #0
   109e8:	429a      	cmp	r2, r3
   109ea:	d007      	beq.n	109fc <memmove+0x22>
   109ec:	5ccc      	ldrb	r4, [r1, r3]
   109ee:	54c4      	strb	r4, [r0, r3]
   109f0:	3301      	adds	r3, #1
   109f2:	e7f9      	b.n	109e8 <memmove+0xe>
   109f4:	5c8b      	ldrb	r3, [r1, r2]
   109f6:	5483      	strb	r3, [r0, r2]
   109f8:	3a01      	subs	r2, #1
   109fa:	d2fb      	bcs.n	109f4 <memmove+0x1a>
   109fc:	bd10      	pop	{r4, pc}

000109fe <memset>:
   109fe:	0003      	movs	r3, r0
   10a00:	1882      	adds	r2, r0, r2
   10a02:	4293      	cmp	r3, r2
   10a04:	d100      	bne.n	10a08 <memset+0xa>
   10a06:	4770      	bx	lr
   10a08:	7019      	strb	r1, [r3, #0]
   10a0a:	3301      	adds	r3, #1
   10a0c:	e7f9      	b.n	10a02 <memset+0x4>
	...

00010a10 <_free_r>:
   10a10:	b570      	push	{r4, r5, r6, lr}
   10a12:	0005      	movs	r5, r0
   10a14:	2900      	cmp	r1, #0
   10a16:	d010      	beq.n	10a3a <_free_r+0x2a>
   10a18:	1f0c      	subs	r4, r1, #4
   10a1a:	6823      	ldr	r3, [r4, #0]
   10a1c:	2b00      	cmp	r3, #0
   10a1e:	da00      	bge.n	10a22 <_free_r+0x12>
   10a20:	18e4      	adds	r4, r4, r3
   10a22:	0028      	movs	r0, r5
   10a24:	f001 fd82 	bl	1252c <__malloc_lock>
   10a28:	4a1d      	ldr	r2, [pc, #116]	; (10aa0 <_free_r+0x90>)
   10a2a:	6813      	ldr	r3, [r2, #0]
   10a2c:	2b00      	cmp	r3, #0
   10a2e:	d105      	bne.n	10a3c <_free_r+0x2c>
   10a30:	6063      	str	r3, [r4, #4]
   10a32:	6014      	str	r4, [r2, #0]
   10a34:	0028      	movs	r0, r5
   10a36:	f001 fd7a 	bl	1252e <__malloc_unlock>
   10a3a:	bd70      	pop	{r4, r5, r6, pc}
   10a3c:	42a3      	cmp	r3, r4
   10a3e:	d909      	bls.n	10a54 <_free_r+0x44>
   10a40:	6821      	ldr	r1, [r4, #0]
   10a42:	1860      	adds	r0, r4, r1
   10a44:	4283      	cmp	r3, r0
   10a46:	d1f3      	bne.n	10a30 <_free_r+0x20>
   10a48:	6818      	ldr	r0, [r3, #0]
   10a4a:	685b      	ldr	r3, [r3, #4]
   10a4c:	1841      	adds	r1, r0, r1
   10a4e:	6021      	str	r1, [r4, #0]
   10a50:	e7ee      	b.n	10a30 <_free_r+0x20>
   10a52:	0013      	movs	r3, r2
   10a54:	685a      	ldr	r2, [r3, #4]
   10a56:	2a00      	cmp	r2, #0
   10a58:	d001      	beq.n	10a5e <_free_r+0x4e>
   10a5a:	42a2      	cmp	r2, r4
   10a5c:	d9f9      	bls.n	10a52 <_free_r+0x42>
   10a5e:	6819      	ldr	r1, [r3, #0]
   10a60:	1858      	adds	r0, r3, r1
   10a62:	42a0      	cmp	r0, r4
   10a64:	d10b      	bne.n	10a7e <_free_r+0x6e>
   10a66:	6820      	ldr	r0, [r4, #0]
   10a68:	1809      	adds	r1, r1, r0
   10a6a:	1858      	adds	r0, r3, r1
   10a6c:	6019      	str	r1, [r3, #0]
   10a6e:	4282      	cmp	r2, r0
   10a70:	d1e0      	bne.n	10a34 <_free_r+0x24>
   10a72:	6810      	ldr	r0, [r2, #0]
   10a74:	6852      	ldr	r2, [r2, #4]
   10a76:	1841      	adds	r1, r0, r1
   10a78:	6019      	str	r1, [r3, #0]
   10a7a:	605a      	str	r2, [r3, #4]
   10a7c:	e7da      	b.n	10a34 <_free_r+0x24>
   10a7e:	42a0      	cmp	r0, r4
   10a80:	d902      	bls.n	10a88 <_free_r+0x78>
   10a82:	230c      	movs	r3, #12
   10a84:	602b      	str	r3, [r5, #0]
   10a86:	e7d5      	b.n	10a34 <_free_r+0x24>
   10a88:	6821      	ldr	r1, [r4, #0]
   10a8a:	1860      	adds	r0, r4, r1
   10a8c:	4282      	cmp	r2, r0
   10a8e:	d103      	bne.n	10a98 <_free_r+0x88>
   10a90:	6810      	ldr	r0, [r2, #0]
   10a92:	6852      	ldr	r2, [r2, #4]
   10a94:	1841      	adds	r1, r0, r1
   10a96:	6021      	str	r1, [r4, #0]
   10a98:	6062      	str	r2, [r4, #4]
   10a9a:	605c      	str	r4, [r3, #4]
   10a9c:	e7ca      	b.n	10a34 <_free_r+0x24>
   10a9e:	46c0      	nop			; (mov r8, r8)
   10aa0:	2000278c 	.word	0x2000278c

00010aa4 <_malloc_r>:
   10aa4:	2303      	movs	r3, #3
   10aa6:	b570      	push	{r4, r5, r6, lr}
   10aa8:	1ccd      	adds	r5, r1, #3
   10aaa:	439d      	bics	r5, r3
   10aac:	3508      	adds	r5, #8
   10aae:	0006      	movs	r6, r0
   10ab0:	2d0c      	cmp	r5, #12
   10ab2:	d21e      	bcs.n	10af2 <_malloc_r+0x4e>
   10ab4:	250c      	movs	r5, #12
   10ab6:	42a9      	cmp	r1, r5
   10ab8:	d81d      	bhi.n	10af6 <_malloc_r+0x52>
   10aba:	0030      	movs	r0, r6
   10abc:	f001 fd36 	bl	1252c <__malloc_lock>
   10ac0:	4a25      	ldr	r2, [pc, #148]	; (10b58 <_malloc_r+0xb4>)
   10ac2:	6814      	ldr	r4, [r2, #0]
   10ac4:	0021      	movs	r1, r4
   10ac6:	2900      	cmp	r1, #0
   10ac8:	d119      	bne.n	10afe <_malloc_r+0x5a>
   10aca:	4c24      	ldr	r4, [pc, #144]	; (10b5c <_malloc_r+0xb8>)
   10acc:	6823      	ldr	r3, [r4, #0]
   10ace:	2b00      	cmp	r3, #0
   10ad0:	d103      	bne.n	10ada <_malloc_r+0x36>
   10ad2:	0030      	movs	r0, r6
   10ad4:	f000 f8dc 	bl	10c90 <_sbrk_r>
   10ad8:	6020      	str	r0, [r4, #0]
   10ada:	0029      	movs	r1, r5
   10adc:	0030      	movs	r0, r6
   10ade:	f000 f8d7 	bl	10c90 <_sbrk_r>
   10ae2:	1c43      	adds	r3, r0, #1
   10ae4:	d12c      	bne.n	10b40 <_malloc_r+0x9c>
   10ae6:	230c      	movs	r3, #12
   10ae8:	0030      	movs	r0, r6
   10aea:	6033      	str	r3, [r6, #0]
   10aec:	f001 fd1f 	bl	1252e <__malloc_unlock>
   10af0:	e003      	b.n	10afa <_malloc_r+0x56>
   10af2:	2d00      	cmp	r5, #0
   10af4:	dadf      	bge.n	10ab6 <_malloc_r+0x12>
   10af6:	230c      	movs	r3, #12
   10af8:	6033      	str	r3, [r6, #0]
   10afa:	2000      	movs	r0, #0
   10afc:	bd70      	pop	{r4, r5, r6, pc}
   10afe:	680b      	ldr	r3, [r1, #0]
   10b00:	1b5b      	subs	r3, r3, r5
   10b02:	d41a      	bmi.n	10b3a <_malloc_r+0x96>
   10b04:	2b0b      	cmp	r3, #11
   10b06:	d903      	bls.n	10b10 <_malloc_r+0x6c>
   10b08:	600b      	str	r3, [r1, #0]
   10b0a:	18cc      	adds	r4, r1, r3
   10b0c:	6025      	str	r5, [r4, #0]
   10b0e:	e003      	b.n	10b18 <_malloc_r+0x74>
   10b10:	428c      	cmp	r4, r1
   10b12:	d10e      	bne.n	10b32 <_malloc_r+0x8e>
   10b14:	6863      	ldr	r3, [r4, #4]
   10b16:	6013      	str	r3, [r2, #0]
   10b18:	0030      	movs	r0, r6
   10b1a:	f001 fd08 	bl	1252e <__malloc_unlock>
   10b1e:	0020      	movs	r0, r4
   10b20:	2207      	movs	r2, #7
   10b22:	300b      	adds	r0, #11
   10b24:	1d23      	adds	r3, r4, #4
   10b26:	4390      	bics	r0, r2
   10b28:	1ac3      	subs	r3, r0, r3
   10b2a:	d0e7      	beq.n	10afc <_malloc_r+0x58>
   10b2c:	425a      	negs	r2, r3
   10b2e:	50e2      	str	r2, [r4, r3]
   10b30:	e7e4      	b.n	10afc <_malloc_r+0x58>
   10b32:	684b      	ldr	r3, [r1, #4]
   10b34:	6063      	str	r3, [r4, #4]
   10b36:	000c      	movs	r4, r1
   10b38:	e7ee      	b.n	10b18 <_malloc_r+0x74>
   10b3a:	000c      	movs	r4, r1
   10b3c:	6849      	ldr	r1, [r1, #4]
   10b3e:	e7c2      	b.n	10ac6 <_malloc_r+0x22>
   10b40:	2303      	movs	r3, #3
   10b42:	1cc4      	adds	r4, r0, #3
   10b44:	439c      	bics	r4, r3
   10b46:	42a0      	cmp	r0, r4
   10b48:	d0e0      	beq.n	10b0c <_malloc_r+0x68>
   10b4a:	1a21      	subs	r1, r4, r0
   10b4c:	0030      	movs	r0, r6
   10b4e:	f000 f89f 	bl	10c90 <_sbrk_r>
   10b52:	1c43      	adds	r3, r0, #1
   10b54:	d1da      	bne.n	10b0c <_malloc_r+0x68>
   10b56:	e7c6      	b.n	10ae6 <_malloc_r+0x42>
   10b58:	2000278c 	.word	0x2000278c
   10b5c:	20002790 	.word	0x20002790

00010b60 <iprintf>:
   10b60:	b40f      	push	{r0, r1, r2, r3}
   10b62:	4b0b      	ldr	r3, [pc, #44]	; (10b90 <iprintf+0x30>)
   10b64:	b513      	push	{r0, r1, r4, lr}
   10b66:	681c      	ldr	r4, [r3, #0]
   10b68:	2c00      	cmp	r4, #0
   10b6a:	d005      	beq.n	10b78 <iprintf+0x18>
   10b6c:	69a3      	ldr	r3, [r4, #24]
   10b6e:	2b00      	cmp	r3, #0
   10b70:	d102      	bne.n	10b78 <iprintf+0x18>
   10b72:	0020      	movs	r0, r4
   10b74:	f7ff fdb0 	bl	106d8 <__sinit>
   10b78:	ab05      	add	r3, sp, #20
   10b7a:	9a04      	ldr	r2, [sp, #16]
   10b7c:	68a1      	ldr	r1, [r4, #8]
   10b7e:	0020      	movs	r0, r4
   10b80:	9301      	str	r3, [sp, #4]
   10b82:	f002 fc47 	bl	13414 <_vfiprintf_r>
   10b86:	bc16      	pop	{r1, r2, r4}
   10b88:	bc08      	pop	{r3}
   10b8a:	b004      	add	sp, #16
   10b8c:	4718      	bx	r3
   10b8e:	46c0      	nop			; (mov r8, r8)
   10b90:	200002c8 	.word	0x200002c8

00010b94 <putchar>:
   10b94:	4b08      	ldr	r3, [pc, #32]	; (10bb8 <putchar+0x24>)
   10b96:	b570      	push	{r4, r5, r6, lr}
   10b98:	681c      	ldr	r4, [r3, #0]
   10b9a:	0005      	movs	r5, r0
   10b9c:	2c00      	cmp	r4, #0
   10b9e:	d005      	beq.n	10bac <putchar+0x18>
   10ba0:	69a3      	ldr	r3, [r4, #24]
   10ba2:	2b00      	cmp	r3, #0
   10ba4:	d102      	bne.n	10bac <putchar+0x18>
   10ba6:	0020      	movs	r0, r4
   10ba8:	f7ff fd96 	bl	106d8 <__sinit>
   10bac:	0029      	movs	r1, r5
   10bae:	68a2      	ldr	r2, [r4, #8]
   10bb0:	0020      	movs	r0, r4
   10bb2:	f003 f837 	bl	13c24 <_putc_r>
   10bb6:	bd70      	pop	{r4, r5, r6, pc}
   10bb8:	200002c8 	.word	0x200002c8

00010bbc <_puts_r>:
   10bbc:	b570      	push	{r4, r5, r6, lr}
   10bbe:	0005      	movs	r5, r0
   10bc0:	000e      	movs	r6, r1
   10bc2:	2800      	cmp	r0, #0
   10bc4:	d004      	beq.n	10bd0 <_puts_r+0x14>
   10bc6:	6983      	ldr	r3, [r0, #24]
   10bc8:	2b00      	cmp	r3, #0
   10bca:	d101      	bne.n	10bd0 <_puts_r+0x14>
   10bcc:	f7ff fd84 	bl	106d8 <__sinit>
   10bd0:	69ab      	ldr	r3, [r5, #24]
   10bd2:	68ac      	ldr	r4, [r5, #8]
   10bd4:	2b00      	cmp	r3, #0
   10bd6:	d102      	bne.n	10bde <_puts_r+0x22>
   10bd8:	0028      	movs	r0, r5
   10bda:	f7ff fd7d 	bl	106d8 <__sinit>
   10bde:	4b24      	ldr	r3, [pc, #144]	; (10c70 <_puts_r+0xb4>)
   10be0:	429c      	cmp	r4, r3
   10be2:	d10f      	bne.n	10c04 <_puts_r+0x48>
   10be4:	686c      	ldr	r4, [r5, #4]
   10be6:	89a3      	ldrh	r3, [r4, #12]
   10be8:	071b      	lsls	r3, r3, #28
   10bea:	d502      	bpl.n	10bf2 <_puts_r+0x36>
   10bec:	6923      	ldr	r3, [r4, #16]
   10bee:	2b00      	cmp	r3, #0
   10bf0:	d120      	bne.n	10c34 <_puts_r+0x78>
   10bf2:	0021      	movs	r1, r4
   10bf4:	0028      	movs	r0, r5
   10bf6:	f001 f8ab 	bl	11d50 <__swsetup_r>
   10bfa:	2800      	cmp	r0, #0
   10bfc:	d01a      	beq.n	10c34 <_puts_r+0x78>
   10bfe:	2001      	movs	r0, #1
   10c00:	4240      	negs	r0, r0
   10c02:	bd70      	pop	{r4, r5, r6, pc}
   10c04:	4b1b      	ldr	r3, [pc, #108]	; (10c74 <_puts_r+0xb8>)
   10c06:	429c      	cmp	r4, r3
   10c08:	d101      	bne.n	10c0e <_puts_r+0x52>
   10c0a:	68ac      	ldr	r4, [r5, #8]
   10c0c:	e7eb      	b.n	10be6 <_puts_r+0x2a>
   10c0e:	4b1a      	ldr	r3, [pc, #104]	; (10c78 <_puts_r+0xbc>)
   10c10:	429c      	cmp	r4, r3
   10c12:	d1e8      	bne.n	10be6 <_puts_r+0x2a>
   10c14:	68ec      	ldr	r4, [r5, #12]
   10c16:	e7e6      	b.n	10be6 <_puts_r+0x2a>
   10c18:	3b01      	subs	r3, #1
   10c1a:	3601      	adds	r6, #1
   10c1c:	60a3      	str	r3, [r4, #8]
   10c1e:	2b00      	cmp	r3, #0
   10c20:	da04      	bge.n	10c2c <_puts_r+0x70>
   10c22:	69a2      	ldr	r2, [r4, #24]
   10c24:	4293      	cmp	r3, r2
   10c26:	db16      	blt.n	10c56 <_puts_r+0x9a>
   10c28:	290a      	cmp	r1, #10
   10c2a:	d014      	beq.n	10c56 <_puts_r+0x9a>
   10c2c:	6823      	ldr	r3, [r4, #0]
   10c2e:	1c5a      	adds	r2, r3, #1
   10c30:	6022      	str	r2, [r4, #0]
   10c32:	7019      	strb	r1, [r3, #0]
   10c34:	7831      	ldrb	r1, [r6, #0]
   10c36:	68a3      	ldr	r3, [r4, #8]
   10c38:	2900      	cmp	r1, #0
   10c3a:	d1ed      	bne.n	10c18 <_puts_r+0x5c>
   10c3c:	3b01      	subs	r3, #1
   10c3e:	60a3      	str	r3, [r4, #8]
   10c40:	2b00      	cmp	r3, #0
   10c42:	da0f      	bge.n	10c64 <_puts_r+0xa8>
   10c44:	0022      	movs	r2, r4
   10c46:	310a      	adds	r1, #10
   10c48:	0028      	movs	r0, r5
   10c4a:	f001 f80b 	bl	11c64 <__swbuf_r>
   10c4e:	1c43      	adds	r3, r0, #1
   10c50:	d0d5      	beq.n	10bfe <_puts_r+0x42>
   10c52:	200a      	movs	r0, #10
   10c54:	e7d5      	b.n	10c02 <_puts_r+0x46>
   10c56:	0022      	movs	r2, r4
   10c58:	0028      	movs	r0, r5
   10c5a:	f001 f803 	bl	11c64 <__swbuf_r>
   10c5e:	1c43      	adds	r3, r0, #1
   10c60:	d1e8      	bne.n	10c34 <_puts_r+0x78>
   10c62:	e7cc      	b.n	10bfe <_puts_r+0x42>
   10c64:	200a      	movs	r0, #10
   10c66:	6823      	ldr	r3, [r4, #0]
   10c68:	1c5a      	adds	r2, r3, #1
   10c6a:	6022      	str	r2, [r4, #0]
   10c6c:	7018      	strb	r0, [r3, #0]
   10c6e:	e7c8      	b.n	10c02 <_puts_r+0x46>
   10c70:	00016274 	.word	0x00016274
   10c74:	00016294 	.word	0x00016294
   10c78:	00016254 	.word	0x00016254

00010c7c <puts>:
   10c7c:	b510      	push	{r4, lr}
   10c7e:	4b03      	ldr	r3, [pc, #12]	; (10c8c <puts+0x10>)
   10c80:	0001      	movs	r1, r0
   10c82:	6818      	ldr	r0, [r3, #0]
   10c84:	f7ff ff9a 	bl	10bbc <_puts_r>
   10c88:	bd10      	pop	{r4, pc}
   10c8a:	46c0      	nop			; (mov r8, r8)
   10c8c:	200002c8 	.word	0x200002c8

00010c90 <_sbrk_r>:
   10c90:	2300      	movs	r3, #0
   10c92:	b570      	push	{r4, r5, r6, lr}
   10c94:	4c06      	ldr	r4, [pc, #24]	; (10cb0 <_sbrk_r+0x20>)
   10c96:	0005      	movs	r5, r0
   10c98:	0008      	movs	r0, r1
   10c9a:	6023      	str	r3, [r4, #0]
   10c9c:	f7fd fb6a 	bl	e374 <_sbrk>
   10ca0:	1c43      	adds	r3, r0, #1
   10ca2:	d103      	bne.n	10cac <_sbrk_r+0x1c>
   10ca4:	6823      	ldr	r3, [r4, #0]
   10ca6:	2b00      	cmp	r3, #0
   10ca8:	d000      	beq.n	10cac <_sbrk_r+0x1c>
   10caa:	602b      	str	r3, [r5, #0]
   10cac:	bd70      	pop	{r4, r5, r6, pc}
   10cae:	46c0      	nop			; (mov r8, r8)
   10cb0:	20002cfc 	.word	0x20002cfc

00010cb4 <setbuf>:
   10cb4:	424a      	negs	r2, r1
   10cb6:	414a      	adcs	r2, r1
   10cb8:	2380      	movs	r3, #128	; 0x80
   10cba:	b510      	push	{r4, lr}
   10cbc:	0052      	lsls	r2, r2, #1
   10cbe:	00db      	lsls	r3, r3, #3
   10cc0:	f000 f802 	bl	10cc8 <setvbuf>
   10cc4:	bd10      	pop	{r4, pc}
	...

00010cc8 <setvbuf>:
   10cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cca:	001d      	movs	r5, r3
   10ccc:	4b4f      	ldr	r3, [pc, #316]	; (10e0c <setvbuf+0x144>)
   10cce:	b085      	sub	sp, #20
   10cd0:	681e      	ldr	r6, [r3, #0]
   10cd2:	0004      	movs	r4, r0
   10cd4:	000f      	movs	r7, r1
   10cd6:	9200      	str	r2, [sp, #0]
   10cd8:	2e00      	cmp	r6, #0
   10cda:	d005      	beq.n	10ce8 <setvbuf+0x20>
   10cdc:	69b3      	ldr	r3, [r6, #24]
   10cde:	2b00      	cmp	r3, #0
   10ce0:	d102      	bne.n	10ce8 <setvbuf+0x20>
   10ce2:	0030      	movs	r0, r6
   10ce4:	f7ff fcf8 	bl	106d8 <__sinit>
   10ce8:	4b49      	ldr	r3, [pc, #292]	; (10e10 <setvbuf+0x148>)
   10cea:	429c      	cmp	r4, r3
   10cec:	d150      	bne.n	10d90 <setvbuf+0xc8>
   10cee:	6874      	ldr	r4, [r6, #4]
   10cf0:	9b00      	ldr	r3, [sp, #0]
   10cf2:	2b02      	cmp	r3, #2
   10cf4:	d005      	beq.n	10d02 <setvbuf+0x3a>
   10cf6:	2b01      	cmp	r3, #1
   10cf8:	d900      	bls.n	10cfc <setvbuf+0x34>
   10cfa:	e084      	b.n	10e06 <setvbuf+0x13e>
   10cfc:	2d00      	cmp	r5, #0
   10cfe:	da00      	bge.n	10d02 <setvbuf+0x3a>
   10d00:	e081      	b.n	10e06 <setvbuf+0x13e>
   10d02:	0021      	movs	r1, r4
   10d04:	0030      	movs	r0, r6
   10d06:	f7ff fc79 	bl	105fc <_fflush_r>
   10d0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10d0c:	2900      	cmp	r1, #0
   10d0e:	d008      	beq.n	10d22 <setvbuf+0x5a>
   10d10:	0023      	movs	r3, r4
   10d12:	3344      	adds	r3, #68	; 0x44
   10d14:	4299      	cmp	r1, r3
   10d16:	d002      	beq.n	10d1e <setvbuf+0x56>
   10d18:	0030      	movs	r0, r6
   10d1a:	f7ff fe79 	bl	10a10 <_free_r>
   10d1e:	2300      	movs	r3, #0
   10d20:	6363      	str	r3, [r4, #52]	; 0x34
   10d22:	2300      	movs	r3, #0
   10d24:	61a3      	str	r3, [r4, #24]
   10d26:	6063      	str	r3, [r4, #4]
   10d28:	89a3      	ldrh	r3, [r4, #12]
   10d2a:	061b      	lsls	r3, r3, #24
   10d2c:	d503      	bpl.n	10d36 <setvbuf+0x6e>
   10d2e:	6921      	ldr	r1, [r4, #16]
   10d30:	0030      	movs	r0, r6
   10d32:	f7ff fe6d 	bl	10a10 <_free_r>
   10d36:	89a3      	ldrh	r3, [r4, #12]
   10d38:	4a36      	ldr	r2, [pc, #216]	; (10e14 <setvbuf+0x14c>)
   10d3a:	4013      	ands	r3, r2
   10d3c:	81a3      	strh	r3, [r4, #12]
   10d3e:	9b00      	ldr	r3, [sp, #0]
   10d40:	2b02      	cmp	r3, #2
   10d42:	d05a      	beq.n	10dfa <setvbuf+0x132>
   10d44:	ab03      	add	r3, sp, #12
   10d46:	aa02      	add	r2, sp, #8
   10d48:	0021      	movs	r1, r4
   10d4a:	0030      	movs	r0, r6
   10d4c:	f7ff fd90 	bl	10870 <__swhatbuf_r>
   10d50:	89a3      	ldrh	r3, [r4, #12]
   10d52:	4318      	orrs	r0, r3
   10d54:	81a0      	strh	r0, [r4, #12]
   10d56:	2d00      	cmp	r5, #0
   10d58:	d124      	bne.n	10da4 <setvbuf+0xdc>
   10d5a:	9d02      	ldr	r5, [sp, #8]
   10d5c:	0028      	movs	r0, r5
   10d5e:	f7ff fdf3 	bl	10948 <malloc>
   10d62:	9501      	str	r5, [sp, #4]
   10d64:	1e07      	subs	r7, r0, #0
   10d66:	d142      	bne.n	10dee <setvbuf+0x126>
   10d68:	9b02      	ldr	r3, [sp, #8]
   10d6a:	9301      	str	r3, [sp, #4]
   10d6c:	42ab      	cmp	r3, r5
   10d6e:	d139      	bne.n	10de4 <setvbuf+0x11c>
   10d70:	2001      	movs	r0, #1
   10d72:	4240      	negs	r0, r0
   10d74:	2302      	movs	r3, #2
   10d76:	89a2      	ldrh	r2, [r4, #12]
   10d78:	4313      	orrs	r3, r2
   10d7a:	81a3      	strh	r3, [r4, #12]
   10d7c:	2300      	movs	r3, #0
   10d7e:	60a3      	str	r3, [r4, #8]
   10d80:	0023      	movs	r3, r4
   10d82:	3347      	adds	r3, #71	; 0x47
   10d84:	6023      	str	r3, [r4, #0]
   10d86:	6123      	str	r3, [r4, #16]
   10d88:	2301      	movs	r3, #1
   10d8a:	6163      	str	r3, [r4, #20]
   10d8c:	b005      	add	sp, #20
   10d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d90:	4b21      	ldr	r3, [pc, #132]	; (10e18 <setvbuf+0x150>)
   10d92:	429c      	cmp	r4, r3
   10d94:	d101      	bne.n	10d9a <setvbuf+0xd2>
   10d96:	68b4      	ldr	r4, [r6, #8]
   10d98:	e7aa      	b.n	10cf0 <setvbuf+0x28>
   10d9a:	4b20      	ldr	r3, [pc, #128]	; (10e1c <setvbuf+0x154>)
   10d9c:	429c      	cmp	r4, r3
   10d9e:	d1a7      	bne.n	10cf0 <setvbuf+0x28>
   10da0:	68f4      	ldr	r4, [r6, #12]
   10da2:	e7a5      	b.n	10cf0 <setvbuf+0x28>
   10da4:	2f00      	cmp	r7, #0
   10da6:	d0d9      	beq.n	10d5c <setvbuf+0x94>
   10da8:	69b3      	ldr	r3, [r6, #24]
   10daa:	2b00      	cmp	r3, #0
   10dac:	d102      	bne.n	10db4 <setvbuf+0xec>
   10dae:	0030      	movs	r0, r6
   10db0:	f7ff fc92 	bl	106d8 <__sinit>
   10db4:	9b00      	ldr	r3, [sp, #0]
   10db6:	2b01      	cmp	r3, #1
   10db8:	d103      	bne.n	10dc2 <setvbuf+0xfa>
   10dba:	89a3      	ldrh	r3, [r4, #12]
   10dbc:	9a00      	ldr	r2, [sp, #0]
   10dbe:	431a      	orrs	r2, r3
   10dc0:	81a2      	strh	r2, [r4, #12]
   10dc2:	2008      	movs	r0, #8
   10dc4:	89a3      	ldrh	r3, [r4, #12]
   10dc6:	6027      	str	r7, [r4, #0]
   10dc8:	6127      	str	r7, [r4, #16]
   10dca:	6165      	str	r5, [r4, #20]
   10dcc:	4018      	ands	r0, r3
   10dce:	d018      	beq.n	10e02 <setvbuf+0x13a>
   10dd0:	2001      	movs	r0, #1
   10dd2:	4018      	ands	r0, r3
   10dd4:	2300      	movs	r3, #0
   10dd6:	4298      	cmp	r0, r3
   10dd8:	d011      	beq.n	10dfe <setvbuf+0x136>
   10dda:	426d      	negs	r5, r5
   10ddc:	60a3      	str	r3, [r4, #8]
   10dde:	61a5      	str	r5, [r4, #24]
   10de0:	0018      	movs	r0, r3
   10de2:	e7d3      	b.n	10d8c <setvbuf+0xc4>
   10de4:	9801      	ldr	r0, [sp, #4]
   10de6:	f7ff fdaf 	bl	10948 <malloc>
   10dea:	1e07      	subs	r7, r0, #0
   10dec:	d0c0      	beq.n	10d70 <setvbuf+0xa8>
   10dee:	2380      	movs	r3, #128	; 0x80
   10df0:	89a2      	ldrh	r2, [r4, #12]
   10df2:	9d01      	ldr	r5, [sp, #4]
   10df4:	4313      	orrs	r3, r2
   10df6:	81a3      	strh	r3, [r4, #12]
   10df8:	e7d6      	b.n	10da8 <setvbuf+0xe0>
   10dfa:	2000      	movs	r0, #0
   10dfc:	e7ba      	b.n	10d74 <setvbuf+0xac>
   10dfe:	60a5      	str	r5, [r4, #8]
   10e00:	e7c4      	b.n	10d8c <setvbuf+0xc4>
   10e02:	60a0      	str	r0, [r4, #8]
   10e04:	e7c2      	b.n	10d8c <setvbuf+0xc4>
   10e06:	2001      	movs	r0, #1
   10e08:	4240      	negs	r0, r0
   10e0a:	e7bf      	b.n	10d8c <setvbuf+0xc4>
   10e0c:	200002c8 	.word	0x200002c8
   10e10:	00016274 	.word	0x00016274
   10e14:	fffff35c 	.word	0xfffff35c
   10e18:	00016294 	.word	0x00016294
   10e1c:	00016254 	.word	0x00016254

00010e20 <sniprintf>:
   10e20:	b40c      	push	{r2, r3}
   10e22:	b530      	push	{r4, r5, lr}
   10e24:	4b16      	ldr	r3, [pc, #88]	; (10e80 <sniprintf+0x60>)
   10e26:	b09d      	sub	sp, #116	; 0x74
   10e28:	1e0c      	subs	r4, r1, #0
   10e2a:	681d      	ldr	r5, [r3, #0]
   10e2c:	da08      	bge.n	10e40 <sniprintf+0x20>
   10e2e:	238b      	movs	r3, #139	; 0x8b
   10e30:	2001      	movs	r0, #1
   10e32:	602b      	str	r3, [r5, #0]
   10e34:	4240      	negs	r0, r0
   10e36:	b01d      	add	sp, #116	; 0x74
   10e38:	bc30      	pop	{r4, r5}
   10e3a:	bc08      	pop	{r3}
   10e3c:	b002      	add	sp, #8
   10e3e:	4718      	bx	r3
   10e40:	2382      	movs	r3, #130	; 0x82
   10e42:	a902      	add	r1, sp, #8
   10e44:	009b      	lsls	r3, r3, #2
   10e46:	818b      	strh	r3, [r1, #12]
   10e48:	2300      	movs	r3, #0
   10e4a:	9002      	str	r0, [sp, #8]
   10e4c:	6108      	str	r0, [r1, #16]
   10e4e:	429c      	cmp	r4, r3
   10e50:	d000      	beq.n	10e54 <sniprintf+0x34>
   10e52:	1e63      	subs	r3, r4, #1
   10e54:	608b      	str	r3, [r1, #8]
   10e56:	614b      	str	r3, [r1, #20]
   10e58:	2301      	movs	r3, #1
   10e5a:	425b      	negs	r3, r3
   10e5c:	81cb      	strh	r3, [r1, #14]
   10e5e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   10e60:	ab21      	add	r3, sp, #132	; 0x84
   10e62:	0028      	movs	r0, r5
   10e64:	9301      	str	r3, [sp, #4]
   10e66:	f001 ffc7 	bl	12df8 <_svfiprintf_r>
   10e6a:	1c43      	adds	r3, r0, #1
   10e6c:	da01      	bge.n	10e72 <sniprintf+0x52>
   10e6e:	238b      	movs	r3, #139	; 0x8b
   10e70:	602b      	str	r3, [r5, #0]
   10e72:	2c00      	cmp	r4, #0
   10e74:	d0df      	beq.n	10e36 <sniprintf+0x16>
   10e76:	2300      	movs	r3, #0
   10e78:	9a02      	ldr	r2, [sp, #8]
   10e7a:	7013      	strb	r3, [r2, #0]
   10e7c:	e7db      	b.n	10e36 <sniprintf+0x16>
   10e7e:	46c0      	nop			; (mov r8, r8)
   10e80:	200002c8 	.word	0x200002c8

00010e84 <siscanf>:
   10e84:	b40e      	push	{r1, r2, r3}
   10e86:	2381      	movs	r3, #129	; 0x81
   10e88:	b570      	push	{r4, r5, r6, lr}
   10e8a:	b09d      	sub	sp, #116	; 0x74
   10e8c:	ac02      	add	r4, sp, #8
   10e8e:	ad21      	add	r5, sp, #132	; 0x84
   10e90:	009b      	lsls	r3, r3, #2
   10e92:	cd40      	ldmia	r5!, {r6}
   10e94:	81a3      	strh	r3, [r4, #12]
   10e96:	9002      	str	r0, [sp, #8]
   10e98:	9006      	str	r0, [sp, #24]
   10e9a:	f000 f884 	bl	10fa6 <strlen>
   10e9e:	4b0b      	ldr	r3, [pc, #44]	; (10ecc <siscanf+0x48>)
   10ea0:	6060      	str	r0, [r4, #4]
   10ea2:	6263      	str	r3, [r4, #36]	; 0x24
   10ea4:	2300      	movs	r3, #0
   10ea6:	6160      	str	r0, [r4, #20]
   10ea8:	4809      	ldr	r0, [pc, #36]	; (10ed0 <siscanf+0x4c>)
   10eaa:	6363      	str	r3, [r4, #52]	; 0x34
   10eac:	64a3      	str	r3, [r4, #72]	; 0x48
   10eae:	3b01      	subs	r3, #1
   10eb0:	81e3      	strh	r3, [r4, #14]
   10eb2:	0032      	movs	r2, r6
   10eb4:	002b      	movs	r3, r5
   10eb6:	0021      	movs	r1, r4
   10eb8:	6800      	ldr	r0, [r0, #0]
   10eba:	9501      	str	r5, [sp, #4]
   10ebc:	f002 f8fc 	bl	130b8 <__ssvfiscanf_r>
   10ec0:	b01d      	add	sp, #116	; 0x74
   10ec2:	bc70      	pop	{r4, r5, r6}
   10ec4:	bc08      	pop	{r3}
   10ec6:	b003      	add	sp, #12
   10ec8:	4718      	bx	r3
   10eca:	46c0      	nop			; (mov r8, r8)
   10ecc:	00010efd 	.word	0x00010efd
   10ed0:	200002c8 	.word	0x200002c8

00010ed4 <__sread>:
   10ed4:	b570      	push	{r4, r5, r6, lr}
   10ed6:	000c      	movs	r4, r1
   10ed8:	250e      	movs	r5, #14
   10eda:	5f49      	ldrsh	r1, [r1, r5]
   10edc:	f002 fed8 	bl	13c90 <_read_r>
   10ee0:	2800      	cmp	r0, #0
   10ee2:	db03      	blt.n	10eec <__sread+0x18>
   10ee4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10ee6:	181b      	adds	r3, r3, r0
   10ee8:	6563      	str	r3, [r4, #84]	; 0x54
   10eea:	bd70      	pop	{r4, r5, r6, pc}
   10eec:	89a3      	ldrh	r3, [r4, #12]
   10eee:	4a02      	ldr	r2, [pc, #8]	; (10ef8 <__sread+0x24>)
   10ef0:	4013      	ands	r3, r2
   10ef2:	81a3      	strh	r3, [r4, #12]
   10ef4:	e7f9      	b.n	10eea <__sread+0x16>
   10ef6:	46c0      	nop			; (mov r8, r8)
   10ef8:	ffffefff 	.word	0xffffefff

00010efc <__seofread>:
   10efc:	2000      	movs	r0, #0
   10efe:	4770      	bx	lr

00010f00 <__swrite>:
   10f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f02:	001f      	movs	r7, r3
   10f04:	898b      	ldrh	r3, [r1, #12]
   10f06:	0005      	movs	r5, r0
   10f08:	000c      	movs	r4, r1
   10f0a:	0016      	movs	r6, r2
   10f0c:	05db      	lsls	r3, r3, #23
   10f0e:	d505      	bpl.n	10f1c <__swrite+0x1c>
   10f10:	230e      	movs	r3, #14
   10f12:	5ec9      	ldrsh	r1, [r1, r3]
   10f14:	2200      	movs	r2, #0
   10f16:	2302      	movs	r3, #2
   10f18:	f001 faf4 	bl	12504 <_lseek_r>
   10f1c:	89a3      	ldrh	r3, [r4, #12]
   10f1e:	4a05      	ldr	r2, [pc, #20]	; (10f34 <__swrite+0x34>)
   10f20:	0028      	movs	r0, r5
   10f22:	4013      	ands	r3, r2
   10f24:	81a3      	strh	r3, [r4, #12]
   10f26:	0032      	movs	r2, r6
   10f28:	230e      	movs	r3, #14
   10f2a:	5ee1      	ldrsh	r1, [r4, r3]
   10f2c:	003b      	movs	r3, r7
   10f2e:	f000 fefb 	bl	11d28 <_write_r>
   10f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10f34:	ffffefff 	.word	0xffffefff

00010f38 <__sseek>:
   10f38:	b570      	push	{r4, r5, r6, lr}
   10f3a:	000c      	movs	r4, r1
   10f3c:	250e      	movs	r5, #14
   10f3e:	5f49      	ldrsh	r1, [r1, r5]
   10f40:	f001 fae0 	bl	12504 <_lseek_r>
   10f44:	89a3      	ldrh	r3, [r4, #12]
   10f46:	1c42      	adds	r2, r0, #1
   10f48:	d103      	bne.n	10f52 <__sseek+0x1a>
   10f4a:	4a05      	ldr	r2, [pc, #20]	; (10f60 <__sseek+0x28>)
   10f4c:	4013      	ands	r3, r2
   10f4e:	81a3      	strh	r3, [r4, #12]
   10f50:	bd70      	pop	{r4, r5, r6, pc}
   10f52:	2280      	movs	r2, #128	; 0x80
   10f54:	0152      	lsls	r2, r2, #5
   10f56:	4313      	orrs	r3, r2
   10f58:	81a3      	strh	r3, [r4, #12]
   10f5a:	6560      	str	r0, [r4, #84]	; 0x54
   10f5c:	e7f8      	b.n	10f50 <__sseek+0x18>
   10f5e:	46c0      	nop			; (mov r8, r8)
   10f60:	ffffefff 	.word	0xffffefff

00010f64 <__sclose>:
   10f64:	b510      	push	{r4, lr}
   10f66:	230e      	movs	r3, #14
   10f68:	5ec9      	ldrsh	r1, [r1, r3]
   10f6a:	f000 ff67 	bl	11e3c <_close_r>
   10f6e:	bd10      	pop	{r4, pc}

00010f70 <strcat>:
   10f70:	0002      	movs	r2, r0
   10f72:	b510      	push	{r4, lr}
   10f74:	7813      	ldrb	r3, [r2, #0]
   10f76:	2b00      	cmp	r3, #0
   10f78:	d105      	bne.n	10f86 <strcat+0x16>
   10f7a:	5ccc      	ldrb	r4, [r1, r3]
   10f7c:	54d4      	strb	r4, [r2, r3]
   10f7e:	3301      	adds	r3, #1
   10f80:	2c00      	cmp	r4, #0
   10f82:	d1fa      	bne.n	10f7a <strcat+0xa>
   10f84:	bd10      	pop	{r4, pc}
   10f86:	3201      	adds	r2, #1
   10f88:	e7f4      	b.n	10f74 <strcat+0x4>

00010f8a <strchr>:
   10f8a:	b2c9      	uxtb	r1, r1
   10f8c:	7803      	ldrb	r3, [r0, #0]
   10f8e:	2b00      	cmp	r3, #0
   10f90:	d004      	beq.n	10f9c <strchr+0x12>
   10f92:	4299      	cmp	r1, r3
   10f94:	d100      	bne.n	10f98 <strchr+0xe>
   10f96:	4770      	bx	lr
   10f98:	3001      	adds	r0, #1
   10f9a:	e7f7      	b.n	10f8c <strchr+0x2>
   10f9c:	424b      	negs	r3, r1
   10f9e:	4159      	adcs	r1, r3
   10fa0:	4249      	negs	r1, r1
   10fa2:	4008      	ands	r0, r1
   10fa4:	e7f7      	b.n	10f96 <strchr+0xc>

00010fa6 <strlen>:
   10fa6:	2300      	movs	r3, #0
   10fa8:	5cc2      	ldrb	r2, [r0, r3]
   10faa:	3301      	adds	r3, #1
   10fac:	2a00      	cmp	r2, #0
   10fae:	d1fb      	bne.n	10fa8 <strlen+0x2>
   10fb0:	1e58      	subs	r0, r3, #1
   10fb2:	4770      	bx	lr

00010fb4 <strncmp>:
   10fb4:	2300      	movs	r3, #0
   10fb6:	b530      	push	{r4, r5, lr}
   10fb8:	429a      	cmp	r2, r3
   10fba:	d00a      	beq.n	10fd2 <strncmp+0x1e>
   10fbc:	3a01      	subs	r2, #1
   10fbe:	5cc4      	ldrb	r4, [r0, r3]
   10fc0:	5ccd      	ldrb	r5, [r1, r3]
   10fc2:	42ac      	cmp	r4, r5
   10fc4:	d104      	bne.n	10fd0 <strncmp+0x1c>
   10fc6:	429a      	cmp	r2, r3
   10fc8:	d002      	beq.n	10fd0 <strncmp+0x1c>
   10fca:	3301      	adds	r3, #1
   10fcc:	2c00      	cmp	r4, #0
   10fce:	d1f6      	bne.n	10fbe <strncmp+0xa>
   10fd0:	1b63      	subs	r3, r4, r5
   10fd2:	0018      	movs	r0, r3
   10fd4:	bd30      	pop	{r4, r5, pc}

00010fd6 <strncpy>:
   10fd6:	b570      	push	{r4, r5, r6, lr}
   10fd8:	0004      	movs	r4, r0
   10fda:	2a00      	cmp	r2, #0
   10fdc:	d100      	bne.n	10fe0 <strncpy+0xa>
   10fde:	bd70      	pop	{r4, r5, r6, pc}
   10fe0:	780d      	ldrb	r5, [r1, #0]
   10fe2:	1e56      	subs	r6, r2, #1
   10fe4:	1c63      	adds	r3, r4, #1
   10fe6:	7025      	strb	r5, [r4, #0]
   10fe8:	3101      	adds	r1, #1
   10fea:	2d00      	cmp	r5, #0
   10fec:	d105      	bne.n	10ffa <strncpy+0x24>
   10fee:	18a4      	adds	r4, r4, r2
   10ff0:	429c      	cmp	r4, r3
   10ff2:	d0f4      	beq.n	10fde <strncpy+0x8>
   10ff4:	701d      	strb	r5, [r3, #0]
   10ff6:	3301      	adds	r3, #1
   10ff8:	e7fa      	b.n	10ff0 <strncpy+0x1a>
   10ffa:	001c      	movs	r4, r3
   10ffc:	0032      	movs	r2, r6
   10ffe:	e7ec      	b.n	10fda <strncpy+0x4>

00011000 <sulp>:
   11000:	b570      	push	{r4, r5, r6, lr}
   11002:	0016      	movs	r6, r2
   11004:	000d      	movs	r5, r1
   11006:	f001 fd61 	bl	12acc <__ulp>
   1100a:	2e00      	cmp	r6, #0
   1100c:	d00d      	beq.n	1102a <sulp+0x2a>
   1100e:	236b      	movs	r3, #107	; 0x6b
   11010:	006a      	lsls	r2, r5, #1
   11012:	0d52      	lsrs	r2, r2, #21
   11014:	1a9b      	subs	r3, r3, r2
   11016:	2b00      	cmp	r3, #0
   11018:	dd07      	ble.n	1102a <sulp+0x2a>
   1101a:	2400      	movs	r4, #0
   1101c:	4a03      	ldr	r2, [pc, #12]	; (1102c <sulp+0x2c>)
   1101e:	051b      	lsls	r3, r3, #20
   11020:	189d      	adds	r5, r3, r2
   11022:	002b      	movs	r3, r5
   11024:	0022      	movs	r2, r4
   11026:	f7fe fc1b 	bl	f860 <__aeabi_dmul>
   1102a:	bd70      	pop	{r4, r5, r6, pc}
   1102c:	3ff00000 	.word	0x3ff00000

00011030 <_strtod_l>:
   11030:	b5f0      	push	{r4, r5, r6, r7, lr}
   11032:	b0a5      	sub	sp, #148	; 0x94
   11034:	9307      	str	r3, [sp, #28]
   11036:	2300      	movs	r3, #0
   11038:	9004      	str	r0, [sp, #16]
   1103a:	9807      	ldr	r0, [sp, #28]
   1103c:	9320      	str	r3, [sp, #128]	; 0x80
   1103e:	9106      	str	r1, [sp, #24]
   11040:	921a      	str	r2, [sp, #104]	; 0x68
   11042:	f001 fa5d 	bl	12500 <__localeconv_l>
   11046:	0005      	movs	r5, r0
   11048:	6800      	ldr	r0, [r0, #0]
   1104a:	f7ff ffac 	bl	10fa6 <strlen>
   1104e:	2600      	movs	r6, #0
   11050:	2700      	movs	r7, #0
   11052:	9b06      	ldr	r3, [sp, #24]
   11054:	9005      	str	r0, [sp, #20]
   11056:	931f      	str	r3, [sp, #124]	; 0x7c
   11058:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1105a:	781a      	ldrb	r2, [r3, #0]
   1105c:	2a0d      	cmp	r2, #13
   1105e:	d839      	bhi.n	110d4 <_strtod_l+0xa4>
   11060:	2a09      	cmp	r2, #9
   11062:	d23d      	bcs.n	110e0 <_strtod_l+0xb0>
   11064:	2a00      	cmp	r2, #0
   11066:	d044      	beq.n	110f2 <_strtod_l+0xc2>
   11068:	2300      	movs	r3, #0
   1106a:	9312      	str	r3, [sp, #72]	; 0x48
   1106c:	2200      	movs	r2, #0
   1106e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   11070:	920c      	str	r2, [sp, #48]	; 0x30
   11072:	7823      	ldrb	r3, [r4, #0]
   11074:	2b30      	cmp	r3, #48	; 0x30
   11076:	d000      	beq.n	1107a <_strtod_l+0x4a>
   11078:	e07e      	b.n	11178 <_strtod_l+0x148>
   1107a:	7863      	ldrb	r3, [r4, #1]
   1107c:	2b58      	cmp	r3, #88	; 0x58
   1107e:	d002      	beq.n	11086 <_strtod_l+0x56>
   11080:	2b78      	cmp	r3, #120	; 0x78
   11082:	d000      	beq.n	11086 <_strtod_l+0x56>
   11084:	e06e      	b.n	11164 <_strtod_l+0x134>
   11086:	9b07      	ldr	r3, [sp, #28]
   11088:	4ab7      	ldr	r2, [pc, #732]	; (11368 <_strtod_l+0x338>)
   1108a:	9302      	str	r3, [sp, #8]
   1108c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1108e:	a91f      	add	r1, sp, #124	; 0x7c
   11090:	9301      	str	r3, [sp, #4]
   11092:	ab20      	add	r3, sp, #128	; 0x80
   11094:	9300      	str	r3, [sp, #0]
   11096:	9804      	ldr	r0, [sp, #16]
   11098:	ab21      	add	r3, sp, #132	; 0x84
   1109a:	f000 ff3a 	bl	11f12 <__gethex>
   1109e:	2507      	movs	r5, #7
   110a0:	9005      	str	r0, [sp, #20]
   110a2:	4005      	ands	r5, r0
   110a4:	d005      	beq.n	110b2 <_strtod_l+0x82>
   110a6:	2d06      	cmp	r5, #6
   110a8:	d12f      	bne.n	1110a <_strtod_l+0xda>
   110aa:	2300      	movs	r3, #0
   110ac:	3401      	adds	r4, #1
   110ae:	941f      	str	r4, [sp, #124]	; 0x7c
   110b0:	9312      	str	r3, [sp, #72]	; 0x48
   110b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   110b4:	2b00      	cmp	r3, #0
   110b6:	d002      	beq.n	110be <_strtod_l+0x8e>
   110b8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   110ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   110bc:	601a      	str	r2, [r3, #0]
   110be:	9b12      	ldr	r3, [sp, #72]	; 0x48
   110c0:	2b00      	cmp	r3, #0
   110c2:	d01d      	beq.n	11100 <_strtod_l+0xd0>
   110c4:	2380      	movs	r3, #128	; 0x80
   110c6:	0032      	movs	r2, r6
   110c8:	061b      	lsls	r3, r3, #24
   110ca:	18fb      	adds	r3, r7, r3
   110cc:	0010      	movs	r0, r2
   110ce:	0019      	movs	r1, r3
   110d0:	b025      	add	sp, #148	; 0x94
   110d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   110d4:	2a2b      	cmp	r2, #43	; 0x2b
   110d6:	d005      	beq.n	110e4 <_strtod_l+0xb4>
   110d8:	2a2d      	cmp	r2, #45	; 0x2d
   110da:	d014      	beq.n	11106 <_strtod_l+0xd6>
   110dc:	2a20      	cmp	r2, #32
   110de:	d1c3      	bne.n	11068 <_strtod_l+0x38>
   110e0:	3301      	adds	r3, #1
   110e2:	e7b8      	b.n	11056 <_strtod_l+0x26>
   110e4:	2200      	movs	r2, #0
   110e6:	9212      	str	r2, [sp, #72]	; 0x48
   110e8:	1c5a      	adds	r2, r3, #1
   110ea:	921f      	str	r2, [sp, #124]	; 0x7c
   110ec:	785b      	ldrb	r3, [r3, #1]
   110ee:	2b00      	cmp	r3, #0
   110f0:	d1bc      	bne.n	1106c <_strtod_l+0x3c>
   110f2:	9b06      	ldr	r3, [sp, #24]
   110f4:	931f      	str	r3, [sp, #124]	; 0x7c
   110f6:	2300      	movs	r3, #0
   110f8:	9312      	str	r3, [sp, #72]	; 0x48
   110fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   110fc:	2b00      	cmp	r3, #0
   110fe:	d1db      	bne.n	110b8 <_strtod_l+0x88>
   11100:	0032      	movs	r2, r6
   11102:	003b      	movs	r3, r7
   11104:	e7e2      	b.n	110cc <_strtod_l+0x9c>
   11106:	2201      	movs	r2, #1
   11108:	e7ed      	b.n	110e6 <_strtod_l+0xb6>
   1110a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1110c:	2a00      	cmp	r2, #0
   1110e:	d007      	beq.n	11120 <_strtod_l+0xf0>
   11110:	2135      	movs	r1, #53	; 0x35
   11112:	a822      	add	r0, sp, #136	; 0x88
   11114:	f001 fdc7 	bl	12ca6 <__copybits>
   11118:	9920      	ldr	r1, [sp, #128]	; 0x80
   1111a:	9804      	ldr	r0, [sp, #16]
   1111c:	f001 fa40 	bl	125a0 <_Bfree>
   11120:	1e68      	subs	r0, r5, #1
   11122:	2804      	cmp	r0, #4
   11124:	d806      	bhi.n	11134 <_strtod_l+0x104>
   11126:	f002 ff93 	bl	14050 <__gnu_thumb1_case_uqi>
   1112a:	030c      	.short	0x030c
   1112c:	1917      	.short	0x1917
   1112e:	0c          	.byte	0x0c
   1112f:	00          	.byte	0x00
   11130:	9e22      	ldr	r6, [sp, #136]	; 0x88
   11132:	9f23      	ldr	r7, [sp, #140]	; 0x8c
   11134:	9b05      	ldr	r3, [sp, #20]
   11136:	071b      	lsls	r3, r3, #28
   11138:	d5bb      	bpl.n	110b2 <_strtod_l+0x82>
   1113a:	2380      	movs	r3, #128	; 0x80
   1113c:	061b      	lsls	r3, r3, #24
   1113e:	431f      	orrs	r7, r3
   11140:	e7b7      	b.n	110b2 <_strtod_l+0x82>
   11142:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11144:	4a89      	ldr	r2, [pc, #548]	; (1136c <_strtod_l+0x33c>)
   11146:	498a      	ldr	r1, [pc, #552]	; (11370 <_strtod_l+0x340>)
   11148:	401a      	ands	r2, r3
   1114a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1114c:	9e22      	ldr	r6, [sp, #136]	; 0x88
   1114e:	185b      	adds	r3, r3, r1
   11150:	051b      	lsls	r3, r3, #20
   11152:	431a      	orrs	r2, r3
   11154:	0017      	movs	r7, r2
   11156:	e7ed      	b.n	11134 <_strtod_l+0x104>
   11158:	4f86      	ldr	r7, [pc, #536]	; (11374 <_strtod_l+0x344>)
   1115a:	e7eb      	b.n	11134 <_strtod_l+0x104>
   1115c:	2601      	movs	r6, #1
   1115e:	4f86      	ldr	r7, [pc, #536]	; (11378 <_strtod_l+0x348>)
   11160:	4276      	negs	r6, r6
   11162:	e7e7      	b.n	11134 <_strtod_l+0x104>
   11164:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   11166:	1c5a      	adds	r2, r3, #1
   11168:	921f      	str	r2, [sp, #124]	; 0x7c
   1116a:	785b      	ldrb	r3, [r3, #1]
   1116c:	2b30      	cmp	r3, #48	; 0x30
   1116e:	d0f9      	beq.n	11164 <_strtod_l+0x134>
   11170:	2b00      	cmp	r3, #0
   11172:	d09e      	beq.n	110b2 <_strtod_l+0x82>
   11174:	2301      	movs	r3, #1
   11176:	930c      	str	r3, [sp, #48]	; 0x30
   11178:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1117a:	220a      	movs	r2, #10
   1117c:	9313      	str	r3, [sp, #76]	; 0x4c
   1117e:	2300      	movs	r3, #0
   11180:	930b      	str	r3, [sp, #44]	; 0x2c
   11182:	930a      	str	r3, [sp, #40]	; 0x28
   11184:	9308      	str	r3, [sp, #32]
   11186:	981f      	ldr	r0, [sp, #124]	; 0x7c
   11188:	7804      	ldrb	r4, [r0, #0]
   1118a:	0023      	movs	r3, r4
   1118c:	3b30      	subs	r3, #48	; 0x30
   1118e:	b2d9      	uxtb	r1, r3
   11190:	2909      	cmp	r1, #9
   11192:	d926      	bls.n	111e2 <_strtod_l+0x1b2>
   11194:	9a05      	ldr	r2, [sp, #20]
   11196:	6829      	ldr	r1, [r5, #0]
   11198:	f7ff ff0c 	bl	10fb4 <strncmp>
   1119c:	2800      	cmp	r0, #0
   1119e:	d032      	beq.n	11206 <_strtod_l+0x1d6>
   111a0:	2000      	movs	r0, #0
   111a2:	0023      	movs	r3, r4
   111a4:	4684      	mov	ip, r0
   111a6:	9a08      	ldr	r2, [sp, #32]
   111a8:	9007      	str	r0, [sp, #28]
   111aa:	9205      	str	r2, [sp, #20]
   111ac:	2220      	movs	r2, #32
   111ae:	0019      	movs	r1, r3
   111b0:	4391      	bics	r1, r2
   111b2:	000a      	movs	r2, r1
   111b4:	2100      	movs	r1, #0
   111b6:	2a45      	cmp	r2, #69	; 0x45
   111b8:	d000      	beq.n	111bc <_strtod_l+0x18c>
   111ba:	e0a8      	b.n	1130e <_strtod_l+0x2de>
   111bc:	9b05      	ldr	r3, [sp, #20]
   111be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   111c0:	4303      	orrs	r3, r0
   111c2:	4313      	orrs	r3, r2
   111c4:	428b      	cmp	r3, r1
   111c6:	d094      	beq.n	110f2 <_strtod_l+0xc2>
   111c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   111ca:	9306      	str	r3, [sp, #24]
   111cc:	3301      	adds	r3, #1
   111ce:	931f      	str	r3, [sp, #124]	; 0x7c
   111d0:	9b06      	ldr	r3, [sp, #24]
   111d2:	785b      	ldrb	r3, [r3, #1]
   111d4:	2b2b      	cmp	r3, #43	; 0x2b
   111d6:	d072      	beq.n	112be <_strtod_l+0x28e>
   111d8:	000c      	movs	r4, r1
   111da:	2b2d      	cmp	r3, #45	; 0x2d
   111dc:	d175      	bne.n	112ca <_strtod_l+0x29a>
   111de:	2401      	movs	r4, #1
   111e0:	e06e      	b.n	112c0 <_strtod_l+0x290>
   111e2:	9908      	ldr	r1, [sp, #32]
   111e4:	2908      	cmp	r1, #8
   111e6:	dc09      	bgt.n	111fc <_strtod_l+0x1cc>
   111e8:	990a      	ldr	r1, [sp, #40]	; 0x28
   111ea:	4351      	muls	r1, r2
   111ec:	185b      	adds	r3, r3, r1
   111ee:	930a      	str	r3, [sp, #40]	; 0x28
   111f0:	9b08      	ldr	r3, [sp, #32]
   111f2:	3001      	adds	r0, #1
   111f4:	3301      	adds	r3, #1
   111f6:	9308      	str	r3, [sp, #32]
   111f8:	901f      	str	r0, [sp, #124]	; 0x7c
   111fa:	e7c4      	b.n	11186 <_strtod_l+0x156>
   111fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   111fe:	4351      	muls	r1, r2
   11200:	185b      	adds	r3, r3, r1
   11202:	930b      	str	r3, [sp, #44]	; 0x2c
   11204:	e7f4      	b.n	111f0 <_strtod_l+0x1c0>
   11206:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   11208:	9b05      	ldr	r3, [sp, #20]
   1120a:	4694      	mov	ip, r2
   1120c:	9a08      	ldr	r2, [sp, #32]
   1120e:	4463      	add	r3, ip
   11210:	931f      	str	r3, [sp, #124]	; 0x7c
   11212:	781b      	ldrb	r3, [r3, #0]
   11214:	2a00      	cmp	r2, #0
   11216:	d149      	bne.n	112ac <_strtod_l+0x27c>
   11218:	0010      	movs	r0, r2
   1121a:	2b30      	cmp	r3, #48	; 0x30
   1121c:	d028      	beq.n	11270 <_strtod_l+0x240>
   1121e:	001a      	movs	r2, r3
   11220:	3a31      	subs	r2, #49	; 0x31
   11222:	2a08      	cmp	r2, #8
   11224:	d846      	bhi.n	112b4 <_strtod_l+0x284>
   11226:	4684      	mov	ip, r0
   11228:	2000      	movs	r0, #0
   1122a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1122c:	9005      	str	r0, [sp, #20]
   1122e:	9213      	str	r2, [sp, #76]	; 0x4c
   11230:	3b30      	subs	r3, #48	; 0x30
   11232:	1c42      	adds	r2, r0, #1
   11234:	2b00      	cmp	r3, #0
   11236:	d00f      	beq.n	11258 <_strtod_l+0x228>
   11238:	210a      	movs	r1, #10
   1123a:	4494      	add	ip, r2
   1123c:	9a05      	ldr	r2, [sp, #20]
   1123e:	1810      	adds	r0, r2, r0
   11240:	4282      	cmp	r2, r0
   11242:	d11b      	bne.n	1127c <_strtod_l+0x24c>
   11244:	1c51      	adds	r1, r2, #1
   11246:	9105      	str	r1, [sp, #20]
   11248:	2a08      	cmp	r2, #8
   1124a:	dc25      	bgt.n	11298 <_strtod_l+0x268>
   1124c:	220a      	movs	r2, #10
   1124e:	990a      	ldr	r1, [sp, #40]	; 0x28
   11250:	434a      	muls	r2, r1
   11252:	189b      	adds	r3, r3, r2
   11254:	2200      	movs	r2, #0
   11256:	930a      	str	r3, [sp, #40]	; 0x28
   11258:	0010      	movs	r0, r2
   1125a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1125c:	1c59      	adds	r1, r3, #1
   1125e:	911f      	str	r1, [sp, #124]	; 0x7c
   11260:	785b      	ldrb	r3, [r3, #1]
   11262:	001a      	movs	r2, r3
   11264:	3a30      	subs	r2, #48	; 0x30
   11266:	2a09      	cmp	r2, #9
   11268:	d9e2      	bls.n	11230 <_strtod_l+0x200>
   1126a:	2201      	movs	r2, #1
   1126c:	9207      	str	r2, [sp, #28]
   1126e:	e79d      	b.n	111ac <_strtod_l+0x17c>
   11270:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   11272:	3001      	adds	r0, #1
   11274:	1c5a      	adds	r2, r3, #1
   11276:	921f      	str	r2, [sp, #124]	; 0x7c
   11278:	785b      	ldrb	r3, [r3, #1]
   1127a:	e7ce      	b.n	1121a <_strtod_l+0x1ea>
   1127c:	3201      	adds	r2, #1
   1127e:	1e54      	subs	r4, r2, #1
   11280:	2c08      	cmp	r4, #8
   11282:	dc03      	bgt.n	1128c <_strtod_l+0x25c>
   11284:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11286:	434c      	muls	r4, r1
   11288:	940a      	str	r4, [sp, #40]	; 0x28
   1128a:	e7d9      	b.n	11240 <_strtod_l+0x210>
   1128c:	2a10      	cmp	r2, #16
   1128e:	dcd7      	bgt.n	11240 <_strtod_l+0x210>
   11290:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   11292:	434c      	muls	r4, r1
   11294:	940b      	str	r4, [sp, #44]	; 0x2c
   11296:	e7d3      	b.n	11240 <_strtod_l+0x210>
   11298:	9905      	ldr	r1, [sp, #20]
   1129a:	2200      	movs	r2, #0
   1129c:	2910      	cmp	r1, #16
   1129e:	dcdb      	bgt.n	11258 <_strtod_l+0x228>
   112a0:	210a      	movs	r1, #10
   112a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   112a4:	4341      	muls	r1, r0
   112a6:	185b      	adds	r3, r3, r1
   112a8:	930b      	str	r3, [sp, #44]	; 0x2c
   112aa:	e7d5      	b.n	11258 <_strtod_l+0x228>
   112ac:	9a08      	ldr	r2, [sp, #32]
   112ae:	4684      	mov	ip, r0
   112b0:	9205      	str	r2, [sp, #20]
   112b2:	e7d6      	b.n	11262 <_strtod_l+0x232>
   112b4:	2200      	movs	r2, #0
   112b6:	4694      	mov	ip, r2
   112b8:	9205      	str	r2, [sp, #20]
   112ba:	3201      	adds	r2, #1
   112bc:	e7d6      	b.n	1126c <_strtod_l+0x23c>
   112be:	000c      	movs	r4, r1
   112c0:	9b06      	ldr	r3, [sp, #24]
   112c2:	3302      	adds	r3, #2
   112c4:	931f      	str	r3, [sp, #124]	; 0x7c
   112c6:	9b06      	ldr	r3, [sp, #24]
   112c8:	789b      	ldrb	r3, [r3, #2]
   112ca:	001a      	movs	r2, r3
   112cc:	3a30      	subs	r2, #48	; 0x30
   112ce:	2a09      	cmp	r2, #9
   112d0:	d861      	bhi.n	11396 <_strtod_l+0x366>
   112d2:	2b30      	cmp	r3, #48	; 0x30
   112d4:	d042      	beq.n	1135c <_strtod_l+0x32c>
   112d6:	001a      	movs	r2, r3
   112d8:	3a31      	subs	r2, #49	; 0x31
   112da:	2100      	movs	r1, #0
   112dc:	2a08      	cmp	r2, #8
   112de:	d816      	bhi.n	1130e <_strtod_l+0x2de>
   112e0:	3b30      	subs	r3, #48	; 0x30
   112e2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   112e4:	930e      	str	r3, [sp, #56]	; 0x38
   112e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   112e8:	1c59      	adds	r1, r3, #1
   112ea:	911f      	str	r1, [sp, #124]	; 0x7c
   112ec:	785b      	ldrb	r3, [r3, #1]
   112ee:	001a      	movs	r2, r3
   112f0:	3a30      	subs	r2, #48	; 0x30
   112f2:	2a09      	cmp	r2, #9
   112f4:	d948      	bls.n	11388 <_strtod_l+0x358>
   112f6:	1b4a      	subs	r2, r1, r5
   112f8:	4d20      	ldr	r5, [pc, #128]	; (1137c <_strtod_l+0x34c>)
   112fa:	0029      	movs	r1, r5
   112fc:	2a08      	cmp	r2, #8
   112fe:	dc03      	bgt.n	11308 <_strtod_l+0x2d8>
   11300:	990e      	ldr	r1, [sp, #56]	; 0x38
   11302:	42a9      	cmp	r1, r5
   11304:	dd00      	ble.n	11308 <_strtod_l+0x2d8>
   11306:	0029      	movs	r1, r5
   11308:	2c00      	cmp	r4, #0
   1130a:	d000      	beq.n	1130e <_strtod_l+0x2de>
   1130c:	4249      	negs	r1, r1
   1130e:	9a05      	ldr	r2, [sp, #20]
   11310:	2a00      	cmp	r2, #0
   11312:	d163      	bne.n	113dc <_strtod_l+0x3ac>
   11314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11316:	4310      	orrs	r0, r2
   11318:	d000      	beq.n	1131c <_strtod_l+0x2ec>
   1131a:	e6ca      	b.n	110b2 <_strtod_l+0x82>
   1131c:	9a07      	ldr	r2, [sp, #28]
   1131e:	2a00      	cmp	r2, #0
   11320:	d000      	beq.n	11324 <_strtod_l+0x2f4>
   11322:	e6e6      	b.n	110f2 <_strtod_l+0xc2>
   11324:	2b4e      	cmp	r3, #78	; 0x4e
   11326:	d03f      	beq.n	113a8 <_strtod_l+0x378>
   11328:	dc39      	bgt.n	1139e <_strtod_l+0x36e>
   1132a:	2b49      	cmp	r3, #73	; 0x49
   1132c:	d000      	beq.n	11330 <_strtod_l+0x300>
   1132e:	e6e0      	b.n	110f2 <_strtod_l+0xc2>
   11330:	4913      	ldr	r1, [pc, #76]	; (11380 <_strtod_l+0x350>)
   11332:	a81f      	add	r0, sp, #124	; 0x7c
   11334:	f001 f826 	bl	12384 <__match>
   11338:	2800      	cmp	r0, #0
   1133a:	d100      	bne.n	1133e <_strtod_l+0x30e>
   1133c:	e6d9      	b.n	110f2 <_strtod_l+0xc2>
   1133e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   11340:	4910      	ldr	r1, [pc, #64]	; (11384 <_strtod_l+0x354>)
   11342:	3b01      	subs	r3, #1
   11344:	a81f      	add	r0, sp, #124	; 0x7c
   11346:	931f      	str	r3, [sp, #124]	; 0x7c
   11348:	f001 f81c 	bl	12384 <__match>
   1134c:	2800      	cmp	r0, #0
   1134e:	d102      	bne.n	11356 <_strtod_l+0x326>
   11350:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   11352:	3301      	adds	r3, #1
   11354:	931f      	str	r3, [sp, #124]	; 0x7c
   11356:	4f07      	ldr	r7, [pc, #28]	; (11374 <_strtod_l+0x344>)
   11358:	2600      	movs	r6, #0
   1135a:	e6aa      	b.n	110b2 <_strtod_l+0x82>
   1135c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1135e:	1c5a      	adds	r2, r3, #1
   11360:	921f      	str	r2, [sp, #124]	; 0x7c
   11362:	785b      	ldrb	r3, [r3, #1]
   11364:	e7b5      	b.n	112d2 <_strtod_l+0x2a2>
   11366:	46c0      	nop			; (mov r8, r8)
   11368:	000162d0 	.word	0x000162d0
   1136c:	ffefffff 	.word	0xffefffff
   11370:	00000433 	.word	0x00000433
   11374:	7ff00000 	.word	0x7ff00000
   11378:	7fffffff 	.word	0x7fffffff
   1137c:	00004e1f 	.word	0x00004e1f
   11380:	000162c2 	.word	0x000162c2
   11384:	000162c5 	.word	0x000162c5
   11388:	220a      	movs	r2, #10
   1138a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1138c:	434a      	muls	r2, r1
   1138e:	18d2      	adds	r2, r2, r3
   11390:	3a30      	subs	r2, #48	; 0x30
   11392:	920e      	str	r2, [sp, #56]	; 0x38
   11394:	e7a7      	b.n	112e6 <_strtod_l+0x2b6>
   11396:	9a06      	ldr	r2, [sp, #24]
   11398:	2100      	movs	r1, #0
   1139a:	921f      	str	r2, [sp, #124]	; 0x7c
   1139c:	e7b7      	b.n	1130e <_strtod_l+0x2de>
   1139e:	2b69      	cmp	r3, #105	; 0x69
   113a0:	d0c6      	beq.n	11330 <_strtod_l+0x300>
   113a2:	2b6e      	cmp	r3, #110	; 0x6e
   113a4:	d000      	beq.n	113a8 <_strtod_l+0x378>
   113a6:	e6a4      	b.n	110f2 <_strtod_l+0xc2>
   113a8:	498b      	ldr	r1, [pc, #556]	; (115d8 <_strtod_l+0x5a8>)
   113aa:	a81f      	add	r0, sp, #124	; 0x7c
   113ac:	f000 ffea 	bl	12384 <__match>
   113b0:	2800      	cmp	r0, #0
   113b2:	d100      	bne.n	113b6 <_strtod_l+0x386>
   113b4:	e69d      	b.n	110f2 <_strtod_l+0xc2>
   113b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   113b8:	781b      	ldrb	r3, [r3, #0]
   113ba:	2b28      	cmp	r3, #40	; 0x28
   113bc:	d10c      	bne.n	113d8 <_strtod_l+0x3a8>
   113be:	aa22      	add	r2, sp, #136	; 0x88
   113c0:	4986      	ldr	r1, [pc, #536]	; (115dc <_strtod_l+0x5ac>)
   113c2:	a81f      	add	r0, sp, #124	; 0x7c
   113c4:	f000 fff2 	bl	123ac <__hexnan>
   113c8:	2805      	cmp	r0, #5
   113ca:	d105      	bne.n	113d8 <_strtod_l+0x3a8>
   113cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   113ce:	4a84      	ldr	r2, [pc, #528]	; (115e0 <_strtod_l+0x5b0>)
   113d0:	9e22      	ldr	r6, [sp, #136]	; 0x88
   113d2:	431a      	orrs	r2, r3
   113d4:	0017      	movs	r7, r2
   113d6:	e66c      	b.n	110b2 <_strtod_l+0x82>
   113d8:	4f82      	ldr	r7, [pc, #520]	; (115e4 <_strtod_l+0x5b4>)
   113da:	e7bd      	b.n	11358 <_strtod_l+0x328>
   113dc:	4663      	mov	r3, ip
   113de:	1acb      	subs	r3, r1, r3
   113e0:	9307      	str	r3, [sp, #28]
   113e2:	9b08      	ldr	r3, [sp, #32]
   113e4:	2b00      	cmp	r3, #0
   113e6:	d101      	bne.n	113ec <_strtod_l+0x3bc>
   113e8:	9b05      	ldr	r3, [sp, #20]
   113ea:	9308      	str	r3, [sp, #32]
   113ec:	9c05      	ldr	r4, [sp, #20]
   113ee:	2c10      	cmp	r4, #16
   113f0:	dd00      	ble.n	113f4 <_strtod_l+0x3c4>
   113f2:	2410      	movs	r4, #16
   113f4:	980a      	ldr	r0, [sp, #40]	; 0x28
   113f6:	f7ff f83f 	bl	10478 <__aeabi_ui2d>
   113fa:	0006      	movs	r6, r0
   113fc:	000f      	movs	r7, r1
   113fe:	2c09      	cmp	r4, #9
   11400:	dd15      	ble.n	1142e <_strtod_l+0x3fe>
   11402:	0022      	movs	r2, r4
   11404:	4b78      	ldr	r3, [pc, #480]	; (115e8 <_strtod_l+0x5b8>)
   11406:	3a09      	subs	r2, #9
   11408:	00d2      	lsls	r2, r2, #3
   1140a:	189b      	adds	r3, r3, r2
   1140c:	681a      	ldr	r2, [r3, #0]
   1140e:	685b      	ldr	r3, [r3, #4]
   11410:	f7fe fa26 	bl	f860 <__aeabi_dmul>
   11414:	0006      	movs	r6, r0
   11416:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11418:	000f      	movs	r7, r1
   1141a:	f7ff f82d 	bl	10478 <__aeabi_ui2d>
   1141e:	0002      	movs	r2, r0
   11420:	000b      	movs	r3, r1
   11422:	0030      	movs	r0, r6
   11424:	0039      	movs	r1, r7
   11426:	f7fd fad7 	bl	e9d8 <__aeabi_dadd>
   1142a:	0006      	movs	r6, r0
   1142c:	000f      	movs	r7, r1
   1142e:	9b05      	ldr	r3, [sp, #20]
   11430:	2b0f      	cmp	r3, #15
   11432:	dc39      	bgt.n	114a8 <_strtod_l+0x478>
   11434:	9b07      	ldr	r3, [sp, #28]
   11436:	2b00      	cmp	r3, #0
   11438:	d100      	bne.n	1143c <_strtod_l+0x40c>
   1143a:	e63a      	b.n	110b2 <_strtod_l+0x82>
   1143c:	dd26      	ble.n	1148c <_strtod_l+0x45c>
   1143e:	2b16      	cmp	r3, #22
   11440:	dc0b      	bgt.n	1145a <_strtod_l+0x42a>
   11442:	4969      	ldr	r1, [pc, #420]	; (115e8 <_strtod_l+0x5b8>)
   11444:	00db      	lsls	r3, r3, #3
   11446:	18c9      	adds	r1, r1, r3
   11448:	0032      	movs	r2, r6
   1144a:	6808      	ldr	r0, [r1, #0]
   1144c:	6849      	ldr	r1, [r1, #4]
   1144e:	003b      	movs	r3, r7
   11450:	f7fe fa06 	bl	f860 <__aeabi_dmul>
   11454:	0006      	movs	r6, r0
   11456:	000f      	movs	r7, r1
   11458:	e62b      	b.n	110b2 <_strtod_l+0x82>
   1145a:	2325      	movs	r3, #37	; 0x25
   1145c:	9a05      	ldr	r2, [sp, #20]
   1145e:	1a9b      	subs	r3, r3, r2
   11460:	9a07      	ldr	r2, [sp, #28]
   11462:	429a      	cmp	r2, r3
   11464:	dc20      	bgt.n	114a8 <_strtod_l+0x478>
   11466:	240f      	movs	r4, #15
   11468:	9b05      	ldr	r3, [sp, #20]
   1146a:	4d5f      	ldr	r5, [pc, #380]	; (115e8 <_strtod_l+0x5b8>)
   1146c:	1ae4      	subs	r4, r4, r3
   1146e:	00e1      	lsls	r1, r4, #3
   11470:	1869      	adds	r1, r5, r1
   11472:	0032      	movs	r2, r6
   11474:	6808      	ldr	r0, [r1, #0]
   11476:	6849      	ldr	r1, [r1, #4]
   11478:	003b      	movs	r3, r7
   1147a:	f7fe f9f1 	bl	f860 <__aeabi_dmul>
   1147e:	9b07      	ldr	r3, [sp, #28]
   11480:	1b1c      	subs	r4, r3, r4
   11482:	00e4      	lsls	r4, r4, #3
   11484:	192c      	adds	r4, r5, r4
   11486:	6822      	ldr	r2, [r4, #0]
   11488:	6863      	ldr	r3, [r4, #4]
   1148a:	e7e1      	b.n	11450 <_strtod_l+0x420>
   1148c:	9b07      	ldr	r3, [sp, #28]
   1148e:	3316      	adds	r3, #22
   11490:	db0a      	blt.n	114a8 <_strtod_l+0x478>
   11492:	9b07      	ldr	r3, [sp, #28]
   11494:	0030      	movs	r0, r6
   11496:	00da      	lsls	r2, r3, #3
   11498:	4b53      	ldr	r3, [pc, #332]	; (115e8 <_strtod_l+0x5b8>)
   1149a:	0039      	movs	r1, r7
   1149c:	1a9b      	subs	r3, r3, r2
   1149e:	681a      	ldr	r2, [r3, #0]
   114a0:	685b      	ldr	r3, [r3, #4]
   114a2:	f7fd fda9 	bl	eff8 <__aeabi_ddiv>
   114a6:	e7d5      	b.n	11454 <_strtod_l+0x424>
   114a8:	9b05      	ldr	r3, [sp, #20]
   114aa:	1b1c      	subs	r4, r3, r4
   114ac:	9b07      	ldr	r3, [sp, #28]
   114ae:	18e4      	adds	r4, r4, r3
   114b0:	2c00      	cmp	r4, #0
   114b2:	dd6e      	ble.n	11592 <_strtod_l+0x562>
   114b4:	230f      	movs	r3, #15
   114b6:	4023      	ands	r3, r4
   114b8:	d00a      	beq.n	114d0 <_strtod_l+0x4a0>
   114ba:	494b      	ldr	r1, [pc, #300]	; (115e8 <_strtod_l+0x5b8>)
   114bc:	00db      	lsls	r3, r3, #3
   114be:	18c9      	adds	r1, r1, r3
   114c0:	0032      	movs	r2, r6
   114c2:	6808      	ldr	r0, [r1, #0]
   114c4:	6849      	ldr	r1, [r1, #4]
   114c6:	003b      	movs	r3, r7
   114c8:	f7fe f9ca 	bl	f860 <__aeabi_dmul>
   114cc:	0006      	movs	r6, r0
   114ce:	000f      	movs	r7, r1
   114d0:	230f      	movs	r3, #15
   114d2:	439c      	bics	r4, r3
   114d4:	d048      	beq.n	11568 <_strtod_l+0x538>
   114d6:	3326      	adds	r3, #38	; 0x26
   114d8:	33ff      	adds	r3, #255	; 0xff
   114da:	429c      	cmp	r4, r3
   114dc:	dd21      	ble.n	11522 <_strtod_l+0x4f2>
   114de:	2400      	movs	r4, #0
   114e0:	9405      	str	r4, [sp, #20]
   114e2:	940a      	str	r4, [sp, #40]	; 0x28
   114e4:	9407      	str	r4, [sp, #28]
   114e6:	2322      	movs	r3, #34	; 0x22
   114e8:	2600      	movs	r6, #0
   114ea:	9a04      	ldr	r2, [sp, #16]
   114ec:	4f3c      	ldr	r7, [pc, #240]	; (115e0 <_strtod_l+0x5b0>)
   114ee:	6013      	str	r3, [r2, #0]
   114f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   114f2:	42b3      	cmp	r3, r6
   114f4:	d100      	bne.n	114f8 <_strtod_l+0x4c8>
   114f6:	e5dc      	b.n	110b2 <_strtod_l+0x82>
   114f8:	9920      	ldr	r1, [sp, #128]	; 0x80
   114fa:	9804      	ldr	r0, [sp, #16]
   114fc:	f001 f850 	bl	125a0 <_Bfree>
   11500:	9907      	ldr	r1, [sp, #28]
   11502:	9804      	ldr	r0, [sp, #16]
   11504:	f001 f84c 	bl	125a0 <_Bfree>
   11508:	9905      	ldr	r1, [sp, #20]
   1150a:	9804      	ldr	r0, [sp, #16]
   1150c:	f001 f848 	bl	125a0 <_Bfree>
   11510:	990a      	ldr	r1, [sp, #40]	; 0x28
   11512:	9804      	ldr	r0, [sp, #16]
   11514:	f001 f844 	bl	125a0 <_Bfree>
   11518:	0021      	movs	r1, r4
   1151a:	9804      	ldr	r0, [sp, #16]
   1151c:	f001 f840 	bl	125a0 <_Bfree>
   11520:	e5c7      	b.n	110b2 <_strtod_l+0x82>
   11522:	2300      	movs	r3, #0
   11524:	0030      	movs	r0, r6
   11526:	0039      	movs	r1, r7
   11528:	001d      	movs	r5, r3
   1152a:	1124      	asrs	r4, r4, #4
   1152c:	2c01      	cmp	r4, #1
   1152e:	dc1e      	bgt.n	1156e <_strtod_l+0x53e>
   11530:	2b00      	cmp	r3, #0
   11532:	d001      	beq.n	11538 <_strtod_l+0x508>
   11534:	0006      	movs	r6, r0
   11536:	000f      	movs	r7, r1
   11538:	4b2c      	ldr	r3, [pc, #176]	; (115ec <_strtod_l+0x5bc>)
   1153a:	00ed      	lsls	r5, r5, #3
   1153c:	18ff      	adds	r7, r7, r3
   1153e:	4b2c      	ldr	r3, [pc, #176]	; (115f0 <_strtod_l+0x5c0>)
   11540:	0032      	movs	r2, r6
   11542:	195d      	adds	r5, r3, r5
   11544:	6828      	ldr	r0, [r5, #0]
   11546:	6869      	ldr	r1, [r5, #4]
   11548:	003b      	movs	r3, r7
   1154a:	f7fe f989 	bl	f860 <__aeabi_dmul>
   1154e:	4b24      	ldr	r3, [pc, #144]	; (115e0 <_strtod_l+0x5b0>)
   11550:	000f      	movs	r7, r1
   11552:	400b      	ands	r3, r1
   11554:	4927      	ldr	r1, [pc, #156]	; (115f4 <_strtod_l+0x5c4>)
   11556:	0006      	movs	r6, r0
   11558:	428b      	cmp	r3, r1
   1155a:	d8c0      	bhi.n	114de <_strtod_l+0x4ae>
   1155c:	4926      	ldr	r1, [pc, #152]	; (115f8 <_strtod_l+0x5c8>)
   1155e:	428b      	cmp	r3, r1
   11560:	d913      	bls.n	1158a <_strtod_l+0x55a>
   11562:	2601      	movs	r6, #1
   11564:	4f25      	ldr	r7, [pc, #148]	; (115fc <_strtod_l+0x5cc>)
   11566:	4276      	negs	r6, r6
   11568:	2300      	movs	r3, #0
   1156a:	9306      	str	r3, [sp, #24]
   1156c:	e074      	b.n	11658 <_strtod_l+0x628>
   1156e:	2201      	movs	r2, #1
   11570:	4214      	tst	r4, r2
   11572:	d007      	beq.n	11584 <_strtod_l+0x554>
   11574:	4a1e      	ldr	r2, [pc, #120]	; (115f0 <_strtod_l+0x5c0>)
   11576:	00eb      	lsls	r3, r5, #3
   11578:	189b      	adds	r3, r3, r2
   1157a:	681a      	ldr	r2, [r3, #0]
   1157c:	685b      	ldr	r3, [r3, #4]
   1157e:	f7fe f96f 	bl	f860 <__aeabi_dmul>
   11582:	2301      	movs	r3, #1
   11584:	3501      	adds	r5, #1
   11586:	1064      	asrs	r4, r4, #1
   11588:	e7d0      	b.n	1152c <_strtod_l+0x4fc>
   1158a:	23d4      	movs	r3, #212	; 0xd4
   1158c:	049b      	lsls	r3, r3, #18
   1158e:	18ff      	adds	r7, r7, r3
   11590:	e7ea      	b.n	11568 <_strtod_l+0x538>
   11592:	2c00      	cmp	r4, #0
   11594:	d0e8      	beq.n	11568 <_strtod_l+0x538>
   11596:	230f      	movs	r3, #15
   11598:	4264      	negs	r4, r4
   1159a:	4023      	ands	r3, r4
   1159c:	d00a      	beq.n	115b4 <_strtod_l+0x584>
   1159e:	4a12      	ldr	r2, [pc, #72]	; (115e8 <_strtod_l+0x5b8>)
   115a0:	00db      	lsls	r3, r3, #3
   115a2:	18d3      	adds	r3, r2, r3
   115a4:	0030      	movs	r0, r6
   115a6:	681a      	ldr	r2, [r3, #0]
   115a8:	685b      	ldr	r3, [r3, #4]
   115aa:	0039      	movs	r1, r7
   115ac:	f7fd fd24 	bl	eff8 <__aeabi_ddiv>
   115b0:	0006      	movs	r6, r0
   115b2:	000f      	movs	r7, r1
   115b4:	1124      	asrs	r4, r4, #4
   115b6:	d0d7      	beq.n	11568 <_strtod_l+0x538>
   115b8:	2c1f      	cmp	r4, #31
   115ba:	dd21      	ble.n	11600 <_strtod_l+0x5d0>
   115bc:	2400      	movs	r4, #0
   115be:	9405      	str	r4, [sp, #20]
   115c0:	940a      	str	r4, [sp, #40]	; 0x28
   115c2:	9407      	str	r4, [sp, #28]
   115c4:	2322      	movs	r3, #34	; 0x22
   115c6:	9a04      	ldr	r2, [sp, #16]
   115c8:	2600      	movs	r6, #0
   115ca:	6013      	str	r3, [r2, #0]
   115cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   115ce:	2700      	movs	r7, #0
   115d0:	2b00      	cmp	r3, #0
   115d2:	d191      	bne.n	114f8 <_strtod_l+0x4c8>
   115d4:	e56d      	b.n	110b2 <_strtod_l+0x82>
   115d6:	46c0      	nop			; (mov r8, r8)
   115d8:	000162cb 	.word	0x000162cb
   115dc:	000162e4 	.word	0x000162e4
   115e0:	7ff00000 	.word	0x7ff00000
   115e4:	fff80000 	.word	0xfff80000
   115e8:	00016450 	.word	0x00016450
   115ec:	fcb00000 	.word	0xfcb00000
   115f0:	00016428 	.word	0x00016428
   115f4:	7ca00000 	.word	0x7ca00000
   115f8:	7c900000 	.word	0x7c900000
   115fc:	7fefffff 	.word	0x7fefffff
   11600:	2310      	movs	r3, #16
   11602:	4023      	ands	r3, r4
   11604:	9306      	str	r3, [sp, #24]
   11606:	d001      	beq.n	1160c <_strtod_l+0x5dc>
   11608:	236a      	movs	r3, #106	; 0x6a
   1160a:	9306      	str	r3, [sp, #24]
   1160c:	0030      	movs	r0, r6
   1160e:	0039      	movs	r1, r7
   11610:	2300      	movs	r3, #0
   11612:	4dca      	ldr	r5, [pc, #808]	; (1193c <_strtod_l+0x90c>)
   11614:	2c00      	cmp	r4, #0
   11616:	dd00      	ble.n	1161a <_strtod_l+0x5ea>
   11618:	e103      	b.n	11822 <_strtod_l+0x7f2>
   1161a:	2b00      	cmp	r3, #0
   1161c:	d001      	beq.n	11622 <_strtod_l+0x5f2>
   1161e:	0006      	movs	r6, r0
   11620:	000f      	movs	r7, r1
   11622:	9b06      	ldr	r3, [sp, #24]
   11624:	2b00      	cmp	r3, #0
   11626:	d00f      	beq.n	11648 <_strtod_l+0x618>
   11628:	236b      	movs	r3, #107	; 0x6b
   1162a:	0079      	lsls	r1, r7, #1
   1162c:	0d49      	lsrs	r1, r1, #21
   1162e:	003a      	movs	r2, r7
   11630:	1a5b      	subs	r3, r3, r1
   11632:	2b00      	cmp	r3, #0
   11634:	dd08      	ble.n	11648 <_strtod_l+0x618>
   11636:	2b1f      	cmp	r3, #31
   11638:	dc00      	bgt.n	1163c <_strtod_l+0x60c>
   1163a:	e104      	b.n	11846 <_strtod_l+0x816>
   1163c:	2600      	movs	r6, #0
   1163e:	2b34      	cmp	r3, #52	; 0x34
   11640:	dc00      	bgt.n	11644 <_strtod_l+0x614>
   11642:	e0f9      	b.n	11838 <_strtod_l+0x808>
   11644:	27dc      	movs	r7, #220	; 0xdc
   11646:	04bf      	lsls	r7, r7, #18
   11648:	2200      	movs	r2, #0
   1164a:	2300      	movs	r3, #0
   1164c:	0030      	movs	r0, r6
   1164e:	0039      	movs	r1, r7
   11650:	f7fd f90e 	bl	e870 <__aeabi_dcmpeq>
   11654:	2800      	cmp	r0, #0
   11656:	d1b1      	bne.n	115bc <_strtod_l+0x58c>
   11658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1165a:	9a08      	ldr	r2, [sp, #32]
   1165c:	9300      	str	r3, [sp, #0]
   1165e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11660:	9b05      	ldr	r3, [sp, #20]
   11662:	9804      	ldr	r0, [sp, #16]
   11664:	f000 fff1 	bl	1264a <__s2b>
   11668:	900a      	str	r0, [sp, #40]	; 0x28
   1166a:	2800      	cmp	r0, #0
   1166c:	d100      	bne.n	11670 <_strtod_l+0x640>
   1166e:	e736      	b.n	114de <_strtod_l+0x4ae>
   11670:	9b07      	ldr	r3, [sp, #28]
   11672:	2400      	movs	r4, #0
   11674:	17da      	asrs	r2, r3, #31
   11676:	425b      	negs	r3, r3
   11678:	401a      	ands	r2, r3
   1167a:	9b07      	ldr	r3, [sp, #28]
   1167c:	9215      	str	r2, [sp, #84]	; 0x54
   1167e:	43db      	mvns	r3, r3
   11680:	9a07      	ldr	r2, [sp, #28]
   11682:	17db      	asrs	r3, r3, #31
   11684:	401a      	ands	r2, r3
   11686:	9213      	str	r2, [sp, #76]	; 0x4c
   11688:	9405      	str	r4, [sp, #20]
   1168a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1168c:	9804      	ldr	r0, [sp, #16]
   1168e:	6859      	ldr	r1, [r3, #4]
   11690:	f000 ff4e 	bl	12530 <_Balloc>
   11694:	9007      	str	r0, [sp, #28]
   11696:	2800      	cmp	r0, #0
   11698:	d100      	bne.n	1169c <_strtod_l+0x66c>
   1169a:	e724      	b.n	114e6 <_strtod_l+0x4b6>
   1169c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1169e:	990a      	ldr	r1, [sp, #40]	; 0x28
   116a0:	691b      	ldr	r3, [r3, #16]
   116a2:	310c      	adds	r1, #12
   116a4:	1c9a      	adds	r2, r3, #2
   116a6:	0092      	lsls	r2, r2, #2
   116a8:	300c      	adds	r0, #12
   116aa:	9308      	str	r3, [sp, #32]
   116ac:	f7ff f98c 	bl	109c8 <memcpy>
   116b0:	ab22      	add	r3, sp, #136	; 0x88
   116b2:	9301      	str	r3, [sp, #4]
   116b4:	ab21      	add	r3, sp, #132	; 0x84
   116b6:	9300      	str	r3, [sp, #0]
   116b8:	0032      	movs	r2, r6
   116ba:	003b      	movs	r3, r7
   116bc:	9804      	ldr	r0, [sp, #16]
   116be:	960e      	str	r6, [sp, #56]	; 0x38
   116c0:	970f      	str	r7, [sp, #60]	; 0x3c
   116c2:	f001 fa75 	bl	12bb0 <__d2b>
   116c6:	9020      	str	r0, [sp, #128]	; 0x80
   116c8:	2800      	cmp	r0, #0
   116ca:	d100      	bne.n	116ce <_strtod_l+0x69e>
   116cc:	e70b      	b.n	114e6 <_strtod_l+0x4b6>
   116ce:	2101      	movs	r1, #1
   116d0:	9804      	ldr	r0, [sp, #16]
   116d2:	f001 f842 	bl	1275a <__i2b>
   116d6:	9005      	str	r0, [sp, #20]
   116d8:	2800      	cmp	r0, #0
   116da:	d100      	bne.n	116de <_strtod_l+0x6ae>
   116dc:	e703      	b.n	114e6 <_strtod_l+0x4b6>
   116de:	9b21      	ldr	r3, [sp, #132]	; 0x84
   116e0:	2b00      	cmp	r3, #0
   116e2:	da00      	bge.n	116e6 <_strtod_l+0x6b6>
   116e4:	e0b4      	b.n	11850 <_strtod_l+0x820>
   116e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   116e8:	18d5      	adds	r5, r2, r3
   116ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   116ec:	4694      	mov	ip, r2
   116ee:	9906      	ldr	r1, [sp, #24]
   116f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
   116f2:	1a5b      	subs	r3, r3, r1
   116f4:	2136      	movs	r1, #54	; 0x36
   116f6:	189b      	adds	r3, r3, r2
   116f8:	1a8a      	subs	r2, r1, r2
   116fa:	4991      	ldr	r1, [pc, #580]	; (11940 <_strtod_l+0x910>)
   116fc:	3b01      	subs	r3, #1
   116fe:	2001      	movs	r0, #1
   11700:	428b      	cmp	r3, r1
   11702:	db00      	blt.n	11706 <_strtod_l+0x6d6>
   11704:	e0b0      	b.n	11868 <_strtod_l+0x838>
   11706:	1ac9      	subs	r1, r1, r3
   11708:	1a52      	subs	r2, r2, r1
   1170a:	291f      	cmp	r1, #31
   1170c:	dd00      	ble.n	11710 <_strtod_l+0x6e0>
   1170e:	e0a4      	b.n	1185a <_strtod_l+0x82a>
   11710:	4088      	lsls	r0, r1
   11712:	2300      	movs	r3, #0
   11714:	9014      	str	r0, [sp, #80]	; 0x50
   11716:	930c      	str	r3, [sp, #48]	; 0x30
   11718:	18ab      	adds	r3, r5, r2
   1171a:	9308      	str	r3, [sp, #32]
   1171c:	0013      	movs	r3, r2
   1171e:	9a06      	ldr	r2, [sp, #24]
   11720:	4463      	add	r3, ip
   11722:	18d3      	adds	r3, r2, r3
   11724:	9a08      	ldr	r2, [sp, #32]
   11726:	930b      	str	r3, [sp, #44]	; 0x2c
   11728:	002b      	movs	r3, r5
   1172a:	4295      	cmp	r5, r2
   1172c:	dd00      	ble.n	11730 <_strtod_l+0x700>
   1172e:	0013      	movs	r3, r2
   11730:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11732:	4293      	cmp	r3, r2
   11734:	dd00      	ble.n	11738 <_strtod_l+0x708>
   11736:	0013      	movs	r3, r2
   11738:	2b00      	cmp	r3, #0
   1173a:	dd06      	ble.n	1174a <_strtod_l+0x71a>
   1173c:	9a08      	ldr	r2, [sp, #32]
   1173e:	1aed      	subs	r5, r5, r3
   11740:	1ad2      	subs	r2, r2, r3
   11742:	9208      	str	r2, [sp, #32]
   11744:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11746:	1ad2      	subs	r2, r2, r3
   11748:	920b      	str	r2, [sp, #44]	; 0x2c
   1174a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1174c:	2b00      	cmp	r3, #0
   1174e:	d017      	beq.n	11780 <_strtod_l+0x750>
   11750:	001a      	movs	r2, r3
   11752:	9905      	ldr	r1, [sp, #20]
   11754:	9804      	ldr	r0, [sp, #16]
   11756:	f001 f899 	bl	1288c <__pow5mult>
   1175a:	9005      	str	r0, [sp, #20]
   1175c:	2800      	cmp	r0, #0
   1175e:	d100      	bne.n	11762 <_strtod_l+0x732>
   11760:	e6c1      	b.n	114e6 <_strtod_l+0x4b6>
   11762:	0001      	movs	r1, r0
   11764:	9a20      	ldr	r2, [sp, #128]	; 0x80
   11766:	9804      	ldr	r0, [sp, #16]
   11768:	f001 f800 	bl	1276c <__multiply>
   1176c:	901b      	str	r0, [sp, #108]	; 0x6c
   1176e:	2800      	cmp	r0, #0
   11770:	d100      	bne.n	11774 <_strtod_l+0x744>
   11772:	e6b8      	b.n	114e6 <_strtod_l+0x4b6>
   11774:	9920      	ldr	r1, [sp, #128]	; 0x80
   11776:	9804      	ldr	r0, [sp, #16]
   11778:	f000 ff12 	bl	125a0 <_Bfree>
   1177c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1177e:	9320      	str	r3, [sp, #128]	; 0x80
   11780:	9b08      	ldr	r3, [sp, #32]
   11782:	2b00      	cmp	r3, #0
   11784:	dc73      	bgt.n	1186e <_strtod_l+0x83e>
   11786:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11788:	2b00      	cmp	r3, #0
   1178a:	d179      	bne.n	11880 <_strtod_l+0x850>
   1178c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1178e:	2b00      	cmp	r3, #0
   11790:	dd08      	ble.n	117a4 <_strtod_l+0x774>
   11792:	001a      	movs	r2, r3
   11794:	9907      	ldr	r1, [sp, #28]
   11796:	9804      	ldr	r0, [sp, #16]
   11798:	f001 f8ca 	bl	12930 <__lshift>
   1179c:	9007      	str	r0, [sp, #28]
   1179e:	2800      	cmp	r0, #0
   117a0:	d100      	bne.n	117a4 <_strtod_l+0x774>
   117a2:	e6a0      	b.n	114e6 <_strtod_l+0x4b6>
   117a4:	2d00      	cmp	r5, #0
   117a6:	dd08      	ble.n	117ba <_strtod_l+0x78a>
   117a8:	002a      	movs	r2, r5
   117aa:	9905      	ldr	r1, [sp, #20]
   117ac:	9804      	ldr	r0, [sp, #16]
   117ae:	f001 f8bf 	bl	12930 <__lshift>
   117b2:	9005      	str	r0, [sp, #20]
   117b4:	2800      	cmp	r0, #0
   117b6:	d100      	bne.n	117ba <_strtod_l+0x78a>
   117b8:	e695      	b.n	114e6 <_strtod_l+0x4b6>
   117ba:	9a07      	ldr	r2, [sp, #28]
   117bc:	9920      	ldr	r1, [sp, #128]	; 0x80
   117be:	9804      	ldr	r0, [sp, #16]
   117c0:	f001 f920 	bl	12a04 <__mdiff>
   117c4:	1e04      	subs	r4, r0, #0
   117c6:	d100      	bne.n	117ca <_strtod_l+0x79a>
   117c8:	e68d      	b.n	114e6 <_strtod_l+0x4b6>
   117ca:	2500      	movs	r5, #0
   117cc:	68c3      	ldr	r3, [r0, #12]
   117ce:	9905      	ldr	r1, [sp, #20]
   117d0:	60c5      	str	r5, [r0, #12]
   117d2:	930b      	str	r3, [sp, #44]	; 0x2c
   117d4:	f001 f8fd 	bl	129d2 <__mcmp>
   117d8:	42a8      	cmp	r0, r5
   117da:	da5b      	bge.n	11894 <_strtod_l+0x864>
   117dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   117de:	42ab      	cmp	r3, r5
   117e0:	d11b      	bne.n	1181a <_strtod_l+0x7ea>
   117e2:	42ae      	cmp	r6, r5
   117e4:	d119      	bne.n	1181a <_strtod_l+0x7ea>
   117e6:	033b      	lsls	r3, r7, #12
   117e8:	42ab      	cmp	r3, r5
   117ea:	d116      	bne.n	1181a <_strtod_l+0x7ea>
   117ec:	22d6      	movs	r2, #214	; 0xd6
   117ee:	4b55      	ldr	r3, [pc, #340]	; (11944 <_strtod_l+0x914>)
   117f0:	04d2      	lsls	r2, r2, #19
   117f2:	403b      	ands	r3, r7
   117f4:	4293      	cmp	r3, r2
   117f6:	d910      	bls.n	1181a <_strtod_l+0x7ea>
   117f8:	6963      	ldr	r3, [r4, #20]
   117fa:	42ab      	cmp	r3, r5
   117fc:	d102      	bne.n	11804 <_strtod_l+0x7d4>
   117fe:	6923      	ldr	r3, [r4, #16]
   11800:	2b01      	cmp	r3, #1
   11802:	dd0a      	ble.n	1181a <_strtod_l+0x7ea>
   11804:	0021      	movs	r1, r4
   11806:	2201      	movs	r2, #1
   11808:	9804      	ldr	r0, [sp, #16]
   1180a:	f001 f891 	bl	12930 <__lshift>
   1180e:	9905      	ldr	r1, [sp, #20]
   11810:	0004      	movs	r4, r0
   11812:	f001 f8de 	bl	129d2 <__mcmp>
   11816:	2800      	cmp	r0, #0
   11818:	dc6c      	bgt.n	118f4 <_strtod_l+0x8c4>
   1181a:	9b06      	ldr	r3, [sp, #24]
   1181c:	2b00      	cmp	r3, #0
   1181e:	d178      	bne.n	11912 <_strtod_l+0x8e2>
   11820:	e66a      	b.n	114f8 <_strtod_l+0x4c8>
   11822:	2201      	movs	r2, #1
   11824:	4214      	tst	r4, r2
   11826:	d004      	beq.n	11832 <_strtod_l+0x802>
   11828:	682a      	ldr	r2, [r5, #0]
   1182a:	686b      	ldr	r3, [r5, #4]
   1182c:	f7fe f818 	bl	f860 <__aeabi_dmul>
   11830:	2301      	movs	r3, #1
   11832:	1064      	asrs	r4, r4, #1
   11834:	3508      	adds	r5, #8
   11836:	e6ed      	b.n	11614 <_strtod_l+0x5e4>
   11838:	2101      	movs	r1, #1
   1183a:	3b20      	subs	r3, #32
   1183c:	4249      	negs	r1, r1
   1183e:	4099      	lsls	r1, r3
   11840:	400a      	ands	r2, r1
   11842:	0017      	movs	r7, r2
   11844:	e700      	b.n	11648 <_strtod_l+0x618>
   11846:	2201      	movs	r2, #1
   11848:	4252      	negs	r2, r2
   1184a:	409a      	lsls	r2, r3
   1184c:	4016      	ands	r6, r2
   1184e:	e6fb      	b.n	11648 <_strtod_l+0x618>
   11850:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11852:	9d15      	ldr	r5, [sp, #84]	; 0x54
   11854:	1ad2      	subs	r2, r2, r3
   11856:	4694      	mov	ip, r2
   11858:	e749      	b.n	116ee <_strtod_l+0x6be>
   1185a:	493b      	ldr	r1, [pc, #236]	; (11948 <_strtod_l+0x918>)
   1185c:	1acb      	subs	r3, r1, r3
   1185e:	0001      	movs	r1, r0
   11860:	4099      	lsls	r1, r3
   11862:	910c      	str	r1, [sp, #48]	; 0x30
   11864:	9014      	str	r0, [sp, #80]	; 0x50
   11866:	e757      	b.n	11718 <_strtod_l+0x6e8>
   11868:	2300      	movs	r3, #0
   1186a:	930c      	str	r3, [sp, #48]	; 0x30
   1186c:	e7fa      	b.n	11864 <_strtod_l+0x834>
   1186e:	9a08      	ldr	r2, [sp, #32]
   11870:	9920      	ldr	r1, [sp, #128]	; 0x80
   11872:	9804      	ldr	r0, [sp, #16]
   11874:	f001 f85c 	bl	12930 <__lshift>
   11878:	9020      	str	r0, [sp, #128]	; 0x80
   1187a:	2800      	cmp	r0, #0
   1187c:	d183      	bne.n	11786 <_strtod_l+0x756>
   1187e:	e632      	b.n	114e6 <_strtod_l+0x4b6>
   11880:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11882:	9907      	ldr	r1, [sp, #28]
   11884:	9804      	ldr	r0, [sp, #16]
   11886:	f001 f801 	bl	1288c <__pow5mult>
   1188a:	9007      	str	r0, [sp, #28]
   1188c:	2800      	cmp	r0, #0
   1188e:	d000      	beq.n	11892 <_strtod_l+0x862>
   11890:	e77c      	b.n	1178c <_strtod_l+0x75c>
   11892:	e628      	b.n	114e6 <_strtod_l+0x4b6>
   11894:	2800      	cmp	r0, #0
   11896:	d000      	beq.n	1189a <_strtod_l+0x86a>
   11898:	e095      	b.n	119c6 <_strtod_l+0x996>
   1189a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1189c:	033b      	lsls	r3, r7, #12
   1189e:	2a00      	cmp	r2, #0
   118a0:	d024      	beq.n	118ec <_strtod_l+0x8bc>
   118a2:	492a      	ldr	r1, [pc, #168]	; (1194c <_strtod_l+0x91c>)
   118a4:	003a      	movs	r2, r7
   118a6:	0b1b      	lsrs	r3, r3, #12
   118a8:	428b      	cmp	r3, r1
   118aa:	d15e      	bne.n	1196a <_strtod_l+0x93a>
   118ac:	9b06      	ldr	r3, [sp, #24]
   118ae:	3801      	subs	r0, #1
   118b0:	46b4      	mov	ip, r6
   118b2:	0001      	movs	r1, r0
   118b4:	2b00      	cmp	r3, #0
   118b6:	d00a      	beq.n	118ce <_strtod_l+0x89e>
   118b8:	25d4      	movs	r5, #212	; 0xd4
   118ba:	4b22      	ldr	r3, [pc, #136]	; (11944 <_strtod_l+0x914>)
   118bc:	04ed      	lsls	r5, r5, #19
   118be:	403b      	ands	r3, r7
   118c0:	42ab      	cmp	r3, r5
   118c2:	d804      	bhi.n	118ce <_strtod_l+0x89e>
   118c4:	316c      	adds	r1, #108	; 0x6c
   118c6:	0d1b      	lsrs	r3, r3, #20
   118c8:	1acb      	subs	r3, r1, r3
   118ca:	0001      	movs	r1, r0
   118cc:	4099      	lsls	r1, r3
   118ce:	4561      	cmp	r1, ip
   118d0:	d14b      	bne.n	1196a <_strtod_l+0x93a>
   118d2:	4b1f      	ldr	r3, [pc, #124]	; (11950 <_strtod_l+0x920>)
   118d4:	429a      	cmp	r2, r3
   118d6:	d102      	bne.n	118de <_strtod_l+0x8ae>
   118d8:	1c4b      	adds	r3, r1, #1
   118da:	d100      	bne.n	118de <_strtod_l+0x8ae>
   118dc:	e603      	b.n	114e6 <_strtod_l+0x4b6>
   118de:	4b19      	ldr	r3, [pc, #100]	; (11944 <_strtod_l+0x914>)
   118e0:	2600      	movs	r6, #0
   118e2:	401a      	ands	r2, r3
   118e4:	2380      	movs	r3, #128	; 0x80
   118e6:	035b      	lsls	r3, r3, #13
   118e8:	18d7      	adds	r7, r2, r3
   118ea:	e796      	b.n	1181a <_strtod_l+0x7ea>
   118ec:	2b00      	cmp	r3, #0
   118ee:	d13c      	bne.n	1196a <_strtod_l+0x93a>
   118f0:	2e00      	cmp	r6, #0
   118f2:	d13a      	bne.n	1196a <_strtod_l+0x93a>
   118f4:	9a06      	ldr	r2, [sp, #24]
   118f6:	4b13      	ldr	r3, [pc, #76]	; (11944 <_strtod_l+0x914>)
   118f8:	2a00      	cmp	r2, #0
   118fa:	d02d      	beq.n	11958 <_strtod_l+0x928>
   118fc:	001a      	movs	r2, r3
   118fe:	21d6      	movs	r1, #214	; 0xd6
   11900:	403a      	ands	r2, r7
   11902:	04c9      	lsls	r1, r1, #19
   11904:	428a      	cmp	r2, r1
   11906:	dc27      	bgt.n	11958 <_strtod_l+0x928>
   11908:	23dc      	movs	r3, #220	; 0xdc
   1190a:	049b      	lsls	r3, r3, #18
   1190c:	429a      	cmp	r2, r3
   1190e:	dc00      	bgt.n	11912 <_strtod_l+0x8e2>
   11910:	e658      	b.n	115c4 <_strtod_l+0x594>
   11912:	4b10      	ldr	r3, [pc, #64]	; (11954 <_strtod_l+0x924>)
   11914:	0030      	movs	r0, r6
   11916:	9311      	str	r3, [sp, #68]	; 0x44
   11918:	2300      	movs	r3, #0
   1191a:	9310      	str	r3, [sp, #64]	; 0x40
   1191c:	0039      	movs	r1, r7
   1191e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11920:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11922:	f7fd ff9d 	bl	f860 <__aeabi_dmul>
   11926:	0006      	movs	r6, r0
   11928:	1e0f      	subs	r7, r1, #0
   1192a:	d000      	beq.n	1192e <_strtod_l+0x8fe>
   1192c:	e5e4      	b.n	114f8 <_strtod_l+0x4c8>
   1192e:	2800      	cmp	r0, #0
   11930:	d000      	beq.n	11934 <_strtod_l+0x904>
   11932:	e5e1      	b.n	114f8 <_strtod_l+0x4c8>
   11934:	2322      	movs	r3, #34	; 0x22
   11936:	9a04      	ldr	r2, [sp, #16]
   11938:	6013      	str	r3, [r2, #0]
   1193a:	e5dd      	b.n	114f8 <_strtod_l+0x4c8>
   1193c:	000162f8 	.word	0x000162f8
   11940:	fffffc02 	.word	0xfffffc02
   11944:	7ff00000 	.word	0x7ff00000
   11948:	fffffbe2 	.word	0xfffffbe2
   1194c:	000fffff 	.word	0x000fffff
   11950:	7fefffff 	.word	0x7fefffff
   11954:	39500000 	.word	0x39500000
   11958:	2601      	movs	r6, #1
   1195a:	4aa9      	ldr	r2, [pc, #676]	; (11c00 <_strtod_l+0xbd0>)
   1195c:	403b      	ands	r3, r7
   1195e:	189b      	adds	r3, r3, r2
   11960:	4aa8      	ldr	r2, [pc, #672]	; (11c04 <_strtod_l+0xbd4>)
   11962:	4276      	negs	r6, r6
   11964:	431a      	orrs	r2, r3
   11966:	0017      	movs	r7, r2
   11968:	e757      	b.n	1181a <_strtod_l+0x7ea>
   1196a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1196c:	2b00      	cmp	r3, #0
   1196e:	d013      	beq.n	11998 <_strtod_l+0x968>
   11970:	423b      	tst	r3, r7
   11972:	d100      	bne.n	11976 <_strtod_l+0x946>
   11974:	e751      	b.n	1181a <_strtod_l+0x7ea>
   11976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11978:	9a06      	ldr	r2, [sp, #24]
   1197a:	0030      	movs	r0, r6
   1197c:	0039      	movs	r1, r7
   1197e:	2b00      	cmp	r3, #0
   11980:	d00f      	beq.n	119a2 <_strtod_l+0x972>
   11982:	f7ff fb3d 	bl	11000 <sulp>
   11986:	0002      	movs	r2, r0
   11988:	000b      	movs	r3, r1
   1198a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1198c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1198e:	f7fd f823 	bl	e9d8 <__aeabi_dadd>
   11992:	0006      	movs	r6, r0
   11994:	000f      	movs	r7, r1
   11996:	e740      	b.n	1181a <_strtod_l+0x7ea>
   11998:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1199a:	4233      	tst	r3, r6
   1199c:	d100      	bne.n	119a0 <_strtod_l+0x970>
   1199e:	e73c      	b.n	1181a <_strtod_l+0x7ea>
   119a0:	e7e9      	b.n	11976 <_strtod_l+0x946>
   119a2:	f7ff fb2d 	bl	11000 <sulp>
   119a6:	0002      	movs	r2, r0
   119a8:	000b      	movs	r3, r1
   119aa:	980e      	ldr	r0, [sp, #56]	; 0x38
   119ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
   119ae:	f7fe f9d7 	bl	fd60 <__aeabi_dsub>
   119b2:	2200      	movs	r2, #0
   119b4:	2300      	movs	r3, #0
   119b6:	0006      	movs	r6, r0
   119b8:	000f      	movs	r7, r1
   119ba:	f7fc ff59 	bl	e870 <__aeabi_dcmpeq>
   119be:	2800      	cmp	r0, #0
   119c0:	d000      	beq.n	119c4 <_strtod_l+0x994>
   119c2:	e5ff      	b.n	115c4 <_strtod_l+0x594>
   119c4:	e729      	b.n	1181a <_strtod_l+0x7ea>
   119c6:	9905      	ldr	r1, [sp, #20]
   119c8:	0020      	movs	r0, r4
   119ca:	f001 f945 	bl	12c58 <__ratio>
   119ce:	2380      	movs	r3, #128	; 0x80
   119d0:	2200      	movs	r2, #0
   119d2:	05db      	lsls	r3, r3, #23
   119d4:	9008      	str	r0, [sp, #32]
   119d6:	9109      	str	r1, [sp, #36]	; 0x24
   119d8:	f7fc ff5a 	bl	e890 <__aeabi_dcmple>
   119dc:	2800      	cmp	r0, #0
   119de:	d075      	beq.n	11acc <_strtod_l+0xa9c>
   119e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   119e2:	2b00      	cmp	r3, #0
   119e4:	d043      	beq.n	11a6e <_strtod_l+0xa3e>
   119e6:	2200      	movs	r2, #0
   119e8:	4b87      	ldr	r3, [pc, #540]	; (11c08 <_strtod_l+0xbd8>)
   119ea:	920c      	str	r2, [sp, #48]	; 0x30
   119ec:	930d      	str	r3, [sp, #52]	; 0x34
   119ee:	4b86      	ldr	r3, [pc, #536]	; (11c08 <_strtod_l+0xbd8>)
   119f0:	9308      	str	r3, [sp, #32]
   119f2:	4b86      	ldr	r3, [pc, #536]	; (11c0c <_strtod_l+0xbdc>)
   119f4:	403b      	ands	r3, r7
   119f6:	9314      	str	r3, [sp, #80]	; 0x50
   119f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   119fa:	4b85      	ldr	r3, [pc, #532]	; (11c10 <_strtod_l+0xbe0>)
   119fc:	429a      	cmp	r2, r3
   119fe:	d000      	beq.n	11a02 <_strtod_l+0x9d2>
   11a00:	e0b1      	b.n	11b66 <_strtod_l+0xb36>
   11a02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11a04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11a06:	9210      	str	r2, [sp, #64]	; 0x40
   11a08:	9311      	str	r3, [sp, #68]	; 0x44
   11a0a:	4b82      	ldr	r3, [pc, #520]	; (11c14 <_strtod_l+0xbe4>)
   11a0c:	0030      	movs	r0, r6
   11a0e:	18ff      	adds	r7, r7, r3
   11a10:	0039      	movs	r1, r7
   11a12:	f001 f85b 	bl	12acc <__ulp>
   11a16:	0002      	movs	r2, r0
   11a18:	000b      	movs	r3, r1
   11a1a:	980c      	ldr	r0, [sp, #48]	; 0x30
   11a1c:	990d      	ldr	r1, [sp, #52]	; 0x34
   11a1e:	f7fd ff1f 	bl	f860 <__aeabi_dmul>
   11a22:	0032      	movs	r2, r6
   11a24:	003b      	movs	r3, r7
   11a26:	f7fc ffd7 	bl	e9d8 <__aeabi_dadd>
   11a2a:	4a78      	ldr	r2, [pc, #480]	; (11c0c <_strtod_l+0xbdc>)
   11a2c:	4b7a      	ldr	r3, [pc, #488]	; (11c18 <_strtod_l+0xbe8>)
   11a2e:	0006      	movs	r6, r0
   11a30:	400a      	ands	r2, r1
   11a32:	429a      	cmp	r2, r3
   11a34:	d962      	bls.n	11afc <_strtod_l+0xacc>
   11a36:	4b79      	ldr	r3, [pc, #484]	; (11c1c <_strtod_l+0xbec>)
   11a38:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11a3a:	429a      	cmp	r2, r3
   11a3c:	d103      	bne.n	11a46 <_strtod_l+0xa16>
   11a3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11a40:	3301      	adds	r3, #1
   11a42:	d100      	bne.n	11a46 <_strtod_l+0xa16>
   11a44:	e54f      	b.n	114e6 <_strtod_l+0x4b6>
   11a46:	2601      	movs	r6, #1
   11a48:	4f74      	ldr	r7, [pc, #464]	; (11c1c <_strtod_l+0xbec>)
   11a4a:	4276      	negs	r6, r6
   11a4c:	9920      	ldr	r1, [sp, #128]	; 0x80
   11a4e:	9804      	ldr	r0, [sp, #16]
   11a50:	f000 fda6 	bl	125a0 <_Bfree>
   11a54:	9907      	ldr	r1, [sp, #28]
   11a56:	9804      	ldr	r0, [sp, #16]
   11a58:	f000 fda2 	bl	125a0 <_Bfree>
   11a5c:	9905      	ldr	r1, [sp, #20]
   11a5e:	9804      	ldr	r0, [sp, #16]
   11a60:	f000 fd9e 	bl	125a0 <_Bfree>
   11a64:	0021      	movs	r1, r4
   11a66:	9804      	ldr	r0, [sp, #16]
   11a68:	f000 fd9a 	bl	125a0 <_Bfree>
   11a6c:	e60d      	b.n	1168a <_strtod_l+0x65a>
   11a6e:	2e00      	cmp	r6, #0
   11a70:	d11d      	bne.n	11aae <_strtod_l+0xa7e>
   11a72:	033b      	lsls	r3, r7, #12
   11a74:	d120      	bne.n	11ab8 <_strtod_l+0xa88>
   11a76:	9808      	ldr	r0, [sp, #32]
   11a78:	9909      	ldr	r1, [sp, #36]	; 0x24
   11a7a:	2200      	movs	r2, #0
   11a7c:	4b62      	ldr	r3, [pc, #392]	; (11c08 <_strtod_l+0xbd8>)
   11a7e:	f7fc fefd 	bl	e87c <__aeabi_dcmplt>
   11a82:	2800      	cmp	r0, #0
   11a84:	d11e      	bne.n	11ac4 <_strtod_l+0xa94>
   11a86:	9808      	ldr	r0, [sp, #32]
   11a88:	9909      	ldr	r1, [sp, #36]	; 0x24
   11a8a:	2200      	movs	r2, #0
   11a8c:	4b64      	ldr	r3, [pc, #400]	; (11c20 <_strtod_l+0xbf0>)
   11a8e:	f7fd fee7 	bl	f860 <__aeabi_dmul>
   11a92:	0005      	movs	r5, r0
   11a94:	9108      	str	r1, [sp, #32]
   11a96:	2280      	movs	r2, #128	; 0x80
   11a98:	0612      	lsls	r2, r2, #24
   11a9a:	4694      	mov	ip, r2
   11a9c:	9b08      	ldr	r3, [sp, #32]
   11a9e:	951c      	str	r5, [sp, #112]	; 0x70
   11aa0:	4463      	add	r3, ip
   11aa2:	931d      	str	r3, [sp, #116]	; 0x74
   11aa4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   11aa6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   11aa8:	920c      	str	r2, [sp, #48]	; 0x30
   11aaa:	930d      	str	r3, [sp, #52]	; 0x34
   11aac:	e7a1      	b.n	119f2 <_strtod_l+0x9c2>
   11aae:	2e01      	cmp	r6, #1
   11ab0:	d102      	bne.n	11ab8 <_strtod_l+0xa88>
   11ab2:	2f00      	cmp	r7, #0
   11ab4:	d100      	bne.n	11ab8 <_strtod_l+0xa88>
   11ab6:	e585      	b.n	115c4 <_strtod_l+0x594>
   11ab8:	2200      	movs	r2, #0
   11aba:	4b5a      	ldr	r3, [pc, #360]	; (11c24 <_strtod_l+0xbf4>)
   11abc:	2500      	movs	r5, #0
   11abe:	920c      	str	r2, [sp, #48]	; 0x30
   11ac0:	930d      	str	r3, [sp, #52]	; 0x34
   11ac2:	e794      	b.n	119ee <_strtod_l+0x9be>
   11ac4:	4b56      	ldr	r3, [pc, #344]	; (11c20 <_strtod_l+0xbf0>)
   11ac6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11ac8:	9308      	str	r3, [sp, #32]
   11aca:	e7e4      	b.n	11a96 <_strtod_l+0xa66>
   11acc:	4b54      	ldr	r3, [pc, #336]	; (11c20 <_strtod_l+0xbf0>)
   11ace:	9808      	ldr	r0, [sp, #32]
   11ad0:	9909      	ldr	r1, [sp, #36]	; 0x24
   11ad2:	2200      	movs	r2, #0
   11ad4:	f7fd fec4 	bl	f860 <__aeabi_dmul>
   11ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11ada:	0005      	movs	r5, r0
   11adc:	9108      	str	r1, [sp, #32]
   11ade:	2b00      	cmp	r3, #0
   11ae0:	d107      	bne.n	11af2 <_strtod_l+0xac2>
   11ae2:	2380      	movs	r3, #128	; 0x80
   11ae4:	061b      	lsls	r3, r3, #24
   11ae6:	18cb      	adds	r3, r1, r3
   11ae8:	9016      	str	r0, [sp, #88]	; 0x58
   11aea:	9317      	str	r3, [sp, #92]	; 0x5c
   11aec:	9a16      	ldr	r2, [sp, #88]	; 0x58
   11aee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11af0:	e7da      	b.n	11aa8 <_strtod_l+0xa78>
   11af2:	0002      	movs	r2, r0
   11af4:	9b08      	ldr	r3, [sp, #32]
   11af6:	9216      	str	r2, [sp, #88]	; 0x58
   11af8:	9317      	str	r3, [sp, #92]	; 0x5c
   11afa:	e7f7      	b.n	11aec <_strtod_l+0xabc>
   11afc:	23d4      	movs	r3, #212	; 0xd4
   11afe:	049b      	lsls	r3, r3, #18
   11b00:	18cf      	adds	r7, r1, r3
   11b02:	9b06      	ldr	r3, [sp, #24]
   11b04:	2b00      	cmp	r3, #0
   11b06:	d1a1      	bne.n	11a4c <_strtod_l+0xa1c>
   11b08:	4b40      	ldr	r3, [pc, #256]	; (11c0c <_strtod_l+0xbdc>)
   11b0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11b0c:	970c      	str	r7, [sp, #48]	; 0x30
   11b0e:	403b      	ands	r3, r7
   11b10:	429a      	cmp	r2, r3
   11b12:	d19b      	bne.n	11a4c <_strtod_l+0xa1c>
   11b14:	9908      	ldr	r1, [sp, #32]
   11b16:	0028      	movs	r0, r5
   11b18:	f7fe fc38 	bl	1038c <__aeabi_d2iz>
   11b1c:	f7fe fc6a 	bl	103f4 <__aeabi_i2d>
   11b20:	000b      	movs	r3, r1
   11b22:	0002      	movs	r2, r0
   11b24:	9908      	ldr	r1, [sp, #32]
   11b26:	0028      	movs	r0, r5
   11b28:	f7fe f91a 	bl	fd60 <__aeabi_dsub>
   11b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11b2e:	9008      	str	r0, [sp, #32]
   11b30:	9109      	str	r1, [sp, #36]	; 0x24
   11b32:	2b00      	cmp	r3, #0
   11b34:	d104      	bne.n	11b40 <_strtod_l+0xb10>
   11b36:	2e00      	cmp	r6, #0
   11b38:	d102      	bne.n	11b40 <_strtod_l+0xb10>
   11b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11b3c:	031b      	lsls	r3, r3, #12
   11b3e:	d058      	beq.n	11bf2 <_strtod_l+0xbc2>
   11b40:	9808      	ldr	r0, [sp, #32]
   11b42:	9909      	ldr	r1, [sp, #36]	; 0x24
   11b44:	4a38      	ldr	r2, [pc, #224]	; (11c28 <_strtod_l+0xbf8>)
   11b46:	4b39      	ldr	r3, [pc, #228]	; (11c2c <_strtod_l+0xbfc>)
   11b48:	f7fc fe98 	bl	e87c <__aeabi_dcmplt>
   11b4c:	2800      	cmp	r0, #0
   11b4e:	d000      	beq.n	11b52 <_strtod_l+0xb22>
   11b50:	e4d2      	b.n	114f8 <_strtod_l+0x4c8>
   11b52:	9808      	ldr	r0, [sp, #32]
   11b54:	9909      	ldr	r1, [sp, #36]	; 0x24
   11b56:	4a36      	ldr	r2, [pc, #216]	; (11c30 <_strtod_l+0xc00>)
   11b58:	4b31      	ldr	r3, [pc, #196]	; (11c20 <_strtod_l+0xbf0>)
   11b5a:	f7fc fea3 	bl	e8a4 <__aeabi_dcmpgt>
   11b5e:	2800      	cmp	r0, #0
   11b60:	d100      	bne.n	11b64 <_strtod_l+0xb34>
   11b62:	e773      	b.n	11a4c <_strtod_l+0xa1c>
   11b64:	e4c8      	b.n	114f8 <_strtod_l+0x4c8>
   11b66:	9b06      	ldr	r3, [sp, #24]
   11b68:	2b00      	cmp	r3, #0
   11b6a:	d02a      	beq.n	11bc2 <_strtod_l+0xb92>
   11b6c:	23d4      	movs	r3, #212	; 0xd4
   11b6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11b70:	04db      	lsls	r3, r3, #19
   11b72:	429a      	cmp	r2, r3
   11b74:	d825      	bhi.n	11bc2 <_strtod_l+0xb92>
   11b76:	4a2f      	ldr	r2, [pc, #188]	; (11c34 <_strtod_l+0xc04>)
   11b78:	4b2f      	ldr	r3, [pc, #188]	; (11c38 <_strtod_l+0xc08>)
   11b7a:	0028      	movs	r0, r5
   11b7c:	9908      	ldr	r1, [sp, #32]
   11b7e:	f7fc fe87 	bl	e890 <__aeabi_dcmple>
   11b82:	2800      	cmp	r0, #0
   11b84:	d016      	beq.n	11bb4 <_strtod_l+0xb84>
   11b86:	0028      	movs	r0, r5
   11b88:	9908      	ldr	r1, [sp, #32]
   11b8a:	f7fc ff07 	bl	e99c <__aeabi_d2uiz>
   11b8e:	2800      	cmp	r0, #0
   11b90:	d100      	bne.n	11b94 <_strtod_l+0xb64>
   11b92:	3001      	adds	r0, #1
   11b94:	f7fe fc70 	bl	10478 <__aeabi_ui2d>
   11b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11b9a:	0005      	movs	r5, r0
   11b9c:	9108      	str	r1, [sp, #32]
   11b9e:	2b00      	cmp	r3, #0
   11ba0:	d122      	bne.n	11be8 <_strtod_l+0xbb8>
   11ba2:	2380      	movs	r3, #128	; 0x80
   11ba4:	061b      	lsls	r3, r3, #24
   11ba6:	18cb      	adds	r3, r1, r3
   11ba8:	9018      	str	r0, [sp, #96]	; 0x60
   11baa:	9319      	str	r3, [sp, #100]	; 0x64
   11bac:	9a18      	ldr	r2, [sp, #96]	; 0x60
   11bae:	9b19      	ldr	r3, [sp, #100]	; 0x64
   11bb0:	920c      	str	r2, [sp, #48]	; 0x30
   11bb2:	930d      	str	r3, [sp, #52]	; 0x34
   11bb4:	22d6      	movs	r2, #214	; 0xd6
   11bb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11bb8:	04d2      	lsls	r2, r2, #19
   11bba:	189b      	adds	r3, r3, r2
   11bbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11bbe:	1a9b      	subs	r3, r3, r2
   11bc0:	930d      	str	r3, [sp, #52]	; 0x34
   11bc2:	980e      	ldr	r0, [sp, #56]	; 0x38
   11bc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11bc6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   11bc8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   11bca:	f000 ff7f 	bl	12acc <__ulp>
   11bce:	0002      	movs	r2, r0
   11bd0:	000b      	movs	r3, r1
   11bd2:	0030      	movs	r0, r6
   11bd4:	0039      	movs	r1, r7
   11bd6:	f7fd fe43 	bl	f860 <__aeabi_dmul>
   11bda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11bdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11bde:	f7fc fefb 	bl	e9d8 <__aeabi_dadd>
   11be2:	0006      	movs	r6, r0
   11be4:	000f      	movs	r7, r1
   11be6:	e78c      	b.n	11b02 <_strtod_l+0xad2>
   11be8:	0002      	movs	r2, r0
   11bea:	9b08      	ldr	r3, [sp, #32]
   11bec:	9218      	str	r2, [sp, #96]	; 0x60
   11bee:	9319      	str	r3, [sp, #100]	; 0x64
   11bf0:	e7dc      	b.n	11bac <_strtod_l+0xb7c>
   11bf2:	4a0d      	ldr	r2, [pc, #52]	; (11c28 <_strtod_l+0xbf8>)
   11bf4:	4b11      	ldr	r3, [pc, #68]	; (11c3c <_strtod_l+0xc0c>)
   11bf6:	9808      	ldr	r0, [sp, #32]
   11bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
   11bfa:	f7fc fe3f 	bl	e87c <__aeabi_dcmplt>
   11bfe:	e7ae      	b.n	11b5e <_strtod_l+0xb2e>
   11c00:	fff00000 	.word	0xfff00000
   11c04:	000fffff 	.word	0x000fffff
   11c08:	3ff00000 	.word	0x3ff00000
   11c0c:	7ff00000 	.word	0x7ff00000
   11c10:	7fe00000 	.word	0x7fe00000
   11c14:	fcb00000 	.word	0xfcb00000
   11c18:	7c9fffff 	.word	0x7c9fffff
   11c1c:	7fefffff 	.word	0x7fefffff
   11c20:	3fe00000 	.word	0x3fe00000
   11c24:	bff00000 	.word	0xbff00000
   11c28:	94a03595 	.word	0x94a03595
   11c2c:	3fdfffff 	.word	0x3fdfffff
   11c30:	35afe535 	.word	0x35afe535
   11c34:	ffc00000 	.word	0xffc00000
   11c38:	41dfffff 	.word	0x41dfffff
   11c3c:	3fcfffff 	.word	0x3fcfffff

00011c40 <strtod>:
   11c40:	4b06      	ldr	r3, [pc, #24]	; (11c5c <strtod+0x1c>)
   11c42:	b510      	push	{r4, lr}
   11c44:	0004      	movs	r4, r0
   11c46:	6818      	ldr	r0, [r3, #0]
   11c48:	000a      	movs	r2, r1
   11c4a:	6a03      	ldr	r3, [r0, #32]
   11c4c:	2b00      	cmp	r3, #0
   11c4e:	d100      	bne.n	11c52 <strtod+0x12>
   11c50:	4b03      	ldr	r3, [pc, #12]	; (11c60 <strtod+0x20>)
   11c52:	0021      	movs	r1, r4
   11c54:	f7ff f9ec 	bl	11030 <_strtod_l>
   11c58:	bd10      	pop	{r4, pc}
   11c5a:	46c0      	nop			; (mov r8, r8)
   11c5c:	200002c8 	.word	0x200002c8
   11c60:	2000032c 	.word	0x2000032c

00011c64 <__swbuf_r>:
   11c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c66:	0005      	movs	r5, r0
   11c68:	000e      	movs	r6, r1
   11c6a:	0014      	movs	r4, r2
   11c6c:	2800      	cmp	r0, #0
   11c6e:	d004      	beq.n	11c7a <__swbuf_r+0x16>
   11c70:	6983      	ldr	r3, [r0, #24]
   11c72:	2b00      	cmp	r3, #0
   11c74:	d101      	bne.n	11c7a <__swbuf_r+0x16>
   11c76:	f7fe fd2f 	bl	106d8 <__sinit>
   11c7a:	4b22      	ldr	r3, [pc, #136]	; (11d04 <__swbuf_r+0xa0>)
   11c7c:	429c      	cmp	r4, r3
   11c7e:	d12d      	bne.n	11cdc <__swbuf_r+0x78>
   11c80:	686c      	ldr	r4, [r5, #4]
   11c82:	69a3      	ldr	r3, [r4, #24]
   11c84:	60a3      	str	r3, [r4, #8]
   11c86:	89a3      	ldrh	r3, [r4, #12]
   11c88:	071b      	lsls	r3, r3, #28
   11c8a:	d531      	bpl.n	11cf0 <__swbuf_r+0x8c>
   11c8c:	6923      	ldr	r3, [r4, #16]
   11c8e:	2b00      	cmp	r3, #0
   11c90:	d02e      	beq.n	11cf0 <__swbuf_r+0x8c>
   11c92:	6823      	ldr	r3, [r4, #0]
   11c94:	6922      	ldr	r2, [r4, #16]
   11c96:	b2f7      	uxtb	r7, r6
   11c98:	1a98      	subs	r0, r3, r2
   11c9a:	6963      	ldr	r3, [r4, #20]
   11c9c:	b2f6      	uxtb	r6, r6
   11c9e:	4298      	cmp	r0, r3
   11ca0:	db05      	blt.n	11cae <__swbuf_r+0x4a>
   11ca2:	0021      	movs	r1, r4
   11ca4:	0028      	movs	r0, r5
   11ca6:	f7fe fca9 	bl	105fc <_fflush_r>
   11caa:	2800      	cmp	r0, #0
   11cac:	d126      	bne.n	11cfc <__swbuf_r+0x98>
   11cae:	68a3      	ldr	r3, [r4, #8]
   11cb0:	3001      	adds	r0, #1
   11cb2:	3b01      	subs	r3, #1
   11cb4:	60a3      	str	r3, [r4, #8]
   11cb6:	6823      	ldr	r3, [r4, #0]
   11cb8:	1c5a      	adds	r2, r3, #1
   11cba:	6022      	str	r2, [r4, #0]
   11cbc:	701f      	strb	r7, [r3, #0]
   11cbe:	6963      	ldr	r3, [r4, #20]
   11cc0:	4298      	cmp	r0, r3
   11cc2:	d004      	beq.n	11cce <__swbuf_r+0x6a>
   11cc4:	89a3      	ldrh	r3, [r4, #12]
   11cc6:	07db      	lsls	r3, r3, #31
   11cc8:	d51a      	bpl.n	11d00 <__swbuf_r+0x9c>
   11cca:	2e0a      	cmp	r6, #10
   11ccc:	d118      	bne.n	11d00 <__swbuf_r+0x9c>
   11cce:	0021      	movs	r1, r4
   11cd0:	0028      	movs	r0, r5
   11cd2:	f7fe fc93 	bl	105fc <_fflush_r>
   11cd6:	2800      	cmp	r0, #0
   11cd8:	d012      	beq.n	11d00 <__swbuf_r+0x9c>
   11cda:	e00f      	b.n	11cfc <__swbuf_r+0x98>
   11cdc:	4b0a      	ldr	r3, [pc, #40]	; (11d08 <__swbuf_r+0xa4>)
   11cde:	429c      	cmp	r4, r3
   11ce0:	d101      	bne.n	11ce6 <__swbuf_r+0x82>
   11ce2:	68ac      	ldr	r4, [r5, #8]
   11ce4:	e7cd      	b.n	11c82 <__swbuf_r+0x1e>
   11ce6:	4b09      	ldr	r3, [pc, #36]	; (11d0c <__swbuf_r+0xa8>)
   11ce8:	429c      	cmp	r4, r3
   11cea:	d1ca      	bne.n	11c82 <__swbuf_r+0x1e>
   11cec:	68ec      	ldr	r4, [r5, #12]
   11cee:	e7c8      	b.n	11c82 <__swbuf_r+0x1e>
   11cf0:	0021      	movs	r1, r4
   11cf2:	0028      	movs	r0, r5
   11cf4:	f000 f82c 	bl	11d50 <__swsetup_r>
   11cf8:	2800      	cmp	r0, #0
   11cfa:	d0ca      	beq.n	11c92 <__swbuf_r+0x2e>
   11cfc:	2601      	movs	r6, #1
   11cfe:	4276      	negs	r6, r6
   11d00:	0030      	movs	r0, r6
   11d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d04:	00016274 	.word	0x00016274
   11d08:	00016294 	.word	0x00016294
   11d0c:	00016254 	.word	0x00016254

00011d10 <__ascii_wctomb>:
   11d10:	1e0b      	subs	r3, r1, #0
   11d12:	d004      	beq.n	11d1e <__ascii_wctomb+0xe>
   11d14:	2aff      	cmp	r2, #255	; 0xff
   11d16:	d904      	bls.n	11d22 <__ascii_wctomb+0x12>
   11d18:	238a      	movs	r3, #138	; 0x8a
   11d1a:	6003      	str	r3, [r0, #0]
   11d1c:	3b8b      	subs	r3, #139	; 0x8b
   11d1e:	0018      	movs	r0, r3
   11d20:	4770      	bx	lr
   11d22:	700a      	strb	r2, [r1, #0]
   11d24:	2301      	movs	r3, #1
   11d26:	e7fa      	b.n	11d1e <__ascii_wctomb+0xe>

00011d28 <_write_r>:
   11d28:	b570      	push	{r4, r5, r6, lr}
   11d2a:	0005      	movs	r5, r0
   11d2c:	0008      	movs	r0, r1
   11d2e:	0011      	movs	r1, r2
   11d30:	2200      	movs	r2, #0
   11d32:	4c06      	ldr	r4, [pc, #24]	; (11d4c <_write_r+0x24>)
   11d34:	6022      	str	r2, [r4, #0]
   11d36:	001a      	movs	r2, r3
   11d38:	f7f2 fe1e 	bl	4978 <_write>
   11d3c:	1c43      	adds	r3, r0, #1
   11d3e:	d103      	bne.n	11d48 <_write_r+0x20>
   11d40:	6823      	ldr	r3, [r4, #0]
   11d42:	2b00      	cmp	r3, #0
   11d44:	d000      	beq.n	11d48 <_write_r+0x20>
   11d46:	602b      	str	r3, [r5, #0]
   11d48:	bd70      	pop	{r4, r5, r6, pc}
   11d4a:	46c0      	nop			; (mov r8, r8)
   11d4c:	20002cfc 	.word	0x20002cfc

00011d50 <__swsetup_r>:
   11d50:	4b36      	ldr	r3, [pc, #216]	; (11e2c <__swsetup_r+0xdc>)
   11d52:	b570      	push	{r4, r5, r6, lr}
   11d54:	681d      	ldr	r5, [r3, #0]
   11d56:	0006      	movs	r6, r0
   11d58:	000c      	movs	r4, r1
   11d5a:	2d00      	cmp	r5, #0
   11d5c:	d005      	beq.n	11d6a <__swsetup_r+0x1a>
   11d5e:	69ab      	ldr	r3, [r5, #24]
   11d60:	2b00      	cmp	r3, #0
   11d62:	d102      	bne.n	11d6a <__swsetup_r+0x1a>
   11d64:	0028      	movs	r0, r5
   11d66:	f7fe fcb7 	bl	106d8 <__sinit>
   11d6a:	4b31      	ldr	r3, [pc, #196]	; (11e30 <__swsetup_r+0xe0>)
   11d6c:	429c      	cmp	r4, r3
   11d6e:	d10f      	bne.n	11d90 <__swsetup_r+0x40>
   11d70:	686c      	ldr	r4, [r5, #4]
   11d72:	230c      	movs	r3, #12
   11d74:	5ee2      	ldrsh	r2, [r4, r3]
   11d76:	b293      	uxth	r3, r2
   11d78:	0719      	lsls	r1, r3, #28
   11d7a:	d42d      	bmi.n	11dd8 <__swsetup_r+0x88>
   11d7c:	06d9      	lsls	r1, r3, #27
   11d7e:	d411      	bmi.n	11da4 <__swsetup_r+0x54>
   11d80:	2309      	movs	r3, #9
   11d82:	2001      	movs	r0, #1
   11d84:	6033      	str	r3, [r6, #0]
   11d86:	3337      	adds	r3, #55	; 0x37
   11d88:	4313      	orrs	r3, r2
   11d8a:	81a3      	strh	r3, [r4, #12]
   11d8c:	4240      	negs	r0, r0
   11d8e:	bd70      	pop	{r4, r5, r6, pc}
   11d90:	4b28      	ldr	r3, [pc, #160]	; (11e34 <__swsetup_r+0xe4>)
   11d92:	429c      	cmp	r4, r3
   11d94:	d101      	bne.n	11d9a <__swsetup_r+0x4a>
   11d96:	68ac      	ldr	r4, [r5, #8]
   11d98:	e7eb      	b.n	11d72 <__swsetup_r+0x22>
   11d9a:	4b27      	ldr	r3, [pc, #156]	; (11e38 <__swsetup_r+0xe8>)
   11d9c:	429c      	cmp	r4, r3
   11d9e:	d1e8      	bne.n	11d72 <__swsetup_r+0x22>
   11da0:	68ec      	ldr	r4, [r5, #12]
   11da2:	e7e6      	b.n	11d72 <__swsetup_r+0x22>
   11da4:	075b      	lsls	r3, r3, #29
   11da6:	d513      	bpl.n	11dd0 <__swsetup_r+0x80>
   11da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11daa:	2900      	cmp	r1, #0
   11dac:	d008      	beq.n	11dc0 <__swsetup_r+0x70>
   11dae:	0023      	movs	r3, r4
   11db0:	3344      	adds	r3, #68	; 0x44
   11db2:	4299      	cmp	r1, r3
   11db4:	d002      	beq.n	11dbc <__swsetup_r+0x6c>
   11db6:	0030      	movs	r0, r6
   11db8:	f7fe fe2a 	bl	10a10 <_free_r>
   11dbc:	2300      	movs	r3, #0
   11dbe:	6363      	str	r3, [r4, #52]	; 0x34
   11dc0:	2224      	movs	r2, #36	; 0x24
   11dc2:	89a3      	ldrh	r3, [r4, #12]
   11dc4:	4393      	bics	r3, r2
   11dc6:	81a3      	strh	r3, [r4, #12]
   11dc8:	2300      	movs	r3, #0
   11dca:	6063      	str	r3, [r4, #4]
   11dcc:	6923      	ldr	r3, [r4, #16]
   11dce:	6023      	str	r3, [r4, #0]
   11dd0:	2308      	movs	r3, #8
   11dd2:	89a2      	ldrh	r2, [r4, #12]
   11dd4:	4313      	orrs	r3, r2
   11dd6:	81a3      	strh	r3, [r4, #12]
   11dd8:	6923      	ldr	r3, [r4, #16]
   11dda:	2b00      	cmp	r3, #0
   11ddc:	d10b      	bne.n	11df6 <__swsetup_r+0xa6>
   11dde:	21a0      	movs	r1, #160	; 0xa0
   11de0:	2280      	movs	r2, #128	; 0x80
   11de2:	89a3      	ldrh	r3, [r4, #12]
   11de4:	0089      	lsls	r1, r1, #2
   11de6:	0092      	lsls	r2, r2, #2
   11de8:	400b      	ands	r3, r1
   11dea:	4293      	cmp	r3, r2
   11dec:	d003      	beq.n	11df6 <__swsetup_r+0xa6>
   11dee:	0021      	movs	r1, r4
   11df0:	0030      	movs	r0, r6
   11df2:	f7fe fd65 	bl	108c0 <__smakebuf_r>
   11df6:	2301      	movs	r3, #1
   11df8:	89a2      	ldrh	r2, [r4, #12]
   11dfa:	4013      	ands	r3, r2
   11dfc:	d011      	beq.n	11e22 <__swsetup_r+0xd2>
   11dfe:	2300      	movs	r3, #0
   11e00:	60a3      	str	r3, [r4, #8]
   11e02:	6963      	ldr	r3, [r4, #20]
   11e04:	425b      	negs	r3, r3
   11e06:	61a3      	str	r3, [r4, #24]
   11e08:	2000      	movs	r0, #0
   11e0a:	6923      	ldr	r3, [r4, #16]
   11e0c:	4283      	cmp	r3, r0
   11e0e:	d1be      	bne.n	11d8e <__swsetup_r+0x3e>
   11e10:	230c      	movs	r3, #12
   11e12:	5ee2      	ldrsh	r2, [r4, r3]
   11e14:	0613      	lsls	r3, r2, #24
   11e16:	d5ba      	bpl.n	11d8e <__swsetup_r+0x3e>
   11e18:	2340      	movs	r3, #64	; 0x40
   11e1a:	4313      	orrs	r3, r2
   11e1c:	81a3      	strh	r3, [r4, #12]
   11e1e:	3801      	subs	r0, #1
   11e20:	e7b5      	b.n	11d8e <__swsetup_r+0x3e>
   11e22:	0792      	lsls	r2, r2, #30
   11e24:	d400      	bmi.n	11e28 <__swsetup_r+0xd8>
   11e26:	6963      	ldr	r3, [r4, #20]
   11e28:	60a3      	str	r3, [r4, #8]
   11e2a:	e7ed      	b.n	11e08 <__swsetup_r+0xb8>
   11e2c:	200002c8 	.word	0x200002c8
   11e30:	00016274 	.word	0x00016274
   11e34:	00016294 	.word	0x00016294
   11e38:	00016254 	.word	0x00016254

00011e3c <_close_r>:
   11e3c:	2300      	movs	r3, #0
   11e3e:	b570      	push	{r4, r5, r6, lr}
   11e40:	4c06      	ldr	r4, [pc, #24]	; (11e5c <_close_r+0x20>)
   11e42:	0005      	movs	r5, r0
   11e44:	0008      	movs	r0, r1
   11e46:	6023      	str	r3, [r4, #0]
   11e48:	f7fc faa6 	bl	e398 <_close>
   11e4c:	1c43      	adds	r3, r0, #1
   11e4e:	d103      	bne.n	11e58 <_close_r+0x1c>
   11e50:	6823      	ldr	r3, [r4, #0]
   11e52:	2b00      	cmp	r3, #0
   11e54:	d000      	beq.n	11e58 <_close_r+0x1c>
   11e56:	602b      	str	r3, [r5, #0]
   11e58:	bd70      	pop	{r4, r5, r6, pc}
   11e5a:	46c0      	nop			; (mov r8, r8)
   11e5c:	20002cfc 	.word	0x20002cfc

00011e60 <_fstat_r>:
   11e60:	2300      	movs	r3, #0
   11e62:	b570      	push	{r4, r5, r6, lr}
   11e64:	4c06      	ldr	r4, [pc, #24]	; (11e80 <_fstat_r+0x20>)
   11e66:	0005      	movs	r5, r0
   11e68:	0008      	movs	r0, r1
   11e6a:	0011      	movs	r1, r2
   11e6c:	6023      	str	r3, [r4, #0]
   11e6e:	f7fc fa96 	bl	e39e <_fstat>
   11e72:	1c43      	adds	r3, r0, #1
   11e74:	d103      	bne.n	11e7e <_fstat_r+0x1e>
   11e76:	6823      	ldr	r3, [r4, #0]
   11e78:	2b00      	cmp	r3, #0
   11e7a:	d000      	beq.n	11e7e <_fstat_r+0x1e>
   11e7c:	602b      	str	r3, [r5, #0]
   11e7e:	bd70      	pop	{r4, r5, r6, pc}
   11e80:	20002cfc 	.word	0x20002cfc

00011e84 <rshift>:
   11e84:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e86:	0006      	movs	r6, r0
   11e88:	6905      	ldr	r5, [r0, #16]
   11e8a:	3614      	adds	r6, #20
   11e8c:	114b      	asrs	r3, r1, #5
   11e8e:	0034      	movs	r4, r6
   11e90:	42ab      	cmp	r3, r5
   11e92:	da1a      	bge.n	11eca <rshift+0x46>
   11e94:	221f      	movs	r2, #31
   11e96:	00ad      	lsls	r5, r5, #2
   11e98:	009b      	lsls	r3, r3, #2
   11e9a:	1975      	adds	r5, r6, r5
   11e9c:	18f3      	adds	r3, r6, r3
   11e9e:	4011      	ands	r1, r2
   11ea0:	d107      	bne.n	11eb2 <rshift+0x2e>
   11ea2:	001a      	movs	r2, r3
   11ea4:	0033      	movs	r3, r6
   11ea6:	001c      	movs	r4, r3
   11ea8:	4295      	cmp	r5, r2
   11eaa:	d90e      	bls.n	11eca <rshift+0x46>
   11eac:	ca02      	ldmia	r2!, {r1}
   11eae:	c302      	stmia	r3!, {r1}
   11eb0:	e7f9      	b.n	11ea6 <rshift+0x22>
   11eb2:	cb04      	ldmia	r3!, {r2}
   11eb4:	2720      	movs	r7, #32
   11eb6:	40ca      	lsrs	r2, r1
   11eb8:	46b4      	mov	ip, r6
   11eba:	1a7f      	subs	r7, r7, r1
   11ebc:	4664      	mov	r4, ip
   11ebe:	429d      	cmp	r5, r3
   11ec0:	d809      	bhi.n	11ed6 <rshift+0x52>
   11ec2:	6022      	str	r2, [r4, #0]
   11ec4:	2a00      	cmp	r2, #0
   11ec6:	d000      	beq.n	11eca <rshift+0x46>
   11ec8:	3404      	adds	r4, #4
   11eca:	1ba3      	subs	r3, r4, r6
   11ecc:	109b      	asrs	r3, r3, #2
   11ece:	6103      	str	r3, [r0, #16]
   11ed0:	d100      	bne.n	11ed4 <rshift+0x50>
   11ed2:	6143      	str	r3, [r0, #20]
   11ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11ed6:	681c      	ldr	r4, [r3, #0]
   11ed8:	40bc      	lsls	r4, r7
   11eda:	4322      	orrs	r2, r4
   11edc:	4664      	mov	r4, ip
   11ede:	c404      	stmia	r4!, {r2}
   11ee0:	cb04      	ldmia	r3!, {r2}
   11ee2:	46a4      	mov	ip, r4
   11ee4:	40ca      	lsrs	r2, r1
   11ee6:	e7e9      	b.n	11ebc <rshift+0x38>

00011ee8 <__hexdig_fun>:
   11ee8:	0003      	movs	r3, r0
   11eea:	3b30      	subs	r3, #48	; 0x30
   11eec:	2b09      	cmp	r3, #9
   11eee:	d803      	bhi.n	11ef8 <__hexdig_fun+0x10>
   11ef0:	3820      	subs	r0, #32
   11ef2:	b2c3      	uxtb	r3, r0
   11ef4:	0018      	movs	r0, r3
   11ef6:	4770      	bx	lr
   11ef8:	0003      	movs	r3, r0
   11efa:	3b61      	subs	r3, #97	; 0x61
   11efc:	2b05      	cmp	r3, #5
   11efe:	d801      	bhi.n	11f04 <__hexdig_fun+0x1c>
   11f00:	3847      	subs	r0, #71	; 0x47
   11f02:	e7f6      	b.n	11ef2 <__hexdig_fun+0xa>
   11f04:	0002      	movs	r2, r0
   11f06:	3a41      	subs	r2, #65	; 0x41
   11f08:	2300      	movs	r3, #0
   11f0a:	2a05      	cmp	r2, #5
   11f0c:	d8f2      	bhi.n	11ef4 <__hexdig_fun+0xc>
   11f0e:	3827      	subs	r0, #39	; 0x27
   11f10:	e7ef      	b.n	11ef2 <__hexdig_fun+0xa>

00011f12 <__gethex>:
   11f12:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f14:	b08d      	sub	sp, #52	; 0x34
   11f16:	9005      	str	r0, [sp, #20]
   11f18:	9814      	ldr	r0, [sp, #80]	; 0x50
   11f1a:	9109      	str	r1, [sp, #36]	; 0x24
   11f1c:	9202      	str	r2, [sp, #8]
   11f1e:	930a      	str	r3, [sp, #40]	; 0x28
   11f20:	f000 faee 	bl	12500 <__localeconv_l>
   11f24:	6803      	ldr	r3, [r0, #0]
   11f26:	0018      	movs	r0, r3
   11f28:	9307      	str	r3, [sp, #28]
   11f2a:	f7ff f83c 	bl	10fa6 <strlen>
   11f2e:	2202      	movs	r2, #2
   11f30:	9b07      	ldr	r3, [sp, #28]
   11f32:	4252      	negs	r2, r2
   11f34:	181b      	adds	r3, r3, r0
   11f36:	3b01      	subs	r3, #1
   11f38:	781b      	ldrb	r3, [r3, #0]
   11f3a:	9004      	str	r0, [sp, #16]
   11f3c:	930b      	str	r3, [sp, #44]	; 0x2c
   11f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11f40:	6819      	ldr	r1, [r3, #0]
   11f42:	1c8b      	adds	r3, r1, #2
   11f44:	1a52      	subs	r2, r2, r1
   11f46:	18d1      	adds	r1, r2, r3
   11f48:	9301      	str	r3, [sp, #4]
   11f4a:	9108      	str	r1, [sp, #32]
   11f4c:	9901      	ldr	r1, [sp, #4]
   11f4e:	3301      	adds	r3, #1
   11f50:	7808      	ldrb	r0, [r1, #0]
   11f52:	2830      	cmp	r0, #48	; 0x30
   11f54:	d0f7      	beq.n	11f46 <__gethex+0x34>
   11f56:	f7ff ffc7 	bl	11ee8 <__hexdig_fun>
   11f5a:	1e07      	subs	r7, r0, #0
   11f5c:	d000      	beq.n	11f60 <__gethex+0x4e>
   11f5e:	e06b      	b.n	12038 <__gethex+0x126>
   11f60:	9a04      	ldr	r2, [sp, #16]
   11f62:	9907      	ldr	r1, [sp, #28]
   11f64:	9801      	ldr	r0, [sp, #4]
   11f66:	f7ff f825 	bl	10fb4 <strncmp>
   11f6a:	2800      	cmp	r0, #0
   11f6c:	d000      	beq.n	11f70 <__gethex+0x5e>
   11f6e:	e06b      	b.n	12048 <__gethex+0x136>
   11f70:	9b01      	ldr	r3, [sp, #4]
   11f72:	9a04      	ldr	r2, [sp, #16]
   11f74:	189c      	adds	r4, r3, r2
   11f76:	7820      	ldrb	r0, [r4, #0]
   11f78:	f7ff ffb6 	bl	11ee8 <__hexdig_fun>
   11f7c:	2800      	cmp	r0, #0
   11f7e:	d067      	beq.n	12050 <__gethex+0x13e>
   11f80:	9401      	str	r4, [sp, #4]
   11f82:	9b01      	ldr	r3, [sp, #4]
   11f84:	7818      	ldrb	r0, [r3, #0]
   11f86:	2830      	cmp	r0, #48	; 0x30
   11f88:	d052      	beq.n	12030 <__gethex+0x11e>
   11f8a:	f7ff ffad 	bl	11ee8 <__hexdig_fun>
   11f8e:	4243      	negs	r3, r0
   11f90:	4143      	adcs	r3, r0
   11f92:	9303      	str	r3, [sp, #12]
   11f94:	2301      	movs	r3, #1
   11f96:	0026      	movs	r6, r4
   11f98:	9308      	str	r3, [sp, #32]
   11f9a:	9c01      	ldr	r4, [sp, #4]
   11f9c:	7820      	ldrb	r0, [r4, #0]
   11f9e:	f7ff ffa3 	bl	11ee8 <__hexdig_fun>
   11fa2:	2800      	cmp	r0, #0
   11fa4:	d14c      	bne.n	12040 <__gethex+0x12e>
   11fa6:	9a04      	ldr	r2, [sp, #16]
   11fa8:	9907      	ldr	r1, [sp, #28]
   11faa:	0020      	movs	r0, r4
   11fac:	f7ff f802 	bl	10fb4 <strncmp>
   11fb0:	2800      	cmp	r0, #0
   11fb2:	d109      	bne.n	11fc8 <__gethex+0xb6>
   11fb4:	2e00      	cmp	r6, #0
   11fb6:	d109      	bne.n	11fcc <__gethex+0xba>
   11fb8:	9b04      	ldr	r3, [sp, #16]
   11fba:	18e4      	adds	r4, r4, r3
   11fbc:	0026      	movs	r6, r4
   11fbe:	7820      	ldrb	r0, [r4, #0]
   11fc0:	f7ff ff92 	bl	11ee8 <__hexdig_fun>
   11fc4:	2800      	cmp	r0, #0
   11fc6:	d13d      	bne.n	12044 <__gethex+0x132>
   11fc8:	1e37      	subs	r7, r6, #0
   11fca:	d001      	beq.n	11fd0 <__gethex+0xbe>
   11fcc:	1b37      	subs	r7, r6, r4
   11fce:	00bf      	lsls	r7, r7, #2
   11fd0:	7823      	ldrb	r3, [r4, #0]
   11fd2:	2b50      	cmp	r3, #80	; 0x50
   11fd4:	d001      	beq.n	11fda <__gethex+0xc8>
   11fd6:	2b70      	cmp	r3, #112	; 0x70
   11fd8:	d147      	bne.n	1206a <__gethex+0x158>
   11fda:	7863      	ldrb	r3, [r4, #1]
   11fdc:	2b2b      	cmp	r3, #43	; 0x2b
   11fde:	d03d      	beq.n	1205c <__gethex+0x14a>
   11fe0:	2b2d      	cmp	r3, #45	; 0x2d
   11fe2:	d037      	beq.n	12054 <__gethex+0x142>
   11fe4:	2300      	movs	r3, #0
   11fe6:	1c66      	adds	r6, r4, #1
   11fe8:	9306      	str	r3, [sp, #24]
   11fea:	7830      	ldrb	r0, [r6, #0]
   11fec:	f7ff ff7c 	bl	11ee8 <__hexdig_fun>
   11ff0:	1e43      	subs	r3, r0, #1
   11ff2:	b2db      	uxtb	r3, r3
   11ff4:	2b18      	cmp	r3, #24
   11ff6:	d838      	bhi.n	1206a <__gethex+0x158>
   11ff8:	3810      	subs	r0, #16
   11ffa:	0005      	movs	r5, r0
   11ffc:	3601      	adds	r6, #1
   11ffe:	7830      	ldrb	r0, [r6, #0]
   12000:	f7ff ff72 	bl	11ee8 <__hexdig_fun>
   12004:	1e43      	subs	r3, r0, #1
   12006:	b2db      	uxtb	r3, r3
   12008:	2b18      	cmp	r3, #24
   1200a:	d929      	bls.n	12060 <__gethex+0x14e>
   1200c:	9b06      	ldr	r3, [sp, #24]
   1200e:	2b00      	cmp	r3, #0
   12010:	d000      	beq.n	12014 <__gethex+0x102>
   12012:	426d      	negs	r5, r5
   12014:	197f      	adds	r7, r7, r5
   12016:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12018:	601e      	str	r6, [r3, #0]
   1201a:	9b03      	ldr	r3, [sp, #12]
   1201c:	2b00      	cmp	r3, #0
   1201e:	d026      	beq.n	1206e <__gethex+0x15c>
   12020:	2600      	movs	r6, #0
   12022:	9b08      	ldr	r3, [sp, #32]
   12024:	42b3      	cmp	r3, r6
   12026:	d100      	bne.n	1202a <__gethex+0x118>
   12028:	3606      	adds	r6, #6
   1202a:	0030      	movs	r0, r6
   1202c:	b00d      	add	sp, #52	; 0x34
   1202e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12030:	9b01      	ldr	r3, [sp, #4]
   12032:	3301      	adds	r3, #1
   12034:	9301      	str	r3, [sp, #4]
   12036:	e7a4      	b.n	11f82 <__gethex+0x70>
   12038:	2300      	movs	r3, #0
   1203a:	9303      	str	r3, [sp, #12]
   1203c:	001e      	movs	r6, r3
   1203e:	e7ac      	b.n	11f9a <__gethex+0x88>
   12040:	3401      	adds	r4, #1
   12042:	e7ab      	b.n	11f9c <__gethex+0x8a>
   12044:	3401      	adds	r4, #1
   12046:	e7ba      	b.n	11fbe <__gethex+0xac>
   12048:	9c01      	ldr	r4, [sp, #4]
   1204a:	2301      	movs	r3, #1
   1204c:	9303      	str	r3, [sp, #12]
   1204e:	e7bf      	b.n	11fd0 <__gethex+0xbe>
   12050:	0007      	movs	r7, r0
   12052:	e7fa      	b.n	1204a <__gethex+0x138>
   12054:	2301      	movs	r3, #1
   12056:	9306      	str	r3, [sp, #24]
   12058:	1ca6      	adds	r6, r4, #2
   1205a:	e7c6      	b.n	11fea <__gethex+0xd8>
   1205c:	2300      	movs	r3, #0
   1205e:	e7fa      	b.n	12056 <__gethex+0x144>
   12060:	230a      	movs	r3, #10
   12062:	435d      	muls	r5, r3
   12064:	182d      	adds	r5, r5, r0
   12066:	3d10      	subs	r5, #16
   12068:	e7c8      	b.n	11ffc <__gethex+0xea>
   1206a:	0026      	movs	r6, r4
   1206c:	e7d3      	b.n	12016 <__gethex+0x104>
   1206e:	9b01      	ldr	r3, [sp, #4]
   12070:	9903      	ldr	r1, [sp, #12]
   12072:	1ae3      	subs	r3, r4, r3
   12074:	3b01      	subs	r3, #1
   12076:	2b07      	cmp	r3, #7
   12078:	dc47      	bgt.n	1210a <__gethex+0x1f8>
   1207a:	9805      	ldr	r0, [sp, #20]
   1207c:	f000 fa58 	bl	12530 <_Balloc>
   12080:	0003      	movs	r3, r0
   12082:	3314      	adds	r3, #20
   12084:	9303      	str	r3, [sp, #12]
   12086:	9308      	str	r3, [sp, #32]
   12088:	2300      	movs	r3, #0
   1208a:	0005      	movs	r5, r0
   1208c:	001e      	movs	r6, r3
   1208e:	9306      	str	r3, [sp, #24]
   12090:	9b01      	ldr	r3, [sp, #4]
   12092:	42a3      	cmp	r3, r4
   12094:	d33c      	bcc.n	12110 <__gethex+0x1fe>
   12096:	9c08      	ldr	r4, [sp, #32]
   12098:	9b03      	ldr	r3, [sp, #12]
   1209a:	c440      	stmia	r4!, {r6}
   1209c:	1ae4      	subs	r4, r4, r3
   1209e:	10a4      	asrs	r4, r4, #2
   120a0:	612c      	str	r4, [r5, #16]
   120a2:	0030      	movs	r0, r6
   120a4:	f000 fb10 	bl	126c8 <__hi0bits>
   120a8:	9b02      	ldr	r3, [sp, #8]
   120aa:	0164      	lsls	r4, r4, #5
   120ac:	681b      	ldr	r3, [r3, #0]
   120ae:	1a26      	subs	r6, r4, r0
   120b0:	9301      	str	r3, [sp, #4]
   120b2:	429e      	cmp	r6, r3
   120b4:	dd5f      	ble.n	12176 <__gethex+0x264>
   120b6:	1af6      	subs	r6, r6, r3
   120b8:	0031      	movs	r1, r6
   120ba:	0028      	movs	r0, r5
   120bc:	f000 fe09 	bl	12cd2 <__any_on>
   120c0:	1e04      	subs	r4, r0, #0
   120c2:	d00f      	beq.n	120e4 <__gethex+0x1d2>
   120c4:	2401      	movs	r4, #1
   120c6:	211f      	movs	r1, #31
   120c8:	0020      	movs	r0, r4
   120ca:	1e73      	subs	r3, r6, #1
   120cc:	4019      	ands	r1, r3
   120ce:	4088      	lsls	r0, r1
   120d0:	0001      	movs	r1, r0
   120d2:	115a      	asrs	r2, r3, #5
   120d4:	9803      	ldr	r0, [sp, #12]
   120d6:	0092      	lsls	r2, r2, #2
   120d8:	5812      	ldr	r2, [r2, r0]
   120da:	420a      	tst	r2, r1
   120dc:	d002      	beq.n	120e4 <__gethex+0x1d2>
   120de:	42a3      	cmp	r3, r4
   120e0:	dc41      	bgt.n	12166 <__gethex+0x254>
   120e2:	2402      	movs	r4, #2
   120e4:	0031      	movs	r1, r6
   120e6:	0028      	movs	r0, r5
   120e8:	f7ff fecc 	bl	11e84 <rshift>
   120ec:	19bf      	adds	r7, r7, r6
   120ee:	9b02      	ldr	r3, [sp, #8]
   120f0:	689b      	ldr	r3, [r3, #8]
   120f2:	9304      	str	r3, [sp, #16]
   120f4:	429f      	cmp	r7, r3
   120f6:	dd4e      	ble.n	12196 <__gethex+0x284>
   120f8:	0029      	movs	r1, r5
   120fa:	9805      	ldr	r0, [sp, #20]
   120fc:	f000 fa50 	bl	125a0 <_Bfree>
   12100:	2300      	movs	r3, #0
   12102:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12104:	26a3      	movs	r6, #163	; 0xa3
   12106:	6013      	str	r3, [r2, #0]
   12108:	e78f      	b.n	1202a <__gethex+0x118>
   1210a:	3101      	adds	r1, #1
   1210c:	105b      	asrs	r3, r3, #1
   1210e:	e7b2      	b.n	12076 <__gethex+0x164>
   12110:	1e63      	subs	r3, r4, #1
   12112:	9309      	str	r3, [sp, #36]	; 0x24
   12114:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12116:	781b      	ldrb	r3, [r3, #0]
   12118:	4293      	cmp	r3, r2
   1211a:	d015      	beq.n	12148 <__gethex+0x236>
   1211c:	9b06      	ldr	r3, [sp, #24]
   1211e:	2b20      	cmp	r3, #32
   12120:	d105      	bne.n	1212e <__gethex+0x21c>
   12122:	9b08      	ldr	r3, [sp, #32]
   12124:	601e      	str	r6, [r3, #0]
   12126:	2600      	movs	r6, #0
   12128:	3304      	adds	r3, #4
   1212a:	9308      	str	r3, [sp, #32]
   1212c:	9606      	str	r6, [sp, #24]
   1212e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12130:	7818      	ldrb	r0, [r3, #0]
   12132:	f7ff fed9 	bl	11ee8 <__hexdig_fun>
   12136:	230f      	movs	r3, #15
   12138:	4018      	ands	r0, r3
   1213a:	9b06      	ldr	r3, [sp, #24]
   1213c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1213e:	4098      	lsls	r0, r3
   12140:	3304      	adds	r3, #4
   12142:	4306      	orrs	r6, r0
   12144:	9306      	str	r3, [sp, #24]
   12146:	e7a3      	b.n	12090 <__gethex+0x17e>
   12148:	2301      	movs	r3, #1
   1214a:	9a04      	ldr	r2, [sp, #16]
   1214c:	1a9c      	subs	r4, r3, r2
   1214e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12150:	191c      	adds	r4, r3, r4
   12152:	9b01      	ldr	r3, [sp, #4]
   12154:	42a3      	cmp	r3, r4
   12156:	d8e1      	bhi.n	1211c <__gethex+0x20a>
   12158:	9907      	ldr	r1, [sp, #28]
   1215a:	0020      	movs	r0, r4
   1215c:	f7fe ff2a 	bl	10fb4 <strncmp>
   12160:	2800      	cmp	r0, #0
   12162:	d095      	beq.n	12090 <__gethex+0x17e>
   12164:	e7da      	b.n	1211c <__gethex+0x20a>
   12166:	1eb1      	subs	r1, r6, #2
   12168:	0028      	movs	r0, r5
   1216a:	f000 fdb2 	bl	12cd2 <__any_on>
   1216e:	2800      	cmp	r0, #0
   12170:	d0b7      	beq.n	120e2 <__gethex+0x1d0>
   12172:	2403      	movs	r4, #3
   12174:	e7b6      	b.n	120e4 <__gethex+0x1d2>
   12176:	9b01      	ldr	r3, [sp, #4]
   12178:	2400      	movs	r4, #0
   1217a:	429e      	cmp	r6, r3
   1217c:	dab7      	bge.n	120ee <__gethex+0x1dc>
   1217e:	1b9e      	subs	r6, r3, r6
   12180:	0029      	movs	r1, r5
   12182:	0032      	movs	r2, r6
   12184:	9805      	ldr	r0, [sp, #20]
   12186:	f000 fbd3 	bl	12930 <__lshift>
   1218a:	0003      	movs	r3, r0
   1218c:	3314      	adds	r3, #20
   1218e:	0005      	movs	r5, r0
   12190:	1bbf      	subs	r7, r7, r6
   12192:	9303      	str	r3, [sp, #12]
   12194:	e7ab      	b.n	120ee <__gethex+0x1dc>
   12196:	9b02      	ldr	r3, [sp, #8]
   12198:	685e      	ldr	r6, [r3, #4]
   1219a:	42b7      	cmp	r7, r6
   1219c:	da6b      	bge.n	12276 <__gethex+0x364>
   1219e:	9b01      	ldr	r3, [sp, #4]
   121a0:	1bf6      	subs	r6, r6, r7
   121a2:	42b3      	cmp	r3, r6
   121a4:	dc32      	bgt.n	1220c <__gethex+0x2fa>
   121a6:	9b02      	ldr	r3, [sp, #8]
   121a8:	68db      	ldr	r3, [r3, #12]
   121aa:	2b02      	cmp	r3, #2
   121ac:	d026      	beq.n	121fc <__gethex+0x2ea>
   121ae:	2b03      	cmp	r3, #3
   121b0:	d028      	beq.n	12204 <__gethex+0x2f2>
   121b2:	2b01      	cmp	r3, #1
   121b4:	d119      	bne.n	121ea <__gethex+0x2d8>
   121b6:	9b01      	ldr	r3, [sp, #4]
   121b8:	42b3      	cmp	r3, r6
   121ba:	d116      	bne.n	121ea <__gethex+0x2d8>
   121bc:	2b01      	cmp	r3, #1
   121be:	dc0d      	bgt.n	121dc <__gethex+0x2ca>
   121c0:	9b02      	ldr	r3, [sp, #8]
   121c2:	2662      	movs	r6, #98	; 0x62
   121c4:	685b      	ldr	r3, [r3, #4]
   121c6:	9301      	str	r3, [sp, #4]
   121c8:	9a01      	ldr	r2, [sp, #4]
   121ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   121cc:	601a      	str	r2, [r3, #0]
   121ce:	2301      	movs	r3, #1
   121d0:	9a03      	ldr	r2, [sp, #12]
   121d2:	612b      	str	r3, [r5, #16]
   121d4:	6013      	str	r3, [r2, #0]
   121d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   121d8:	601d      	str	r5, [r3, #0]
   121da:	e726      	b.n	1202a <__gethex+0x118>
   121dc:	9901      	ldr	r1, [sp, #4]
   121de:	0028      	movs	r0, r5
   121e0:	3901      	subs	r1, #1
   121e2:	f000 fd76 	bl	12cd2 <__any_on>
   121e6:	2800      	cmp	r0, #0
   121e8:	d1ea      	bne.n	121c0 <__gethex+0x2ae>
   121ea:	0029      	movs	r1, r5
   121ec:	9805      	ldr	r0, [sp, #20]
   121ee:	f000 f9d7 	bl	125a0 <_Bfree>
   121f2:	2300      	movs	r3, #0
   121f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   121f6:	2650      	movs	r6, #80	; 0x50
   121f8:	6013      	str	r3, [r2, #0]
   121fa:	e716      	b.n	1202a <__gethex+0x118>
   121fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   121fe:	2b00      	cmp	r3, #0
   12200:	d0de      	beq.n	121c0 <__gethex+0x2ae>
   12202:	e7f2      	b.n	121ea <__gethex+0x2d8>
   12204:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12206:	2b00      	cmp	r3, #0
   12208:	d1da      	bne.n	121c0 <__gethex+0x2ae>
   1220a:	e7ee      	b.n	121ea <__gethex+0x2d8>
   1220c:	1e77      	subs	r7, r6, #1
   1220e:	2c00      	cmp	r4, #0
   12210:	d12f      	bne.n	12272 <__gethex+0x360>
   12212:	2f00      	cmp	r7, #0
   12214:	d004      	beq.n	12220 <__gethex+0x30e>
   12216:	0039      	movs	r1, r7
   12218:	0028      	movs	r0, r5
   1221a:	f000 fd5a 	bl	12cd2 <__any_on>
   1221e:	0004      	movs	r4, r0
   12220:	231f      	movs	r3, #31
   12222:	117a      	asrs	r2, r7, #5
   12224:	401f      	ands	r7, r3
   12226:	3b1e      	subs	r3, #30
   12228:	40bb      	lsls	r3, r7
   1222a:	9903      	ldr	r1, [sp, #12]
   1222c:	0092      	lsls	r2, r2, #2
   1222e:	5852      	ldr	r2, [r2, r1]
   12230:	421a      	tst	r2, r3
   12232:	d001      	beq.n	12238 <__gethex+0x326>
   12234:	2302      	movs	r3, #2
   12236:	431c      	orrs	r4, r3
   12238:	9b01      	ldr	r3, [sp, #4]
   1223a:	0031      	movs	r1, r6
   1223c:	1b9b      	subs	r3, r3, r6
   1223e:	2602      	movs	r6, #2
   12240:	0028      	movs	r0, r5
   12242:	9301      	str	r3, [sp, #4]
   12244:	f7ff fe1e 	bl	11e84 <rshift>
   12248:	9b02      	ldr	r3, [sp, #8]
   1224a:	685f      	ldr	r7, [r3, #4]
   1224c:	2c00      	cmp	r4, #0
   1224e:	d041      	beq.n	122d4 <__gethex+0x3c2>
   12250:	9b02      	ldr	r3, [sp, #8]
   12252:	68db      	ldr	r3, [r3, #12]
   12254:	2b02      	cmp	r3, #2
   12256:	d010      	beq.n	1227a <__gethex+0x368>
   12258:	2b03      	cmp	r3, #3
   1225a:	d012      	beq.n	12282 <__gethex+0x370>
   1225c:	2b01      	cmp	r3, #1
   1225e:	d106      	bne.n	1226e <__gethex+0x35c>
   12260:	07a2      	lsls	r2, r4, #30
   12262:	d504      	bpl.n	1226e <__gethex+0x35c>
   12264:	9a03      	ldr	r2, [sp, #12]
   12266:	6812      	ldr	r2, [r2, #0]
   12268:	4314      	orrs	r4, r2
   1226a:	421c      	tst	r4, r3
   1226c:	d10c      	bne.n	12288 <__gethex+0x376>
   1226e:	2310      	movs	r3, #16
   12270:	e02f      	b.n	122d2 <__gethex+0x3c0>
   12272:	2401      	movs	r4, #1
   12274:	e7d4      	b.n	12220 <__gethex+0x30e>
   12276:	2601      	movs	r6, #1
   12278:	e7e8      	b.n	1224c <__gethex+0x33a>
   1227a:	2301      	movs	r3, #1
   1227c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1227e:	1a9b      	subs	r3, r3, r2
   12280:	9313      	str	r3, [sp, #76]	; 0x4c
   12282:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12284:	2b00      	cmp	r3, #0
   12286:	d0f2      	beq.n	1226e <__gethex+0x35c>
   12288:	692c      	ldr	r4, [r5, #16]
   1228a:	00a3      	lsls	r3, r4, #2
   1228c:	9304      	str	r3, [sp, #16]
   1228e:	002b      	movs	r3, r5
   12290:	00a2      	lsls	r2, r4, #2
   12292:	3314      	adds	r3, #20
   12294:	1899      	adds	r1, r3, r2
   12296:	2200      	movs	r2, #0
   12298:	4694      	mov	ip, r2
   1229a:	681a      	ldr	r2, [r3, #0]
   1229c:	1c50      	adds	r0, r2, #1
   1229e:	d01e      	beq.n	122de <__gethex+0x3cc>
   122a0:	3201      	adds	r2, #1
   122a2:	601a      	str	r2, [r3, #0]
   122a4:	002b      	movs	r3, r5
   122a6:	3314      	adds	r3, #20
   122a8:	2e02      	cmp	r6, #2
   122aa:	d13b      	bne.n	12324 <__gethex+0x412>
   122ac:	9a02      	ldr	r2, [sp, #8]
   122ae:	9901      	ldr	r1, [sp, #4]
   122b0:	6812      	ldr	r2, [r2, #0]
   122b2:	3a01      	subs	r2, #1
   122b4:	4291      	cmp	r1, r2
   122b6:	d10b      	bne.n	122d0 <__gethex+0x3be>
   122b8:	114a      	asrs	r2, r1, #5
   122ba:	211f      	movs	r1, #31
   122bc:	9801      	ldr	r0, [sp, #4]
   122be:	0092      	lsls	r2, r2, #2
   122c0:	4001      	ands	r1, r0
   122c2:	2001      	movs	r0, #1
   122c4:	0004      	movs	r4, r0
   122c6:	408c      	lsls	r4, r1
   122c8:	58d3      	ldr	r3, [r2, r3]
   122ca:	4223      	tst	r3, r4
   122cc:	d000      	beq.n	122d0 <__gethex+0x3be>
   122ce:	2601      	movs	r6, #1
   122d0:	2320      	movs	r3, #32
   122d2:	431e      	orrs	r6, r3
   122d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   122d6:	601d      	str	r5, [r3, #0]
   122d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   122da:	601f      	str	r7, [r3, #0]
   122dc:	e6a5      	b.n	1202a <__gethex+0x118>
   122de:	4662      	mov	r2, ip
   122e0:	c304      	stmia	r3!, {r2}
   122e2:	4299      	cmp	r1, r3
   122e4:	d8d9      	bhi.n	1229a <__gethex+0x388>
   122e6:	68ab      	ldr	r3, [r5, #8]
   122e8:	429c      	cmp	r4, r3
   122ea:	db12      	blt.n	12312 <__gethex+0x400>
   122ec:	686b      	ldr	r3, [r5, #4]
   122ee:	9805      	ldr	r0, [sp, #20]
   122f0:	1c59      	adds	r1, r3, #1
   122f2:	f000 f91d 	bl	12530 <_Balloc>
   122f6:	0029      	movs	r1, r5
   122f8:	692b      	ldr	r3, [r5, #16]
   122fa:	9003      	str	r0, [sp, #12]
   122fc:	1c9a      	adds	r2, r3, #2
   122fe:	0092      	lsls	r2, r2, #2
   12300:	310c      	adds	r1, #12
   12302:	300c      	adds	r0, #12
   12304:	f7fe fb60 	bl	109c8 <memcpy>
   12308:	0029      	movs	r1, r5
   1230a:	9805      	ldr	r0, [sp, #20]
   1230c:	f000 f948 	bl	125a0 <_Bfree>
   12310:	9d03      	ldr	r5, [sp, #12]
   12312:	692b      	ldr	r3, [r5, #16]
   12314:	1c5a      	adds	r2, r3, #1
   12316:	612a      	str	r2, [r5, #16]
   12318:	2201      	movs	r2, #1
   1231a:	3304      	adds	r3, #4
   1231c:	009b      	lsls	r3, r3, #2
   1231e:	18eb      	adds	r3, r5, r3
   12320:	605a      	str	r2, [r3, #4]
   12322:	e7bf      	b.n	122a4 <__gethex+0x392>
   12324:	692a      	ldr	r2, [r5, #16]
   12326:	4294      	cmp	r4, r2
   12328:	da0a      	bge.n	12340 <__gethex+0x42e>
   1232a:	2101      	movs	r1, #1
   1232c:	0028      	movs	r0, r5
   1232e:	f7ff fda9 	bl	11e84 <rshift>
   12332:	9b02      	ldr	r3, [sp, #8]
   12334:	3701      	adds	r7, #1
   12336:	689b      	ldr	r3, [r3, #8]
   12338:	429f      	cmp	r7, r3
   1233a:	dd00      	ble.n	1233e <__gethex+0x42c>
   1233c:	e6dc      	b.n	120f8 <__gethex+0x1e6>
   1233e:	e7c6      	b.n	122ce <__gethex+0x3bc>
   12340:	241f      	movs	r4, #31
   12342:	9a01      	ldr	r2, [sp, #4]
   12344:	2601      	movs	r6, #1
   12346:	4022      	ands	r2, r4
   12348:	1e14      	subs	r4, r2, #0
   1234a:	d0c1      	beq.n	122d0 <__gethex+0x3be>
   1234c:	9a04      	ldr	r2, [sp, #16]
   1234e:	189b      	adds	r3, r3, r2
   12350:	3b04      	subs	r3, #4
   12352:	6818      	ldr	r0, [r3, #0]
   12354:	f000 f9b8 	bl	126c8 <__hi0bits>
   12358:	2120      	movs	r1, #32
   1235a:	1b0c      	subs	r4, r1, r4
   1235c:	42a0      	cmp	r0, r4
   1235e:	dbe4      	blt.n	1232a <__gethex+0x418>
   12360:	e7b6      	b.n	122d0 <__gethex+0x3be>

00012362 <L_shift>:
   12362:	2308      	movs	r3, #8
   12364:	b570      	push	{r4, r5, r6, lr}
   12366:	2520      	movs	r5, #32
   12368:	1a9a      	subs	r2, r3, r2
   1236a:	0092      	lsls	r2, r2, #2
   1236c:	1aad      	subs	r5, r5, r2
   1236e:	6843      	ldr	r3, [r0, #4]
   12370:	6806      	ldr	r6, [r0, #0]
   12372:	001c      	movs	r4, r3
   12374:	40ac      	lsls	r4, r5
   12376:	40d3      	lsrs	r3, r2
   12378:	4334      	orrs	r4, r6
   1237a:	c010      	stmia	r0!, {r4}
   1237c:	6003      	str	r3, [r0, #0]
   1237e:	4288      	cmp	r0, r1
   12380:	d3f5      	bcc.n	1236e <L_shift+0xc>
   12382:	bd70      	pop	{r4, r5, r6, pc}

00012384 <__match>:
   12384:	b530      	push	{r4, r5, lr}
   12386:	6803      	ldr	r3, [r0, #0]
   12388:	780c      	ldrb	r4, [r1, #0]
   1238a:	3301      	adds	r3, #1
   1238c:	2c00      	cmp	r4, #0
   1238e:	d102      	bne.n	12396 <__match+0x12>
   12390:	6003      	str	r3, [r0, #0]
   12392:	2001      	movs	r0, #1
   12394:	bd30      	pop	{r4, r5, pc}
   12396:	781a      	ldrb	r2, [r3, #0]
   12398:	0015      	movs	r5, r2
   1239a:	3d41      	subs	r5, #65	; 0x41
   1239c:	2d19      	cmp	r5, #25
   1239e:	d800      	bhi.n	123a2 <__match+0x1e>
   123a0:	3220      	adds	r2, #32
   123a2:	3101      	adds	r1, #1
   123a4:	42a2      	cmp	r2, r4
   123a6:	d0ef      	beq.n	12388 <__match+0x4>
   123a8:	2000      	movs	r0, #0
   123aa:	e7f3      	b.n	12394 <__match+0x10>

000123ac <__hexnan>:
   123ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   123ae:	b08b      	sub	sp, #44	; 0x2c
   123b0:	9201      	str	r2, [sp, #4]
   123b2:	680a      	ldr	r2, [r1, #0]
   123b4:	9901      	ldr	r1, [sp, #4]
   123b6:	1153      	asrs	r3, r2, #5
   123b8:	009b      	lsls	r3, r3, #2
   123ba:	18cb      	adds	r3, r1, r3
   123bc:	9303      	str	r3, [sp, #12]
   123be:	231f      	movs	r3, #31
   123c0:	401a      	ands	r2, r3
   123c2:	9008      	str	r0, [sp, #32]
   123c4:	9206      	str	r2, [sp, #24]
   123c6:	d002      	beq.n	123ce <__hexnan+0x22>
   123c8:	9b03      	ldr	r3, [sp, #12]
   123ca:	3304      	adds	r3, #4
   123cc:	9303      	str	r3, [sp, #12]
   123ce:	9b03      	ldr	r3, [sp, #12]
   123d0:	2500      	movs	r5, #0
   123d2:	1f1e      	subs	r6, r3, #4
   123d4:	0037      	movs	r7, r6
   123d6:	0034      	movs	r4, r6
   123d8:	9b08      	ldr	r3, [sp, #32]
   123da:	6035      	str	r5, [r6, #0]
   123dc:	681b      	ldr	r3, [r3, #0]
   123de:	9507      	str	r5, [sp, #28]
   123e0:	9304      	str	r3, [sp, #16]
   123e2:	9502      	str	r5, [sp, #8]
   123e4:	9b04      	ldr	r3, [sp, #16]
   123e6:	3301      	adds	r3, #1
   123e8:	9309      	str	r3, [sp, #36]	; 0x24
   123ea:	9b04      	ldr	r3, [sp, #16]
   123ec:	785b      	ldrb	r3, [r3, #1]
   123ee:	9305      	str	r3, [sp, #20]
   123f0:	2b00      	cmp	r3, #0
   123f2:	d028      	beq.n	12446 <__hexnan+0x9a>
   123f4:	9805      	ldr	r0, [sp, #20]
   123f6:	f7ff fd77 	bl	11ee8 <__hexdig_fun>
   123fa:	2800      	cmp	r0, #0
   123fc:	d145      	bne.n	1248a <__hexnan+0xde>
   123fe:	9b05      	ldr	r3, [sp, #20]
   12400:	2b20      	cmp	r3, #32
   12402:	d819      	bhi.n	12438 <__hexnan+0x8c>
   12404:	9b02      	ldr	r3, [sp, #8]
   12406:	9a07      	ldr	r2, [sp, #28]
   12408:	4293      	cmp	r3, r2
   1240a:	dd12      	ble.n	12432 <__hexnan+0x86>
   1240c:	42bc      	cmp	r4, r7
   1240e:	d206      	bcs.n	1241e <__hexnan+0x72>
   12410:	2d07      	cmp	r5, #7
   12412:	dc04      	bgt.n	1241e <__hexnan+0x72>
   12414:	002a      	movs	r2, r5
   12416:	0039      	movs	r1, r7
   12418:	0020      	movs	r0, r4
   1241a:	f7ff ffa2 	bl	12362 <L_shift>
   1241e:	9b01      	ldr	r3, [sp, #4]
   12420:	2508      	movs	r5, #8
   12422:	429c      	cmp	r4, r3
   12424:	d905      	bls.n	12432 <__hexnan+0x86>
   12426:	1f27      	subs	r7, r4, #4
   12428:	2500      	movs	r5, #0
   1242a:	003c      	movs	r4, r7
   1242c:	9b02      	ldr	r3, [sp, #8]
   1242e:	603d      	str	r5, [r7, #0]
   12430:	9307      	str	r3, [sp, #28]
   12432:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12434:	9304      	str	r3, [sp, #16]
   12436:	e7d5      	b.n	123e4 <__hexnan+0x38>
   12438:	9b05      	ldr	r3, [sp, #20]
   1243a:	2b29      	cmp	r3, #41	; 0x29
   1243c:	d14a      	bne.n	124d4 <__hexnan+0x128>
   1243e:	9b04      	ldr	r3, [sp, #16]
   12440:	9a08      	ldr	r2, [sp, #32]
   12442:	3302      	adds	r3, #2
   12444:	6013      	str	r3, [r2, #0]
   12446:	9b02      	ldr	r3, [sp, #8]
   12448:	2b00      	cmp	r3, #0
   1244a:	d043      	beq.n	124d4 <__hexnan+0x128>
   1244c:	42bc      	cmp	r4, r7
   1244e:	d206      	bcs.n	1245e <__hexnan+0xb2>
   12450:	2d07      	cmp	r5, #7
   12452:	dc04      	bgt.n	1245e <__hexnan+0xb2>
   12454:	002a      	movs	r2, r5
   12456:	0039      	movs	r1, r7
   12458:	0020      	movs	r0, r4
   1245a:	f7ff ff82 	bl	12362 <L_shift>
   1245e:	9b01      	ldr	r3, [sp, #4]
   12460:	429c      	cmp	r4, r3
   12462:	d926      	bls.n	124b2 <__hexnan+0x106>
   12464:	cc04      	ldmia	r4!, {r2}
   12466:	601a      	str	r2, [r3, #0]
   12468:	3304      	adds	r3, #4
   1246a:	42a6      	cmp	r6, r4
   1246c:	d2fa      	bcs.n	12464 <__hexnan+0xb8>
   1246e:	2200      	movs	r2, #0
   12470:	c304      	stmia	r3!, {r2}
   12472:	429e      	cmp	r6, r3
   12474:	d2fc      	bcs.n	12470 <__hexnan+0xc4>
   12476:	6833      	ldr	r3, [r6, #0]
   12478:	2b00      	cmp	r3, #0
   1247a:	d104      	bne.n	12486 <__hexnan+0xda>
   1247c:	9b01      	ldr	r3, [sp, #4]
   1247e:	429e      	cmp	r6, r3
   12480:	d126      	bne.n	124d0 <__hexnan+0x124>
   12482:	2301      	movs	r3, #1
   12484:	6033      	str	r3, [r6, #0]
   12486:	2005      	movs	r0, #5
   12488:	e025      	b.n	124d6 <__hexnan+0x12a>
   1248a:	9b02      	ldr	r3, [sp, #8]
   1248c:	3501      	adds	r5, #1
   1248e:	3301      	adds	r3, #1
   12490:	9302      	str	r3, [sp, #8]
   12492:	2d08      	cmp	r5, #8
   12494:	dd06      	ble.n	124a4 <__hexnan+0xf8>
   12496:	9b01      	ldr	r3, [sp, #4]
   12498:	429c      	cmp	r4, r3
   1249a:	d9ca      	bls.n	12432 <__hexnan+0x86>
   1249c:	2300      	movs	r3, #0
   1249e:	2501      	movs	r5, #1
   124a0:	3c04      	subs	r4, #4
   124a2:	6023      	str	r3, [r4, #0]
   124a4:	220f      	movs	r2, #15
   124a6:	6823      	ldr	r3, [r4, #0]
   124a8:	4010      	ands	r0, r2
   124aa:	011b      	lsls	r3, r3, #4
   124ac:	4318      	orrs	r0, r3
   124ae:	6020      	str	r0, [r4, #0]
   124b0:	e7bf      	b.n	12432 <__hexnan+0x86>
   124b2:	9b06      	ldr	r3, [sp, #24]
   124b4:	2b00      	cmp	r3, #0
   124b6:	d0de      	beq.n	12476 <__hexnan+0xca>
   124b8:	2120      	movs	r1, #32
   124ba:	9a06      	ldr	r2, [sp, #24]
   124bc:	9b03      	ldr	r3, [sp, #12]
   124be:	1a89      	subs	r1, r1, r2
   124c0:	2201      	movs	r2, #1
   124c2:	4252      	negs	r2, r2
   124c4:	40ca      	lsrs	r2, r1
   124c6:	3b04      	subs	r3, #4
   124c8:	6819      	ldr	r1, [r3, #0]
   124ca:	400a      	ands	r2, r1
   124cc:	601a      	str	r2, [r3, #0]
   124ce:	e7d2      	b.n	12476 <__hexnan+0xca>
   124d0:	3e04      	subs	r6, #4
   124d2:	e7d0      	b.n	12476 <__hexnan+0xca>
   124d4:	2004      	movs	r0, #4
   124d6:	b00b      	add	sp, #44	; 0x2c
   124d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000124dc <_isatty_r>:
   124dc:	2300      	movs	r3, #0
   124de:	b570      	push	{r4, r5, r6, lr}
   124e0:	4c06      	ldr	r4, [pc, #24]	; (124fc <_isatty_r+0x20>)
   124e2:	0005      	movs	r5, r0
   124e4:	0008      	movs	r0, r1
   124e6:	6023      	str	r3, [r4, #0]
   124e8:	f7fb ff5e 	bl	e3a8 <_isatty>
   124ec:	1c43      	adds	r3, r0, #1
   124ee:	d103      	bne.n	124f8 <_isatty_r+0x1c>
   124f0:	6823      	ldr	r3, [r4, #0]
   124f2:	2b00      	cmp	r3, #0
   124f4:	d000      	beq.n	124f8 <_isatty_r+0x1c>
   124f6:	602b      	str	r3, [r5, #0]
   124f8:	bd70      	pop	{r4, r5, r6, pc}
   124fa:	46c0      	nop			; (mov r8, r8)
   124fc:	20002cfc 	.word	0x20002cfc

00012500 <__localeconv_l>:
   12500:	30f0      	adds	r0, #240	; 0xf0
   12502:	4770      	bx	lr

00012504 <_lseek_r>:
   12504:	b570      	push	{r4, r5, r6, lr}
   12506:	0005      	movs	r5, r0
   12508:	0008      	movs	r0, r1
   1250a:	0011      	movs	r1, r2
   1250c:	2200      	movs	r2, #0
   1250e:	4c06      	ldr	r4, [pc, #24]	; (12528 <_lseek_r+0x24>)
   12510:	6022      	str	r2, [r4, #0]
   12512:	001a      	movs	r2, r3
   12514:	f7fb ff4a 	bl	e3ac <_lseek>
   12518:	1c43      	adds	r3, r0, #1
   1251a:	d103      	bne.n	12524 <_lseek_r+0x20>
   1251c:	6823      	ldr	r3, [r4, #0]
   1251e:	2b00      	cmp	r3, #0
   12520:	d000      	beq.n	12524 <_lseek_r+0x20>
   12522:	602b      	str	r3, [r5, #0]
   12524:	bd70      	pop	{r4, r5, r6, pc}
   12526:	46c0      	nop			; (mov r8, r8)
   12528:	20002cfc 	.word	0x20002cfc

0001252c <__malloc_lock>:
   1252c:	4770      	bx	lr

0001252e <__malloc_unlock>:
   1252e:	4770      	bx	lr

00012530 <_Balloc>:
   12530:	b570      	push	{r4, r5, r6, lr}
   12532:	6a46      	ldr	r6, [r0, #36]	; 0x24
   12534:	0004      	movs	r4, r0
   12536:	000d      	movs	r5, r1
   12538:	2e00      	cmp	r6, #0
   1253a:	d107      	bne.n	1254c <_Balloc+0x1c>
   1253c:	2010      	movs	r0, #16
   1253e:	f7fe fa03 	bl	10948 <malloc>
   12542:	6260      	str	r0, [r4, #36]	; 0x24
   12544:	6046      	str	r6, [r0, #4]
   12546:	6086      	str	r6, [r0, #8]
   12548:	6006      	str	r6, [r0, #0]
   1254a:	60c6      	str	r6, [r0, #12]
   1254c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1254e:	68f3      	ldr	r3, [r6, #12]
   12550:	2b00      	cmp	r3, #0
   12552:	d013      	beq.n	1257c <_Balloc+0x4c>
   12554:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12556:	00aa      	lsls	r2, r5, #2
   12558:	68db      	ldr	r3, [r3, #12]
   1255a:	189b      	adds	r3, r3, r2
   1255c:	6818      	ldr	r0, [r3, #0]
   1255e:	2800      	cmp	r0, #0
   12560:	d118      	bne.n	12594 <_Balloc+0x64>
   12562:	2101      	movs	r1, #1
   12564:	000e      	movs	r6, r1
   12566:	40ae      	lsls	r6, r5
   12568:	1d72      	adds	r2, r6, #5
   1256a:	0092      	lsls	r2, r2, #2
   1256c:	0020      	movs	r0, r4
   1256e:	f000 fbd2 	bl	12d16 <_calloc_r>
   12572:	2800      	cmp	r0, #0
   12574:	d00c      	beq.n	12590 <_Balloc+0x60>
   12576:	6045      	str	r5, [r0, #4]
   12578:	6086      	str	r6, [r0, #8]
   1257a:	e00d      	b.n	12598 <_Balloc+0x68>
   1257c:	2221      	movs	r2, #33	; 0x21
   1257e:	2104      	movs	r1, #4
   12580:	0020      	movs	r0, r4
   12582:	f000 fbc8 	bl	12d16 <_calloc_r>
   12586:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12588:	60f0      	str	r0, [r6, #12]
   1258a:	68db      	ldr	r3, [r3, #12]
   1258c:	2b00      	cmp	r3, #0
   1258e:	d1e1      	bne.n	12554 <_Balloc+0x24>
   12590:	2000      	movs	r0, #0
   12592:	bd70      	pop	{r4, r5, r6, pc}
   12594:	6802      	ldr	r2, [r0, #0]
   12596:	601a      	str	r2, [r3, #0]
   12598:	2300      	movs	r3, #0
   1259a:	6103      	str	r3, [r0, #16]
   1259c:	60c3      	str	r3, [r0, #12]
   1259e:	e7f8      	b.n	12592 <_Balloc+0x62>

000125a0 <_Bfree>:
   125a0:	b570      	push	{r4, r5, r6, lr}
   125a2:	6a44      	ldr	r4, [r0, #36]	; 0x24
   125a4:	0006      	movs	r6, r0
   125a6:	000d      	movs	r5, r1
   125a8:	2c00      	cmp	r4, #0
   125aa:	d107      	bne.n	125bc <_Bfree+0x1c>
   125ac:	2010      	movs	r0, #16
   125ae:	f7fe f9cb 	bl	10948 <malloc>
   125b2:	6270      	str	r0, [r6, #36]	; 0x24
   125b4:	6044      	str	r4, [r0, #4]
   125b6:	6084      	str	r4, [r0, #8]
   125b8:	6004      	str	r4, [r0, #0]
   125ba:	60c4      	str	r4, [r0, #12]
   125bc:	2d00      	cmp	r5, #0
   125be:	d007      	beq.n	125d0 <_Bfree+0x30>
   125c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
   125c2:	686a      	ldr	r2, [r5, #4]
   125c4:	68db      	ldr	r3, [r3, #12]
   125c6:	0092      	lsls	r2, r2, #2
   125c8:	189b      	adds	r3, r3, r2
   125ca:	681a      	ldr	r2, [r3, #0]
   125cc:	602a      	str	r2, [r5, #0]
   125ce:	601d      	str	r5, [r3, #0]
   125d0:	bd70      	pop	{r4, r5, r6, pc}

000125d2 <__multadd>:
   125d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   125d4:	001e      	movs	r6, r3
   125d6:	2314      	movs	r3, #20
   125d8:	469c      	mov	ip, r3
   125da:	0007      	movs	r7, r0
   125dc:	000c      	movs	r4, r1
   125de:	2000      	movs	r0, #0
   125e0:	690d      	ldr	r5, [r1, #16]
   125e2:	448c      	add	ip, r1
   125e4:	4663      	mov	r3, ip
   125e6:	8819      	ldrh	r1, [r3, #0]
   125e8:	681b      	ldr	r3, [r3, #0]
   125ea:	4351      	muls	r1, r2
   125ec:	0c1b      	lsrs	r3, r3, #16
   125ee:	4353      	muls	r3, r2
   125f0:	1989      	adds	r1, r1, r6
   125f2:	0c0e      	lsrs	r6, r1, #16
   125f4:	199b      	adds	r3, r3, r6
   125f6:	b289      	uxth	r1, r1
   125f8:	0c1e      	lsrs	r6, r3, #16
   125fa:	041b      	lsls	r3, r3, #16
   125fc:	185b      	adds	r3, r3, r1
   125fe:	4661      	mov	r1, ip
   12600:	3001      	adds	r0, #1
   12602:	c108      	stmia	r1!, {r3}
   12604:	468c      	mov	ip, r1
   12606:	4285      	cmp	r5, r0
   12608:	dcec      	bgt.n	125e4 <__multadd+0x12>
   1260a:	2e00      	cmp	r6, #0
   1260c:	d01b      	beq.n	12646 <__multadd+0x74>
   1260e:	68a3      	ldr	r3, [r4, #8]
   12610:	429d      	cmp	r5, r3
   12612:	db12      	blt.n	1263a <__multadd+0x68>
   12614:	6863      	ldr	r3, [r4, #4]
   12616:	0038      	movs	r0, r7
   12618:	1c59      	adds	r1, r3, #1
   1261a:	f7ff ff89 	bl	12530 <_Balloc>
   1261e:	0021      	movs	r1, r4
   12620:	6923      	ldr	r3, [r4, #16]
   12622:	9001      	str	r0, [sp, #4]
   12624:	1c9a      	adds	r2, r3, #2
   12626:	0092      	lsls	r2, r2, #2
   12628:	310c      	adds	r1, #12
   1262a:	300c      	adds	r0, #12
   1262c:	f7fe f9cc 	bl	109c8 <memcpy>
   12630:	0021      	movs	r1, r4
   12632:	0038      	movs	r0, r7
   12634:	f7ff ffb4 	bl	125a0 <_Bfree>
   12638:	9c01      	ldr	r4, [sp, #4]
   1263a:	1d2b      	adds	r3, r5, #4
   1263c:	009b      	lsls	r3, r3, #2
   1263e:	18e3      	adds	r3, r4, r3
   12640:	3501      	adds	r5, #1
   12642:	605e      	str	r6, [r3, #4]
   12644:	6125      	str	r5, [r4, #16]
   12646:	0020      	movs	r0, r4
   12648:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0001264a <__s2b>:
   1264a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1264c:	0006      	movs	r6, r0
   1264e:	0018      	movs	r0, r3
   12650:	000c      	movs	r4, r1
   12652:	3008      	adds	r0, #8
   12654:	2109      	movs	r1, #9
   12656:	9301      	str	r3, [sp, #4]
   12658:	0015      	movs	r5, r2
   1265a:	f7fc f80d 	bl	e678 <__divsi3>
   1265e:	2301      	movs	r3, #1
   12660:	2100      	movs	r1, #0
   12662:	4283      	cmp	r3, r0
   12664:	db20      	blt.n	126a8 <__s2b+0x5e>
   12666:	0030      	movs	r0, r6
   12668:	f7ff ff62 	bl	12530 <_Balloc>
   1266c:	9b08      	ldr	r3, [sp, #32]
   1266e:	6143      	str	r3, [r0, #20]
   12670:	2301      	movs	r3, #1
   12672:	6103      	str	r3, [r0, #16]
   12674:	2d09      	cmp	r5, #9
   12676:	dd1a      	ble.n	126ae <__s2b+0x64>
   12678:	0023      	movs	r3, r4
   1267a:	3309      	adds	r3, #9
   1267c:	001f      	movs	r7, r3
   1267e:	9300      	str	r3, [sp, #0]
   12680:	1964      	adds	r4, r4, r5
   12682:	783b      	ldrb	r3, [r7, #0]
   12684:	0001      	movs	r1, r0
   12686:	3b30      	subs	r3, #48	; 0x30
   12688:	220a      	movs	r2, #10
   1268a:	0030      	movs	r0, r6
   1268c:	3701      	adds	r7, #1
   1268e:	f7ff ffa0 	bl	125d2 <__multadd>
   12692:	42a7      	cmp	r7, r4
   12694:	d1f5      	bne.n	12682 <__s2b+0x38>
   12696:	002c      	movs	r4, r5
   12698:	9b00      	ldr	r3, [sp, #0]
   1269a:	3c08      	subs	r4, #8
   1269c:	191c      	adds	r4, r3, r4
   1269e:	002f      	movs	r7, r5
   126a0:	9b01      	ldr	r3, [sp, #4]
   126a2:	429f      	cmp	r7, r3
   126a4:	db06      	blt.n	126b4 <__s2b+0x6a>
   126a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   126a8:	005b      	lsls	r3, r3, #1
   126aa:	3101      	adds	r1, #1
   126ac:	e7d9      	b.n	12662 <__s2b+0x18>
   126ae:	340a      	adds	r4, #10
   126b0:	2509      	movs	r5, #9
   126b2:	e7f4      	b.n	1269e <__s2b+0x54>
   126b4:	1b63      	subs	r3, r4, r5
   126b6:	5ddb      	ldrb	r3, [r3, r7]
   126b8:	0001      	movs	r1, r0
   126ba:	3b30      	subs	r3, #48	; 0x30
   126bc:	220a      	movs	r2, #10
   126be:	0030      	movs	r0, r6
   126c0:	f7ff ff87 	bl	125d2 <__multadd>
   126c4:	3701      	adds	r7, #1
   126c6:	e7eb      	b.n	126a0 <__s2b+0x56>

000126c8 <__hi0bits>:
   126c8:	0003      	movs	r3, r0
   126ca:	0c02      	lsrs	r2, r0, #16
   126cc:	2000      	movs	r0, #0
   126ce:	4282      	cmp	r2, r0
   126d0:	d101      	bne.n	126d6 <__hi0bits+0xe>
   126d2:	041b      	lsls	r3, r3, #16
   126d4:	3010      	adds	r0, #16
   126d6:	0e1a      	lsrs	r2, r3, #24
   126d8:	d101      	bne.n	126de <__hi0bits+0x16>
   126da:	3008      	adds	r0, #8
   126dc:	021b      	lsls	r3, r3, #8
   126de:	0f1a      	lsrs	r2, r3, #28
   126e0:	d101      	bne.n	126e6 <__hi0bits+0x1e>
   126e2:	3004      	adds	r0, #4
   126e4:	011b      	lsls	r3, r3, #4
   126e6:	0f9a      	lsrs	r2, r3, #30
   126e8:	d101      	bne.n	126ee <__hi0bits+0x26>
   126ea:	3002      	adds	r0, #2
   126ec:	009b      	lsls	r3, r3, #2
   126ee:	2b00      	cmp	r3, #0
   126f0:	db03      	blt.n	126fa <__hi0bits+0x32>
   126f2:	3001      	adds	r0, #1
   126f4:	005b      	lsls	r3, r3, #1
   126f6:	d400      	bmi.n	126fa <__hi0bits+0x32>
   126f8:	2020      	movs	r0, #32
   126fa:	4770      	bx	lr

000126fc <__lo0bits>:
   126fc:	2207      	movs	r2, #7
   126fe:	6803      	ldr	r3, [r0, #0]
   12700:	b510      	push	{r4, lr}
   12702:	0001      	movs	r1, r0
   12704:	401a      	ands	r2, r3
   12706:	d00d      	beq.n	12724 <__lo0bits+0x28>
   12708:	2401      	movs	r4, #1
   1270a:	2000      	movs	r0, #0
   1270c:	4223      	tst	r3, r4
   1270e:	d105      	bne.n	1271c <__lo0bits+0x20>
   12710:	3002      	adds	r0, #2
   12712:	4203      	tst	r3, r0
   12714:	d003      	beq.n	1271e <__lo0bits+0x22>
   12716:	40e3      	lsrs	r3, r4
   12718:	0020      	movs	r0, r4
   1271a:	600b      	str	r3, [r1, #0]
   1271c:	bd10      	pop	{r4, pc}
   1271e:	089b      	lsrs	r3, r3, #2
   12720:	600b      	str	r3, [r1, #0]
   12722:	e7fb      	b.n	1271c <__lo0bits+0x20>
   12724:	b29c      	uxth	r4, r3
   12726:	0010      	movs	r0, r2
   12728:	2c00      	cmp	r4, #0
   1272a:	d101      	bne.n	12730 <__lo0bits+0x34>
   1272c:	2010      	movs	r0, #16
   1272e:	0c1b      	lsrs	r3, r3, #16
   12730:	b2da      	uxtb	r2, r3
   12732:	2a00      	cmp	r2, #0
   12734:	d101      	bne.n	1273a <__lo0bits+0x3e>
   12736:	3008      	adds	r0, #8
   12738:	0a1b      	lsrs	r3, r3, #8
   1273a:	071a      	lsls	r2, r3, #28
   1273c:	d101      	bne.n	12742 <__lo0bits+0x46>
   1273e:	3004      	adds	r0, #4
   12740:	091b      	lsrs	r3, r3, #4
   12742:	079a      	lsls	r2, r3, #30
   12744:	d101      	bne.n	1274a <__lo0bits+0x4e>
   12746:	3002      	adds	r0, #2
   12748:	089b      	lsrs	r3, r3, #2
   1274a:	07da      	lsls	r2, r3, #31
   1274c:	d4e8      	bmi.n	12720 <__lo0bits+0x24>
   1274e:	085b      	lsrs	r3, r3, #1
   12750:	d001      	beq.n	12756 <__lo0bits+0x5a>
   12752:	3001      	adds	r0, #1
   12754:	e7e4      	b.n	12720 <__lo0bits+0x24>
   12756:	2020      	movs	r0, #32
   12758:	e7e0      	b.n	1271c <__lo0bits+0x20>

0001275a <__i2b>:
   1275a:	b510      	push	{r4, lr}
   1275c:	000c      	movs	r4, r1
   1275e:	2101      	movs	r1, #1
   12760:	f7ff fee6 	bl	12530 <_Balloc>
   12764:	2301      	movs	r3, #1
   12766:	6144      	str	r4, [r0, #20]
   12768:	6103      	str	r3, [r0, #16]
   1276a:	bd10      	pop	{r4, pc}

0001276c <__multiply>:
   1276c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1276e:	690b      	ldr	r3, [r1, #16]
   12770:	0015      	movs	r5, r2
   12772:	6912      	ldr	r2, [r2, #16]
   12774:	b089      	sub	sp, #36	; 0x24
   12776:	000c      	movs	r4, r1
   12778:	4293      	cmp	r3, r2
   1277a:	da01      	bge.n	12780 <__multiply+0x14>
   1277c:	002c      	movs	r4, r5
   1277e:	000d      	movs	r5, r1
   12780:	6927      	ldr	r7, [r4, #16]
   12782:	692e      	ldr	r6, [r5, #16]
   12784:	68a2      	ldr	r2, [r4, #8]
   12786:	19bb      	adds	r3, r7, r6
   12788:	6861      	ldr	r1, [r4, #4]
   1278a:	9301      	str	r3, [sp, #4]
   1278c:	4293      	cmp	r3, r2
   1278e:	dd00      	ble.n	12792 <__multiply+0x26>
   12790:	3101      	adds	r1, #1
   12792:	f7ff fecd 	bl	12530 <_Balloc>
   12796:	0003      	movs	r3, r0
   12798:	3314      	adds	r3, #20
   1279a:	9300      	str	r3, [sp, #0]
   1279c:	9a00      	ldr	r2, [sp, #0]
   1279e:	19bb      	adds	r3, r7, r6
   127a0:	4694      	mov	ip, r2
   127a2:	009b      	lsls	r3, r3, #2
   127a4:	449c      	add	ip, r3
   127a6:	0013      	movs	r3, r2
   127a8:	2200      	movs	r2, #0
   127aa:	9004      	str	r0, [sp, #16]
   127ac:	4563      	cmp	r3, ip
   127ae:	d31c      	bcc.n	127ea <__multiply+0x7e>
   127b0:	002a      	movs	r2, r5
   127b2:	3414      	adds	r4, #20
   127b4:	00bf      	lsls	r7, r7, #2
   127b6:	19e3      	adds	r3, r4, r7
   127b8:	3214      	adds	r2, #20
   127ba:	00b6      	lsls	r6, r6, #2
   127bc:	9305      	str	r3, [sp, #20]
   127be:	1993      	adds	r3, r2, r6
   127c0:	9402      	str	r4, [sp, #8]
   127c2:	9306      	str	r3, [sp, #24]
   127c4:	9b06      	ldr	r3, [sp, #24]
   127c6:	429a      	cmp	r2, r3
   127c8:	d311      	bcc.n	127ee <__multiply+0x82>
   127ca:	9b01      	ldr	r3, [sp, #4]
   127cc:	2b00      	cmp	r3, #0
   127ce:	dd06      	ble.n	127de <__multiply+0x72>
   127d0:	2304      	movs	r3, #4
   127d2:	425b      	negs	r3, r3
   127d4:	449c      	add	ip, r3
   127d6:	4663      	mov	r3, ip
   127d8:	681b      	ldr	r3, [r3, #0]
   127da:	2b00      	cmp	r3, #0
   127dc:	d051      	beq.n	12882 <__multiply+0x116>
   127de:	9b04      	ldr	r3, [sp, #16]
   127e0:	9a01      	ldr	r2, [sp, #4]
   127e2:	0018      	movs	r0, r3
   127e4:	611a      	str	r2, [r3, #16]
   127e6:	b009      	add	sp, #36	; 0x24
   127e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   127ea:	c304      	stmia	r3!, {r2}
   127ec:	e7de      	b.n	127ac <__multiply+0x40>
   127ee:	8814      	ldrh	r4, [r2, #0]
   127f0:	2c00      	cmp	r4, #0
   127f2:	d01e      	beq.n	12832 <__multiply+0xc6>
   127f4:	2600      	movs	r6, #0
   127f6:	9d00      	ldr	r5, [sp, #0]
   127f8:	9f02      	ldr	r7, [sp, #8]
   127fa:	cf01      	ldmia	r7!, {r0}
   127fc:	9507      	str	r5, [sp, #28]
   127fe:	cd08      	ldmia	r5!, {r3}
   12800:	9303      	str	r3, [sp, #12]
   12802:	b283      	uxth	r3, r0
   12804:	4363      	muls	r3, r4
   12806:	0019      	movs	r1, r3
   12808:	466b      	mov	r3, sp
   1280a:	0c00      	lsrs	r0, r0, #16
   1280c:	899b      	ldrh	r3, [r3, #12]
   1280e:	4360      	muls	r0, r4
   12810:	18cb      	adds	r3, r1, r3
   12812:	9903      	ldr	r1, [sp, #12]
   12814:	199b      	adds	r3, r3, r6
   12816:	0c09      	lsrs	r1, r1, #16
   12818:	1841      	adds	r1, r0, r1
   1281a:	0c18      	lsrs	r0, r3, #16
   1281c:	1809      	adds	r1, r1, r0
   1281e:	0c0e      	lsrs	r6, r1, #16
   12820:	b29b      	uxth	r3, r3
   12822:	0409      	lsls	r1, r1, #16
   12824:	430b      	orrs	r3, r1
   12826:	9907      	ldr	r1, [sp, #28]
   12828:	600b      	str	r3, [r1, #0]
   1282a:	9b05      	ldr	r3, [sp, #20]
   1282c:	42bb      	cmp	r3, r7
   1282e:	d8e4      	bhi.n	127fa <__multiply+0x8e>
   12830:	602e      	str	r6, [r5, #0]
   12832:	6813      	ldr	r3, [r2, #0]
   12834:	0c1b      	lsrs	r3, r3, #16
   12836:	9303      	str	r3, [sp, #12]
   12838:	d01e      	beq.n	12878 <__multiply+0x10c>
   1283a:	2600      	movs	r6, #0
   1283c:	9b00      	ldr	r3, [sp, #0]
   1283e:	9c02      	ldr	r4, [sp, #8]
   12840:	681b      	ldr	r3, [r3, #0]
   12842:	9800      	ldr	r0, [sp, #0]
   12844:	0007      	movs	r7, r0
   12846:	8821      	ldrh	r1, [r4, #0]
   12848:	9d03      	ldr	r5, [sp, #12]
   1284a:	b29b      	uxth	r3, r3
   1284c:	4369      	muls	r1, r5
   1284e:	c820      	ldmia	r0!, {r5}
   12850:	0c2d      	lsrs	r5, r5, #16
   12852:	1949      	adds	r1, r1, r5
   12854:	198e      	adds	r6, r1, r6
   12856:	0431      	lsls	r1, r6, #16
   12858:	430b      	orrs	r3, r1
   1285a:	603b      	str	r3, [r7, #0]
   1285c:	cc08      	ldmia	r4!, {r3}
   1285e:	9903      	ldr	r1, [sp, #12]
   12860:	0c1b      	lsrs	r3, r3, #16
   12862:	434b      	muls	r3, r1
   12864:	6879      	ldr	r1, [r7, #4]
   12866:	0c36      	lsrs	r6, r6, #16
   12868:	b289      	uxth	r1, r1
   1286a:	185b      	adds	r3, r3, r1
   1286c:	9905      	ldr	r1, [sp, #20]
   1286e:	199b      	adds	r3, r3, r6
   12870:	0c1e      	lsrs	r6, r3, #16
   12872:	42a1      	cmp	r1, r4
   12874:	d8e6      	bhi.n	12844 <__multiply+0xd8>
   12876:	6003      	str	r3, [r0, #0]
   12878:	9b00      	ldr	r3, [sp, #0]
   1287a:	3204      	adds	r2, #4
   1287c:	3304      	adds	r3, #4
   1287e:	9300      	str	r3, [sp, #0]
   12880:	e7a0      	b.n	127c4 <__multiply+0x58>
   12882:	9b01      	ldr	r3, [sp, #4]
   12884:	3b01      	subs	r3, #1
   12886:	9301      	str	r3, [sp, #4]
   12888:	e79f      	b.n	127ca <__multiply+0x5e>
	...

0001288c <__pow5mult>:
   1288c:	2303      	movs	r3, #3
   1288e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12890:	4013      	ands	r3, r2
   12892:	0005      	movs	r5, r0
   12894:	000e      	movs	r6, r1
   12896:	0014      	movs	r4, r2
   12898:	2b00      	cmp	r3, #0
   1289a:	d008      	beq.n	128ae <__pow5mult+0x22>
   1289c:	4922      	ldr	r1, [pc, #136]	; (12928 <__pow5mult+0x9c>)
   1289e:	3b01      	subs	r3, #1
   128a0:	009a      	lsls	r2, r3, #2
   128a2:	5852      	ldr	r2, [r2, r1]
   128a4:	2300      	movs	r3, #0
   128a6:	0031      	movs	r1, r6
   128a8:	f7ff fe93 	bl	125d2 <__multadd>
   128ac:	0006      	movs	r6, r0
   128ae:	10a3      	asrs	r3, r4, #2
   128b0:	9301      	str	r3, [sp, #4]
   128b2:	d036      	beq.n	12922 <__pow5mult+0x96>
   128b4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   128b6:	2c00      	cmp	r4, #0
   128b8:	d107      	bne.n	128ca <__pow5mult+0x3e>
   128ba:	2010      	movs	r0, #16
   128bc:	f7fe f844 	bl	10948 <malloc>
   128c0:	6268      	str	r0, [r5, #36]	; 0x24
   128c2:	6044      	str	r4, [r0, #4]
   128c4:	6084      	str	r4, [r0, #8]
   128c6:	6004      	str	r4, [r0, #0]
   128c8:	60c4      	str	r4, [r0, #12]
   128ca:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   128cc:	68bc      	ldr	r4, [r7, #8]
   128ce:	2c00      	cmp	r4, #0
   128d0:	d107      	bne.n	128e2 <__pow5mult+0x56>
   128d2:	4916      	ldr	r1, [pc, #88]	; (1292c <__pow5mult+0xa0>)
   128d4:	0028      	movs	r0, r5
   128d6:	f7ff ff40 	bl	1275a <__i2b>
   128da:	2300      	movs	r3, #0
   128dc:	0004      	movs	r4, r0
   128de:	60b8      	str	r0, [r7, #8]
   128e0:	6003      	str	r3, [r0, #0]
   128e2:	2201      	movs	r2, #1
   128e4:	9b01      	ldr	r3, [sp, #4]
   128e6:	4213      	tst	r3, r2
   128e8:	d00a      	beq.n	12900 <__pow5mult+0x74>
   128ea:	0031      	movs	r1, r6
   128ec:	0022      	movs	r2, r4
   128ee:	0028      	movs	r0, r5
   128f0:	f7ff ff3c 	bl	1276c <__multiply>
   128f4:	0007      	movs	r7, r0
   128f6:	0031      	movs	r1, r6
   128f8:	0028      	movs	r0, r5
   128fa:	f7ff fe51 	bl	125a0 <_Bfree>
   128fe:	003e      	movs	r6, r7
   12900:	9b01      	ldr	r3, [sp, #4]
   12902:	105b      	asrs	r3, r3, #1
   12904:	9301      	str	r3, [sp, #4]
   12906:	d00c      	beq.n	12922 <__pow5mult+0x96>
   12908:	6820      	ldr	r0, [r4, #0]
   1290a:	2800      	cmp	r0, #0
   1290c:	d107      	bne.n	1291e <__pow5mult+0x92>
   1290e:	0022      	movs	r2, r4
   12910:	0021      	movs	r1, r4
   12912:	0028      	movs	r0, r5
   12914:	f7ff ff2a 	bl	1276c <__multiply>
   12918:	2300      	movs	r3, #0
   1291a:	6020      	str	r0, [r4, #0]
   1291c:	6003      	str	r3, [r0, #0]
   1291e:	0004      	movs	r4, r0
   12920:	e7df      	b.n	128e2 <__pow5mult+0x56>
   12922:	0030      	movs	r0, r6
   12924:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12926:	46c0      	nop			; (mov r8, r8)
   12928:	00016518 	.word	0x00016518
   1292c:	00000271 	.word	0x00000271

00012930 <__lshift>:
   12930:	b5f0      	push	{r4, r5, r6, r7, lr}
   12932:	000d      	movs	r5, r1
   12934:	0017      	movs	r7, r2
   12936:	692b      	ldr	r3, [r5, #16]
   12938:	1154      	asrs	r4, r2, #5
   1293a:	b085      	sub	sp, #20
   1293c:	18e3      	adds	r3, r4, r3
   1293e:	9302      	str	r3, [sp, #8]
   12940:	3301      	adds	r3, #1
   12942:	9301      	str	r3, [sp, #4]
   12944:	6849      	ldr	r1, [r1, #4]
   12946:	68ab      	ldr	r3, [r5, #8]
   12948:	9003      	str	r0, [sp, #12]
   1294a:	9a01      	ldr	r2, [sp, #4]
   1294c:	4293      	cmp	r3, r2
   1294e:	db34      	blt.n	129ba <__lshift+0x8a>
   12950:	9803      	ldr	r0, [sp, #12]
   12952:	f7ff fded 	bl	12530 <_Balloc>
   12956:	2300      	movs	r3, #0
   12958:	0002      	movs	r2, r0
   1295a:	0006      	movs	r6, r0
   1295c:	0019      	movs	r1, r3
   1295e:	3214      	adds	r2, #20
   12960:	42a3      	cmp	r3, r4
   12962:	db2d      	blt.n	129c0 <__lshift+0x90>
   12964:	43e3      	mvns	r3, r4
   12966:	17db      	asrs	r3, r3, #31
   12968:	401c      	ands	r4, r3
   1296a:	002b      	movs	r3, r5
   1296c:	211f      	movs	r1, #31
   1296e:	00a4      	lsls	r4, r4, #2
   12970:	1914      	adds	r4, r2, r4
   12972:	692a      	ldr	r2, [r5, #16]
   12974:	3314      	adds	r3, #20
   12976:	0092      	lsls	r2, r2, #2
   12978:	189a      	adds	r2, r3, r2
   1297a:	400f      	ands	r7, r1
   1297c:	d024      	beq.n	129c8 <__lshift+0x98>
   1297e:	3101      	adds	r1, #1
   12980:	1bc9      	subs	r1, r1, r7
   12982:	468c      	mov	ip, r1
   12984:	2100      	movs	r1, #0
   12986:	6818      	ldr	r0, [r3, #0]
   12988:	40b8      	lsls	r0, r7
   1298a:	4301      	orrs	r1, r0
   1298c:	4660      	mov	r0, ip
   1298e:	6021      	str	r1, [r4, #0]
   12990:	cb02      	ldmia	r3!, {r1}
   12992:	3404      	adds	r4, #4
   12994:	40c1      	lsrs	r1, r0
   12996:	429a      	cmp	r2, r3
   12998:	d8f5      	bhi.n	12986 <__lshift+0x56>
   1299a:	6021      	str	r1, [r4, #0]
   1299c:	2900      	cmp	r1, #0
   1299e:	d002      	beq.n	129a6 <__lshift+0x76>
   129a0:	9b02      	ldr	r3, [sp, #8]
   129a2:	3302      	adds	r3, #2
   129a4:	9301      	str	r3, [sp, #4]
   129a6:	9b01      	ldr	r3, [sp, #4]
   129a8:	9803      	ldr	r0, [sp, #12]
   129aa:	3b01      	subs	r3, #1
   129ac:	6133      	str	r3, [r6, #16]
   129ae:	0029      	movs	r1, r5
   129b0:	f7ff fdf6 	bl	125a0 <_Bfree>
   129b4:	0030      	movs	r0, r6
   129b6:	b005      	add	sp, #20
   129b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129ba:	3101      	adds	r1, #1
   129bc:	005b      	lsls	r3, r3, #1
   129be:	e7c4      	b.n	1294a <__lshift+0x1a>
   129c0:	0098      	lsls	r0, r3, #2
   129c2:	5011      	str	r1, [r2, r0]
   129c4:	3301      	adds	r3, #1
   129c6:	e7cb      	b.n	12960 <__lshift+0x30>
   129c8:	cb02      	ldmia	r3!, {r1}
   129ca:	c402      	stmia	r4!, {r1}
   129cc:	429a      	cmp	r2, r3
   129ce:	d8fb      	bhi.n	129c8 <__lshift+0x98>
   129d0:	e7e9      	b.n	129a6 <__lshift+0x76>

000129d2 <__mcmp>:
   129d2:	690a      	ldr	r2, [r1, #16]
   129d4:	6903      	ldr	r3, [r0, #16]
   129d6:	b530      	push	{r4, r5, lr}
   129d8:	1a9b      	subs	r3, r3, r2
   129da:	d10e      	bne.n	129fa <__mcmp+0x28>
   129dc:	0092      	lsls	r2, r2, #2
   129de:	3014      	adds	r0, #20
   129e0:	3114      	adds	r1, #20
   129e2:	1884      	adds	r4, r0, r2
   129e4:	1889      	adds	r1, r1, r2
   129e6:	3c04      	subs	r4, #4
   129e8:	3904      	subs	r1, #4
   129ea:	6822      	ldr	r2, [r4, #0]
   129ec:	680d      	ldr	r5, [r1, #0]
   129ee:	42aa      	cmp	r2, r5
   129f0:	d005      	beq.n	129fe <__mcmp+0x2c>
   129f2:	42aa      	cmp	r2, r5
   129f4:	4192      	sbcs	r2, r2
   129f6:	2301      	movs	r3, #1
   129f8:	4313      	orrs	r3, r2
   129fa:	0018      	movs	r0, r3
   129fc:	bd30      	pop	{r4, r5, pc}
   129fe:	42a0      	cmp	r0, r4
   12a00:	d3f1      	bcc.n	129e6 <__mcmp+0x14>
   12a02:	e7fa      	b.n	129fa <__mcmp+0x28>

00012a04 <__mdiff>:
   12a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a06:	000d      	movs	r5, r1
   12a08:	b085      	sub	sp, #20
   12a0a:	0007      	movs	r7, r0
   12a0c:	0011      	movs	r1, r2
   12a0e:	0028      	movs	r0, r5
   12a10:	0014      	movs	r4, r2
   12a12:	f7ff ffde 	bl	129d2 <__mcmp>
   12a16:	1e06      	subs	r6, r0, #0
   12a18:	d108      	bne.n	12a2c <__mdiff+0x28>
   12a1a:	0001      	movs	r1, r0
   12a1c:	0038      	movs	r0, r7
   12a1e:	f7ff fd87 	bl	12530 <_Balloc>
   12a22:	2301      	movs	r3, #1
   12a24:	6146      	str	r6, [r0, #20]
   12a26:	6103      	str	r3, [r0, #16]
   12a28:	b005      	add	sp, #20
   12a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a2c:	2301      	movs	r3, #1
   12a2e:	9301      	str	r3, [sp, #4]
   12a30:	2800      	cmp	r0, #0
   12a32:	db04      	blt.n	12a3e <__mdiff+0x3a>
   12a34:	0023      	movs	r3, r4
   12a36:	002c      	movs	r4, r5
   12a38:	001d      	movs	r5, r3
   12a3a:	2300      	movs	r3, #0
   12a3c:	9301      	str	r3, [sp, #4]
   12a3e:	6861      	ldr	r1, [r4, #4]
   12a40:	0038      	movs	r0, r7
   12a42:	f7ff fd75 	bl	12530 <_Balloc>
   12a46:	002f      	movs	r7, r5
   12a48:	2200      	movs	r2, #0
   12a4a:	9b01      	ldr	r3, [sp, #4]
   12a4c:	6926      	ldr	r6, [r4, #16]
   12a4e:	60c3      	str	r3, [r0, #12]
   12a50:	3414      	adds	r4, #20
   12a52:	00b3      	lsls	r3, r6, #2
   12a54:	18e3      	adds	r3, r4, r3
   12a56:	9302      	str	r3, [sp, #8]
   12a58:	692b      	ldr	r3, [r5, #16]
   12a5a:	3714      	adds	r7, #20
   12a5c:	009b      	lsls	r3, r3, #2
   12a5e:	18fb      	adds	r3, r7, r3
   12a60:	9303      	str	r3, [sp, #12]
   12a62:	0003      	movs	r3, r0
   12a64:	4694      	mov	ip, r2
   12a66:	3314      	adds	r3, #20
   12a68:	cc20      	ldmia	r4!, {r5}
   12a6a:	cf04      	ldmia	r7!, {r2}
   12a6c:	9201      	str	r2, [sp, #4]
   12a6e:	b2aa      	uxth	r2, r5
   12a70:	4494      	add	ip, r2
   12a72:	466a      	mov	r2, sp
   12a74:	4661      	mov	r1, ip
   12a76:	8892      	ldrh	r2, [r2, #4]
   12a78:	0c2d      	lsrs	r5, r5, #16
   12a7a:	1a8a      	subs	r2, r1, r2
   12a7c:	9901      	ldr	r1, [sp, #4]
   12a7e:	0c09      	lsrs	r1, r1, #16
   12a80:	1a69      	subs	r1, r5, r1
   12a82:	1415      	asrs	r5, r2, #16
   12a84:	1949      	adds	r1, r1, r5
   12a86:	140d      	asrs	r5, r1, #16
   12a88:	b292      	uxth	r2, r2
   12a8a:	0409      	lsls	r1, r1, #16
   12a8c:	430a      	orrs	r2, r1
   12a8e:	601a      	str	r2, [r3, #0]
   12a90:	9a03      	ldr	r2, [sp, #12]
   12a92:	46ac      	mov	ip, r5
   12a94:	3304      	adds	r3, #4
   12a96:	42ba      	cmp	r2, r7
   12a98:	d8e6      	bhi.n	12a68 <__mdiff+0x64>
   12a9a:	9902      	ldr	r1, [sp, #8]
   12a9c:	001a      	movs	r2, r3
   12a9e:	428c      	cmp	r4, r1
   12aa0:	d305      	bcc.n	12aae <__mdiff+0xaa>
   12aa2:	3a04      	subs	r2, #4
   12aa4:	6813      	ldr	r3, [r2, #0]
   12aa6:	2b00      	cmp	r3, #0
   12aa8:	d00e      	beq.n	12ac8 <__mdiff+0xc4>
   12aaa:	6106      	str	r6, [r0, #16]
   12aac:	e7bc      	b.n	12a28 <__mdiff+0x24>
   12aae:	cc04      	ldmia	r4!, {r2}
   12ab0:	b291      	uxth	r1, r2
   12ab2:	4461      	add	r1, ip
   12ab4:	140d      	asrs	r5, r1, #16
   12ab6:	0c12      	lsrs	r2, r2, #16
   12ab8:	1952      	adds	r2, r2, r5
   12aba:	1415      	asrs	r5, r2, #16
   12abc:	b289      	uxth	r1, r1
   12abe:	0412      	lsls	r2, r2, #16
   12ac0:	430a      	orrs	r2, r1
   12ac2:	46ac      	mov	ip, r5
   12ac4:	c304      	stmia	r3!, {r2}
   12ac6:	e7e8      	b.n	12a9a <__mdiff+0x96>
   12ac8:	3e01      	subs	r6, #1
   12aca:	e7ea      	b.n	12aa2 <__mdiff+0x9e>

00012acc <__ulp>:
   12acc:	000b      	movs	r3, r1
   12ace:	4910      	ldr	r1, [pc, #64]	; (12b10 <__ulp+0x44>)
   12ad0:	b510      	push	{r4, lr}
   12ad2:	4019      	ands	r1, r3
   12ad4:	4b0f      	ldr	r3, [pc, #60]	; (12b14 <__ulp+0x48>)
   12ad6:	18c9      	adds	r1, r1, r3
   12ad8:	2900      	cmp	r1, #0
   12ada:	dd04      	ble.n	12ae6 <__ulp+0x1a>
   12adc:	2200      	movs	r2, #0
   12ade:	000b      	movs	r3, r1
   12ae0:	0010      	movs	r0, r2
   12ae2:	0019      	movs	r1, r3
   12ae4:	bd10      	pop	{r4, pc}
   12ae6:	4249      	negs	r1, r1
   12ae8:	1509      	asrs	r1, r1, #20
   12aea:	2200      	movs	r2, #0
   12aec:	2300      	movs	r3, #0
   12aee:	2913      	cmp	r1, #19
   12af0:	dc04      	bgt.n	12afc <__ulp+0x30>
   12af2:	2080      	movs	r0, #128	; 0x80
   12af4:	0300      	lsls	r0, r0, #12
   12af6:	4108      	asrs	r0, r1
   12af8:	0003      	movs	r3, r0
   12afa:	e7f1      	b.n	12ae0 <__ulp+0x14>
   12afc:	3914      	subs	r1, #20
   12afe:	2001      	movs	r0, #1
   12b00:	291e      	cmp	r1, #30
   12b02:	dc02      	bgt.n	12b0a <__ulp+0x3e>
   12b04:	241f      	movs	r4, #31
   12b06:	1a61      	subs	r1, r4, r1
   12b08:	4088      	lsls	r0, r1
   12b0a:	0002      	movs	r2, r0
   12b0c:	e7e8      	b.n	12ae0 <__ulp+0x14>
   12b0e:	46c0      	nop			; (mov r8, r8)
   12b10:	7ff00000 	.word	0x7ff00000
   12b14:	fcc00000 	.word	0xfcc00000

00012b18 <__b2d>:
   12b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12b1a:	0006      	movs	r6, r0
   12b1c:	6903      	ldr	r3, [r0, #16]
   12b1e:	3614      	adds	r6, #20
   12b20:	009b      	lsls	r3, r3, #2
   12b22:	18f3      	adds	r3, r6, r3
   12b24:	1f1d      	subs	r5, r3, #4
   12b26:	682c      	ldr	r4, [r5, #0]
   12b28:	000f      	movs	r7, r1
   12b2a:	0020      	movs	r0, r4
   12b2c:	9301      	str	r3, [sp, #4]
   12b2e:	f7ff fdcb 	bl	126c8 <__hi0bits>
   12b32:	2320      	movs	r3, #32
   12b34:	1a1b      	subs	r3, r3, r0
   12b36:	603b      	str	r3, [r7, #0]
   12b38:	491c      	ldr	r1, [pc, #112]	; (12bac <__b2d+0x94>)
   12b3a:	280a      	cmp	r0, #10
   12b3c:	dc16      	bgt.n	12b6c <__b2d+0x54>
   12b3e:	230b      	movs	r3, #11
   12b40:	0027      	movs	r7, r4
   12b42:	1a1b      	subs	r3, r3, r0
   12b44:	40df      	lsrs	r7, r3
   12b46:	4339      	orrs	r1, r7
   12b48:	469c      	mov	ip, r3
   12b4a:	000b      	movs	r3, r1
   12b4c:	2100      	movs	r1, #0
   12b4e:	42ae      	cmp	r6, r5
   12b50:	d202      	bcs.n	12b58 <__b2d+0x40>
   12b52:	9901      	ldr	r1, [sp, #4]
   12b54:	3908      	subs	r1, #8
   12b56:	6809      	ldr	r1, [r1, #0]
   12b58:	3015      	adds	r0, #21
   12b5a:	4084      	lsls	r4, r0
   12b5c:	4660      	mov	r0, ip
   12b5e:	40c1      	lsrs	r1, r0
   12b60:	430c      	orrs	r4, r1
   12b62:	0022      	movs	r2, r4
   12b64:	0010      	movs	r0, r2
   12b66:	0019      	movs	r1, r3
   12b68:	b003      	add	sp, #12
   12b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b6c:	2700      	movs	r7, #0
   12b6e:	42ae      	cmp	r6, r5
   12b70:	d202      	bcs.n	12b78 <__b2d+0x60>
   12b72:	9d01      	ldr	r5, [sp, #4]
   12b74:	3d08      	subs	r5, #8
   12b76:	682f      	ldr	r7, [r5, #0]
   12b78:	380b      	subs	r0, #11
   12b7a:	4684      	mov	ip, r0
   12b7c:	1e03      	subs	r3, r0, #0
   12b7e:	d012      	beq.n	12ba6 <__b2d+0x8e>
   12b80:	409c      	lsls	r4, r3
   12b82:	2020      	movs	r0, #32
   12b84:	4321      	orrs	r1, r4
   12b86:	003c      	movs	r4, r7
   12b88:	1ac0      	subs	r0, r0, r3
   12b8a:	40c4      	lsrs	r4, r0
   12b8c:	4321      	orrs	r1, r4
   12b8e:	000b      	movs	r3, r1
   12b90:	2100      	movs	r1, #0
   12b92:	42b5      	cmp	r5, r6
   12b94:	d901      	bls.n	12b9a <__b2d+0x82>
   12b96:	3d04      	subs	r5, #4
   12b98:	6829      	ldr	r1, [r5, #0]
   12b9a:	4664      	mov	r4, ip
   12b9c:	40c1      	lsrs	r1, r0
   12b9e:	40a7      	lsls	r7, r4
   12ba0:	430f      	orrs	r7, r1
   12ba2:	003a      	movs	r2, r7
   12ba4:	e7de      	b.n	12b64 <__b2d+0x4c>
   12ba6:	4321      	orrs	r1, r4
   12ba8:	000b      	movs	r3, r1
   12baa:	e7fa      	b.n	12ba2 <__b2d+0x8a>
   12bac:	3ff00000 	.word	0x3ff00000

00012bb0 <__d2b>:
   12bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12bb2:	001d      	movs	r5, r3
   12bb4:	2101      	movs	r1, #1
   12bb6:	9f08      	ldr	r7, [sp, #32]
   12bb8:	0014      	movs	r4, r2
   12bba:	f7ff fcb9 	bl	12530 <_Balloc>
   12bbe:	032b      	lsls	r3, r5, #12
   12bc0:	006d      	lsls	r5, r5, #1
   12bc2:	0006      	movs	r6, r0
   12bc4:	0b1b      	lsrs	r3, r3, #12
   12bc6:	0d6d      	lsrs	r5, r5, #21
   12bc8:	d124      	bne.n	12c14 <__d2b+0x64>
   12bca:	9301      	str	r3, [sp, #4]
   12bcc:	2c00      	cmp	r4, #0
   12bce:	d027      	beq.n	12c20 <__d2b+0x70>
   12bd0:	4668      	mov	r0, sp
   12bd2:	9400      	str	r4, [sp, #0]
   12bd4:	f7ff fd92 	bl	126fc <__lo0bits>
   12bd8:	9c00      	ldr	r4, [sp, #0]
   12bda:	2800      	cmp	r0, #0
   12bdc:	d01e      	beq.n	12c1c <__d2b+0x6c>
   12bde:	9b01      	ldr	r3, [sp, #4]
   12be0:	2120      	movs	r1, #32
   12be2:	001a      	movs	r2, r3
   12be4:	1a09      	subs	r1, r1, r0
   12be6:	408a      	lsls	r2, r1
   12be8:	40c3      	lsrs	r3, r0
   12bea:	4322      	orrs	r2, r4
   12bec:	6172      	str	r2, [r6, #20]
   12bee:	9301      	str	r3, [sp, #4]
   12bf0:	9c01      	ldr	r4, [sp, #4]
   12bf2:	61b4      	str	r4, [r6, #24]
   12bf4:	1e63      	subs	r3, r4, #1
   12bf6:	419c      	sbcs	r4, r3
   12bf8:	3401      	adds	r4, #1
   12bfa:	6134      	str	r4, [r6, #16]
   12bfc:	2d00      	cmp	r5, #0
   12bfe:	d018      	beq.n	12c32 <__d2b+0x82>
   12c00:	4b12      	ldr	r3, [pc, #72]	; (12c4c <__d2b+0x9c>)
   12c02:	18ed      	adds	r5, r5, r3
   12c04:	2335      	movs	r3, #53	; 0x35
   12c06:	182d      	adds	r5, r5, r0
   12c08:	603d      	str	r5, [r7, #0]
   12c0a:	1a18      	subs	r0, r3, r0
   12c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12c0e:	6018      	str	r0, [r3, #0]
   12c10:	0030      	movs	r0, r6
   12c12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12c14:	2280      	movs	r2, #128	; 0x80
   12c16:	0352      	lsls	r2, r2, #13
   12c18:	4313      	orrs	r3, r2
   12c1a:	e7d6      	b.n	12bca <__d2b+0x1a>
   12c1c:	6174      	str	r4, [r6, #20]
   12c1e:	e7e7      	b.n	12bf0 <__d2b+0x40>
   12c20:	a801      	add	r0, sp, #4
   12c22:	f7ff fd6b 	bl	126fc <__lo0bits>
   12c26:	2401      	movs	r4, #1
   12c28:	9b01      	ldr	r3, [sp, #4]
   12c2a:	6134      	str	r4, [r6, #16]
   12c2c:	6173      	str	r3, [r6, #20]
   12c2e:	3020      	adds	r0, #32
   12c30:	e7e4      	b.n	12bfc <__d2b+0x4c>
   12c32:	4b07      	ldr	r3, [pc, #28]	; (12c50 <__d2b+0xa0>)
   12c34:	18c0      	adds	r0, r0, r3
   12c36:	4b07      	ldr	r3, [pc, #28]	; (12c54 <__d2b+0xa4>)
   12c38:	6038      	str	r0, [r7, #0]
   12c3a:	18e3      	adds	r3, r4, r3
   12c3c:	009b      	lsls	r3, r3, #2
   12c3e:	18f3      	adds	r3, r6, r3
   12c40:	6958      	ldr	r0, [r3, #20]
   12c42:	f7ff fd41 	bl	126c8 <__hi0bits>
   12c46:	0164      	lsls	r4, r4, #5
   12c48:	1a20      	subs	r0, r4, r0
   12c4a:	e7df      	b.n	12c0c <__d2b+0x5c>
   12c4c:	fffffbcd 	.word	0xfffffbcd
   12c50:	fffffbce 	.word	0xfffffbce
   12c54:	3fffffff 	.word	0x3fffffff

00012c58 <__ratio>:
   12c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c5a:	b085      	sub	sp, #20
   12c5c:	000f      	movs	r7, r1
   12c5e:	a902      	add	r1, sp, #8
   12c60:	0006      	movs	r6, r0
   12c62:	f7ff ff59 	bl	12b18 <__b2d>
   12c66:	0004      	movs	r4, r0
   12c68:	000d      	movs	r5, r1
   12c6a:	0038      	movs	r0, r7
   12c6c:	a903      	add	r1, sp, #12
   12c6e:	9400      	str	r4, [sp, #0]
   12c70:	9501      	str	r5, [sp, #4]
   12c72:	f7ff ff51 	bl	12b18 <__b2d>
   12c76:	6936      	ldr	r6, [r6, #16]
   12c78:	693f      	ldr	r7, [r7, #16]
   12c7a:	0002      	movs	r2, r0
   12c7c:	1bf7      	subs	r7, r6, r7
   12c7e:	017e      	lsls	r6, r7, #5
   12c80:	46b4      	mov	ip, r6
   12c82:	9f03      	ldr	r7, [sp, #12]
   12c84:	9e02      	ldr	r6, [sp, #8]
   12c86:	000b      	movs	r3, r1
   12c88:	1bf6      	subs	r6, r6, r7
   12c8a:	4466      	add	r6, ip
   12c8c:	0537      	lsls	r7, r6, #20
   12c8e:	2e00      	cmp	r6, #0
   12c90:	dd07      	ble.n	12ca2 <__ratio+0x4a>
   12c92:	1979      	adds	r1, r7, r5
   12c94:	9101      	str	r1, [sp, #4]
   12c96:	9800      	ldr	r0, [sp, #0]
   12c98:	9901      	ldr	r1, [sp, #4]
   12c9a:	f7fc f9ad 	bl	eff8 <__aeabi_ddiv>
   12c9e:	b005      	add	sp, #20
   12ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ca2:	1bcb      	subs	r3, r1, r7
   12ca4:	e7f7      	b.n	12c96 <__ratio+0x3e>

00012ca6 <__copybits>:
   12ca6:	0013      	movs	r3, r2
   12ca8:	3901      	subs	r1, #1
   12caa:	b510      	push	{r4, lr}
   12cac:	1149      	asrs	r1, r1, #5
   12cae:	6912      	ldr	r2, [r2, #16]
   12cb0:	3101      	adds	r1, #1
   12cb2:	0089      	lsls	r1, r1, #2
   12cb4:	3314      	adds	r3, #20
   12cb6:	0092      	lsls	r2, r2, #2
   12cb8:	1841      	adds	r1, r0, r1
   12cba:	189a      	adds	r2, r3, r2
   12cbc:	429a      	cmp	r2, r3
   12cbe:	d803      	bhi.n	12cc8 <__copybits+0x22>
   12cc0:	2300      	movs	r3, #0
   12cc2:	4281      	cmp	r1, r0
   12cc4:	d803      	bhi.n	12cce <__copybits+0x28>
   12cc6:	bd10      	pop	{r4, pc}
   12cc8:	cb10      	ldmia	r3!, {r4}
   12cca:	c010      	stmia	r0!, {r4}
   12ccc:	e7f6      	b.n	12cbc <__copybits+0x16>
   12cce:	c008      	stmia	r0!, {r3}
   12cd0:	e7f7      	b.n	12cc2 <__copybits+0x1c>

00012cd2 <__any_on>:
   12cd2:	0002      	movs	r2, r0
   12cd4:	6900      	ldr	r0, [r0, #16]
   12cd6:	b510      	push	{r4, lr}
   12cd8:	3214      	adds	r2, #20
   12cda:	114b      	asrs	r3, r1, #5
   12cdc:	4298      	cmp	r0, r3
   12cde:	db12      	blt.n	12d06 <__any_on+0x34>
   12ce0:	dd0b      	ble.n	12cfa <__any_on+0x28>
   12ce2:	201f      	movs	r0, #31
   12ce4:	4001      	ands	r1, r0
   12ce6:	d008      	beq.n	12cfa <__any_on+0x28>
   12ce8:	0098      	lsls	r0, r3, #2
   12cea:	5884      	ldr	r4, [r0, r2]
   12cec:	0020      	movs	r0, r4
   12cee:	40c8      	lsrs	r0, r1
   12cf0:	4088      	lsls	r0, r1
   12cf2:	0001      	movs	r1, r0
   12cf4:	2001      	movs	r0, #1
   12cf6:	428c      	cmp	r4, r1
   12cf8:	d104      	bne.n	12d04 <__any_on+0x32>
   12cfa:	009b      	lsls	r3, r3, #2
   12cfc:	18d3      	adds	r3, r2, r3
   12cfe:	4293      	cmp	r3, r2
   12d00:	d803      	bhi.n	12d0a <__any_on+0x38>
   12d02:	2000      	movs	r0, #0
   12d04:	bd10      	pop	{r4, pc}
   12d06:	0003      	movs	r3, r0
   12d08:	e7f7      	b.n	12cfa <__any_on+0x28>
   12d0a:	3b04      	subs	r3, #4
   12d0c:	6819      	ldr	r1, [r3, #0]
   12d0e:	2900      	cmp	r1, #0
   12d10:	d0f5      	beq.n	12cfe <__any_on+0x2c>
   12d12:	2001      	movs	r0, #1
   12d14:	e7f6      	b.n	12d04 <__any_on+0x32>

00012d16 <_calloc_r>:
   12d16:	434a      	muls	r2, r1
   12d18:	b570      	push	{r4, r5, r6, lr}
   12d1a:	0011      	movs	r1, r2
   12d1c:	0014      	movs	r4, r2
   12d1e:	f7fd fec1 	bl	10aa4 <_malloc_r>
   12d22:	1e05      	subs	r5, r0, #0
   12d24:	d003      	beq.n	12d2e <_calloc_r+0x18>
   12d26:	0022      	movs	r2, r4
   12d28:	2100      	movs	r1, #0
   12d2a:	f7fd fe68 	bl	109fe <memset>
   12d2e:	0028      	movs	r0, r5
   12d30:	bd70      	pop	{r4, r5, r6, pc}
	...

00012d34 <__ssputs_r>:
   12d34:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d36:	688e      	ldr	r6, [r1, #8]
   12d38:	b085      	sub	sp, #20
   12d3a:	0007      	movs	r7, r0
   12d3c:	000c      	movs	r4, r1
   12d3e:	9203      	str	r2, [sp, #12]
   12d40:	9301      	str	r3, [sp, #4]
   12d42:	429e      	cmp	r6, r3
   12d44:	d839      	bhi.n	12dba <__ssputs_r+0x86>
   12d46:	2390      	movs	r3, #144	; 0x90
   12d48:	898a      	ldrh	r2, [r1, #12]
   12d4a:	00db      	lsls	r3, r3, #3
   12d4c:	421a      	tst	r2, r3
   12d4e:	d034      	beq.n	12dba <__ssputs_r+0x86>
   12d50:	2503      	movs	r5, #3
   12d52:	6909      	ldr	r1, [r1, #16]
   12d54:	6823      	ldr	r3, [r4, #0]
   12d56:	1a5b      	subs	r3, r3, r1
   12d58:	9302      	str	r3, [sp, #8]
   12d5a:	6963      	ldr	r3, [r4, #20]
   12d5c:	9802      	ldr	r0, [sp, #8]
   12d5e:	435d      	muls	r5, r3
   12d60:	0feb      	lsrs	r3, r5, #31
   12d62:	195d      	adds	r5, r3, r5
   12d64:	9b01      	ldr	r3, [sp, #4]
   12d66:	106d      	asrs	r5, r5, #1
   12d68:	3301      	adds	r3, #1
   12d6a:	181b      	adds	r3, r3, r0
   12d6c:	42ab      	cmp	r3, r5
   12d6e:	d900      	bls.n	12d72 <__ssputs_r+0x3e>
   12d70:	001d      	movs	r5, r3
   12d72:	0553      	lsls	r3, r2, #21
   12d74:	d532      	bpl.n	12ddc <__ssputs_r+0xa8>
   12d76:	0029      	movs	r1, r5
   12d78:	0038      	movs	r0, r7
   12d7a:	f7fd fe93 	bl	10aa4 <_malloc_r>
   12d7e:	1e06      	subs	r6, r0, #0
   12d80:	d109      	bne.n	12d96 <__ssputs_r+0x62>
   12d82:	230c      	movs	r3, #12
   12d84:	603b      	str	r3, [r7, #0]
   12d86:	2340      	movs	r3, #64	; 0x40
   12d88:	2001      	movs	r0, #1
   12d8a:	89a2      	ldrh	r2, [r4, #12]
   12d8c:	4240      	negs	r0, r0
   12d8e:	4313      	orrs	r3, r2
   12d90:	81a3      	strh	r3, [r4, #12]
   12d92:	b005      	add	sp, #20
   12d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d96:	9a02      	ldr	r2, [sp, #8]
   12d98:	6921      	ldr	r1, [r4, #16]
   12d9a:	f7fd fe15 	bl	109c8 <memcpy>
   12d9e:	89a3      	ldrh	r3, [r4, #12]
   12da0:	4a14      	ldr	r2, [pc, #80]	; (12df4 <__ssputs_r+0xc0>)
   12da2:	401a      	ands	r2, r3
   12da4:	2380      	movs	r3, #128	; 0x80
   12da6:	4313      	orrs	r3, r2
   12da8:	81a3      	strh	r3, [r4, #12]
   12daa:	9b02      	ldr	r3, [sp, #8]
   12dac:	6126      	str	r6, [r4, #16]
   12dae:	18f6      	adds	r6, r6, r3
   12db0:	6026      	str	r6, [r4, #0]
   12db2:	6165      	str	r5, [r4, #20]
   12db4:	9e01      	ldr	r6, [sp, #4]
   12db6:	1aed      	subs	r5, r5, r3
   12db8:	60a5      	str	r5, [r4, #8]
   12dba:	9b01      	ldr	r3, [sp, #4]
   12dbc:	42b3      	cmp	r3, r6
   12dbe:	d200      	bcs.n	12dc2 <__ssputs_r+0x8e>
   12dc0:	001e      	movs	r6, r3
   12dc2:	0032      	movs	r2, r6
   12dc4:	9903      	ldr	r1, [sp, #12]
   12dc6:	6820      	ldr	r0, [r4, #0]
   12dc8:	f7fd fe07 	bl	109da <memmove>
   12dcc:	68a3      	ldr	r3, [r4, #8]
   12dce:	2000      	movs	r0, #0
   12dd0:	1b9b      	subs	r3, r3, r6
   12dd2:	60a3      	str	r3, [r4, #8]
   12dd4:	6823      	ldr	r3, [r4, #0]
   12dd6:	199e      	adds	r6, r3, r6
   12dd8:	6026      	str	r6, [r4, #0]
   12dda:	e7da      	b.n	12d92 <__ssputs_r+0x5e>
   12ddc:	002a      	movs	r2, r5
   12dde:	0038      	movs	r0, r7
   12de0:	f001 f908 	bl	13ff4 <_realloc_r>
   12de4:	1e06      	subs	r6, r0, #0
   12de6:	d1e0      	bne.n	12daa <__ssputs_r+0x76>
   12de8:	6921      	ldr	r1, [r4, #16]
   12dea:	0038      	movs	r0, r7
   12dec:	f7fd fe10 	bl	10a10 <_free_r>
   12df0:	e7c7      	b.n	12d82 <__ssputs_r+0x4e>
   12df2:	46c0      	nop			; (mov r8, r8)
   12df4:	fffffb7f 	.word	0xfffffb7f

00012df8 <_svfiprintf_r>:
   12df8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dfa:	b09f      	sub	sp, #124	; 0x7c
   12dfc:	9002      	str	r0, [sp, #8]
   12dfe:	9305      	str	r3, [sp, #20]
   12e00:	898b      	ldrh	r3, [r1, #12]
   12e02:	000f      	movs	r7, r1
   12e04:	0016      	movs	r6, r2
   12e06:	061b      	lsls	r3, r3, #24
   12e08:	d511      	bpl.n	12e2e <_svfiprintf_r+0x36>
   12e0a:	690b      	ldr	r3, [r1, #16]
   12e0c:	2b00      	cmp	r3, #0
   12e0e:	d10e      	bne.n	12e2e <_svfiprintf_r+0x36>
   12e10:	2140      	movs	r1, #64	; 0x40
   12e12:	f7fd fe47 	bl	10aa4 <_malloc_r>
   12e16:	6038      	str	r0, [r7, #0]
   12e18:	6138      	str	r0, [r7, #16]
   12e1a:	2800      	cmp	r0, #0
   12e1c:	d105      	bne.n	12e2a <_svfiprintf_r+0x32>
   12e1e:	230c      	movs	r3, #12
   12e20:	9a02      	ldr	r2, [sp, #8]
   12e22:	3801      	subs	r0, #1
   12e24:	6013      	str	r3, [r2, #0]
   12e26:	b01f      	add	sp, #124	; 0x7c
   12e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e2a:	2340      	movs	r3, #64	; 0x40
   12e2c:	617b      	str	r3, [r7, #20]
   12e2e:	2300      	movs	r3, #0
   12e30:	ad06      	add	r5, sp, #24
   12e32:	616b      	str	r3, [r5, #20]
   12e34:	3320      	adds	r3, #32
   12e36:	766b      	strb	r3, [r5, #25]
   12e38:	3310      	adds	r3, #16
   12e3a:	76ab      	strb	r3, [r5, #26]
   12e3c:	0034      	movs	r4, r6
   12e3e:	7823      	ldrb	r3, [r4, #0]
   12e40:	2b00      	cmp	r3, #0
   12e42:	d147      	bne.n	12ed4 <_svfiprintf_r+0xdc>
   12e44:	1ba3      	subs	r3, r4, r6
   12e46:	9304      	str	r3, [sp, #16]
   12e48:	d00d      	beq.n	12e66 <_svfiprintf_r+0x6e>
   12e4a:	1ba3      	subs	r3, r4, r6
   12e4c:	0032      	movs	r2, r6
   12e4e:	0039      	movs	r1, r7
   12e50:	9802      	ldr	r0, [sp, #8]
   12e52:	f7ff ff6f 	bl	12d34 <__ssputs_r>
   12e56:	1c43      	adds	r3, r0, #1
   12e58:	d100      	bne.n	12e5c <_svfiprintf_r+0x64>
   12e5a:	e0b5      	b.n	12fc8 <_svfiprintf_r+0x1d0>
   12e5c:	696a      	ldr	r2, [r5, #20]
   12e5e:	9b04      	ldr	r3, [sp, #16]
   12e60:	4694      	mov	ip, r2
   12e62:	4463      	add	r3, ip
   12e64:	616b      	str	r3, [r5, #20]
   12e66:	7823      	ldrb	r3, [r4, #0]
   12e68:	2b00      	cmp	r3, #0
   12e6a:	d100      	bne.n	12e6e <_svfiprintf_r+0x76>
   12e6c:	e0ac      	b.n	12fc8 <_svfiprintf_r+0x1d0>
   12e6e:	2201      	movs	r2, #1
   12e70:	2300      	movs	r3, #0
   12e72:	4252      	negs	r2, r2
   12e74:	606a      	str	r2, [r5, #4]
   12e76:	a902      	add	r1, sp, #8
   12e78:	3254      	adds	r2, #84	; 0x54
   12e7a:	1852      	adds	r2, r2, r1
   12e7c:	3401      	adds	r4, #1
   12e7e:	602b      	str	r3, [r5, #0]
   12e80:	60eb      	str	r3, [r5, #12]
   12e82:	60ab      	str	r3, [r5, #8]
   12e84:	7013      	strb	r3, [r2, #0]
   12e86:	65ab      	str	r3, [r5, #88]	; 0x58
   12e88:	4e58      	ldr	r6, [pc, #352]	; (12fec <_svfiprintf_r+0x1f4>)
   12e8a:	2205      	movs	r2, #5
   12e8c:	7821      	ldrb	r1, [r4, #0]
   12e8e:	0030      	movs	r0, r6
   12e90:	f7fd fd80 	bl	10994 <memchr>
   12e94:	1c62      	adds	r2, r4, #1
   12e96:	2800      	cmp	r0, #0
   12e98:	d120      	bne.n	12edc <_svfiprintf_r+0xe4>
   12e9a:	6829      	ldr	r1, [r5, #0]
   12e9c:	06cb      	lsls	r3, r1, #27
   12e9e:	d504      	bpl.n	12eaa <_svfiprintf_r+0xb2>
   12ea0:	2353      	movs	r3, #83	; 0x53
   12ea2:	ae02      	add	r6, sp, #8
   12ea4:	3020      	adds	r0, #32
   12ea6:	199b      	adds	r3, r3, r6
   12ea8:	7018      	strb	r0, [r3, #0]
   12eaa:	070b      	lsls	r3, r1, #28
   12eac:	d504      	bpl.n	12eb8 <_svfiprintf_r+0xc0>
   12eae:	2353      	movs	r3, #83	; 0x53
   12eb0:	202b      	movs	r0, #43	; 0x2b
   12eb2:	ae02      	add	r6, sp, #8
   12eb4:	199b      	adds	r3, r3, r6
   12eb6:	7018      	strb	r0, [r3, #0]
   12eb8:	7823      	ldrb	r3, [r4, #0]
   12eba:	2b2a      	cmp	r3, #42	; 0x2a
   12ebc:	d016      	beq.n	12eec <_svfiprintf_r+0xf4>
   12ebe:	2000      	movs	r0, #0
   12ec0:	210a      	movs	r1, #10
   12ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12ec4:	7822      	ldrb	r2, [r4, #0]
   12ec6:	3a30      	subs	r2, #48	; 0x30
   12ec8:	2a09      	cmp	r2, #9
   12eca:	d955      	bls.n	12f78 <_svfiprintf_r+0x180>
   12ecc:	2800      	cmp	r0, #0
   12ece:	d015      	beq.n	12efc <_svfiprintf_r+0x104>
   12ed0:	9309      	str	r3, [sp, #36]	; 0x24
   12ed2:	e013      	b.n	12efc <_svfiprintf_r+0x104>
   12ed4:	2b25      	cmp	r3, #37	; 0x25
   12ed6:	d0b5      	beq.n	12e44 <_svfiprintf_r+0x4c>
   12ed8:	3401      	adds	r4, #1
   12eda:	e7b0      	b.n	12e3e <_svfiprintf_r+0x46>
   12edc:	2301      	movs	r3, #1
   12ede:	1b80      	subs	r0, r0, r6
   12ee0:	4083      	lsls	r3, r0
   12ee2:	6829      	ldr	r1, [r5, #0]
   12ee4:	0014      	movs	r4, r2
   12ee6:	430b      	orrs	r3, r1
   12ee8:	602b      	str	r3, [r5, #0]
   12eea:	e7cd      	b.n	12e88 <_svfiprintf_r+0x90>
   12eec:	9b05      	ldr	r3, [sp, #20]
   12eee:	1d18      	adds	r0, r3, #4
   12ef0:	681b      	ldr	r3, [r3, #0]
   12ef2:	9005      	str	r0, [sp, #20]
   12ef4:	2b00      	cmp	r3, #0
   12ef6:	db39      	blt.n	12f6c <_svfiprintf_r+0x174>
   12ef8:	9309      	str	r3, [sp, #36]	; 0x24
   12efa:	0014      	movs	r4, r2
   12efc:	7823      	ldrb	r3, [r4, #0]
   12efe:	2b2e      	cmp	r3, #46	; 0x2e
   12f00:	d10b      	bne.n	12f1a <_svfiprintf_r+0x122>
   12f02:	7863      	ldrb	r3, [r4, #1]
   12f04:	1c62      	adds	r2, r4, #1
   12f06:	2b2a      	cmp	r3, #42	; 0x2a
   12f08:	d13e      	bne.n	12f88 <_svfiprintf_r+0x190>
   12f0a:	9b05      	ldr	r3, [sp, #20]
   12f0c:	3402      	adds	r4, #2
   12f0e:	1d1a      	adds	r2, r3, #4
   12f10:	681b      	ldr	r3, [r3, #0]
   12f12:	9205      	str	r2, [sp, #20]
   12f14:	2b00      	cmp	r3, #0
   12f16:	db34      	blt.n	12f82 <_svfiprintf_r+0x18a>
   12f18:	9307      	str	r3, [sp, #28]
   12f1a:	4e35      	ldr	r6, [pc, #212]	; (12ff0 <_svfiprintf_r+0x1f8>)
   12f1c:	7821      	ldrb	r1, [r4, #0]
   12f1e:	2203      	movs	r2, #3
   12f20:	0030      	movs	r0, r6
   12f22:	f7fd fd37 	bl	10994 <memchr>
   12f26:	2800      	cmp	r0, #0
   12f28:	d006      	beq.n	12f38 <_svfiprintf_r+0x140>
   12f2a:	2340      	movs	r3, #64	; 0x40
   12f2c:	1b80      	subs	r0, r0, r6
   12f2e:	4083      	lsls	r3, r0
   12f30:	682a      	ldr	r2, [r5, #0]
   12f32:	3401      	adds	r4, #1
   12f34:	4313      	orrs	r3, r2
   12f36:	602b      	str	r3, [r5, #0]
   12f38:	7821      	ldrb	r1, [r4, #0]
   12f3a:	2206      	movs	r2, #6
   12f3c:	482d      	ldr	r0, [pc, #180]	; (12ff4 <_svfiprintf_r+0x1fc>)
   12f3e:	1c66      	adds	r6, r4, #1
   12f40:	7629      	strb	r1, [r5, #24]
   12f42:	f7fd fd27 	bl	10994 <memchr>
   12f46:	2800      	cmp	r0, #0
   12f48:	d046      	beq.n	12fd8 <_svfiprintf_r+0x1e0>
   12f4a:	4b2b      	ldr	r3, [pc, #172]	; (12ff8 <_svfiprintf_r+0x200>)
   12f4c:	2b00      	cmp	r3, #0
   12f4e:	d12f      	bne.n	12fb0 <_svfiprintf_r+0x1b8>
   12f50:	6829      	ldr	r1, [r5, #0]
   12f52:	9b05      	ldr	r3, [sp, #20]
   12f54:	2207      	movs	r2, #7
   12f56:	05c9      	lsls	r1, r1, #23
   12f58:	d528      	bpl.n	12fac <_svfiprintf_r+0x1b4>
   12f5a:	189b      	adds	r3, r3, r2
   12f5c:	4393      	bics	r3, r2
   12f5e:	3308      	adds	r3, #8
   12f60:	9305      	str	r3, [sp, #20]
   12f62:	696b      	ldr	r3, [r5, #20]
   12f64:	9a03      	ldr	r2, [sp, #12]
   12f66:	189b      	adds	r3, r3, r2
   12f68:	616b      	str	r3, [r5, #20]
   12f6a:	e767      	b.n	12e3c <_svfiprintf_r+0x44>
   12f6c:	425b      	negs	r3, r3
   12f6e:	60eb      	str	r3, [r5, #12]
   12f70:	2302      	movs	r3, #2
   12f72:	430b      	orrs	r3, r1
   12f74:	602b      	str	r3, [r5, #0]
   12f76:	e7c0      	b.n	12efa <_svfiprintf_r+0x102>
   12f78:	434b      	muls	r3, r1
   12f7a:	3401      	adds	r4, #1
   12f7c:	189b      	adds	r3, r3, r2
   12f7e:	2001      	movs	r0, #1
   12f80:	e7a0      	b.n	12ec4 <_svfiprintf_r+0xcc>
   12f82:	2301      	movs	r3, #1
   12f84:	425b      	negs	r3, r3
   12f86:	e7c7      	b.n	12f18 <_svfiprintf_r+0x120>
   12f88:	2300      	movs	r3, #0
   12f8a:	0014      	movs	r4, r2
   12f8c:	200a      	movs	r0, #10
   12f8e:	001a      	movs	r2, r3
   12f90:	606b      	str	r3, [r5, #4]
   12f92:	7821      	ldrb	r1, [r4, #0]
   12f94:	3930      	subs	r1, #48	; 0x30
   12f96:	2909      	cmp	r1, #9
   12f98:	d903      	bls.n	12fa2 <_svfiprintf_r+0x1aa>
   12f9a:	2b00      	cmp	r3, #0
   12f9c:	d0bd      	beq.n	12f1a <_svfiprintf_r+0x122>
   12f9e:	9207      	str	r2, [sp, #28]
   12fa0:	e7bb      	b.n	12f1a <_svfiprintf_r+0x122>
   12fa2:	4342      	muls	r2, r0
   12fa4:	3401      	adds	r4, #1
   12fa6:	1852      	adds	r2, r2, r1
   12fa8:	2301      	movs	r3, #1
   12faa:	e7f2      	b.n	12f92 <_svfiprintf_r+0x19a>
   12fac:	3307      	adds	r3, #7
   12fae:	e7d5      	b.n	12f5c <_svfiprintf_r+0x164>
   12fb0:	ab05      	add	r3, sp, #20
   12fb2:	9300      	str	r3, [sp, #0]
   12fb4:	003a      	movs	r2, r7
   12fb6:	4b11      	ldr	r3, [pc, #68]	; (12ffc <_svfiprintf_r+0x204>)
   12fb8:	0029      	movs	r1, r5
   12fba:	9802      	ldr	r0, [sp, #8]
   12fbc:	e000      	b.n	12fc0 <_svfiprintf_r+0x1c8>
   12fbe:	bf00      	nop
   12fc0:	9003      	str	r0, [sp, #12]
   12fc2:	9b03      	ldr	r3, [sp, #12]
   12fc4:	3301      	adds	r3, #1
   12fc6:	d1cc      	bne.n	12f62 <_svfiprintf_r+0x16a>
   12fc8:	89bb      	ldrh	r3, [r7, #12]
   12fca:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12fcc:	065b      	lsls	r3, r3, #25
   12fce:	d400      	bmi.n	12fd2 <_svfiprintf_r+0x1da>
   12fd0:	e729      	b.n	12e26 <_svfiprintf_r+0x2e>
   12fd2:	2001      	movs	r0, #1
   12fd4:	4240      	negs	r0, r0
   12fd6:	e726      	b.n	12e26 <_svfiprintf_r+0x2e>
   12fd8:	ab05      	add	r3, sp, #20
   12fda:	9300      	str	r3, [sp, #0]
   12fdc:	003a      	movs	r2, r7
   12fde:	4b07      	ldr	r3, [pc, #28]	; (12ffc <_svfiprintf_r+0x204>)
   12fe0:	0029      	movs	r1, r5
   12fe2:	9802      	ldr	r0, [sp, #8]
   12fe4:	f000 fba0 	bl	13728 <_printf_i>
   12fe8:	e7ea      	b.n	12fc0 <_svfiprintf_r+0x1c8>
   12fea:	46c0      	nop			; (mov r8, r8)
   12fec:	00016524 	.word	0x00016524
   12ff0:	0001652a 	.word	0x0001652a
   12ff4:	0001652e 	.word	0x0001652e
   12ff8:	00000000 	.word	0x00000000
   12ffc:	00012d35 	.word	0x00012d35

00013000 <_sungetc_r>:
   13000:	b570      	push	{r4, r5, r6, lr}
   13002:	0014      	movs	r4, r2
   13004:	1c4b      	adds	r3, r1, #1
   13006:	d103      	bne.n	13010 <_sungetc_r+0x10>
   13008:	2501      	movs	r5, #1
   1300a:	426d      	negs	r5, r5
   1300c:	0028      	movs	r0, r5
   1300e:	bd70      	pop	{r4, r5, r6, pc}
   13010:	8993      	ldrh	r3, [r2, #12]
   13012:	2220      	movs	r2, #32
   13014:	4393      	bics	r3, r2
   13016:	6b62      	ldr	r2, [r4, #52]	; 0x34
   13018:	81a3      	strh	r3, [r4, #12]
   1301a:	b2ce      	uxtb	r6, r1
   1301c:	b2cd      	uxtb	r5, r1
   1301e:	6863      	ldr	r3, [r4, #4]
   13020:	2a00      	cmp	r2, #0
   13022:	d010      	beq.n	13046 <_sungetc_r+0x46>
   13024:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   13026:	4293      	cmp	r3, r2
   13028:	da07      	bge.n	1303a <_sungetc_r+0x3a>
   1302a:	6823      	ldr	r3, [r4, #0]
   1302c:	3b01      	subs	r3, #1
   1302e:	6023      	str	r3, [r4, #0]
   13030:	701e      	strb	r6, [r3, #0]
   13032:	6863      	ldr	r3, [r4, #4]
   13034:	3301      	adds	r3, #1
   13036:	6063      	str	r3, [r4, #4]
   13038:	e7e8      	b.n	1300c <_sungetc_r+0xc>
   1303a:	0021      	movs	r1, r4
   1303c:	f000 ff9c 	bl	13f78 <__submore>
   13040:	2800      	cmp	r0, #0
   13042:	d0f2      	beq.n	1302a <_sungetc_r+0x2a>
   13044:	e7e0      	b.n	13008 <_sungetc_r+0x8>
   13046:	6921      	ldr	r1, [r4, #16]
   13048:	6822      	ldr	r2, [r4, #0]
   1304a:	2900      	cmp	r1, #0
   1304c:	d007      	beq.n	1305e <_sungetc_r+0x5e>
   1304e:	4291      	cmp	r1, r2
   13050:	d205      	bcs.n	1305e <_sungetc_r+0x5e>
   13052:	1e51      	subs	r1, r2, #1
   13054:	7808      	ldrb	r0, [r1, #0]
   13056:	4285      	cmp	r5, r0
   13058:	d101      	bne.n	1305e <_sungetc_r+0x5e>
   1305a:	6021      	str	r1, [r4, #0]
   1305c:	e7ea      	b.n	13034 <_sungetc_r+0x34>
   1305e:	6423      	str	r3, [r4, #64]	; 0x40
   13060:	0023      	movs	r3, r4
   13062:	3344      	adds	r3, #68	; 0x44
   13064:	6363      	str	r3, [r4, #52]	; 0x34
   13066:	2303      	movs	r3, #3
   13068:	63a3      	str	r3, [r4, #56]	; 0x38
   1306a:	0023      	movs	r3, r4
   1306c:	3346      	adds	r3, #70	; 0x46
   1306e:	63e2      	str	r2, [r4, #60]	; 0x3c
   13070:	701e      	strb	r6, [r3, #0]
   13072:	6023      	str	r3, [r4, #0]
   13074:	2301      	movs	r3, #1
   13076:	e7de      	b.n	13036 <_sungetc_r+0x36>

00013078 <__ssrefill_r>:
   13078:	b510      	push	{r4, lr}
   1307a:	000c      	movs	r4, r1
   1307c:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1307e:	2900      	cmp	r1, #0
   13080:	d00e      	beq.n	130a0 <__ssrefill_r+0x28>
   13082:	0023      	movs	r3, r4
   13084:	3344      	adds	r3, #68	; 0x44
   13086:	4299      	cmp	r1, r3
   13088:	d001      	beq.n	1308e <__ssrefill_r+0x16>
   1308a:	f7fd fcc1 	bl	10a10 <_free_r>
   1308e:	2000      	movs	r0, #0
   13090:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13092:	6360      	str	r0, [r4, #52]	; 0x34
   13094:	6063      	str	r3, [r4, #4]
   13096:	4283      	cmp	r3, r0
   13098:	d002      	beq.n	130a0 <__ssrefill_r+0x28>
   1309a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1309c:	6023      	str	r3, [r4, #0]
   1309e:	bd10      	pop	{r4, pc}
   130a0:	6923      	ldr	r3, [r4, #16]
   130a2:	2001      	movs	r0, #1
   130a4:	6023      	str	r3, [r4, #0]
   130a6:	2300      	movs	r3, #0
   130a8:	89a2      	ldrh	r2, [r4, #12]
   130aa:	6063      	str	r3, [r4, #4]
   130ac:	3320      	adds	r3, #32
   130ae:	4313      	orrs	r3, r2
   130b0:	81a3      	strh	r3, [r4, #12]
   130b2:	4240      	negs	r0, r0
   130b4:	e7f3      	b.n	1309e <__ssrefill_r+0x26>
	...

000130b8 <__ssvfiscanf_r>:
   130b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   130ba:	4cbd      	ldr	r4, [pc, #756]	; (133b0 <__ssvfiscanf_r+0x2f8>)
   130bc:	2586      	movs	r5, #134	; 0x86
   130be:	44a5      	add	sp, r4
   130c0:	9303      	str	r3, [sp, #12]
   130c2:	2300      	movs	r3, #0
   130c4:	9348      	str	r3, [sp, #288]	; 0x120
   130c6:	9349      	str	r3, [sp, #292]	; 0x124
   130c8:	ab05      	add	r3, sp, #20
   130ca:	934a      	str	r3, [sp, #296]	; 0x128
   130cc:	23be      	movs	r3, #190	; 0xbe
   130ce:	006d      	lsls	r5, r5, #1
   130d0:	9000      	str	r0, [sp, #0]
   130d2:	000c      	movs	r4, r1
   130d4:	a802      	add	r0, sp, #8
   130d6:	49b7      	ldr	r1, [pc, #732]	; (133b4 <__ssvfiscanf_r+0x2fc>)
   130d8:	005b      	lsls	r3, r3, #1
   130da:	1940      	adds	r0, r0, r5
   130dc:	27c0      	movs	r7, #192	; 0xc0
   130de:	50c1      	str	r1, [r0, r3]
   130e0:	ab02      	add	r3, sp, #8
   130e2:	195b      	adds	r3, r3, r5
   130e4:	0015      	movs	r5, r2
   130e6:	49b4      	ldr	r1, [pc, #720]	; (133b8 <__ssvfiscanf_r+0x300>)
   130e8:	007f      	lsls	r7, r7, #1
   130ea:	51d9      	str	r1, [r3, r7]
   130ec:	782b      	ldrb	r3, [r5, #0]
   130ee:	2b00      	cmp	r3, #0
   130f0:	d100      	bne.n	130f4 <__ssvfiscanf_r+0x3c>
   130f2:	e15b      	b.n	133ac <__ssvfiscanf_r+0x2f4>
   130f4:	f7fd fbae 	bl	10854 <__locale_ctype_ptr>
   130f8:	2208      	movs	r2, #8
   130fa:	782b      	ldrb	r3, [r5, #0]
   130fc:	18c0      	adds	r0, r0, r3
   130fe:	9301      	str	r3, [sp, #4]
   13100:	7843      	ldrb	r3, [r0, #1]
   13102:	4013      	ands	r3, r2
   13104:	d141      	bne.n	1318a <__ssvfiscanf_r+0xd2>
   13106:	9a01      	ldr	r2, [sp, #4]
   13108:	1c6e      	adds	r6, r5, #1
   1310a:	2a25      	cmp	r2, #37	; 0x25
   1310c:	d000      	beq.n	13110 <__ssvfiscanf_r+0x58>
   1310e:	e0a8      	b.n	13262 <__ssvfiscanf_r+0x1aa>
   13110:	9347      	str	r3, [sp, #284]	; 0x11c
   13112:	9345      	str	r3, [sp, #276]	; 0x114
   13114:	786b      	ldrb	r3, [r5, #1]
   13116:	2b2a      	cmp	r3, #42	; 0x2a
   13118:	d102      	bne.n	13120 <__ssvfiscanf_r+0x68>
   1311a:	3b1a      	subs	r3, #26
   1311c:	9345      	str	r3, [sp, #276]	; 0x114
   1311e:	1cae      	adds	r6, r5, #2
   13120:	0035      	movs	r5, r6
   13122:	220a      	movs	r2, #10
   13124:	7829      	ldrb	r1, [r5, #0]
   13126:	000b      	movs	r3, r1
   13128:	3b30      	subs	r3, #48	; 0x30
   1312a:	2b09      	cmp	r3, #9
   1312c:	d948      	bls.n	131c0 <__ssvfiscanf_r+0x108>
   1312e:	4ea3      	ldr	r6, [pc, #652]	; (133bc <__ssvfiscanf_r+0x304>)
   13130:	2203      	movs	r2, #3
   13132:	0030      	movs	r0, r6
   13134:	f7fd fc2e 	bl	10994 <memchr>
   13138:	2800      	cmp	r0, #0
   1313a:	d007      	beq.n	1314c <__ssvfiscanf_r+0x94>
   1313c:	2301      	movs	r3, #1
   1313e:	1b80      	subs	r0, r0, r6
   13140:	4083      	lsls	r3, r0
   13142:	9a45      	ldr	r2, [sp, #276]	; 0x114
   13144:	3501      	adds	r5, #1
   13146:	4313      	orrs	r3, r2
   13148:	9202      	str	r2, [sp, #8]
   1314a:	9345      	str	r3, [sp, #276]	; 0x114
   1314c:	782b      	ldrb	r3, [r5, #0]
   1314e:	1c6e      	adds	r6, r5, #1
   13150:	2b67      	cmp	r3, #103	; 0x67
   13152:	d858      	bhi.n	13206 <__ssvfiscanf_r+0x14e>
   13154:	2b65      	cmp	r3, #101	; 0x65
   13156:	d300      	bcc.n	1315a <__ssvfiscanf_r+0xa2>
   13158:	e0dd      	b.n	13316 <__ssvfiscanf_r+0x25e>
   1315a:	2b47      	cmp	r3, #71	; 0x47
   1315c:	d838      	bhi.n	131d0 <__ssvfiscanf_r+0x118>
   1315e:	2b45      	cmp	r3, #69	; 0x45
   13160:	d300      	bcc.n	13164 <__ssvfiscanf_r+0xac>
   13162:	e0d8      	b.n	13316 <__ssvfiscanf_r+0x25e>
   13164:	2b00      	cmp	r3, #0
   13166:	d100      	bne.n	1316a <__ssvfiscanf_r+0xb2>
   13168:	e11d      	b.n	133a6 <__ssvfiscanf_r+0x2ee>
   1316a:	2b25      	cmp	r3, #37	; 0x25
   1316c:	d079      	beq.n	13262 <__ssvfiscanf_r+0x1aa>
   1316e:	2303      	movs	r3, #3
   13170:	934b      	str	r3, [sp, #300]	; 0x12c
   13172:	3307      	adds	r3, #7
   13174:	9346      	str	r3, [sp, #280]	; 0x118
   13176:	e053      	b.n	13220 <__ssvfiscanf_r+0x168>
   13178:	9a49      	ldr	r2, [sp, #292]	; 0x124
   1317a:	3301      	adds	r3, #1
   1317c:	9201      	str	r2, [sp, #4]
   1317e:	3201      	adds	r2, #1
   13180:	9249      	str	r2, [sp, #292]	; 0x124
   13182:	6862      	ldr	r2, [r4, #4]
   13184:	6023      	str	r3, [r4, #0]
   13186:	3a01      	subs	r2, #1
   13188:	6062      	str	r2, [r4, #4]
   1318a:	6863      	ldr	r3, [r4, #4]
   1318c:	2b00      	cmp	r3, #0
   1318e:	dd0b      	ble.n	131a8 <__ssvfiscanf_r+0xf0>
   13190:	f7fd fb60 	bl	10854 <__locale_ctype_ptr>
   13194:	2108      	movs	r1, #8
   13196:	6823      	ldr	r3, [r4, #0]
   13198:	781a      	ldrb	r2, [r3, #0]
   1319a:	1880      	adds	r0, r0, r2
   1319c:	7842      	ldrb	r2, [r0, #1]
   1319e:	420a      	tst	r2, r1
   131a0:	d1ea      	bne.n	13178 <__ssvfiscanf_r+0xc0>
   131a2:	1c6e      	adds	r6, r5, #1
   131a4:	0035      	movs	r5, r6
   131a6:	e7a1      	b.n	130ec <__ssvfiscanf_r+0x34>
   131a8:	2286      	movs	r2, #134	; 0x86
   131aa:	ab02      	add	r3, sp, #8
   131ac:	0052      	lsls	r2, r2, #1
   131ae:	189b      	adds	r3, r3, r2
   131b0:	59db      	ldr	r3, [r3, r7]
   131b2:	0021      	movs	r1, r4
   131b4:	9800      	ldr	r0, [sp, #0]
   131b6:	9301      	str	r3, [sp, #4]
   131b8:	4798      	blx	r3
   131ba:	2800      	cmp	r0, #0
   131bc:	d0e8      	beq.n	13190 <__ssvfiscanf_r+0xd8>
   131be:	e7f0      	b.n	131a2 <__ssvfiscanf_r+0xea>
   131c0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   131c2:	3501      	adds	r5, #1
   131c4:	9302      	str	r3, [sp, #8]
   131c6:	4353      	muls	r3, r2
   131c8:	3b30      	subs	r3, #48	; 0x30
   131ca:	1859      	adds	r1, r3, r1
   131cc:	9147      	str	r1, [sp, #284]	; 0x11c
   131ce:	e7a9      	b.n	13124 <__ssvfiscanf_r+0x6c>
   131d0:	2b5b      	cmp	r3, #91	; 0x5b
   131d2:	d100      	bne.n	131d6 <__ssvfiscanf_r+0x11e>
   131d4:	e077      	b.n	132c6 <__ssvfiscanf_r+0x20e>
   131d6:	d80f      	bhi.n	131f8 <__ssvfiscanf_r+0x140>
   131d8:	2b58      	cmp	r3, #88	; 0x58
   131da:	d1c8      	bne.n	1316e <__ssvfiscanf_r+0xb6>
   131dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
   131de:	9201      	str	r2, [sp, #4]
   131e0:	2280      	movs	r2, #128	; 0x80
   131e2:	9901      	ldr	r1, [sp, #4]
   131e4:	0092      	lsls	r2, r2, #2
   131e6:	430a      	orrs	r2, r1
   131e8:	9245      	str	r2, [sp, #276]	; 0x114
   131ea:	2210      	movs	r2, #16
   131ec:	9246      	str	r2, [sp, #280]	; 0x118
   131ee:	2203      	movs	r2, #3
   131f0:	2b6e      	cmp	r3, #110	; 0x6e
   131f2:	dd14      	ble.n	1321e <__ssvfiscanf_r+0x166>
   131f4:	3201      	adds	r2, #1
   131f6:	e012      	b.n	1321e <__ssvfiscanf_r+0x166>
   131f8:	2b63      	cmp	r3, #99	; 0x63
   131fa:	d100      	bne.n	131fe <__ssvfiscanf_r+0x146>
   131fc:	e071      	b.n	132e2 <__ssvfiscanf_r+0x22a>
   131fe:	2b64      	cmp	r3, #100	; 0x64
   13200:	d1b5      	bne.n	1316e <__ssvfiscanf_r+0xb6>
   13202:	220a      	movs	r2, #10
   13204:	e7f2      	b.n	131ec <__ssvfiscanf_r+0x134>
   13206:	2b70      	cmp	r3, #112	; 0x70
   13208:	d052      	beq.n	132b0 <__ssvfiscanf_r+0x1f8>
   1320a:	d822      	bhi.n	13252 <__ssvfiscanf_r+0x19a>
   1320c:	2b6e      	cmp	r3, #110	; 0x6e
   1320e:	d100      	bne.n	13212 <__ssvfiscanf_r+0x15a>
   13210:	e06f      	b.n	132f2 <__ssvfiscanf_r+0x23a>
   13212:	d854      	bhi.n	132be <__ssvfiscanf_r+0x206>
   13214:	2b69      	cmp	r3, #105	; 0x69
   13216:	d1aa      	bne.n	1316e <__ssvfiscanf_r+0xb6>
   13218:	2300      	movs	r3, #0
   1321a:	2203      	movs	r2, #3
   1321c:	9346      	str	r3, [sp, #280]	; 0x118
   1321e:	924b      	str	r2, [sp, #300]	; 0x12c
   13220:	6863      	ldr	r3, [r4, #4]
   13222:	2b00      	cmp	r3, #0
   13224:	dc00      	bgt.n	13228 <__ssvfiscanf_r+0x170>
   13226:	e078      	b.n	1331a <__ssvfiscanf_r+0x262>
   13228:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1322a:	9301      	str	r3, [sp, #4]
   1322c:	065b      	lsls	r3, r3, #25
   1322e:	d400      	bmi.n	13232 <__ssvfiscanf_r+0x17a>
   13230:	e08b      	b.n	1334a <__ssvfiscanf_r+0x292>
   13232:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   13234:	2b02      	cmp	r3, #2
   13236:	dd00      	ble.n	1323a <__ssvfiscanf_r+0x182>
   13238:	e09d      	b.n	13376 <__ssvfiscanf_r+0x2be>
   1323a:	ab03      	add	r3, sp, #12
   1323c:	0022      	movs	r2, r4
   1323e:	a945      	add	r1, sp, #276	; 0x114
   13240:	9800      	ldr	r0, [sp, #0]
   13242:	f000 fb8b 	bl	1395c <_scanf_chars>
   13246:	2801      	cmp	r0, #1
   13248:	d100      	bne.n	1324c <__ssvfiscanf_r+0x194>
   1324a:	e0af      	b.n	133ac <__ssvfiscanf_r+0x2f4>
   1324c:	2802      	cmp	r0, #2
   1324e:	d1a9      	bne.n	131a4 <__ssvfiscanf_r+0xec>
   13250:	e025      	b.n	1329e <__ssvfiscanf_r+0x1e6>
   13252:	2b75      	cmp	r3, #117	; 0x75
   13254:	d0d5      	beq.n	13202 <__ssvfiscanf_r+0x14a>
   13256:	2b78      	cmp	r3, #120	; 0x78
   13258:	d0c0      	beq.n	131dc <__ssvfiscanf_r+0x124>
   1325a:	2b73      	cmp	r3, #115	; 0x73
   1325c:	d187      	bne.n	1316e <__ssvfiscanf_r+0xb6>
   1325e:	2302      	movs	r3, #2
   13260:	e03d      	b.n	132de <__ssvfiscanf_r+0x226>
   13262:	6863      	ldr	r3, [r4, #4]
   13264:	2b00      	cmp	r3, #0
   13266:	dd0f      	ble.n	13288 <__ssvfiscanf_r+0x1d0>
   13268:	6823      	ldr	r3, [r4, #0]
   1326a:	9901      	ldr	r1, [sp, #4]
   1326c:	781a      	ldrb	r2, [r3, #0]
   1326e:	4291      	cmp	r1, r2
   13270:	d000      	beq.n	13274 <__ssvfiscanf_r+0x1bc>
   13272:	e09b      	b.n	133ac <__ssvfiscanf_r+0x2f4>
   13274:	3301      	adds	r3, #1
   13276:	6862      	ldr	r2, [r4, #4]
   13278:	6023      	str	r3, [r4, #0]
   1327a:	9b49      	ldr	r3, [sp, #292]	; 0x124
   1327c:	3a01      	subs	r2, #1
   1327e:	9301      	str	r3, [sp, #4]
   13280:	3301      	adds	r3, #1
   13282:	6062      	str	r2, [r4, #4]
   13284:	9349      	str	r3, [sp, #292]	; 0x124
   13286:	e78d      	b.n	131a4 <__ssvfiscanf_r+0xec>
   13288:	2286      	movs	r2, #134	; 0x86
   1328a:	ab02      	add	r3, sp, #8
   1328c:	0052      	lsls	r2, r2, #1
   1328e:	189b      	adds	r3, r3, r2
   13290:	59db      	ldr	r3, [r3, r7]
   13292:	0021      	movs	r1, r4
   13294:	9800      	ldr	r0, [sp, #0]
   13296:	9302      	str	r3, [sp, #8]
   13298:	4798      	blx	r3
   1329a:	2800      	cmp	r0, #0
   1329c:	d0e4      	beq.n	13268 <__ssvfiscanf_r+0x1b0>
   1329e:	9848      	ldr	r0, [sp, #288]	; 0x120
   132a0:	2800      	cmp	r0, #0
   132a2:	d000      	beq.n	132a6 <__ssvfiscanf_r+0x1ee>
   132a4:	e07b      	b.n	1339e <__ssvfiscanf_r+0x2e6>
   132a6:	3801      	subs	r0, #1
   132a8:	23a7      	movs	r3, #167	; 0xa7
   132aa:	009b      	lsls	r3, r3, #2
   132ac:	449d      	add	sp, r3
   132ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   132b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
   132b2:	9201      	str	r2, [sp, #4]
   132b4:	2220      	movs	r2, #32
   132b6:	9901      	ldr	r1, [sp, #4]
   132b8:	430a      	orrs	r2, r1
   132ba:	9245      	str	r2, [sp, #276]	; 0x114
   132bc:	e78e      	b.n	131dc <__ssvfiscanf_r+0x124>
   132be:	2308      	movs	r3, #8
   132c0:	2204      	movs	r2, #4
   132c2:	9346      	str	r3, [sp, #280]	; 0x118
   132c4:	e7ab      	b.n	1321e <__ssvfiscanf_r+0x166>
   132c6:	0031      	movs	r1, r6
   132c8:	a805      	add	r0, sp, #20
   132ca:	f000 fcf5 	bl	13cb8 <__sccl>
   132ce:	9b45      	ldr	r3, [sp, #276]	; 0x114
   132d0:	0006      	movs	r6, r0
   132d2:	9301      	str	r3, [sp, #4]
   132d4:	2340      	movs	r3, #64	; 0x40
   132d6:	9a01      	ldr	r2, [sp, #4]
   132d8:	4313      	orrs	r3, r2
   132da:	9345      	str	r3, [sp, #276]	; 0x114
   132dc:	2301      	movs	r3, #1
   132de:	934b      	str	r3, [sp, #300]	; 0x12c
   132e0:	e79e      	b.n	13220 <__ssvfiscanf_r+0x168>
   132e2:	9b45      	ldr	r3, [sp, #276]	; 0x114
   132e4:	9301      	str	r3, [sp, #4]
   132e6:	2340      	movs	r3, #64	; 0x40
   132e8:	9a01      	ldr	r2, [sp, #4]
   132ea:	4313      	orrs	r3, r2
   132ec:	9345      	str	r3, [sp, #276]	; 0x114
   132ee:	2300      	movs	r3, #0
   132f0:	e7f5      	b.n	132de <__ssvfiscanf_r+0x226>
   132f2:	9945      	ldr	r1, [sp, #276]	; 0x114
   132f4:	06cb      	lsls	r3, r1, #27
   132f6:	d500      	bpl.n	132fa <__ssvfiscanf_r+0x242>
   132f8:	e754      	b.n	131a4 <__ssvfiscanf_r+0xec>
   132fa:	9b03      	ldr	r3, [sp, #12]
   132fc:	9a49      	ldr	r2, [sp, #292]	; 0x124
   132fe:	07c8      	lsls	r0, r1, #31
   13300:	d504      	bpl.n	1330c <__ssvfiscanf_r+0x254>
   13302:	1d19      	adds	r1, r3, #4
   13304:	9103      	str	r1, [sp, #12]
   13306:	681b      	ldr	r3, [r3, #0]
   13308:	801a      	strh	r2, [r3, #0]
   1330a:	e74b      	b.n	131a4 <__ssvfiscanf_r+0xec>
   1330c:	1d19      	adds	r1, r3, #4
   1330e:	9103      	str	r1, [sp, #12]
   13310:	681b      	ldr	r3, [r3, #0]
   13312:	601a      	str	r2, [r3, #0]
   13314:	e746      	b.n	131a4 <__ssvfiscanf_r+0xec>
   13316:	2305      	movs	r3, #5
   13318:	e7e1      	b.n	132de <__ssvfiscanf_r+0x226>
   1331a:	2286      	movs	r2, #134	; 0x86
   1331c:	ab02      	add	r3, sp, #8
   1331e:	0052      	lsls	r2, r2, #1
   13320:	189b      	adds	r3, r3, r2
   13322:	59db      	ldr	r3, [r3, r7]
   13324:	0021      	movs	r1, r4
   13326:	9800      	ldr	r0, [sp, #0]
   13328:	9301      	str	r3, [sp, #4]
   1332a:	4798      	blx	r3
   1332c:	2800      	cmp	r0, #0
   1332e:	d100      	bne.n	13332 <__ssvfiscanf_r+0x27a>
   13330:	e77a      	b.n	13228 <__ssvfiscanf_r+0x170>
   13332:	e7b4      	b.n	1329e <__ssvfiscanf_r+0x1e6>
   13334:	9a49      	ldr	r2, [sp, #292]	; 0x124
   13336:	9201      	str	r2, [sp, #4]
   13338:	3201      	adds	r2, #1
   1333a:	9249      	str	r2, [sp, #292]	; 0x124
   1333c:	6862      	ldr	r2, [r4, #4]
   1333e:	3a01      	subs	r2, #1
   13340:	6062      	str	r2, [r4, #4]
   13342:	2a00      	cmp	r2, #0
   13344:	dd0b      	ble.n	1335e <__ssvfiscanf_r+0x2a6>
   13346:	3301      	adds	r3, #1
   13348:	6023      	str	r3, [r4, #0]
   1334a:	f7fd fa83 	bl	10854 <__locale_ctype_ptr>
   1334e:	2108      	movs	r1, #8
   13350:	6823      	ldr	r3, [r4, #0]
   13352:	781a      	ldrb	r2, [r3, #0]
   13354:	1880      	adds	r0, r0, r2
   13356:	7842      	ldrb	r2, [r0, #1]
   13358:	420a      	tst	r2, r1
   1335a:	d1eb      	bne.n	13334 <__ssvfiscanf_r+0x27c>
   1335c:	e769      	b.n	13232 <__ssvfiscanf_r+0x17a>
   1335e:	2286      	movs	r2, #134	; 0x86
   13360:	ab02      	add	r3, sp, #8
   13362:	0052      	lsls	r2, r2, #1
   13364:	189b      	adds	r3, r3, r2
   13366:	59db      	ldr	r3, [r3, r7]
   13368:	0021      	movs	r1, r4
   1336a:	9800      	ldr	r0, [sp, #0]
   1336c:	9301      	str	r3, [sp, #4]
   1336e:	4798      	blx	r3
   13370:	2800      	cmp	r0, #0
   13372:	d0ea      	beq.n	1334a <__ssvfiscanf_r+0x292>
   13374:	e793      	b.n	1329e <__ssvfiscanf_r+0x1e6>
   13376:	2b04      	cmp	r3, #4
   13378:	dc06      	bgt.n	13388 <__ssvfiscanf_r+0x2d0>
   1337a:	ab03      	add	r3, sp, #12
   1337c:	0022      	movs	r2, r4
   1337e:	a945      	add	r1, sp, #276	; 0x114
   13380:	9800      	ldr	r0, [sp, #0]
   13382:	f000 fb4f 	bl	13a24 <_scanf_i>
   13386:	e75e      	b.n	13246 <__ssvfiscanf_r+0x18e>
   13388:	4b0d      	ldr	r3, [pc, #52]	; (133c0 <__ssvfiscanf_r+0x308>)
   1338a:	2b00      	cmp	r3, #0
   1338c:	d100      	bne.n	13390 <__ssvfiscanf_r+0x2d8>
   1338e:	e709      	b.n	131a4 <__ssvfiscanf_r+0xec>
   13390:	ab03      	add	r3, sp, #12
   13392:	0022      	movs	r2, r4
   13394:	a945      	add	r1, sp, #276	; 0x114
   13396:	9800      	ldr	r0, [sp, #0]
   13398:	e000      	b.n	1339c <__ssvfiscanf_r+0x2e4>
   1339a:	bf00      	nop
   1339c:	e753      	b.n	13246 <__ssvfiscanf_r+0x18e>
   1339e:	89a3      	ldrh	r3, [r4, #12]
   133a0:	065b      	lsls	r3, r3, #25
   133a2:	d400      	bmi.n	133a6 <__ssvfiscanf_r+0x2ee>
   133a4:	e780      	b.n	132a8 <__ssvfiscanf_r+0x1f0>
   133a6:	2001      	movs	r0, #1
   133a8:	4240      	negs	r0, r0
   133aa:	e77d      	b.n	132a8 <__ssvfiscanf_r+0x1f0>
   133ac:	9848      	ldr	r0, [sp, #288]	; 0x120
   133ae:	e77b      	b.n	132a8 <__ssvfiscanf_r+0x1f0>
   133b0:	fffffd64 	.word	0xfffffd64
   133b4:	00013001 	.word	0x00013001
   133b8:	00013079 	.word	0x00013079
   133bc:	0001652a 	.word	0x0001652a
   133c0:	00000000 	.word	0x00000000

000133c4 <__sfputc_r>:
   133c4:	6893      	ldr	r3, [r2, #8]
   133c6:	b510      	push	{r4, lr}
   133c8:	3b01      	subs	r3, #1
   133ca:	6093      	str	r3, [r2, #8]
   133cc:	2b00      	cmp	r3, #0
   133ce:	da05      	bge.n	133dc <__sfputc_r+0x18>
   133d0:	6994      	ldr	r4, [r2, #24]
   133d2:	42a3      	cmp	r3, r4
   133d4:	db08      	blt.n	133e8 <__sfputc_r+0x24>
   133d6:	b2cb      	uxtb	r3, r1
   133d8:	2b0a      	cmp	r3, #10
   133da:	d005      	beq.n	133e8 <__sfputc_r+0x24>
   133dc:	6813      	ldr	r3, [r2, #0]
   133de:	1c58      	adds	r0, r3, #1
   133e0:	6010      	str	r0, [r2, #0]
   133e2:	7019      	strb	r1, [r3, #0]
   133e4:	b2c8      	uxtb	r0, r1
   133e6:	bd10      	pop	{r4, pc}
   133e8:	f7fe fc3c 	bl	11c64 <__swbuf_r>
   133ec:	e7fb      	b.n	133e6 <__sfputc_r+0x22>

000133ee <__sfputs_r>:
   133ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   133f0:	0006      	movs	r6, r0
   133f2:	000f      	movs	r7, r1
   133f4:	0014      	movs	r4, r2
   133f6:	18d5      	adds	r5, r2, r3
   133f8:	42ac      	cmp	r4, r5
   133fa:	d101      	bne.n	13400 <__sfputs_r+0x12>
   133fc:	2000      	movs	r0, #0
   133fe:	e007      	b.n	13410 <__sfputs_r+0x22>
   13400:	7821      	ldrb	r1, [r4, #0]
   13402:	003a      	movs	r2, r7
   13404:	0030      	movs	r0, r6
   13406:	f7ff ffdd 	bl	133c4 <__sfputc_r>
   1340a:	3401      	adds	r4, #1
   1340c:	1c43      	adds	r3, r0, #1
   1340e:	d1f3      	bne.n	133f8 <__sfputs_r+0xa>
   13410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00013414 <_vfiprintf_r>:
   13414:	b5f0      	push	{r4, r5, r6, r7, lr}
   13416:	b09f      	sub	sp, #124	; 0x7c
   13418:	0006      	movs	r6, r0
   1341a:	000f      	movs	r7, r1
   1341c:	0014      	movs	r4, r2
   1341e:	9305      	str	r3, [sp, #20]
   13420:	2800      	cmp	r0, #0
   13422:	d004      	beq.n	1342e <_vfiprintf_r+0x1a>
   13424:	6983      	ldr	r3, [r0, #24]
   13426:	2b00      	cmp	r3, #0
   13428:	d101      	bne.n	1342e <_vfiprintf_r+0x1a>
   1342a:	f7fd f955 	bl	106d8 <__sinit>
   1342e:	4b7f      	ldr	r3, [pc, #508]	; (1362c <_vfiprintf_r+0x218>)
   13430:	429f      	cmp	r7, r3
   13432:	d15c      	bne.n	134ee <_vfiprintf_r+0xda>
   13434:	6877      	ldr	r7, [r6, #4]
   13436:	89bb      	ldrh	r3, [r7, #12]
   13438:	071b      	lsls	r3, r3, #28
   1343a:	d562      	bpl.n	13502 <_vfiprintf_r+0xee>
   1343c:	693b      	ldr	r3, [r7, #16]
   1343e:	2b00      	cmp	r3, #0
   13440:	d05f      	beq.n	13502 <_vfiprintf_r+0xee>
   13442:	2300      	movs	r3, #0
   13444:	ad06      	add	r5, sp, #24
   13446:	616b      	str	r3, [r5, #20]
   13448:	3320      	adds	r3, #32
   1344a:	766b      	strb	r3, [r5, #25]
   1344c:	3310      	adds	r3, #16
   1344e:	76ab      	strb	r3, [r5, #26]
   13450:	9402      	str	r4, [sp, #8]
   13452:	9c02      	ldr	r4, [sp, #8]
   13454:	7823      	ldrb	r3, [r4, #0]
   13456:	2b00      	cmp	r3, #0
   13458:	d15d      	bne.n	13516 <_vfiprintf_r+0x102>
   1345a:	9b02      	ldr	r3, [sp, #8]
   1345c:	1ae3      	subs	r3, r4, r3
   1345e:	9304      	str	r3, [sp, #16]
   13460:	d00d      	beq.n	1347e <_vfiprintf_r+0x6a>
   13462:	9b04      	ldr	r3, [sp, #16]
   13464:	9a02      	ldr	r2, [sp, #8]
   13466:	0039      	movs	r1, r7
   13468:	0030      	movs	r0, r6
   1346a:	f7ff ffc0 	bl	133ee <__sfputs_r>
   1346e:	1c43      	adds	r3, r0, #1
   13470:	d100      	bne.n	13474 <_vfiprintf_r+0x60>
   13472:	e0cc      	b.n	1360e <_vfiprintf_r+0x1fa>
   13474:	696a      	ldr	r2, [r5, #20]
   13476:	9b04      	ldr	r3, [sp, #16]
   13478:	4694      	mov	ip, r2
   1347a:	4463      	add	r3, ip
   1347c:	616b      	str	r3, [r5, #20]
   1347e:	7823      	ldrb	r3, [r4, #0]
   13480:	2b00      	cmp	r3, #0
   13482:	d100      	bne.n	13486 <_vfiprintf_r+0x72>
   13484:	e0c3      	b.n	1360e <_vfiprintf_r+0x1fa>
   13486:	2201      	movs	r2, #1
   13488:	2300      	movs	r3, #0
   1348a:	4252      	negs	r2, r2
   1348c:	606a      	str	r2, [r5, #4]
   1348e:	a902      	add	r1, sp, #8
   13490:	3254      	adds	r2, #84	; 0x54
   13492:	1852      	adds	r2, r2, r1
   13494:	3401      	adds	r4, #1
   13496:	602b      	str	r3, [r5, #0]
   13498:	60eb      	str	r3, [r5, #12]
   1349a:	60ab      	str	r3, [r5, #8]
   1349c:	7013      	strb	r3, [r2, #0]
   1349e:	65ab      	str	r3, [r5, #88]	; 0x58
   134a0:	7821      	ldrb	r1, [r4, #0]
   134a2:	2205      	movs	r2, #5
   134a4:	4862      	ldr	r0, [pc, #392]	; (13630 <_vfiprintf_r+0x21c>)
   134a6:	f7fd fa75 	bl	10994 <memchr>
   134aa:	1c63      	adds	r3, r4, #1
   134ac:	469c      	mov	ip, r3
   134ae:	2800      	cmp	r0, #0
   134b0:	d135      	bne.n	1351e <_vfiprintf_r+0x10a>
   134b2:	6829      	ldr	r1, [r5, #0]
   134b4:	06cb      	lsls	r3, r1, #27
   134b6:	d504      	bpl.n	134c2 <_vfiprintf_r+0xae>
   134b8:	2353      	movs	r3, #83	; 0x53
   134ba:	aa02      	add	r2, sp, #8
   134bc:	3020      	adds	r0, #32
   134be:	189b      	adds	r3, r3, r2
   134c0:	7018      	strb	r0, [r3, #0]
   134c2:	070b      	lsls	r3, r1, #28
   134c4:	d504      	bpl.n	134d0 <_vfiprintf_r+0xbc>
   134c6:	2353      	movs	r3, #83	; 0x53
   134c8:	202b      	movs	r0, #43	; 0x2b
   134ca:	aa02      	add	r2, sp, #8
   134cc:	189b      	adds	r3, r3, r2
   134ce:	7018      	strb	r0, [r3, #0]
   134d0:	7823      	ldrb	r3, [r4, #0]
   134d2:	2b2a      	cmp	r3, #42	; 0x2a
   134d4:	d02c      	beq.n	13530 <_vfiprintf_r+0x11c>
   134d6:	2000      	movs	r0, #0
   134d8:	210a      	movs	r1, #10
   134da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   134dc:	7822      	ldrb	r2, [r4, #0]
   134de:	3a30      	subs	r2, #48	; 0x30
   134e0:	2a09      	cmp	r2, #9
   134e2:	d800      	bhi.n	134e6 <_vfiprintf_r+0xd2>
   134e4:	e06b      	b.n	135be <_vfiprintf_r+0x1aa>
   134e6:	2800      	cmp	r0, #0
   134e8:	d02a      	beq.n	13540 <_vfiprintf_r+0x12c>
   134ea:	9309      	str	r3, [sp, #36]	; 0x24
   134ec:	e028      	b.n	13540 <_vfiprintf_r+0x12c>
   134ee:	4b51      	ldr	r3, [pc, #324]	; (13634 <_vfiprintf_r+0x220>)
   134f0:	429f      	cmp	r7, r3
   134f2:	d101      	bne.n	134f8 <_vfiprintf_r+0xe4>
   134f4:	68b7      	ldr	r7, [r6, #8]
   134f6:	e79e      	b.n	13436 <_vfiprintf_r+0x22>
   134f8:	4b4f      	ldr	r3, [pc, #316]	; (13638 <_vfiprintf_r+0x224>)
   134fa:	429f      	cmp	r7, r3
   134fc:	d19b      	bne.n	13436 <_vfiprintf_r+0x22>
   134fe:	68f7      	ldr	r7, [r6, #12]
   13500:	e799      	b.n	13436 <_vfiprintf_r+0x22>
   13502:	0039      	movs	r1, r7
   13504:	0030      	movs	r0, r6
   13506:	f7fe fc23 	bl	11d50 <__swsetup_r>
   1350a:	2800      	cmp	r0, #0
   1350c:	d099      	beq.n	13442 <_vfiprintf_r+0x2e>
   1350e:	2001      	movs	r0, #1
   13510:	4240      	negs	r0, r0
   13512:	b01f      	add	sp, #124	; 0x7c
   13514:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13516:	2b25      	cmp	r3, #37	; 0x25
   13518:	d09f      	beq.n	1345a <_vfiprintf_r+0x46>
   1351a:	3401      	adds	r4, #1
   1351c:	e79a      	b.n	13454 <_vfiprintf_r+0x40>
   1351e:	4b44      	ldr	r3, [pc, #272]	; (13630 <_vfiprintf_r+0x21c>)
   13520:	6829      	ldr	r1, [r5, #0]
   13522:	1ac0      	subs	r0, r0, r3
   13524:	2301      	movs	r3, #1
   13526:	4083      	lsls	r3, r0
   13528:	430b      	orrs	r3, r1
   1352a:	602b      	str	r3, [r5, #0]
   1352c:	4664      	mov	r4, ip
   1352e:	e7b7      	b.n	134a0 <_vfiprintf_r+0x8c>
   13530:	9b05      	ldr	r3, [sp, #20]
   13532:	1d18      	adds	r0, r3, #4
   13534:	681b      	ldr	r3, [r3, #0]
   13536:	9005      	str	r0, [sp, #20]
   13538:	2b00      	cmp	r3, #0
   1353a:	db3a      	blt.n	135b2 <_vfiprintf_r+0x19e>
   1353c:	9309      	str	r3, [sp, #36]	; 0x24
   1353e:	4664      	mov	r4, ip
   13540:	7823      	ldrb	r3, [r4, #0]
   13542:	2b2e      	cmp	r3, #46	; 0x2e
   13544:	d10b      	bne.n	1355e <_vfiprintf_r+0x14a>
   13546:	7863      	ldrb	r3, [r4, #1]
   13548:	1c62      	adds	r2, r4, #1
   1354a:	2b2a      	cmp	r3, #42	; 0x2a
   1354c:	d13f      	bne.n	135ce <_vfiprintf_r+0x1ba>
   1354e:	9b05      	ldr	r3, [sp, #20]
   13550:	3402      	adds	r4, #2
   13552:	1d1a      	adds	r2, r3, #4
   13554:	681b      	ldr	r3, [r3, #0]
   13556:	9205      	str	r2, [sp, #20]
   13558:	2b00      	cmp	r3, #0
   1355a:	db35      	blt.n	135c8 <_vfiprintf_r+0x1b4>
   1355c:	9307      	str	r3, [sp, #28]
   1355e:	7821      	ldrb	r1, [r4, #0]
   13560:	2203      	movs	r2, #3
   13562:	4836      	ldr	r0, [pc, #216]	; (1363c <_vfiprintf_r+0x228>)
   13564:	f7fd fa16 	bl	10994 <memchr>
   13568:	2800      	cmp	r0, #0
   1356a:	d007      	beq.n	1357c <_vfiprintf_r+0x168>
   1356c:	4b33      	ldr	r3, [pc, #204]	; (1363c <_vfiprintf_r+0x228>)
   1356e:	682a      	ldr	r2, [r5, #0]
   13570:	1ac0      	subs	r0, r0, r3
   13572:	2340      	movs	r3, #64	; 0x40
   13574:	4083      	lsls	r3, r0
   13576:	4313      	orrs	r3, r2
   13578:	602b      	str	r3, [r5, #0]
   1357a:	3401      	adds	r4, #1
   1357c:	7821      	ldrb	r1, [r4, #0]
   1357e:	1c63      	adds	r3, r4, #1
   13580:	2206      	movs	r2, #6
   13582:	482f      	ldr	r0, [pc, #188]	; (13640 <_vfiprintf_r+0x22c>)
   13584:	9302      	str	r3, [sp, #8]
   13586:	7629      	strb	r1, [r5, #24]
   13588:	f7fd fa04 	bl	10994 <memchr>
   1358c:	2800      	cmp	r0, #0
   1358e:	d044      	beq.n	1361a <_vfiprintf_r+0x206>
   13590:	4b2c      	ldr	r3, [pc, #176]	; (13644 <_vfiprintf_r+0x230>)
   13592:	2b00      	cmp	r3, #0
   13594:	d12f      	bne.n	135f6 <_vfiprintf_r+0x1e2>
   13596:	6829      	ldr	r1, [r5, #0]
   13598:	9b05      	ldr	r3, [sp, #20]
   1359a:	2207      	movs	r2, #7
   1359c:	05c9      	lsls	r1, r1, #23
   1359e:	d528      	bpl.n	135f2 <_vfiprintf_r+0x1de>
   135a0:	189b      	adds	r3, r3, r2
   135a2:	4393      	bics	r3, r2
   135a4:	3308      	adds	r3, #8
   135a6:	9305      	str	r3, [sp, #20]
   135a8:	696b      	ldr	r3, [r5, #20]
   135aa:	9a03      	ldr	r2, [sp, #12]
   135ac:	189b      	adds	r3, r3, r2
   135ae:	616b      	str	r3, [r5, #20]
   135b0:	e74f      	b.n	13452 <_vfiprintf_r+0x3e>
   135b2:	425b      	negs	r3, r3
   135b4:	60eb      	str	r3, [r5, #12]
   135b6:	2302      	movs	r3, #2
   135b8:	430b      	orrs	r3, r1
   135ba:	602b      	str	r3, [r5, #0]
   135bc:	e7bf      	b.n	1353e <_vfiprintf_r+0x12a>
   135be:	434b      	muls	r3, r1
   135c0:	3401      	adds	r4, #1
   135c2:	189b      	adds	r3, r3, r2
   135c4:	2001      	movs	r0, #1
   135c6:	e789      	b.n	134dc <_vfiprintf_r+0xc8>
   135c8:	2301      	movs	r3, #1
   135ca:	425b      	negs	r3, r3
   135cc:	e7c6      	b.n	1355c <_vfiprintf_r+0x148>
   135ce:	2300      	movs	r3, #0
   135d0:	0014      	movs	r4, r2
   135d2:	200a      	movs	r0, #10
   135d4:	001a      	movs	r2, r3
   135d6:	606b      	str	r3, [r5, #4]
   135d8:	7821      	ldrb	r1, [r4, #0]
   135da:	3930      	subs	r1, #48	; 0x30
   135dc:	2909      	cmp	r1, #9
   135de:	d903      	bls.n	135e8 <_vfiprintf_r+0x1d4>
   135e0:	2b00      	cmp	r3, #0
   135e2:	d0bc      	beq.n	1355e <_vfiprintf_r+0x14a>
   135e4:	9207      	str	r2, [sp, #28]
   135e6:	e7ba      	b.n	1355e <_vfiprintf_r+0x14a>
   135e8:	4342      	muls	r2, r0
   135ea:	3401      	adds	r4, #1
   135ec:	1852      	adds	r2, r2, r1
   135ee:	2301      	movs	r3, #1
   135f0:	e7f2      	b.n	135d8 <_vfiprintf_r+0x1c4>
   135f2:	3307      	adds	r3, #7
   135f4:	e7d5      	b.n	135a2 <_vfiprintf_r+0x18e>
   135f6:	ab05      	add	r3, sp, #20
   135f8:	9300      	str	r3, [sp, #0]
   135fa:	003a      	movs	r2, r7
   135fc:	4b12      	ldr	r3, [pc, #72]	; (13648 <_vfiprintf_r+0x234>)
   135fe:	0029      	movs	r1, r5
   13600:	0030      	movs	r0, r6
   13602:	e000      	b.n	13606 <_vfiprintf_r+0x1f2>
   13604:	bf00      	nop
   13606:	9003      	str	r0, [sp, #12]
   13608:	9b03      	ldr	r3, [sp, #12]
   1360a:	3301      	adds	r3, #1
   1360c:	d1cc      	bne.n	135a8 <_vfiprintf_r+0x194>
   1360e:	89bb      	ldrh	r3, [r7, #12]
   13610:	065b      	lsls	r3, r3, #25
   13612:	d500      	bpl.n	13616 <_vfiprintf_r+0x202>
   13614:	e77b      	b.n	1350e <_vfiprintf_r+0xfa>
   13616:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13618:	e77b      	b.n	13512 <_vfiprintf_r+0xfe>
   1361a:	ab05      	add	r3, sp, #20
   1361c:	9300      	str	r3, [sp, #0]
   1361e:	003a      	movs	r2, r7
   13620:	4b09      	ldr	r3, [pc, #36]	; (13648 <_vfiprintf_r+0x234>)
   13622:	0029      	movs	r1, r5
   13624:	0030      	movs	r0, r6
   13626:	f000 f87f 	bl	13728 <_printf_i>
   1362a:	e7ec      	b.n	13606 <_vfiprintf_r+0x1f2>
   1362c:	00016274 	.word	0x00016274
   13630:	00016524 	.word	0x00016524
   13634:	00016294 	.word	0x00016294
   13638:	00016254 	.word	0x00016254
   1363c:	0001652a 	.word	0x0001652a
   13640:	0001652e 	.word	0x0001652e
   13644:	00000000 	.word	0x00000000
   13648:	000133ef 	.word	0x000133ef

0001364c <_printf_common>:
   1364c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1364e:	0015      	movs	r5, r2
   13650:	9301      	str	r3, [sp, #4]
   13652:	688a      	ldr	r2, [r1, #8]
   13654:	690b      	ldr	r3, [r1, #16]
   13656:	9000      	str	r0, [sp, #0]
   13658:	000c      	movs	r4, r1
   1365a:	4293      	cmp	r3, r2
   1365c:	da00      	bge.n	13660 <_printf_common+0x14>
   1365e:	0013      	movs	r3, r2
   13660:	0022      	movs	r2, r4
   13662:	602b      	str	r3, [r5, #0]
   13664:	3243      	adds	r2, #67	; 0x43
   13666:	7812      	ldrb	r2, [r2, #0]
   13668:	2a00      	cmp	r2, #0
   1366a:	d001      	beq.n	13670 <_printf_common+0x24>
   1366c:	3301      	adds	r3, #1
   1366e:	602b      	str	r3, [r5, #0]
   13670:	6823      	ldr	r3, [r4, #0]
   13672:	069b      	lsls	r3, r3, #26
   13674:	d502      	bpl.n	1367c <_printf_common+0x30>
   13676:	682b      	ldr	r3, [r5, #0]
   13678:	3302      	adds	r3, #2
   1367a:	602b      	str	r3, [r5, #0]
   1367c:	2706      	movs	r7, #6
   1367e:	6823      	ldr	r3, [r4, #0]
   13680:	401f      	ands	r7, r3
   13682:	d027      	beq.n	136d4 <_printf_common+0x88>
   13684:	0023      	movs	r3, r4
   13686:	3343      	adds	r3, #67	; 0x43
   13688:	781b      	ldrb	r3, [r3, #0]
   1368a:	1e5a      	subs	r2, r3, #1
   1368c:	4193      	sbcs	r3, r2
   1368e:	6822      	ldr	r2, [r4, #0]
   13690:	0692      	lsls	r2, r2, #26
   13692:	d430      	bmi.n	136f6 <_printf_common+0xaa>
   13694:	0022      	movs	r2, r4
   13696:	9901      	ldr	r1, [sp, #4]
   13698:	3243      	adds	r2, #67	; 0x43
   1369a:	9800      	ldr	r0, [sp, #0]
   1369c:	9e08      	ldr	r6, [sp, #32]
   1369e:	47b0      	blx	r6
   136a0:	1c43      	adds	r3, r0, #1
   136a2:	d025      	beq.n	136f0 <_printf_common+0xa4>
   136a4:	2306      	movs	r3, #6
   136a6:	6820      	ldr	r0, [r4, #0]
   136a8:	682a      	ldr	r2, [r5, #0]
   136aa:	68e1      	ldr	r1, [r4, #12]
   136ac:	4003      	ands	r3, r0
   136ae:	2500      	movs	r5, #0
   136b0:	2b04      	cmp	r3, #4
   136b2:	d103      	bne.n	136bc <_printf_common+0x70>
   136b4:	1a8d      	subs	r5, r1, r2
   136b6:	43eb      	mvns	r3, r5
   136b8:	17db      	asrs	r3, r3, #31
   136ba:	401d      	ands	r5, r3
   136bc:	68a3      	ldr	r3, [r4, #8]
   136be:	6922      	ldr	r2, [r4, #16]
   136c0:	4293      	cmp	r3, r2
   136c2:	dd01      	ble.n	136c8 <_printf_common+0x7c>
   136c4:	1a9b      	subs	r3, r3, r2
   136c6:	18ed      	adds	r5, r5, r3
   136c8:	2700      	movs	r7, #0
   136ca:	42bd      	cmp	r5, r7
   136cc:	d120      	bne.n	13710 <_printf_common+0xc4>
   136ce:	2000      	movs	r0, #0
   136d0:	e010      	b.n	136f4 <_printf_common+0xa8>
   136d2:	3701      	adds	r7, #1
   136d4:	68e3      	ldr	r3, [r4, #12]
   136d6:	682a      	ldr	r2, [r5, #0]
   136d8:	1a9b      	subs	r3, r3, r2
   136da:	429f      	cmp	r7, r3
   136dc:	dad2      	bge.n	13684 <_printf_common+0x38>
   136de:	0022      	movs	r2, r4
   136e0:	2301      	movs	r3, #1
   136e2:	3219      	adds	r2, #25
   136e4:	9901      	ldr	r1, [sp, #4]
   136e6:	9800      	ldr	r0, [sp, #0]
   136e8:	9e08      	ldr	r6, [sp, #32]
   136ea:	47b0      	blx	r6
   136ec:	1c43      	adds	r3, r0, #1
   136ee:	d1f0      	bne.n	136d2 <_printf_common+0x86>
   136f0:	2001      	movs	r0, #1
   136f2:	4240      	negs	r0, r0
   136f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   136f6:	2030      	movs	r0, #48	; 0x30
   136f8:	18e1      	adds	r1, r4, r3
   136fa:	3143      	adds	r1, #67	; 0x43
   136fc:	7008      	strb	r0, [r1, #0]
   136fe:	0021      	movs	r1, r4
   13700:	1c5a      	adds	r2, r3, #1
   13702:	3145      	adds	r1, #69	; 0x45
   13704:	7809      	ldrb	r1, [r1, #0]
   13706:	18a2      	adds	r2, r4, r2
   13708:	3243      	adds	r2, #67	; 0x43
   1370a:	3302      	adds	r3, #2
   1370c:	7011      	strb	r1, [r2, #0]
   1370e:	e7c1      	b.n	13694 <_printf_common+0x48>
   13710:	0022      	movs	r2, r4
   13712:	2301      	movs	r3, #1
   13714:	321a      	adds	r2, #26
   13716:	9901      	ldr	r1, [sp, #4]
   13718:	9800      	ldr	r0, [sp, #0]
   1371a:	9e08      	ldr	r6, [sp, #32]
   1371c:	47b0      	blx	r6
   1371e:	1c43      	adds	r3, r0, #1
   13720:	d0e6      	beq.n	136f0 <_printf_common+0xa4>
   13722:	3701      	adds	r7, #1
   13724:	e7d1      	b.n	136ca <_printf_common+0x7e>
	...

00013728 <_printf_i>:
   13728:	b5f0      	push	{r4, r5, r6, r7, lr}
   1372a:	b08b      	sub	sp, #44	; 0x2c
   1372c:	9206      	str	r2, [sp, #24]
   1372e:	000a      	movs	r2, r1
   13730:	3243      	adds	r2, #67	; 0x43
   13732:	9307      	str	r3, [sp, #28]
   13734:	9005      	str	r0, [sp, #20]
   13736:	9204      	str	r2, [sp, #16]
   13738:	7e0a      	ldrb	r2, [r1, #24]
   1373a:	000c      	movs	r4, r1
   1373c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1373e:	2a6e      	cmp	r2, #110	; 0x6e
   13740:	d100      	bne.n	13744 <_printf_i+0x1c>
   13742:	e08f      	b.n	13864 <_printf_i+0x13c>
   13744:	d817      	bhi.n	13776 <_printf_i+0x4e>
   13746:	2a63      	cmp	r2, #99	; 0x63
   13748:	d02c      	beq.n	137a4 <_printf_i+0x7c>
   1374a:	d808      	bhi.n	1375e <_printf_i+0x36>
   1374c:	2a00      	cmp	r2, #0
   1374e:	d100      	bne.n	13752 <_printf_i+0x2a>
   13750:	e099      	b.n	13886 <_printf_i+0x15e>
   13752:	2a58      	cmp	r2, #88	; 0x58
   13754:	d054      	beq.n	13800 <_printf_i+0xd8>
   13756:	0026      	movs	r6, r4
   13758:	3642      	adds	r6, #66	; 0x42
   1375a:	7032      	strb	r2, [r6, #0]
   1375c:	e029      	b.n	137b2 <_printf_i+0x8a>
   1375e:	2a64      	cmp	r2, #100	; 0x64
   13760:	d001      	beq.n	13766 <_printf_i+0x3e>
   13762:	2a69      	cmp	r2, #105	; 0x69
   13764:	d1f7      	bne.n	13756 <_printf_i+0x2e>
   13766:	6821      	ldr	r1, [r4, #0]
   13768:	681a      	ldr	r2, [r3, #0]
   1376a:	0608      	lsls	r0, r1, #24
   1376c:	d523      	bpl.n	137b6 <_printf_i+0x8e>
   1376e:	1d11      	adds	r1, r2, #4
   13770:	6019      	str	r1, [r3, #0]
   13772:	6815      	ldr	r5, [r2, #0]
   13774:	e025      	b.n	137c2 <_printf_i+0x9a>
   13776:	2a73      	cmp	r2, #115	; 0x73
   13778:	d100      	bne.n	1377c <_printf_i+0x54>
   1377a:	e088      	b.n	1388e <_printf_i+0x166>
   1377c:	d808      	bhi.n	13790 <_printf_i+0x68>
   1377e:	2a6f      	cmp	r2, #111	; 0x6f
   13780:	d029      	beq.n	137d6 <_printf_i+0xae>
   13782:	2a70      	cmp	r2, #112	; 0x70
   13784:	d1e7      	bne.n	13756 <_printf_i+0x2e>
   13786:	2220      	movs	r2, #32
   13788:	6809      	ldr	r1, [r1, #0]
   1378a:	430a      	orrs	r2, r1
   1378c:	6022      	str	r2, [r4, #0]
   1378e:	e003      	b.n	13798 <_printf_i+0x70>
   13790:	2a75      	cmp	r2, #117	; 0x75
   13792:	d020      	beq.n	137d6 <_printf_i+0xae>
   13794:	2a78      	cmp	r2, #120	; 0x78
   13796:	d1de      	bne.n	13756 <_printf_i+0x2e>
   13798:	0022      	movs	r2, r4
   1379a:	2178      	movs	r1, #120	; 0x78
   1379c:	3245      	adds	r2, #69	; 0x45
   1379e:	7011      	strb	r1, [r2, #0]
   137a0:	4a6c      	ldr	r2, [pc, #432]	; (13954 <_printf_i+0x22c>)
   137a2:	e030      	b.n	13806 <_printf_i+0xde>
   137a4:	000e      	movs	r6, r1
   137a6:	681a      	ldr	r2, [r3, #0]
   137a8:	3642      	adds	r6, #66	; 0x42
   137aa:	1d11      	adds	r1, r2, #4
   137ac:	6019      	str	r1, [r3, #0]
   137ae:	6813      	ldr	r3, [r2, #0]
   137b0:	7033      	strb	r3, [r6, #0]
   137b2:	2301      	movs	r3, #1
   137b4:	e079      	b.n	138aa <_printf_i+0x182>
   137b6:	0649      	lsls	r1, r1, #25
   137b8:	d5d9      	bpl.n	1376e <_printf_i+0x46>
   137ba:	1d11      	adds	r1, r2, #4
   137bc:	6019      	str	r1, [r3, #0]
   137be:	2300      	movs	r3, #0
   137c0:	5ed5      	ldrsh	r5, [r2, r3]
   137c2:	2d00      	cmp	r5, #0
   137c4:	da03      	bge.n	137ce <_printf_i+0xa6>
   137c6:	232d      	movs	r3, #45	; 0x2d
   137c8:	9a04      	ldr	r2, [sp, #16]
   137ca:	426d      	negs	r5, r5
   137cc:	7013      	strb	r3, [r2, #0]
   137ce:	4b62      	ldr	r3, [pc, #392]	; (13958 <_printf_i+0x230>)
   137d0:	270a      	movs	r7, #10
   137d2:	9303      	str	r3, [sp, #12]
   137d4:	e02f      	b.n	13836 <_printf_i+0x10e>
   137d6:	6820      	ldr	r0, [r4, #0]
   137d8:	6819      	ldr	r1, [r3, #0]
   137da:	0605      	lsls	r5, r0, #24
   137dc:	d503      	bpl.n	137e6 <_printf_i+0xbe>
   137de:	1d08      	adds	r0, r1, #4
   137e0:	6018      	str	r0, [r3, #0]
   137e2:	680d      	ldr	r5, [r1, #0]
   137e4:	e005      	b.n	137f2 <_printf_i+0xca>
   137e6:	0640      	lsls	r0, r0, #25
   137e8:	d5f9      	bpl.n	137de <_printf_i+0xb6>
   137ea:	680d      	ldr	r5, [r1, #0]
   137ec:	1d08      	adds	r0, r1, #4
   137ee:	6018      	str	r0, [r3, #0]
   137f0:	b2ad      	uxth	r5, r5
   137f2:	4b59      	ldr	r3, [pc, #356]	; (13958 <_printf_i+0x230>)
   137f4:	2708      	movs	r7, #8
   137f6:	9303      	str	r3, [sp, #12]
   137f8:	2a6f      	cmp	r2, #111	; 0x6f
   137fa:	d018      	beq.n	1382e <_printf_i+0x106>
   137fc:	270a      	movs	r7, #10
   137fe:	e016      	b.n	1382e <_printf_i+0x106>
   13800:	3145      	adds	r1, #69	; 0x45
   13802:	700a      	strb	r2, [r1, #0]
   13804:	4a54      	ldr	r2, [pc, #336]	; (13958 <_printf_i+0x230>)
   13806:	9203      	str	r2, [sp, #12]
   13808:	681a      	ldr	r2, [r3, #0]
   1380a:	6821      	ldr	r1, [r4, #0]
   1380c:	1d10      	adds	r0, r2, #4
   1380e:	6018      	str	r0, [r3, #0]
   13810:	6815      	ldr	r5, [r2, #0]
   13812:	0608      	lsls	r0, r1, #24
   13814:	d522      	bpl.n	1385c <_printf_i+0x134>
   13816:	07cb      	lsls	r3, r1, #31
   13818:	d502      	bpl.n	13820 <_printf_i+0xf8>
   1381a:	2320      	movs	r3, #32
   1381c:	4319      	orrs	r1, r3
   1381e:	6021      	str	r1, [r4, #0]
   13820:	2710      	movs	r7, #16
   13822:	2d00      	cmp	r5, #0
   13824:	d103      	bne.n	1382e <_printf_i+0x106>
   13826:	2320      	movs	r3, #32
   13828:	6822      	ldr	r2, [r4, #0]
   1382a:	439a      	bics	r2, r3
   1382c:	6022      	str	r2, [r4, #0]
   1382e:	0023      	movs	r3, r4
   13830:	2200      	movs	r2, #0
   13832:	3343      	adds	r3, #67	; 0x43
   13834:	701a      	strb	r2, [r3, #0]
   13836:	6863      	ldr	r3, [r4, #4]
   13838:	60a3      	str	r3, [r4, #8]
   1383a:	2b00      	cmp	r3, #0
   1383c:	db5c      	blt.n	138f8 <_printf_i+0x1d0>
   1383e:	2204      	movs	r2, #4
   13840:	6821      	ldr	r1, [r4, #0]
   13842:	4391      	bics	r1, r2
   13844:	6021      	str	r1, [r4, #0]
   13846:	2d00      	cmp	r5, #0
   13848:	d158      	bne.n	138fc <_printf_i+0x1d4>
   1384a:	9e04      	ldr	r6, [sp, #16]
   1384c:	2b00      	cmp	r3, #0
   1384e:	d064      	beq.n	1391a <_printf_i+0x1f2>
   13850:	0026      	movs	r6, r4
   13852:	9b03      	ldr	r3, [sp, #12]
   13854:	3642      	adds	r6, #66	; 0x42
   13856:	781b      	ldrb	r3, [r3, #0]
   13858:	7033      	strb	r3, [r6, #0]
   1385a:	e05e      	b.n	1391a <_printf_i+0x1f2>
   1385c:	0648      	lsls	r0, r1, #25
   1385e:	d5da      	bpl.n	13816 <_printf_i+0xee>
   13860:	b2ad      	uxth	r5, r5
   13862:	e7d8      	b.n	13816 <_printf_i+0xee>
   13864:	6809      	ldr	r1, [r1, #0]
   13866:	681a      	ldr	r2, [r3, #0]
   13868:	0608      	lsls	r0, r1, #24
   1386a:	d505      	bpl.n	13878 <_printf_i+0x150>
   1386c:	1d11      	adds	r1, r2, #4
   1386e:	6019      	str	r1, [r3, #0]
   13870:	6813      	ldr	r3, [r2, #0]
   13872:	6962      	ldr	r2, [r4, #20]
   13874:	601a      	str	r2, [r3, #0]
   13876:	e006      	b.n	13886 <_printf_i+0x15e>
   13878:	0649      	lsls	r1, r1, #25
   1387a:	d5f7      	bpl.n	1386c <_printf_i+0x144>
   1387c:	1d11      	adds	r1, r2, #4
   1387e:	6019      	str	r1, [r3, #0]
   13880:	6813      	ldr	r3, [r2, #0]
   13882:	8aa2      	ldrh	r2, [r4, #20]
   13884:	801a      	strh	r2, [r3, #0]
   13886:	2300      	movs	r3, #0
   13888:	9e04      	ldr	r6, [sp, #16]
   1388a:	6123      	str	r3, [r4, #16]
   1388c:	e054      	b.n	13938 <_printf_i+0x210>
   1388e:	681a      	ldr	r2, [r3, #0]
   13890:	1d11      	adds	r1, r2, #4
   13892:	6019      	str	r1, [r3, #0]
   13894:	6816      	ldr	r6, [r2, #0]
   13896:	2100      	movs	r1, #0
   13898:	6862      	ldr	r2, [r4, #4]
   1389a:	0030      	movs	r0, r6
   1389c:	f7fd f87a 	bl	10994 <memchr>
   138a0:	2800      	cmp	r0, #0
   138a2:	d001      	beq.n	138a8 <_printf_i+0x180>
   138a4:	1b80      	subs	r0, r0, r6
   138a6:	6060      	str	r0, [r4, #4]
   138a8:	6863      	ldr	r3, [r4, #4]
   138aa:	6123      	str	r3, [r4, #16]
   138ac:	2300      	movs	r3, #0
   138ae:	9a04      	ldr	r2, [sp, #16]
   138b0:	7013      	strb	r3, [r2, #0]
   138b2:	e041      	b.n	13938 <_printf_i+0x210>
   138b4:	6923      	ldr	r3, [r4, #16]
   138b6:	0032      	movs	r2, r6
   138b8:	9906      	ldr	r1, [sp, #24]
   138ba:	9805      	ldr	r0, [sp, #20]
   138bc:	9d07      	ldr	r5, [sp, #28]
   138be:	47a8      	blx	r5
   138c0:	1c43      	adds	r3, r0, #1
   138c2:	d043      	beq.n	1394c <_printf_i+0x224>
   138c4:	6823      	ldr	r3, [r4, #0]
   138c6:	2500      	movs	r5, #0
   138c8:	079b      	lsls	r3, r3, #30
   138ca:	d40f      	bmi.n	138ec <_printf_i+0x1c4>
   138cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   138ce:	68e0      	ldr	r0, [r4, #12]
   138d0:	4298      	cmp	r0, r3
   138d2:	da3d      	bge.n	13950 <_printf_i+0x228>
   138d4:	0018      	movs	r0, r3
   138d6:	e03b      	b.n	13950 <_printf_i+0x228>
   138d8:	0022      	movs	r2, r4
   138da:	2301      	movs	r3, #1
   138dc:	3219      	adds	r2, #25
   138de:	9906      	ldr	r1, [sp, #24]
   138e0:	9805      	ldr	r0, [sp, #20]
   138e2:	9e07      	ldr	r6, [sp, #28]
   138e4:	47b0      	blx	r6
   138e6:	1c43      	adds	r3, r0, #1
   138e8:	d030      	beq.n	1394c <_printf_i+0x224>
   138ea:	3501      	adds	r5, #1
   138ec:	68e3      	ldr	r3, [r4, #12]
   138ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   138f0:	1a9b      	subs	r3, r3, r2
   138f2:	429d      	cmp	r5, r3
   138f4:	dbf0      	blt.n	138d8 <_printf_i+0x1b0>
   138f6:	e7e9      	b.n	138cc <_printf_i+0x1a4>
   138f8:	2d00      	cmp	r5, #0
   138fa:	d0a9      	beq.n	13850 <_printf_i+0x128>
   138fc:	9e04      	ldr	r6, [sp, #16]
   138fe:	0028      	movs	r0, r5
   13900:	0039      	movs	r1, r7
   13902:	f7fa feb5 	bl	e670 <__aeabi_uidivmod>
   13906:	9b03      	ldr	r3, [sp, #12]
   13908:	3e01      	subs	r6, #1
   1390a:	5c5b      	ldrb	r3, [r3, r1]
   1390c:	0028      	movs	r0, r5
   1390e:	7033      	strb	r3, [r6, #0]
   13910:	0039      	movs	r1, r7
   13912:	f7fa fe27 	bl	e564 <__udivsi3>
   13916:	1e05      	subs	r5, r0, #0
   13918:	d1f1      	bne.n	138fe <_printf_i+0x1d6>
   1391a:	2f08      	cmp	r7, #8
   1391c:	d109      	bne.n	13932 <_printf_i+0x20a>
   1391e:	6823      	ldr	r3, [r4, #0]
   13920:	07db      	lsls	r3, r3, #31
   13922:	d506      	bpl.n	13932 <_printf_i+0x20a>
   13924:	6863      	ldr	r3, [r4, #4]
   13926:	6922      	ldr	r2, [r4, #16]
   13928:	4293      	cmp	r3, r2
   1392a:	dc02      	bgt.n	13932 <_printf_i+0x20a>
   1392c:	2330      	movs	r3, #48	; 0x30
   1392e:	3e01      	subs	r6, #1
   13930:	7033      	strb	r3, [r6, #0]
   13932:	9b04      	ldr	r3, [sp, #16]
   13934:	1b9b      	subs	r3, r3, r6
   13936:	6123      	str	r3, [r4, #16]
   13938:	9b07      	ldr	r3, [sp, #28]
   1393a:	aa09      	add	r2, sp, #36	; 0x24
   1393c:	9300      	str	r3, [sp, #0]
   1393e:	0021      	movs	r1, r4
   13940:	9b06      	ldr	r3, [sp, #24]
   13942:	9805      	ldr	r0, [sp, #20]
   13944:	f7ff fe82 	bl	1364c <_printf_common>
   13948:	1c43      	adds	r3, r0, #1
   1394a:	d1b3      	bne.n	138b4 <_printf_i+0x18c>
   1394c:	2001      	movs	r0, #1
   1394e:	4240      	negs	r0, r0
   13950:	b00b      	add	sp, #44	; 0x2c
   13952:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13954:	00016546 	.word	0x00016546
   13958:	00016535 	.word	0x00016535

0001395c <_scanf_chars>:
   1395c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1395e:	0015      	movs	r5, r2
   13960:	688a      	ldr	r2, [r1, #8]
   13962:	9001      	str	r0, [sp, #4]
   13964:	000c      	movs	r4, r1
   13966:	2a00      	cmp	r2, #0
   13968:	d106      	bne.n	13978 <_scanf_chars+0x1c>
   1396a:	698a      	ldr	r2, [r1, #24]
   1396c:	1e51      	subs	r1, r2, #1
   1396e:	418a      	sbcs	r2, r1
   13970:	2101      	movs	r1, #1
   13972:	4252      	negs	r2, r2
   13974:	430a      	orrs	r2, r1
   13976:	60a2      	str	r2, [r4, #8]
   13978:	6822      	ldr	r2, [r4, #0]
   1397a:	06d2      	lsls	r2, r2, #27
   1397c:	d403      	bmi.n	13986 <_scanf_chars+0x2a>
   1397e:	681a      	ldr	r2, [r3, #0]
   13980:	1d11      	adds	r1, r2, #4
   13982:	6019      	str	r1, [r3, #0]
   13984:	6817      	ldr	r7, [r2, #0]
   13986:	2600      	movs	r6, #0
   13988:	69a3      	ldr	r3, [r4, #24]
   1398a:	2b00      	cmp	r3, #0
   1398c:	d01c      	beq.n	139c8 <_scanf_chars+0x6c>
   1398e:	2b01      	cmp	r3, #1
   13990:	d108      	bne.n	139a4 <_scanf_chars+0x48>
   13992:	682b      	ldr	r3, [r5, #0]
   13994:	6962      	ldr	r2, [r4, #20]
   13996:	781b      	ldrb	r3, [r3, #0]
   13998:	5cd3      	ldrb	r3, [r2, r3]
   1399a:	2b00      	cmp	r3, #0
   1399c:	d114      	bne.n	139c8 <_scanf_chars+0x6c>
   1399e:	2e00      	cmp	r6, #0
   139a0:	d130      	bne.n	13a04 <_scanf_chars+0xa8>
   139a2:	e006      	b.n	139b2 <_scanf_chars+0x56>
   139a4:	2b02      	cmp	r3, #2
   139a6:	d006      	beq.n	139b6 <_scanf_chars+0x5a>
   139a8:	2e00      	cmp	r6, #0
   139aa:	d12b      	bne.n	13a04 <_scanf_chars+0xa8>
   139ac:	69a3      	ldr	r3, [r4, #24]
   139ae:	2b01      	cmp	r3, #1
   139b0:	d128      	bne.n	13a04 <_scanf_chars+0xa8>
   139b2:	2001      	movs	r0, #1
   139b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   139b6:	f7fc ff4d 	bl	10854 <__locale_ctype_ptr>
   139ba:	2208      	movs	r2, #8
   139bc:	682b      	ldr	r3, [r5, #0]
   139be:	781b      	ldrb	r3, [r3, #0]
   139c0:	18c0      	adds	r0, r0, r3
   139c2:	7843      	ldrb	r3, [r0, #1]
   139c4:	4213      	tst	r3, r2
   139c6:	d1ef      	bne.n	139a8 <_scanf_chars+0x4c>
   139c8:	2210      	movs	r2, #16
   139ca:	6823      	ldr	r3, [r4, #0]
   139cc:	3601      	adds	r6, #1
   139ce:	4213      	tst	r3, r2
   139d0:	d103      	bne.n	139da <_scanf_chars+0x7e>
   139d2:	682b      	ldr	r3, [r5, #0]
   139d4:	781b      	ldrb	r3, [r3, #0]
   139d6:	703b      	strb	r3, [r7, #0]
   139d8:	3701      	adds	r7, #1
   139da:	682a      	ldr	r2, [r5, #0]
   139dc:	686b      	ldr	r3, [r5, #4]
   139de:	3201      	adds	r2, #1
   139e0:	602a      	str	r2, [r5, #0]
   139e2:	68a2      	ldr	r2, [r4, #8]
   139e4:	3b01      	subs	r3, #1
   139e6:	3a01      	subs	r2, #1
   139e8:	606b      	str	r3, [r5, #4]
   139ea:	60a2      	str	r2, [r4, #8]
   139ec:	2a00      	cmp	r2, #0
   139ee:	d009      	beq.n	13a04 <_scanf_chars+0xa8>
   139f0:	2b00      	cmp	r3, #0
   139f2:	dcc9      	bgt.n	13988 <_scanf_chars+0x2c>
   139f4:	23c0      	movs	r3, #192	; 0xc0
   139f6:	005b      	lsls	r3, r3, #1
   139f8:	58e3      	ldr	r3, [r4, r3]
   139fa:	0029      	movs	r1, r5
   139fc:	9801      	ldr	r0, [sp, #4]
   139fe:	4798      	blx	r3
   13a00:	2800      	cmp	r0, #0
   13a02:	d0c1      	beq.n	13988 <_scanf_chars+0x2c>
   13a04:	2310      	movs	r3, #16
   13a06:	6822      	ldr	r2, [r4, #0]
   13a08:	4013      	ands	r3, r2
   13a0a:	d106      	bne.n	13a1a <_scanf_chars+0xbe>
   13a0c:	68e2      	ldr	r2, [r4, #12]
   13a0e:	3201      	adds	r2, #1
   13a10:	60e2      	str	r2, [r4, #12]
   13a12:	69a2      	ldr	r2, [r4, #24]
   13a14:	2a00      	cmp	r2, #0
   13a16:	d000      	beq.n	13a1a <_scanf_chars+0xbe>
   13a18:	703b      	strb	r3, [r7, #0]
   13a1a:	6923      	ldr	r3, [r4, #16]
   13a1c:	2000      	movs	r0, #0
   13a1e:	199e      	adds	r6, r3, r6
   13a20:	6126      	str	r6, [r4, #16]
   13a22:	e7c7      	b.n	139b4 <_scanf_chars+0x58>

00013a24 <_scanf_i>:
   13a24:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a26:	000c      	movs	r4, r1
   13a28:	b08d      	sub	sp, #52	; 0x34
   13a2a:	9302      	str	r3, [sp, #8]
   13a2c:	4b77      	ldr	r3, [pc, #476]	; (13c0c <_scanf_i+0x1e8>)
   13a2e:	9005      	str	r0, [sp, #20]
   13a30:	0016      	movs	r6, r2
   13a32:	aa09      	add	r2, sp, #36	; 0x24
   13a34:	cb23      	ldmia	r3!, {r0, r1, r5}
   13a36:	c223      	stmia	r2!, {r0, r1, r5}
   13a38:	4b75      	ldr	r3, [pc, #468]	; (13c10 <_scanf_i+0x1ec>)
   13a3a:	9306      	str	r3, [sp, #24]
   13a3c:	69a3      	ldr	r3, [r4, #24]
   13a3e:	2b03      	cmp	r3, #3
   13a40:	d001      	beq.n	13a46 <_scanf_i+0x22>
   13a42:	4b74      	ldr	r3, [pc, #464]	; (13c14 <_scanf_i+0x1f0>)
   13a44:	9306      	str	r3, [sp, #24]
   13a46:	22ae      	movs	r2, #174	; 0xae
   13a48:	2000      	movs	r0, #0
   13a4a:	68a3      	ldr	r3, [r4, #8]
   13a4c:	0052      	lsls	r2, r2, #1
   13a4e:	1e59      	subs	r1, r3, #1
   13a50:	9004      	str	r0, [sp, #16]
   13a52:	4291      	cmp	r1, r2
   13a54:	d905      	bls.n	13a62 <_scanf_i+0x3e>
   13a56:	3b5e      	subs	r3, #94	; 0x5e
   13a58:	3bff      	subs	r3, #255	; 0xff
   13a5a:	9304      	str	r3, [sp, #16]
   13a5c:	235e      	movs	r3, #94	; 0x5e
   13a5e:	33ff      	adds	r3, #255	; 0xff
   13a60:	60a3      	str	r3, [r4, #8]
   13a62:	0023      	movs	r3, r4
   13a64:	331c      	adds	r3, #28
   13a66:	9301      	str	r3, [sp, #4]
   13a68:	23d0      	movs	r3, #208	; 0xd0
   13a6a:	2700      	movs	r7, #0
   13a6c:	6822      	ldr	r2, [r4, #0]
   13a6e:	011b      	lsls	r3, r3, #4
   13a70:	4313      	orrs	r3, r2
   13a72:	6023      	str	r3, [r4, #0]
   13a74:	9b01      	ldr	r3, [sp, #4]
   13a76:	9303      	str	r3, [sp, #12]
   13a78:	6833      	ldr	r3, [r6, #0]
   13a7a:	a809      	add	r0, sp, #36	; 0x24
   13a7c:	7819      	ldrb	r1, [r3, #0]
   13a7e:	00bb      	lsls	r3, r7, #2
   13a80:	2202      	movs	r2, #2
   13a82:	5818      	ldr	r0, [r3, r0]
   13a84:	f7fc ff86 	bl	10994 <memchr>
   13a88:	2800      	cmp	r0, #0
   13a8a:	d02b      	beq.n	13ae4 <_scanf_i+0xc0>
   13a8c:	2f01      	cmp	r7, #1
   13a8e:	d15f      	bne.n	13b50 <_scanf_i+0x12c>
   13a90:	6863      	ldr	r3, [r4, #4]
   13a92:	2b00      	cmp	r3, #0
   13a94:	d106      	bne.n	13aa4 <_scanf_i+0x80>
   13a96:	3308      	adds	r3, #8
   13a98:	6822      	ldr	r2, [r4, #0]
   13a9a:	6063      	str	r3, [r4, #4]
   13a9c:	33f9      	adds	r3, #249	; 0xf9
   13a9e:	33ff      	adds	r3, #255	; 0xff
   13aa0:	4313      	orrs	r3, r2
   13aa2:	6023      	str	r3, [r4, #0]
   13aa4:	4b5c      	ldr	r3, [pc, #368]	; (13c18 <_scanf_i+0x1f4>)
   13aa6:	6822      	ldr	r2, [r4, #0]
   13aa8:	4013      	ands	r3, r2
   13aaa:	6023      	str	r3, [r4, #0]
   13aac:	68a3      	ldr	r3, [r4, #8]
   13aae:	1e5a      	subs	r2, r3, #1
   13ab0:	60a2      	str	r2, [r4, #8]
   13ab2:	2b00      	cmp	r3, #0
   13ab4:	d016      	beq.n	13ae4 <_scanf_i+0xc0>
   13ab6:	9b03      	ldr	r3, [sp, #12]
   13ab8:	1c5d      	adds	r5, r3, #1
   13aba:	6833      	ldr	r3, [r6, #0]
   13abc:	1c5a      	adds	r2, r3, #1
   13abe:	6032      	str	r2, [r6, #0]
   13ac0:	781b      	ldrb	r3, [r3, #0]
   13ac2:	9a03      	ldr	r2, [sp, #12]
   13ac4:	9503      	str	r5, [sp, #12]
   13ac6:	7013      	strb	r3, [r2, #0]
   13ac8:	6873      	ldr	r3, [r6, #4]
   13aca:	3b01      	subs	r3, #1
   13acc:	6073      	str	r3, [r6, #4]
   13ace:	2b00      	cmp	r3, #0
   13ad0:	dc08      	bgt.n	13ae4 <_scanf_i+0xc0>
   13ad2:	23c0      	movs	r3, #192	; 0xc0
   13ad4:	005b      	lsls	r3, r3, #1
   13ad6:	58e3      	ldr	r3, [r4, r3]
   13ad8:	0031      	movs	r1, r6
   13ada:	9805      	ldr	r0, [sp, #20]
   13adc:	9307      	str	r3, [sp, #28]
   13ade:	4798      	blx	r3
   13ae0:	2800      	cmp	r0, #0
   13ae2:	d17d      	bne.n	13be0 <_scanf_i+0x1bc>
   13ae4:	3701      	adds	r7, #1
   13ae6:	2f03      	cmp	r7, #3
   13ae8:	d1c6      	bne.n	13a78 <_scanf_i+0x54>
   13aea:	6863      	ldr	r3, [r4, #4]
   13aec:	2b00      	cmp	r3, #0
   13aee:	d101      	bne.n	13af4 <_scanf_i+0xd0>
   13af0:	330a      	adds	r3, #10
   13af2:	6063      	str	r3, [r4, #4]
   13af4:	2110      	movs	r1, #16
   13af6:	2700      	movs	r7, #0
   13af8:	6863      	ldr	r3, [r4, #4]
   13afa:	6960      	ldr	r0, [r4, #20]
   13afc:	1ac9      	subs	r1, r1, r3
   13afe:	4b47      	ldr	r3, [pc, #284]	; (13c1c <_scanf_i+0x1f8>)
   13b00:	18c9      	adds	r1, r1, r3
   13b02:	f000 f8d9 	bl	13cb8 <__sccl>
   13b06:	9d03      	ldr	r5, [sp, #12]
   13b08:	68a3      	ldr	r3, [r4, #8]
   13b0a:	2b00      	cmp	r3, #0
   13b0c:	d041      	beq.n	13b92 <_scanf_i+0x16e>
   13b0e:	6832      	ldr	r2, [r6, #0]
   13b10:	6960      	ldr	r0, [r4, #20]
   13b12:	7811      	ldrb	r1, [r2, #0]
   13b14:	5c40      	ldrb	r0, [r0, r1]
   13b16:	2800      	cmp	r0, #0
   13b18:	d03b      	beq.n	13b92 <_scanf_i+0x16e>
   13b1a:	2930      	cmp	r1, #48	; 0x30
   13b1c:	d128      	bne.n	13b70 <_scanf_i+0x14c>
   13b1e:	2080      	movs	r0, #128	; 0x80
   13b20:	6821      	ldr	r1, [r4, #0]
   13b22:	0100      	lsls	r0, r0, #4
   13b24:	4201      	tst	r1, r0
   13b26:	d023      	beq.n	13b70 <_scanf_i+0x14c>
   13b28:	9a04      	ldr	r2, [sp, #16]
   13b2a:	3701      	adds	r7, #1
   13b2c:	2a00      	cmp	r2, #0
   13b2e:	d003      	beq.n	13b38 <_scanf_i+0x114>
   13b30:	3a01      	subs	r2, #1
   13b32:	3301      	adds	r3, #1
   13b34:	9204      	str	r2, [sp, #16]
   13b36:	60a3      	str	r3, [r4, #8]
   13b38:	6873      	ldr	r3, [r6, #4]
   13b3a:	3b01      	subs	r3, #1
   13b3c:	6073      	str	r3, [r6, #4]
   13b3e:	2b00      	cmp	r3, #0
   13b40:	dd1e      	ble.n	13b80 <_scanf_i+0x15c>
   13b42:	6833      	ldr	r3, [r6, #0]
   13b44:	3301      	adds	r3, #1
   13b46:	6033      	str	r3, [r6, #0]
   13b48:	68a3      	ldr	r3, [r4, #8]
   13b4a:	3b01      	subs	r3, #1
   13b4c:	60a3      	str	r3, [r4, #8]
   13b4e:	e7db      	b.n	13b08 <_scanf_i+0xe4>
   13b50:	2f02      	cmp	r7, #2
   13b52:	d1ab      	bne.n	13aac <_scanf_i+0x88>
   13b54:	21c0      	movs	r1, #192	; 0xc0
   13b56:	2380      	movs	r3, #128	; 0x80
   13b58:	6822      	ldr	r2, [r4, #0]
   13b5a:	00c9      	lsls	r1, r1, #3
   13b5c:	4011      	ands	r1, r2
   13b5e:	009b      	lsls	r3, r3, #2
   13b60:	4299      	cmp	r1, r3
   13b62:	d1c2      	bne.n	13aea <_scanf_i+0xc6>
   13b64:	3bf1      	subs	r3, #241	; 0xf1
   13b66:	3bff      	subs	r3, #255	; 0xff
   13b68:	6063      	str	r3, [r4, #4]
   13b6a:	33f0      	adds	r3, #240	; 0xf0
   13b6c:	4313      	orrs	r3, r2
   13b6e:	e79c      	b.n	13aaa <_scanf_i+0x86>
   13b70:	6821      	ldr	r1, [r4, #0]
   13b72:	4b2b      	ldr	r3, [pc, #172]	; (13c20 <_scanf_i+0x1fc>)
   13b74:	400b      	ands	r3, r1
   13b76:	6023      	str	r3, [r4, #0]
   13b78:	7813      	ldrb	r3, [r2, #0]
   13b7a:	702b      	strb	r3, [r5, #0]
   13b7c:	3501      	adds	r5, #1
   13b7e:	e7db      	b.n	13b38 <_scanf_i+0x114>
   13b80:	23c0      	movs	r3, #192	; 0xc0
   13b82:	005b      	lsls	r3, r3, #1
   13b84:	58e3      	ldr	r3, [r4, r3]
   13b86:	0031      	movs	r1, r6
   13b88:	9805      	ldr	r0, [sp, #20]
   13b8a:	9303      	str	r3, [sp, #12]
   13b8c:	4798      	blx	r3
   13b8e:	2800      	cmp	r0, #0
   13b90:	d0da      	beq.n	13b48 <_scanf_i+0x124>
   13b92:	6823      	ldr	r3, [r4, #0]
   13b94:	05db      	lsls	r3, r3, #23
   13b96:	d50e      	bpl.n	13bb6 <_scanf_i+0x192>
   13b98:	9b01      	ldr	r3, [sp, #4]
   13b9a:	429d      	cmp	r5, r3
   13b9c:	d907      	bls.n	13bae <_scanf_i+0x18a>
   13b9e:	23be      	movs	r3, #190	; 0xbe
   13ba0:	3d01      	subs	r5, #1
   13ba2:	005b      	lsls	r3, r3, #1
   13ba4:	7829      	ldrb	r1, [r5, #0]
   13ba6:	58e3      	ldr	r3, [r4, r3]
   13ba8:	0032      	movs	r2, r6
   13baa:	9805      	ldr	r0, [sp, #20]
   13bac:	4798      	blx	r3
   13bae:	9b01      	ldr	r3, [sp, #4]
   13bb0:	2001      	movs	r0, #1
   13bb2:	429d      	cmp	r5, r3
   13bb4:	d027      	beq.n	13c06 <_scanf_i+0x1e2>
   13bb6:	2210      	movs	r2, #16
   13bb8:	6823      	ldr	r3, [r4, #0]
   13bba:	401a      	ands	r2, r3
   13bbc:	d11c      	bne.n	13bf8 <_scanf_i+0x1d4>
   13bbe:	702a      	strb	r2, [r5, #0]
   13bc0:	6863      	ldr	r3, [r4, #4]
   13bc2:	9901      	ldr	r1, [sp, #4]
   13bc4:	9805      	ldr	r0, [sp, #20]
   13bc6:	9e06      	ldr	r6, [sp, #24]
   13bc8:	47b0      	blx	r6
   13bca:	9b02      	ldr	r3, [sp, #8]
   13bcc:	6822      	ldr	r2, [r4, #0]
   13bce:	681b      	ldr	r3, [r3, #0]
   13bd0:	0691      	lsls	r1, r2, #26
   13bd2:	d507      	bpl.n	13be4 <_scanf_i+0x1c0>
   13bd4:	9902      	ldr	r1, [sp, #8]
   13bd6:	1d1a      	adds	r2, r3, #4
   13bd8:	600a      	str	r2, [r1, #0]
   13bda:	681b      	ldr	r3, [r3, #0]
   13bdc:	6018      	str	r0, [r3, #0]
   13bde:	e008      	b.n	13bf2 <_scanf_i+0x1ce>
   13be0:	2700      	movs	r7, #0
   13be2:	e7d6      	b.n	13b92 <_scanf_i+0x16e>
   13be4:	07d1      	lsls	r1, r2, #31
   13be6:	d5f5      	bpl.n	13bd4 <_scanf_i+0x1b0>
   13be8:	9902      	ldr	r1, [sp, #8]
   13bea:	1d1a      	adds	r2, r3, #4
   13bec:	600a      	str	r2, [r1, #0]
   13bee:	681b      	ldr	r3, [r3, #0]
   13bf0:	8018      	strh	r0, [r3, #0]
   13bf2:	68e3      	ldr	r3, [r4, #12]
   13bf4:	3301      	adds	r3, #1
   13bf6:	60e3      	str	r3, [r4, #12]
   13bf8:	2000      	movs	r0, #0
   13bfa:	9b01      	ldr	r3, [sp, #4]
   13bfc:	1aed      	subs	r5, r5, r3
   13bfe:	6923      	ldr	r3, [r4, #16]
   13c00:	19ef      	adds	r7, r5, r7
   13c02:	19df      	adds	r7, r3, r7
   13c04:	6127      	str	r7, [r4, #16]
   13c06:	b00d      	add	sp, #52	; 0x34
   13c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c0a:	46c0      	nop			; (mov r8, r8)
   13c0c:	00016558 	.word	0x00016558
   13c10:	00013e29 	.word	0x00013e29
   13c14:	00013f59 	.word	0x00013f59
   13c18:	fffffaff 	.word	0xfffffaff
   13c1c:	00016564 	.word	0x00016564
   13c20:	fffff6ff 	.word	0xfffff6ff

00013c24 <_putc_r>:
   13c24:	b570      	push	{r4, r5, r6, lr}
   13c26:	0006      	movs	r6, r0
   13c28:	000d      	movs	r5, r1
   13c2a:	0014      	movs	r4, r2
   13c2c:	2800      	cmp	r0, #0
   13c2e:	d004      	beq.n	13c3a <_putc_r+0x16>
   13c30:	6983      	ldr	r3, [r0, #24]
   13c32:	2b00      	cmp	r3, #0
   13c34:	d101      	bne.n	13c3a <_putc_r+0x16>
   13c36:	f7fc fd4f 	bl	106d8 <__sinit>
   13c3a:	4b12      	ldr	r3, [pc, #72]	; (13c84 <_putc_r+0x60>)
   13c3c:	429c      	cmp	r4, r3
   13c3e:	d111      	bne.n	13c64 <_putc_r+0x40>
   13c40:	6874      	ldr	r4, [r6, #4]
   13c42:	68a3      	ldr	r3, [r4, #8]
   13c44:	3b01      	subs	r3, #1
   13c46:	60a3      	str	r3, [r4, #8]
   13c48:	2b00      	cmp	r3, #0
   13c4a:	da05      	bge.n	13c58 <_putc_r+0x34>
   13c4c:	69a2      	ldr	r2, [r4, #24]
   13c4e:	4293      	cmp	r3, r2
   13c50:	db12      	blt.n	13c78 <_putc_r+0x54>
   13c52:	b2eb      	uxtb	r3, r5
   13c54:	2b0a      	cmp	r3, #10
   13c56:	d00f      	beq.n	13c78 <_putc_r+0x54>
   13c58:	6823      	ldr	r3, [r4, #0]
   13c5a:	b2e8      	uxtb	r0, r5
   13c5c:	1c5a      	adds	r2, r3, #1
   13c5e:	6022      	str	r2, [r4, #0]
   13c60:	701d      	strb	r5, [r3, #0]
   13c62:	bd70      	pop	{r4, r5, r6, pc}
   13c64:	4b08      	ldr	r3, [pc, #32]	; (13c88 <_putc_r+0x64>)
   13c66:	429c      	cmp	r4, r3
   13c68:	d101      	bne.n	13c6e <_putc_r+0x4a>
   13c6a:	68b4      	ldr	r4, [r6, #8]
   13c6c:	e7e9      	b.n	13c42 <_putc_r+0x1e>
   13c6e:	4b07      	ldr	r3, [pc, #28]	; (13c8c <_putc_r+0x68>)
   13c70:	429c      	cmp	r4, r3
   13c72:	d1e6      	bne.n	13c42 <_putc_r+0x1e>
   13c74:	68f4      	ldr	r4, [r6, #12]
   13c76:	e7e4      	b.n	13c42 <_putc_r+0x1e>
   13c78:	0022      	movs	r2, r4
   13c7a:	0029      	movs	r1, r5
   13c7c:	0030      	movs	r0, r6
   13c7e:	f7fd fff1 	bl	11c64 <__swbuf_r>
   13c82:	e7ee      	b.n	13c62 <_putc_r+0x3e>
   13c84:	00016274 	.word	0x00016274
   13c88:	00016294 	.word	0x00016294
   13c8c:	00016254 	.word	0x00016254

00013c90 <_read_r>:
   13c90:	b570      	push	{r4, r5, r6, lr}
   13c92:	0005      	movs	r5, r0
   13c94:	0008      	movs	r0, r1
   13c96:	0011      	movs	r1, r2
   13c98:	2200      	movs	r2, #0
   13c9a:	4c06      	ldr	r4, [pc, #24]	; (13cb4 <_read_r+0x24>)
   13c9c:	6022      	str	r2, [r4, #0]
   13c9e:	001a      	movs	r2, r3
   13ca0:	f7f0 fe48 	bl	4934 <_read>
   13ca4:	1c43      	adds	r3, r0, #1
   13ca6:	d103      	bne.n	13cb0 <_read_r+0x20>
   13ca8:	6823      	ldr	r3, [r4, #0]
   13caa:	2b00      	cmp	r3, #0
   13cac:	d000      	beq.n	13cb0 <_read_r+0x20>
   13cae:	602b      	str	r3, [r5, #0]
   13cb0:	bd70      	pop	{r4, r5, r6, pc}
   13cb2:	46c0      	nop			; (mov r8, r8)
   13cb4:	20002cfc 	.word	0x20002cfc

00013cb8 <__sccl>:
   13cb8:	b570      	push	{r4, r5, r6, lr}
   13cba:	780b      	ldrb	r3, [r1, #0]
   13cbc:	2b5e      	cmp	r3, #94	; 0x5e
   13cbe:	d00d      	beq.n	13cdc <__sccl+0x24>
   13cc0:	1c4a      	adds	r2, r1, #1
   13cc2:	2100      	movs	r1, #0
   13cc4:	0004      	movs	r4, r0
   13cc6:	1c45      	adds	r5, r0, #1
   13cc8:	35ff      	adds	r5, #255	; 0xff
   13cca:	7021      	strb	r1, [r4, #0]
   13ccc:	3401      	adds	r4, #1
   13cce:	42a5      	cmp	r5, r4
   13cd0:	d1fb      	bne.n	13cca <__sccl+0x12>
   13cd2:	2b00      	cmp	r3, #0
   13cd4:	d106      	bne.n	13ce4 <__sccl+0x2c>
   13cd6:	3a01      	subs	r2, #1
   13cd8:	0010      	movs	r0, r2
   13cda:	bd70      	pop	{r4, r5, r6, pc}
   13cdc:	1c8a      	adds	r2, r1, #2
   13cde:	784b      	ldrb	r3, [r1, #1]
   13ce0:	2101      	movs	r1, #1
   13ce2:	e7ef      	b.n	13cc4 <__sccl+0xc>
   13ce4:	2401      	movs	r4, #1
   13ce6:	404c      	eors	r4, r1
   13ce8:	0011      	movs	r1, r2
   13cea:	54c4      	strb	r4, [r0, r3]
   13cec:	780d      	ldrb	r5, [r1, #0]
   13cee:	1c4a      	adds	r2, r1, #1
   13cf0:	2d2d      	cmp	r5, #45	; 0x2d
   13cf2:	d007      	beq.n	13d04 <__sccl+0x4c>
   13cf4:	2d5d      	cmp	r5, #93	; 0x5d
   13cf6:	d0ef      	beq.n	13cd8 <__sccl+0x20>
   13cf8:	2d00      	cmp	r5, #0
   13cfa:	d101      	bne.n	13d00 <__sccl+0x48>
   13cfc:	000a      	movs	r2, r1
   13cfe:	e7eb      	b.n	13cd8 <__sccl+0x20>
   13d00:	002b      	movs	r3, r5
   13d02:	e7f1      	b.n	13ce8 <__sccl+0x30>
   13d04:	784e      	ldrb	r6, [r1, #1]
   13d06:	2e5d      	cmp	r6, #93	; 0x5d
   13d08:	d0fa      	beq.n	13d00 <__sccl+0x48>
   13d0a:	42b3      	cmp	r3, r6
   13d0c:	dcf8      	bgt.n	13d00 <__sccl+0x48>
   13d0e:	3102      	adds	r1, #2
   13d10:	3301      	adds	r3, #1
   13d12:	54c4      	strb	r4, [r0, r3]
   13d14:	429e      	cmp	r6, r3
   13d16:	dcfb      	bgt.n	13d10 <__sccl+0x58>
   13d18:	e7e8      	b.n	13cec <__sccl+0x34>
	...

00013d1c <_strtol_l.isra.0>:
   13d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d1e:	001f      	movs	r7, r3
   13d20:	000e      	movs	r6, r1
   13d22:	b087      	sub	sp, #28
   13d24:	9005      	str	r0, [sp, #20]
   13d26:	9103      	str	r1, [sp, #12]
   13d28:	9202      	str	r2, [sp, #8]
   13d2a:	980c      	ldr	r0, [sp, #48]	; 0x30
   13d2c:	7834      	ldrb	r4, [r6, #0]
   13d2e:	f7fc fd8d 	bl	1084c <__locale_ctype_ptr_l>
   13d32:	2208      	movs	r2, #8
   13d34:	1900      	adds	r0, r0, r4
   13d36:	7843      	ldrb	r3, [r0, #1]
   13d38:	1c75      	adds	r5, r6, #1
   13d3a:	4013      	ands	r3, r2
   13d3c:	d10c      	bne.n	13d58 <_strtol_l.isra.0+0x3c>
   13d3e:	2c2d      	cmp	r4, #45	; 0x2d
   13d40:	d10c      	bne.n	13d5c <_strtol_l.isra.0+0x40>
   13d42:	3301      	adds	r3, #1
   13d44:	782c      	ldrb	r4, [r5, #0]
   13d46:	9301      	str	r3, [sp, #4]
   13d48:	1cb5      	adds	r5, r6, #2
   13d4a:	2f00      	cmp	r7, #0
   13d4c:	d00c      	beq.n	13d68 <_strtol_l.isra.0+0x4c>
   13d4e:	2f10      	cmp	r7, #16
   13d50:	d114      	bne.n	13d7c <_strtol_l.isra.0+0x60>
   13d52:	2c30      	cmp	r4, #48	; 0x30
   13d54:	d00a      	beq.n	13d6c <_strtol_l.isra.0+0x50>
   13d56:	e011      	b.n	13d7c <_strtol_l.isra.0+0x60>
   13d58:	002e      	movs	r6, r5
   13d5a:	e7e6      	b.n	13d2a <_strtol_l.isra.0+0xe>
   13d5c:	9301      	str	r3, [sp, #4]
   13d5e:	2c2b      	cmp	r4, #43	; 0x2b
   13d60:	d1f3      	bne.n	13d4a <_strtol_l.isra.0+0x2e>
   13d62:	782c      	ldrb	r4, [r5, #0]
   13d64:	1cb5      	adds	r5, r6, #2
   13d66:	e7f0      	b.n	13d4a <_strtol_l.isra.0+0x2e>
   13d68:	2c30      	cmp	r4, #48	; 0x30
   13d6a:	d12f      	bne.n	13dcc <_strtol_l.isra.0+0xb0>
   13d6c:	2220      	movs	r2, #32
   13d6e:	782b      	ldrb	r3, [r5, #0]
   13d70:	4393      	bics	r3, r2
   13d72:	2b58      	cmp	r3, #88	; 0x58
   13d74:	d151      	bne.n	13e1a <_strtol_l.isra.0+0xfe>
   13d76:	2710      	movs	r7, #16
   13d78:	786c      	ldrb	r4, [r5, #1]
   13d7a:	3502      	adds	r5, #2
   13d7c:	9b01      	ldr	r3, [sp, #4]
   13d7e:	4a29      	ldr	r2, [pc, #164]	; (13e24 <_strtol_l.isra.0+0x108>)
   13d80:	0039      	movs	r1, r7
   13d82:	189e      	adds	r6, r3, r2
   13d84:	0030      	movs	r0, r6
   13d86:	f7fa fc73 	bl	e670 <__aeabi_uidivmod>
   13d8a:	0030      	movs	r0, r6
   13d8c:	9104      	str	r1, [sp, #16]
   13d8e:	0039      	movs	r1, r7
   13d90:	f7fa fbe8 	bl	e564 <__udivsi3>
   13d94:	2101      	movs	r1, #1
   13d96:	2300      	movs	r3, #0
   13d98:	4249      	negs	r1, r1
   13d9a:	0002      	movs	r2, r0
   13d9c:	468c      	mov	ip, r1
   13d9e:	0018      	movs	r0, r3
   13da0:	0021      	movs	r1, r4
   13da2:	3930      	subs	r1, #48	; 0x30
   13da4:	2909      	cmp	r1, #9
   13da6:	d813      	bhi.n	13dd0 <_strtol_l.isra.0+0xb4>
   13da8:	000c      	movs	r4, r1
   13daa:	42a7      	cmp	r7, r4
   13dac:	dd1c      	ble.n	13de8 <_strtol_l.isra.0+0xcc>
   13dae:	1c59      	adds	r1, r3, #1
   13db0:	d009      	beq.n	13dc6 <_strtol_l.isra.0+0xaa>
   13db2:	4663      	mov	r3, ip
   13db4:	4282      	cmp	r2, r0
   13db6:	d306      	bcc.n	13dc6 <_strtol_l.isra.0+0xaa>
   13db8:	d102      	bne.n	13dc0 <_strtol_l.isra.0+0xa4>
   13dba:	9904      	ldr	r1, [sp, #16]
   13dbc:	42a1      	cmp	r1, r4
   13dbe:	db02      	blt.n	13dc6 <_strtol_l.isra.0+0xaa>
   13dc0:	2301      	movs	r3, #1
   13dc2:	4378      	muls	r0, r7
   13dc4:	1820      	adds	r0, r4, r0
   13dc6:	782c      	ldrb	r4, [r5, #0]
   13dc8:	3501      	adds	r5, #1
   13dca:	e7e9      	b.n	13da0 <_strtol_l.isra.0+0x84>
   13dcc:	270a      	movs	r7, #10
   13dce:	e7d5      	b.n	13d7c <_strtol_l.isra.0+0x60>
   13dd0:	0021      	movs	r1, r4
   13dd2:	3941      	subs	r1, #65	; 0x41
   13dd4:	2919      	cmp	r1, #25
   13dd6:	d801      	bhi.n	13ddc <_strtol_l.isra.0+0xc0>
   13dd8:	3c37      	subs	r4, #55	; 0x37
   13dda:	e7e6      	b.n	13daa <_strtol_l.isra.0+0x8e>
   13ddc:	0021      	movs	r1, r4
   13dde:	3961      	subs	r1, #97	; 0x61
   13de0:	2919      	cmp	r1, #25
   13de2:	d801      	bhi.n	13de8 <_strtol_l.isra.0+0xcc>
   13de4:	3c57      	subs	r4, #87	; 0x57
   13de6:	e7e0      	b.n	13daa <_strtol_l.isra.0+0x8e>
   13de8:	1c5a      	adds	r2, r3, #1
   13dea:	d108      	bne.n	13dfe <_strtol_l.isra.0+0xe2>
   13dec:	9a05      	ldr	r2, [sp, #20]
   13dee:	3323      	adds	r3, #35	; 0x23
   13df0:	6013      	str	r3, [r2, #0]
   13df2:	9b02      	ldr	r3, [sp, #8]
   13df4:	0030      	movs	r0, r6
   13df6:	2b00      	cmp	r3, #0
   13df8:	d10b      	bne.n	13e12 <_strtol_l.isra.0+0xf6>
   13dfa:	b007      	add	sp, #28
   13dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13dfe:	9a01      	ldr	r2, [sp, #4]
   13e00:	2a00      	cmp	r2, #0
   13e02:	d000      	beq.n	13e06 <_strtol_l.isra.0+0xea>
   13e04:	4240      	negs	r0, r0
   13e06:	9a02      	ldr	r2, [sp, #8]
   13e08:	2a00      	cmp	r2, #0
   13e0a:	d0f6      	beq.n	13dfa <_strtol_l.isra.0+0xde>
   13e0c:	9a03      	ldr	r2, [sp, #12]
   13e0e:	2b00      	cmp	r3, #0
   13e10:	d000      	beq.n	13e14 <_strtol_l.isra.0+0xf8>
   13e12:	1e6a      	subs	r2, r5, #1
   13e14:	9b02      	ldr	r3, [sp, #8]
   13e16:	601a      	str	r2, [r3, #0]
   13e18:	e7ef      	b.n	13dfa <_strtol_l.isra.0+0xde>
   13e1a:	2430      	movs	r4, #48	; 0x30
   13e1c:	2f00      	cmp	r7, #0
   13e1e:	d1ad      	bne.n	13d7c <_strtol_l.isra.0+0x60>
   13e20:	3708      	adds	r7, #8
   13e22:	e7ab      	b.n	13d7c <_strtol_l.isra.0+0x60>
   13e24:	7fffffff 	.word	0x7fffffff

00013e28 <_strtol_r>:
   13e28:	b513      	push	{r0, r1, r4, lr}
   13e2a:	4c05      	ldr	r4, [pc, #20]	; (13e40 <_strtol_r+0x18>)
   13e2c:	6824      	ldr	r4, [r4, #0]
   13e2e:	6a24      	ldr	r4, [r4, #32]
   13e30:	2c00      	cmp	r4, #0
   13e32:	d100      	bne.n	13e36 <_strtol_r+0xe>
   13e34:	4c03      	ldr	r4, [pc, #12]	; (13e44 <_strtol_r+0x1c>)
   13e36:	9400      	str	r4, [sp, #0]
   13e38:	f7ff ff70 	bl	13d1c <_strtol_l.isra.0>
   13e3c:	bd16      	pop	{r1, r2, r4, pc}
   13e3e:	46c0      	nop			; (mov r8, r8)
   13e40:	200002c8 	.word	0x200002c8
   13e44:	2000032c 	.word	0x2000032c

00013e48 <_strtoul_l.isra.0>:
   13e48:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e4a:	001f      	movs	r7, r3
   13e4c:	000e      	movs	r6, r1
   13e4e:	b087      	sub	sp, #28
   13e50:	9005      	str	r0, [sp, #20]
   13e52:	9103      	str	r1, [sp, #12]
   13e54:	9201      	str	r2, [sp, #4]
   13e56:	980c      	ldr	r0, [sp, #48]	; 0x30
   13e58:	7834      	ldrb	r4, [r6, #0]
   13e5a:	f7fc fcf7 	bl	1084c <__locale_ctype_ptr_l>
   13e5e:	2208      	movs	r2, #8
   13e60:	1900      	adds	r0, r0, r4
   13e62:	7843      	ldrb	r3, [r0, #1]
   13e64:	1c75      	adds	r5, r6, #1
   13e66:	4013      	ands	r3, r2
   13e68:	d10c      	bne.n	13e84 <_strtoul_l.isra.0+0x3c>
   13e6a:	2c2d      	cmp	r4, #45	; 0x2d
   13e6c:	d10c      	bne.n	13e88 <_strtoul_l.isra.0+0x40>
   13e6e:	3301      	adds	r3, #1
   13e70:	782c      	ldrb	r4, [r5, #0]
   13e72:	9302      	str	r3, [sp, #8]
   13e74:	1cb5      	adds	r5, r6, #2
   13e76:	2f00      	cmp	r7, #0
   13e78:	d00c      	beq.n	13e94 <_strtoul_l.isra.0+0x4c>
   13e7a:	2f10      	cmp	r7, #16
   13e7c:	d114      	bne.n	13ea8 <_strtoul_l.isra.0+0x60>
   13e7e:	2c30      	cmp	r4, #48	; 0x30
   13e80:	d00a      	beq.n	13e98 <_strtoul_l.isra.0+0x50>
   13e82:	e011      	b.n	13ea8 <_strtoul_l.isra.0+0x60>
   13e84:	002e      	movs	r6, r5
   13e86:	e7e6      	b.n	13e56 <_strtoul_l.isra.0+0xe>
   13e88:	9302      	str	r3, [sp, #8]
   13e8a:	2c2b      	cmp	r4, #43	; 0x2b
   13e8c:	d1f3      	bne.n	13e76 <_strtoul_l.isra.0+0x2e>
   13e8e:	782c      	ldrb	r4, [r5, #0]
   13e90:	1cb5      	adds	r5, r6, #2
   13e92:	e7f0      	b.n	13e76 <_strtoul_l.isra.0+0x2e>
   13e94:	2c30      	cmp	r4, #48	; 0x30
   13e96:	d12f      	bne.n	13ef8 <_strtoul_l.isra.0+0xb0>
   13e98:	2220      	movs	r2, #32
   13e9a:	782b      	ldrb	r3, [r5, #0]
   13e9c:	4393      	bics	r3, r2
   13e9e:	2b58      	cmp	r3, #88	; 0x58
   13ea0:	d154      	bne.n	13f4c <_strtoul_l.isra.0+0x104>
   13ea2:	2710      	movs	r7, #16
   13ea4:	786c      	ldrb	r4, [r5, #1]
   13ea6:	3502      	adds	r5, #2
   13ea8:	2001      	movs	r0, #1
   13eaa:	0039      	movs	r1, r7
   13eac:	4240      	negs	r0, r0
   13eae:	f7fa fb59 	bl	e564 <__udivsi3>
   13eb2:	0006      	movs	r6, r0
   13eb4:	2001      	movs	r0, #1
   13eb6:	0039      	movs	r1, r7
   13eb8:	4240      	negs	r0, r0
   13eba:	f7fa fbd9 	bl	e670 <__aeabi_uidivmod>
   13ebe:	2300      	movs	r3, #0
   13ec0:	9104      	str	r1, [sp, #16]
   13ec2:	2101      	movs	r1, #1
   13ec4:	2201      	movs	r2, #1
   13ec6:	0018      	movs	r0, r3
   13ec8:	468c      	mov	ip, r1
   13eca:	4252      	negs	r2, r2
   13ecc:	0021      	movs	r1, r4
   13ece:	3930      	subs	r1, #48	; 0x30
   13ed0:	2909      	cmp	r1, #9
   13ed2:	d813      	bhi.n	13efc <_strtoul_l.isra.0+0xb4>
   13ed4:	000c      	movs	r4, r1
   13ed6:	42a7      	cmp	r7, r4
   13ed8:	dd1e      	ble.n	13f18 <_strtoul_l.isra.0+0xd0>
   13eda:	2b00      	cmp	r3, #0
   13edc:	db1a      	blt.n	13f14 <_strtoul_l.isra.0+0xcc>
   13ede:	0013      	movs	r3, r2
   13ee0:	4286      	cmp	r6, r0
   13ee2:	d306      	bcc.n	13ef2 <_strtoul_l.isra.0+0xaa>
   13ee4:	d102      	bne.n	13eec <_strtoul_l.isra.0+0xa4>
   13ee6:	9904      	ldr	r1, [sp, #16]
   13ee8:	42a1      	cmp	r1, r4
   13eea:	db02      	blt.n	13ef2 <_strtoul_l.isra.0+0xaa>
   13eec:	4663      	mov	r3, ip
   13eee:	4378      	muls	r0, r7
   13ef0:	1820      	adds	r0, r4, r0
   13ef2:	782c      	ldrb	r4, [r5, #0]
   13ef4:	3501      	adds	r5, #1
   13ef6:	e7e9      	b.n	13ecc <_strtoul_l.isra.0+0x84>
   13ef8:	270a      	movs	r7, #10
   13efa:	e7d5      	b.n	13ea8 <_strtoul_l.isra.0+0x60>
   13efc:	0021      	movs	r1, r4
   13efe:	3941      	subs	r1, #65	; 0x41
   13f00:	2919      	cmp	r1, #25
   13f02:	d801      	bhi.n	13f08 <_strtoul_l.isra.0+0xc0>
   13f04:	3c37      	subs	r4, #55	; 0x37
   13f06:	e7e6      	b.n	13ed6 <_strtoul_l.isra.0+0x8e>
   13f08:	0021      	movs	r1, r4
   13f0a:	3961      	subs	r1, #97	; 0x61
   13f0c:	2919      	cmp	r1, #25
   13f0e:	d803      	bhi.n	13f18 <_strtoul_l.isra.0+0xd0>
   13f10:	3c57      	subs	r4, #87	; 0x57
   13f12:	e7e0      	b.n	13ed6 <_strtoul_l.isra.0+0x8e>
   13f14:	0013      	movs	r3, r2
   13f16:	e7ec      	b.n	13ef2 <_strtoul_l.isra.0+0xaa>
   13f18:	2b00      	cmp	r3, #0
   13f1a:	da09      	bge.n	13f30 <_strtoul_l.isra.0+0xe8>
   13f1c:	2322      	movs	r3, #34	; 0x22
   13f1e:	2001      	movs	r0, #1
   13f20:	9a05      	ldr	r2, [sp, #20]
   13f22:	4240      	negs	r0, r0
   13f24:	6013      	str	r3, [r2, #0]
   13f26:	9b01      	ldr	r3, [sp, #4]
   13f28:	2b00      	cmp	r3, #0
   13f2a:	d10b      	bne.n	13f44 <_strtoul_l.isra.0+0xfc>
   13f2c:	b007      	add	sp, #28
   13f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f30:	9a02      	ldr	r2, [sp, #8]
   13f32:	2a00      	cmp	r2, #0
   13f34:	d000      	beq.n	13f38 <_strtoul_l.isra.0+0xf0>
   13f36:	4240      	negs	r0, r0
   13f38:	9a01      	ldr	r2, [sp, #4]
   13f3a:	2a00      	cmp	r2, #0
   13f3c:	d0f6      	beq.n	13f2c <_strtoul_l.isra.0+0xe4>
   13f3e:	9a03      	ldr	r2, [sp, #12]
   13f40:	2b00      	cmp	r3, #0
   13f42:	d000      	beq.n	13f46 <_strtoul_l.isra.0+0xfe>
   13f44:	1e6a      	subs	r2, r5, #1
   13f46:	9b01      	ldr	r3, [sp, #4]
   13f48:	601a      	str	r2, [r3, #0]
   13f4a:	e7ef      	b.n	13f2c <_strtoul_l.isra.0+0xe4>
   13f4c:	2430      	movs	r4, #48	; 0x30
   13f4e:	2f00      	cmp	r7, #0
   13f50:	d1aa      	bne.n	13ea8 <_strtoul_l.isra.0+0x60>
   13f52:	3708      	adds	r7, #8
   13f54:	e7a8      	b.n	13ea8 <_strtoul_l.isra.0+0x60>
	...

00013f58 <_strtoul_r>:
   13f58:	b513      	push	{r0, r1, r4, lr}
   13f5a:	4c05      	ldr	r4, [pc, #20]	; (13f70 <_strtoul_r+0x18>)
   13f5c:	6824      	ldr	r4, [r4, #0]
   13f5e:	6a24      	ldr	r4, [r4, #32]
   13f60:	2c00      	cmp	r4, #0
   13f62:	d100      	bne.n	13f66 <_strtoul_r+0xe>
   13f64:	4c03      	ldr	r4, [pc, #12]	; (13f74 <_strtoul_r+0x1c>)
   13f66:	9400      	str	r4, [sp, #0]
   13f68:	f7ff ff6e 	bl	13e48 <_strtoul_l.isra.0>
   13f6c:	bd16      	pop	{r1, r2, r4, pc}
   13f6e:	46c0      	nop			; (mov r8, r8)
   13f70:	200002c8 	.word	0x200002c8
   13f74:	2000032c 	.word	0x2000032c

00013f78 <__submore>:
   13f78:	000b      	movs	r3, r1
   13f7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13f7c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
   13f7e:	3344      	adds	r3, #68	; 0x44
   13f80:	000c      	movs	r4, r1
   13f82:	429d      	cmp	r5, r3
   13f84:	d11c      	bne.n	13fc0 <__submore+0x48>
   13f86:	2680      	movs	r6, #128	; 0x80
   13f88:	00f6      	lsls	r6, r6, #3
   13f8a:	0031      	movs	r1, r6
   13f8c:	f7fc fd8a 	bl	10aa4 <_malloc_r>
   13f90:	2800      	cmp	r0, #0
   13f92:	d102      	bne.n	13f9a <__submore+0x22>
   13f94:	2001      	movs	r0, #1
   13f96:	4240      	negs	r0, r0
   13f98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   13f9a:	0023      	movs	r3, r4
   13f9c:	6360      	str	r0, [r4, #52]	; 0x34
   13f9e:	63a6      	str	r6, [r4, #56]	; 0x38
   13fa0:	3346      	adds	r3, #70	; 0x46
   13fa2:	781a      	ldrb	r2, [r3, #0]
   13fa4:	4b10      	ldr	r3, [pc, #64]	; (13fe8 <__submore+0x70>)
   13fa6:	54c2      	strb	r2, [r0, r3]
   13fa8:	0023      	movs	r3, r4
   13faa:	3345      	adds	r3, #69	; 0x45
   13fac:	781a      	ldrb	r2, [r3, #0]
   13fae:	4b0f      	ldr	r3, [pc, #60]	; (13fec <__submore+0x74>)
   13fb0:	54c2      	strb	r2, [r0, r3]
   13fb2:	782a      	ldrb	r2, [r5, #0]
   13fb4:	4b0e      	ldr	r3, [pc, #56]	; (13ff0 <__submore+0x78>)
   13fb6:	54c2      	strb	r2, [r0, r3]
   13fb8:	18c0      	adds	r0, r0, r3
   13fba:	6020      	str	r0, [r4, #0]
   13fbc:	2000      	movs	r0, #0
   13fbe:	e7eb      	b.n	13f98 <__submore+0x20>
   13fc0:	6b8e      	ldr	r6, [r1, #56]	; 0x38
   13fc2:	0029      	movs	r1, r5
   13fc4:	0073      	lsls	r3, r6, #1
   13fc6:	001a      	movs	r2, r3
   13fc8:	9301      	str	r3, [sp, #4]
   13fca:	f000 f813 	bl	13ff4 <_realloc_r>
   13fce:	1e05      	subs	r5, r0, #0
   13fd0:	d0e0      	beq.n	13f94 <__submore+0x1c>
   13fd2:	1987      	adds	r7, r0, r6
   13fd4:	0001      	movs	r1, r0
   13fd6:	0032      	movs	r2, r6
   13fd8:	0038      	movs	r0, r7
   13fda:	f7fc fcf5 	bl	109c8 <memcpy>
   13fde:	9b01      	ldr	r3, [sp, #4]
   13fe0:	6027      	str	r7, [r4, #0]
   13fe2:	6365      	str	r5, [r4, #52]	; 0x34
   13fe4:	63a3      	str	r3, [r4, #56]	; 0x38
   13fe6:	e7e9      	b.n	13fbc <__submore+0x44>
   13fe8:	000003ff 	.word	0x000003ff
   13fec:	000003fe 	.word	0x000003fe
   13ff0:	000003fd 	.word	0x000003fd

00013ff4 <_realloc_r>:
   13ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ff6:	0007      	movs	r7, r0
   13ff8:	000d      	movs	r5, r1
   13ffa:	0016      	movs	r6, r2
   13ffc:	2900      	cmp	r1, #0
   13ffe:	d105      	bne.n	1400c <_realloc_r+0x18>
   14000:	0011      	movs	r1, r2
   14002:	f7fc fd4f 	bl	10aa4 <_malloc_r>
   14006:	0004      	movs	r4, r0
   14008:	0020      	movs	r0, r4
   1400a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1400c:	2a00      	cmp	r2, #0
   1400e:	d103      	bne.n	14018 <_realloc_r+0x24>
   14010:	f7fc fcfe 	bl	10a10 <_free_r>
   14014:	0034      	movs	r4, r6
   14016:	e7f7      	b.n	14008 <_realloc_r+0x14>
   14018:	f000 f812 	bl	14040 <_malloc_usable_size_r>
   1401c:	002c      	movs	r4, r5
   1401e:	4286      	cmp	r6, r0
   14020:	d9f2      	bls.n	14008 <_realloc_r+0x14>
   14022:	0031      	movs	r1, r6
   14024:	0038      	movs	r0, r7
   14026:	f7fc fd3d 	bl	10aa4 <_malloc_r>
   1402a:	1e04      	subs	r4, r0, #0
   1402c:	d0ec      	beq.n	14008 <_realloc_r+0x14>
   1402e:	0029      	movs	r1, r5
   14030:	0032      	movs	r2, r6
   14032:	f7fc fcc9 	bl	109c8 <memcpy>
   14036:	0029      	movs	r1, r5
   14038:	0038      	movs	r0, r7
   1403a:	f7fc fce9 	bl	10a10 <_free_r>
   1403e:	e7e3      	b.n	14008 <_realloc_r+0x14>

00014040 <_malloc_usable_size_r>:
   14040:	1f0b      	subs	r3, r1, #4
   14042:	681b      	ldr	r3, [r3, #0]
   14044:	1f18      	subs	r0, r3, #4
   14046:	2b00      	cmp	r3, #0
   14048:	da01      	bge.n	1404e <_malloc_usable_size_r+0xe>
   1404a:	580b      	ldr	r3, [r1, r0]
   1404c:	18c0      	adds	r0, r0, r3
   1404e:	4770      	bx	lr

00014050 <__gnu_thumb1_case_uqi>:
   14050:	b402      	push	{r1}
   14052:	4671      	mov	r1, lr
   14054:	0849      	lsrs	r1, r1, #1
   14056:	0049      	lsls	r1, r1, #1
   14058:	5c09      	ldrb	r1, [r1, r0]
   1405a:	0049      	lsls	r1, r1, #1
   1405c:	448e      	add	lr, r1
   1405e:	bc02      	pop	{r1}
   14060:	4770      	bx	lr
   14062:	46c0      	nop			; (mov r8, r8)
   14064:	00001700 	.word	0x00001700
   14068:	000017f4 	.word	0x000017f4
   1406c:	000017fe 	.word	0x000017fe
   14070:	00001808 	.word	0x00001808
   14074:	00001812 	.word	0x00001812
   14078:	00001844 	.word	0x00001844
   1407c:	0000184e 	.word	0x0000184e
   14080:	00001858 	.word	0x00001858
   14084:	00001862 	.word	0x00001862
   14088:	0000186c 	.word	0x0000186c
   1408c:	42002000 	.word	0x42002000
   14090:	42002400 	.word	0x42002400
   14094:	43000800 	.word	0x43000800
   14098:	00000002 	.word	0x00000002
   1409c:	00000100 	.word	0x00000100
   140a0:	00000002 	.word	0x00000002
   140a4:	00000200 	.word	0x00000200
   140a8:	00000003 	.word	0x00000003
   140ac:	00000004 	.word	0x00000004
   140b0:	00002834 	.word	0x00002834
   140b4:	00002842 	.word	0x00002842
   140b8:	000028dc 	.word	0x000028dc
   140bc:	0000297c 	.word	0x0000297c
   140c0:	000029e0 	.word	0x000029e0

000140c4 <_usb_device_irq_bits>:
   140c4:	00080004 00800070 01000001 00000200     ....p...........

000140d4 <_usb_endpoint_irq_bits>:
   140d4:	60100c03 654c203a 6874676e 20666f20     ...`: Length of 
   140e4:	6f636e65 20646564 66667562 74207265     encoded buffer t
   140f4:	73206f6f 6c6c616d 202d2d20 74617453     oo small -- Stat
   14104:	203a7375 58323025 00000a0d 754e203a     us: %02X....: Nu
   14114:	69206c6c 7475706e 72617020 74656d61     ll input paramet
   14124:	2d207265 7453202d 73757461 3025203a     er -- Status: %0
   14134:	0a0d5832 00000000 2d6e6166 65657073     2X......fan-spee
   14144:	00000064 61727564 6e6f6974 00000000     d...duration....
   14154:	49464957 4154535f 495f4554 0054494e     WIFI_STATE_INIT.
   14164:	49464957 4154535f 545f4554 495f534c     WIFI_STATE_TLS_I
   14174:	0054494e 49464957 4154535f 435f4554     NIT.WIFI_STATE_C
   14184:	454e4e4f 00005443 49464957 4154535f     ONNECT..WIFI_STA
   14194:	575f4554 00544941 49464957 4154535f     TE_WAIT.WIFI_STA
   141a4:	525f4554 59444145 00000000 49464957     TE_READY....WIFI
   141b4:	4154535f 545f4554 4f454d49 00005455     _STATE_TIMEOUT..
   141c4:	49464957 4154535f 455f4554 524f5252     WIFI_STATE_ERROR
   141d4:	00000000                                ....

000141d8 <wifi_app_cb_list>:
   141d8:	0000002c 00004055 00000032 00003fb5     ,...U@..2....?..
   141e8:	00000009 00003dc9 0000002a 00004055     .....=..*...U@..
   141f8:	0000001b 00003fe5 434e4957 30303531     .....?..WINC1500
   14208:	46495720 43203a49 656e6e6f 64657463      WIFI: Connected
   14218:	206f7420 20656874 49464957 63636120      to the WIFI acc
   14228:	20737365 6e696f70 00000d74 434e4957     ess point...WINC
   14238:	30303531 46495720 44203a49 6f637369     1500 WIFI: Disco
   14248:	63656e6e 20646574 6d6f7266 65687420     nnected from the
   14258:	46495720 63612049 73736563 696f7020      WIFI access poi
   14268:	000d746e 434e4957 30303531 46495720     nt..WINC1500 WIF
   14278:	55203a49 6f6e6b6e 63206e77 656e6e6f     I: Unknown conne
   14288:	6f697463 7473206e 73757461 6425203a     ction status: %d
   14298:	00000a0d 434e4957 30303531 46495720     ....WINC1500 WIF
   142a8:	44203a49 63697665 50492065 64644120     I: Device IP Add
   142b8:	73736572 7525203a 2e75252e 252e7525     ress: %u.%u.%u.%
   142c8:	000a0d75 69666977 3a62635f 4d324d20     u...wifi_cb: M2M
   142d8:	4649575f 45525f49 505f5053 49564f52     _WIFI_RESP_PROVI
   142e8:	4e4f4953 464e495f 000d2e4f 69666977     SION_INFO...wifi
   142f8:	3a62635f 6f725020 69736976 66206e6f     _cb: Provision f
   14308:	656c6961 000d2e64 434e4957 30303531     ailed...WINC1500
   14318:	46495720 44203a49 63697665 69542065      WIFI: Device Ti
   14328:	203a656d 20202020 30252020 252f6432     me:       %02d/%
   14338:	2f643230 64323025 32302520 30253a64     02d/%02d %02d:%0
   14348:	253a6432 0d643230 0000000a 72746552     2d:%02d.....Retr
   14358:	676e6979 6e6f4320 7463656e 0d6e6f69     ying Connection.
   14368:	00000000 5f6d326d 69666977 696e695f     ....m2m_wifi_ini
   14378:	61662074 64656c69 0000000d 69766544     t failed....Devi
   14388:	49206563 65732044 6f742074 25203a20     ce ID set to : %
   14398:	000a0d73 65746e45 676e6972 6f727020     s...Entering pro
   143a8:	69736976 6e696e6f 6f6d2067 000d6564     visioning mode..
   143b8:	7068636d 666e6f63 632e6769 00006d6f     mchpconfig.com..
   143c8:	766f7250 6f697369 6f4d206e 73206564     Provision Mode s
   143d8:	74726174 0d2e6465 6e6f430a 7463656e     tarted...Connect
   143e8:	206f7420 5d73255b 61697620 5b504120      to [%s] via AP[
   143f8:	205d7325 20646e61 6c6c6966 20707520     %s] and fill up 
   14408:	20656874 65676170 000a0d2e 434e4957     the page....WINC
   14418:	30303531 6843203a 49207069 30203a44     1500: Chip ID: 0
   14428:	38302578 0a0d586c 00000000 434e4957     x%08lX......WINC
   14438:	30303531 6946203a 61776d72 56206572     1500: Firmware V
   14448:	69737265 203a6e6f 252e7525 75252e75     ersion: %u.%u.%u
   14458:	00000a0d 434e4957 30303531 6946203a     ....WINC1500: Fi
   14468:	61776d72 4d206572 44206e69 65766972     rmware Min Drive
   14478:	65562072 6f697372 25203a6e 75252e75     r Version: %u.%u
   14488:	0d75252e 0000000a 434e4957 30303531     .%u.....WINC1500
   14498:	7244203a 72657669 72655620 6e6f6973     : Driver Version
   144a8:	6425203a 2e64252e 0a0d6425 00000000     : %d.%d.%d......
   144b8:	6c696146 74206465 6572206f 65697274     Failed to retrie
   144c8:	57206576 20434e49 6d726966 65726177     ve WINC firmware
   144d8:	72657620 6e6f6973 0000000d 5f6d326d      version....m2m_
   144e8:	5f6c7373 74696e69 69616620 0d64656c     ssl_init failed.
   144f8:	00000000 5f6d326d 5f6c7373 5f746573     ....m2m_ssl_set_
   14508:	69746361 635f6576 65687069 69757372     active_ciphersui
   14518:	20736574 6c696166 000d6465 42000000     tes failed.....B
   14528:	42000400 42000800 42000c00 42001000     ...B...B...B...B
   14538:	43000400 00004bba 00004c32 00004c50     ...C.K..2L..PL..
   14548:	00004bba 00004bba 00004bba 00004bba     .K...K...K...K..
   14558:	00004bba 00004c16 00004bba 00004bba     .K...L...K...K..
   14568:	00004bba 00004bba 00004bba 00004bba     .K...K...K...K..
   14578:	00004bba 00004bba 00004bf8 00004c94     .K...K...K...L..
   14588:	00004bba 00004bba 00004bdc 00004c20     .K...K...K.. L..
   14598:	00004c0c 00004bba 00004bba 00004bba     .L...K...K...K..
   145a8:	00004c46 00004bc8 00004bba 00004bba     FL...K...K...K..
   145b8:	00004bba 00004c80 00004bba 00004bba     .K...L...K...K..
   145c8:	00004bba 00004bbe 00004bba 00004bba     .K...K...K...K..
   145d8:	00004bba 00004bb2 00004bba 00004bba     .K...K...K...K..
   145e8:	00004bba 00004bba 00004bba 00004bba     .K...K...K...K..
   145f8:	00004bba 00004c02 00004bba 00004bba     .K...L...K...K..
   14608:	00004bba 00004bba 00004bba 00004bba     .K...K...K...K..
   14618:	00004bba 00004bba 00004bba 00004bba     .K...K...K...K..
   14628:	00004bba 00004bba 00004bba 00004bba     .K...K...K...K..
   14638:	00004bba 00004be6 00004c76 00004bba     .K...K..vL...K..
   14648:	00004bd2 00004bba 00004c8a 00004c3c     .K...K...L..<L..
   14658:	00004c64 00004f3e 00004fc8 00004fc8     dL..>O...O...O..
   14668:	00004fc8 00004fc8 00004fc8 00004fc8     .O...O...O...O..
   14678:	00004fc8 00004f38 00004fc8 00004fc8     .O..8O...O...O..
   14688:	00004fc8 00004fc8 00004fc8 00004fc8     .O...O...O...O..
   14698:	00004f4a 00004fc8 00004fc8 00004f32     JO...O...O..2O..
   146a8:	00004f06 00004fc8 00004fc8 00004f2a     .O...O...O..*O..
   146b8:	000052aa 000052b8 000052b8 000052b8     .R...R...R...R..
   146c8:	000052b8 000052b8 000052b8 00005272     .R...R...R..rR..
   146d8:	00005292 0000529e 000052b8 0000529e     .R...R...R...R..
   146e8:	0000529e 00014744 00014750 00014758     .R..DG..PG..XG..
   146f8:	00014760                                `G..

000146fc <VersionAes132>:
   146fc:	00000101                                ....

00014700 <VersionEcc508>:
   14700:	00000101                                ....

00014704 <VersionKit>:
   14704:	00050001                                ....

00014708 <VersionSha204>:
   14708:	00000301 6e6b6e75 5f6e776f 69766564     ....unknown_devi
   14718:	00006563 38385441 30314b43 4b545331     ce..AT88CK101STK
   14728:	00000020 32414853 00203430 31534541      ...SHA204 .AES1
   14738:	00203233 31434345 00203830 645f6f6e     32 .ECC108 .no_d
   14748:	63697665 00002065 20495053 00000000     evice ..SPI ....
   14758:	20495754 00000000 20495753 00000000     TWI ....SWI ....
   14768:	4354514d 00000000 00000004 00000000     MQTC............
	...
   14780:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   147c0:	65636572 64657669 6e6f6320 3a676966     received config:
   147d0:	2a2e2520 000a0d73 4f44454c 0000006e      %.*s...LEDOn...
   147e0:	4f44454c 00006666 2d6e6166 65657073     LEDOff..fan-spee
   147f0:	616d2d64 00000070 7265766f 65646972     d-map...override
   14800:	00000000 61647075 722d6574 00657461     ....update-rate.
   14810:	6c696146 74206465 6567206f 6f742074     Failed to get to
   14820:	20636970 69727473 0000676e 7422207b     pic string..{ "t
   14830:	73656d69 706d6174 25203a22 22202c75     imestamp": %u, "
   14840:	706d6574 74617265 22657275 6425203a     temperature": %d
   14850:	3230252e 22202c64 2d6e6166 65657073     .%02d, "fan-spee
   14860:	203a2264 7d206425 00000000 6c627550     d": %d }....Publ
   14870:	69687369 4d20676e 20545451 7373654d     ishing MQTT Mess
   14880:	20656761 0a0d7325 00000000 6c696146     age %s......Fail
   14890:	74206465 7570206f 73696c62 68742068     ed to publish th
   148a0:	514d2065 6d205454 61737365 203a6567     e MQTT message: 
   148b0:	0a0d6425 00000000 5454514d 696c4320     %d......MQTT Cli
   148c0:	20746e65 6c696146 74206465 6f43206f     ent Failed to Co
   148d0:	63656e6e 25282074 0a0d2964 00000000     nnect (%d)......
   148e0:	6c696146 74206465 6f6c206f 74206461     Failed to load t
   148f0:	73206568 63736275 74706972 206e6f69     he subscription 
   14900:	69706f74 616e2063 0000656d 73627573     topic name..subs
   14910:	62697263 74206465 203a206f 0a0d7325     cribed to : %s..
   14920:	00000000 5454514d 62755320 69726373     ....MQTT Subscri
   14930:	6f697470 6146206e 64656c69 64252820     ption Failed (%d
   14940:	000a0d29 45494c43 535f544e 45544154     )...CLIENT_STATE
   14950:	494e495f 00000054 45494c43 535f544e     _INIT...CLIENT_S
   14960:	45544154 5445475f 4d49545f 00000045     TATE_GET_TIME...
   14970:	45494c43 535f544e 45544154 4e4f435f     CLIENT_STATE_CON
   14980:	5443454e 00000000 45494c43 535f544e     NECT....CLIENT_S
   14990:	45544154 4e55525f 00000000 45494c43     TATE_RUN....CLIE
   149a0:	535f544e 45544154 5252455f 0000524f     NT_STATE_ERROR..

000149b0 <config_gcp_host_name>:
   149b0:	7474716d 6f6f672e 61656c67 2e736970     mqtt.googleapis.
   149c0:	006d6f63                                com.

000149c4 <config_gcp_project_id>:
   149c4:	7263696d 6968636f 70636770 3539652d     microchipgcp-e95
   149d4:	00003137                                71..

000149d8 <config_gcp_region_id>:
   149d8:	632d7375 72746e65 00316c61              us-central1.

000149e4 <config_gcp_registry_id>:
   149e4:	7263696d 6968636f 50434770 00000000     microchipGCP....
   149f4:	6a6f7270 73746365 2f73252f 61636f6c     projects/%s/loca
   14a04:	6e6f6974 73252f73 6765722f 72747369     tions/%s/registr
   14a14:	2f736569 642f7325 63697665 252f7365     ies/%s/devices/%
   14a24:	00000073 00746169 00707865 00647561     s...iat.exp.aud.
   14a34:	7665642f 73656369 2f73252f 6e657665     /devices/%s/even
   14a44:	00007374 7665642f 73656369 2f73252f     ts../devices/%s/
   14a54:	666e6f63 00006769 73756e75 00006465     config..unused..
   14a64:	00007325 2d2d2d2d 4745422d 50204e49     %s..-----BEGIN P
   14a74:	494c4255 454b2043 2d2d2d59 0a0d2d2d     UBLIC KEY-----..
   14a84:	0a0d7325 2d2d2d2d 444e452d 42555020     %s..-----END PUB
   14a94:	2043494c 2d59454b 2d2d2d2d 00000a0d     LIC KEY-----....

00014aa4 <public_key_x509_header>:
   14aa4:	13305930 862a0706 023dce48 2a080601     0Y0...*.H.=....*
   14ab4:	3dce4886 03070103 00040042 40030004     .H.=....B......@

00014ac4 <device_execution_time_108>:
   14ac4:	000d0028 00140024 0032001c 000b0015     (...$.....2.....
   14ad4:	00730040 00170011 00020030 00200017     @.s.....0..... .
   14ae4:	000e0008 001d0016 00030001 00300046     ............F.0.
   14af4:	0017001b 00050002 00090047 003c0041     ........G...A.<.
   14b04:	000a0020 00480045 001a0012               ...E.H.....

00014b10 <device_execution_time_204>:
   14b10:	00260028 003e001c 002b0015 00450011     (.&...>...+...E.
   14b20:	00020030 00180017 00230008 003c0016     0.........#...<.
   14b30:	00020001 0032001b 00050002 00160047     ......2.....G...
   14b40:	000c0020 002a0012                        .....*.

00014b48 <device_execution_time_508>:
   14b48:	000d0028 00140024 0032001c 003a0043     (...$.....2.C.:.
   14b58:	000b0015 00730040 00170011 00020030     ....@.s.....0...
   14b68:	00200017 000e0008 001d0016 00030001     .. .............
   14b78:	00300046 0017001b 00050002 00090047     F.0.........G...
   14b88:	003c0041 000a0020 00480045 001a0012     A.<. ...E.H.....

00014b98 <device_execution_time_608_m0>:
   14b98:	001b0051 00280028 00190024 0032001c     Q...(.(.$.....2.
   14ba8:	003c0043 00190015 00730040 00050030     C.<.....@.s.0...
   14bb8:	00a50056 00230017 00370008 00140016     V.....#...7.....
   14bc8:	00320046 0017001b 00050002 00500080     F.2...........P.
   14bd8:	00fa0077 00240047 00730041 000a0020     w...G.$.A.s. ...
   14be8:	00690045 002d0012                       E.i...-.

00014bf0 <device_execution_time_608_m1>:
   14bf0:	001b0051 00280028 00190024 0032001c     Q...(.(.$.....2.
   14c00:	008c0043 00230015 00d70040 00050030     C.....#.@...0...
   14c10:	00a50056 00230017 00370008 00140016     V.....#...7.....
   14c20:	00320046 0017001b 00050002 00970080     F.2.............
   14c30:	024e0077 002a0047 00dc0041 000a0020     w.N.G.*.A... ...
   14c40:	01270045 002d0012                       E.'...-.

00014c48 <device_execution_time_608_m2>:
   14c48:	001b0051 00280028 00190024 0032001c     Q...(.(.$.....2.
   14c58:	01c70043 00230015 02760040 00050030     C.....#.@.v.0...
   14c68:	00a50056 00230017 00370008 00140016     V.....#...7.....
   14c78:	00320046 0017001b 00050002 01c30080     F.2.............
   14c88:	08980077 004b0047 02990041 000a0020     w...G.K.A... ...
   14c98:	043d0045 002d0012                       E.=...-.

00014ca0 <k.4571>:
   14ca0:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   14cb0:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   14cc0:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   14cd0:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   14ce0:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   14cf0:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   14d00:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   14d10:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   14d20:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   14d30:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   14d40:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   14d50:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   14d60:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   14d70:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   14d80:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   14d90:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
   14da0:	00006a1a 00006a58 00006a64 00006a70     .j..Xj..dj..pj..
   14db0:	00006a7c 00006a88 00006bda 00006c16     |j...j...k...l..
   14dc0:	00006c24 00006c32 00006c40 00006c4e     $l..2l..@l..Nl..
   14dd0:	43331104 01600000 01100080 08000200     ..3C..`.........
   14de0:	09000200 00050400 22732522 0064253a     ........"%s":%d.
   14df0:	22732522 7325223a 00000022              "%s":"%s"...

00014dfc <g_jwt_header>:
   14dfc:	6c61227b 223a2267 35325345 222c2236     {"alg":"ES256","
   14e0c:	22707974 574a223a 007d2254 00007244     typ":"JWT"}.Dr..
   14e1c:	00007296 000072ac 000072c4 000072dc     .r...r...r...r..
   14e2c:	000072f4 0000730c 4354514d 00000000     .r...s..MQTC....
   14e3c:	00000004 00000000 00000000 00000000     ................
   14e4c:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   14e8c:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   14e9c:	000087f0 00008980 00008980 00008980     ................
   14eac:	00008980 00008980 00008980 00008980     ................
   14ebc:	00008980 00008980 00008980 00008980     ................
   14ecc:	00008980 0000881e 00008980 00008980     ................
   14edc:	00008980 00008980 00008980 00008980     ................
   14eec:	00008980 00008980 00008980 00008980     ................
   14efc:	00008980 00008980 00008980 00008980     ................
   14f0c:	00008980 00008980 00008980 00008980     ................
   14f1c:	00008980 00008980 00008980 00008980     ................
   14f2c:	00008980 00008980 00008980 00008980     ................
   14f3c:	00008980 00008980 00008980 00008980     ................
   14f4c:	00008980 00008980 00008980 00008980     ................
   14f5c:	00008980 00008980 00008980 00008980     ................
   14f6c:	00008980 00008980 00008980 00008980     ................
   14f7c:	00008980 00008980 00008818 00008980     ................
   14f8c:	00008980 00008980 00008980 00008980     ................
   14f9c:	00008824 00008980 00008980 00008980     $...............
   14fac:	0000882a 00008980 00008980 00008980     *...............
   14fbc:	00008980 00008980 00008980 00008980     ................
   14fcc:	00008830 00008980 00008980 00008980     0...............
   14fdc:	00008836 00008980 0000883c 00008842     6.......<...B...
   14fec:	0000903a 0000916e 0000916e 0000916e     :...n...n...n...
   14ffc:	0000916e 0000916e 0000916e 0000916e     n...n...n...n...
   1500c:	0000916e 0000916e 0000916e 000090e8     n...n...n.......
   1501c:	0000916e 0000916e 000090e8 000090e8     n...n...........
   1502c:	000090e8 000090e8 000090e8 000090e8     ................
   1503c:	000090e8 000090e8 000090e8 000090e8     ................
   1504c:	0000916e 0000916e 0000916e 0000916e     n...n...n...n...
   1505c:	0000916e 0000916e 0000916e 0000916e     n...n...n...n...
   1506c:	0000916e 0000916e 0000916e 0000916e     n...n...n...n...
   1507c:	0000916e 0000916e 0000916e 0000916e     n...n...n...n...
   1508c:	0000916e 0000916e 0000916e 0000916e     n...n...n...n...
   1509c:	0000916e 0000916e 0000916e 0000916e     n...n...n...n...
   150ac:	0000916e 0000916e 0000916e 0000916e     n...n...n...n...
   150bc:	0000916e 0000916e 0000916e 0000916e     n...n...n...n...
   150cc:	0000916e 00008f38 0000916e 0000916e     n...8...n...n...
   150dc:	0000916e 0000916e 0000916e 0000916e     n...n...n...n...
   150ec:	0000916e 0000916e 0000916e 0000916e     n...n...n...n...
   150fc:	00009068 0000916e 0000916e 0000916e     h...n...n...n...
   1510c:	0000916e 0000916e 0000916e 0000916e     n...n...n...n...
   1511c:	0000914e 0000916e 0000916e 0000916e     N...n...n...n...
   1512c:	0000916e 0000916e 00009068 0000916e     n...n...h...n...
   1513c:	0000916e 0000916e 0000916e 0000916e     n...n...n...n...
   1514c:	0000916e 00008de4 00783425 0000005b     n.......%4x.[...
   1515c:	0000002c 0000005d 0000007b 0000003a     ,...]...{...:...
   1516c:	0000007d 65757274 00000000 736c6166     }...true....fals
   1517c:	00000065 00006425 00006625 6c6c756e     e...%d..%f..null
   1518c:	00000000 0000302d 00005878              ....-0..xX..

00015198 <__FUNCTION__.17320>:
   15198:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   151a8:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   151b8:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   151c8:	6320746c 0000646d 0000acd4 0000aca4     lt cmd..........
   151d8:	0000ac9c 0000acb4 0000acac 0000accc     ................
   151e8:	0000acbc 0000acc4                       ........

000151f0 <__FUNCTION__.14290>:
   151f0:	5f666968 646e6573 00000000              hif_send....

000151fc <__FUNCTION__.14300>:
   151fc:	5f666968 00727369                       hif_isr.

00015204 <__FUNCTION__.14309>:
   15204:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00015214 <__FUNCTION__.14321>:
   15214:	5f666968 65636572 00657669              hif_receive.

00015220 <__FUNCTION__.14337>:
   15220:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   15230:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   15240:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   15250:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   15260:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   15270:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   15280:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   15290:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   152a0:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
   152b0:	6c616320 6361626c 7369206b 746f6e20      callback is not
   152c0:	67657220 65747369 00646572 6b6f6353      registered.Scok
   152d0:	63207465 626c6c61 206b6361 6e207369     et callback is n
   152e0:	7220746f 73696765 65726574 00000064     ot registered...
   152f0:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   15300:	20746f6e 69676572 72657473 00006465     not registered..
   15310:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   15320:	6e207369 7220746f 73696765 65726574     is not registere
   15330:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
   15340:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   15350:	64657265 00000000 66696828 6e692029     ered....(hif) in
   15360:	696c6176 72672064 2070756f 00004449     valid group ID..
   15370:	66696828 6f682029 61207473 64207070     (hif) host app d
   15380:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   15390:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   153a0:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
   153b0:	66696828 61462029 2065736c 65746e69     (hif) False inte
   153c0:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   153d0:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   153e0:	7265746e 74707572 67657220 00000000     nterrupt reg....
   153f0:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   15400:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   15410:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   15420:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   15430:	696c6176 72612064 656d7567 0000746e     valid argument..
   15440:	20505041 75716552 65747365 69532064     APP Requested Si
   15450:	6920657a 616c2073 72656772 61687420     ze is larger tha
   15460:	6874206e 65722065 65766963 75622064     n the recived bu
   15470:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   15480:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   15490:	65747365 64412064 73657264 65622073     ested Address be
   154a0:	646e6f79 65687420 63657220 64657669     yond the recived
   154b0:	66756220 20726566 72646461 20737365      buffer address 
   154c0:	20646e61 676e656c 00006874 20705247     and length..GRp 
   154d0:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
   154e0:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
   154f0:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
   15500:	6b617720 74207075 63206568 00706968      wakup the chip.

00015510 <__FUNCTION__.14304>:
   15510:	5f6d326d 5f6c7373 00006263              m2m_ssl_cb..

0001551c <__FUNCTION__.14350>:
   1551c:	5f6d326d 5f6c7373 74696e69 00000000     m2m_ssl_init....
   1552c:	6f727245 65722072 76696563 20676e69     Error receiving 
   1553c:	204c5353 6d6f7266 65687420 46494820     SSL from the HIF
   1554c:	00000000 5f666968 69676572 72657473     ....hif_register
   1555c:	2862635f 61662029 64656c69 74697720     _cb() failed wit
   1556c:	65722068 64253d74 00000000              h ret=%d....

00015578 <__FUNCTION__.14272>:
   15578:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00015584 <__FUNCTION__.14281>:
   15584:	5f6d326d 696c6176 65746164 5f70615f     m2m_validate_ap_
   15594:	61726170 6574656d 00007372              parameters..

000155a0 <__FUNCTION__.14301>:
   155a0:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

000155b0 <__FUNCTION__.14332>:
   155b0:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   155c0:	0063735f                                _sc.

000155c4 <__FUNCTION__.14500>:
   155c4:	5f6d326d 69666977 6174735f 705f7472     m2m_wifi_start_p
   155d4:	69766f72 6e6f6973 646f6d5f 00000065     rovision_mode...
   155e4:	41564e49 2044494c 4e494f50 00524554     INVALID POINTER.
   155f4:	41564e49 2044494c 44495353 00000000     INVALID SSID....
   15604:	41564e49 2044494c 00004843 41564e49     INVALID CH..INVA
   15614:	2044494c 50434844 52455320 20524556     LID DHCP SERVER 
   15624:	00005049 41564e49 2044494c 2059454b     IP..INVALID KEY 
   15634:	45444e49 00000058 41564e49 2044494c     INDEX...INVALID 
   15644:	2059454b 49525453 5320474e 00455a49     KEY STRING SIZE.
   15654:	41564e49 2044494c 2059454b 455a4953     INVALID KEY SIZE
   15664:	00000000 41564e49 2044494c 20415057     ....INVALID WPA 
   15674:	2059454b 455a4953 00000000 41564e49     KEY SIZE....INVA
   15684:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
   15694:	4d204e4f 0045444f 666e6f43 7463696c     ON MODE.Conflict
   156a4:	49206465 20222050 252e7525 75252e75     ed IP " %u.%u.%u
   156b4:	2075252e 000a2022 20514552 20746f4e     .%u " ..REQ Not 
   156c4:	69666564 2064656e 000a6425 2079654b     defined %d..Key 
   156d4:	6e207369 7620746f 64696c61 00000000     is not valid....
   156e4:	61766e49 2064696c 0079654b 44495353     Invalid Key.SSID
   156f4:	4e454c20 564e4920 44494c41 00000000      LEN INVALID....
   15704:	49204843 4c41564e 00004449 61766e49     CH INVALID..Inva
   15714:	2064696c 20706557 2079656b 65646e69     lid Wep key inde
   15724:	64252078 0000000a 61766e49 2064696c     x %d....Invalid 
   15734:	20706557 2079656b 676e656c 25206874     Wep key length %
   15744:	00000a64 6f636e49 63657272 53502074     d...Incorrect PS
   15754:	656b204b 656c2079 6874676e 00000000     K key length....
   15764:	65646e75 656e6966 65732064 79742063     undefined sec ty
   15774:	00006570 6d726946 65726177 72657620     pe..Firmware ver
   15784:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   15794:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   157a4:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   157b4:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   157c4:	6e694d20 69726420 20726576 20726576      Min driver ver 
   157d4:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   157e4:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   157f4:	0000000a 343a3930 37303a36 00000000     ....09:46:07....
   15804:	20677541 32203220 00383130 76697244     Aug  2 2018.Driv
   15814:	62207265 746c6975 20746120 25097325     er built at %s.%
   15824:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   15834:	7277616d 65562065 6f697372 0000006e     mawre Version...
   15844:	41564e49 2044494c 414d4f44 4e204e49     INVALID DOMAIN N
   15854:	00454d41                                AME.

00015858 <__FUNCTION__.14129>:
   15858:	70696863 6b61775f 00000065              chip_wake...

00015864 <__FUNCTION__.14178>:
   15864:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   15874:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   15884:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
   15894:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
   158a4:	74206465 6177206f 2070756b 20656874     ed to wakup the 
   158b4:	70696863 00000000 76697244 65567265     chip....DriverVe
   158c4:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

000158d4 <__FUNCTION__.14177>:
   158d4:	645f6d6e 695f7672 0074696e              nm_drv_init.

000158e0 <__FUNCTION__.14184>:
   158e0:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   158f0:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   15900:	6965645f 2074696e 6c696166 00000000     _deinit fail....
   15910:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   15920:	73616c66 69642068 6c626173 61662065     flash disable fa
   15930:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   15940:	6c696166 696e6920 75622074 00000073     fail init bus...
   15950:	6c696166 74206465 6e65206f 656c6261     failed to enable
   15960:	746e6920 75727265 2e737470 0000002e      interrupts.....
   15970:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   15980:	6e69206c 62207469 00007375 70696843     l init bus..Chip
   15990:	20444920 0a786c25 00000000 0000c2c8      ID %lx.........
   159a0:	0000c2c8 0000c2f8 0000c27a 0000c29e     ........z.......
   159b0:	0000c2ac 0000c2de 0000c2de 0000c326     ............&...
   159c0:	0000c25e 0000c360 0000c360 0000c360     ^...`...`...`...
   159d0:	0000c360 0000c2ba cac4c9c3              `...........

000159dc <__FUNCTION__.13445>:
   159dc:	5f697073 00646d63                       spi_cmd.

000159e4 <__FUNCTION__.13452>:
   159e4:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

000159f4 <__FUNCTION__.13461>:
   159f4:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00015a00 <__FUNCTION__.13477>:
   15a00:	5f697073 61746164 6165725f 00000064     spi_data_read...

00015a10 <__FUNCTION__.13492>:
   15a10:	5f697073 61746164 6972775f 00006574     spi_data_write..

00015a20 <__FUNCTION__.13504>:
   15a20:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00015a30 <__FUNCTION__.13515>:
   15a30:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00015a40 <__FUNCTION__.13527>:
   15a40:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00015a50 <__FUNCTION__.13540>:
   15a50:	735f6d6e 725f6970 00646165              nm_spi_read.

00015a5c <__FUNCTION__.13561>:
   15a5c:	735f6d6e 695f6970 0074696e              nm_spi_init.

00015a68 <crc7_syndrome_table>:
   15a68:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   15a78:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   15a88:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   15a98:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   15aa8:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   15ab8:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   15ac8:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   15ad8:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   15ae8:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   15af8:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   15b08:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   15b18:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   15b28:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   15b38:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   15b48:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   15b58:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   15b68:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   15b78:	6e692064 6e726574 72206c61 20646165     d internal read 
   15b88:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   15b98:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   15ba8:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
   15bb8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   15bc8:	6e692064 6e726574 72206c61 20646165     d internal read 
   15bd8:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
   15be8:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   15bf8:	6e726574 77206c61 65746972 6f727020     ternal write pro
   15c08:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
   15c18:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   15c28:	20646d63 64616572 69686320 64692070     cmd read chip id
   15c38:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   15c48:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   15c58:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   15c68:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   15c78:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   15c88:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   15c98:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   15ca8:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   15cb8:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   15cc8:	00000000 65736552 6e612074 65722064     ....Reset and re
   15cd8:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
   15ce8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   15cf8:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   15d08:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   15d18:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   15d28:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   15d38:	69727720 62206574 6b636f6c 30252820      write block (%0
   15d48:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   15d58:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   15d68:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   15d78:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   15d88:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   15d98:	61642064 62206174 6b636f6c 69727720     d data block wri
   15da8:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   15db8:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   15dc8:	656c6961 61642064 62206174 6b636f6c     ailed data block
   15dd8:	63726320 69727720 202c6574 20737562      crc write, bus 
   15de8:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
   15df8:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   15e08:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
   15e18:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   15e28:	72206174 6f707365 2065736e 64616572     ta response read
   15e38:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   15e48:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   15e58:	206b636f 61746164 69727720 2e2e6574     ock data write..
   15e68:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   15e78:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   15e88:	73756220 72726520 2e2e726f 0000002e      bus error......
   15e98:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   15ea8:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   15eb8:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   15ec8:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   15ed8:	656c6961 61642064 72206174 6f707365     ailed data respo
   15ee8:	2065736e 64616572 7562202c 72652073     nse read, bus er
   15ef8:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   15f08:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   15f18:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   15f28:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   15f38:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   15f48:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   15f58:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   15f68:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   15f78:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   15f88:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   15f98:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   15fa8:	72202c64 20646165 20676572 38302528     d, read reg (%08
   15fb8:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   15fc8:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   15fd8:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   15fe8:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   15ff8:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   16008:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   16018:	6e612074 65722064 20797274 25206425     t and retry %d %
   16028:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   16038:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   16048:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
   16058:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   16068:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   16078:	74697277 65722065 25282067 29783830     write reg (%08x)
   16088:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
   16098:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   160a8:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
   160b8:	253c2074 000a3e64                       t <%d>..

000160c0 <__FUNCTION__.14445>:
   160c0:	536c7373 6f537465 704f6b63 00000074     sslSetSockOpt...
   160d0:	6b636f53 206f7420 656c6564 3c206574     Sock to delete <
   160e0:	0a3e6425 00000000 20494e53 65637845     %d>.....SNI Exce
   160f0:	20736465 2078614d 676e654c 00006874     eds Max Length..
   16100:	6e6b6e55 206e776f 204c5353 6b636f53     Unknown SSL Sock
   16110:	4f207465 6f697470 6425206e 0000000a     et Option %d....
   16120:	20746f4e 204c5353 6b636f53 00007465     Not SSL Socket..
   16130:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   16140:	4449206e 25203d20 000a0d64 0000da22     n ID = %d..."...
   16150:	0000da1e 0000da1e 0000da88 0000da88     ................
   16160:	0000da38 0000da28 0000da3e 0000da76     8...(...>...v...
   16170:	0000dc2c 0000dc0c 0000dc0c 0000dcb8     ,...............
   16180:	0000dc1e 0000dc3a 0000dc10 0000dc48     ....:.......H...
   16190:	0000dc9c 0000dcf4 0000dd36 0000dd36     ........6...6...
   161a0:	0000dd36 0000dce6 0000dd02 0000dcd8     6...............
   161b0:	0000dd10 0000dd26 72617453 676e6974     ....&...Starting
   161c0:	61784520 656c706d 0d2e2e2e 00000000      Example........

000161d0 <tc_interrupt_vectors.14996>:
   161d0:	00151211 0000f1f0 0000f1d2 0000f18c     ................
   161e0:	0000f0aa 0000f18c 0000f1c4 0000f18c     ................
   161f0:	0000f0aa 0000f1d2 0000f1d2 0000f1c4     ................
   16200:	0000f0aa 0000f0a2 0000f0a2 0000f0a2     ................
   16210:	0000f408 0000fa50 0000f910 0000f910     ....P...........
   16220:	0000f90c 0000fa28 0000fa28 0000fa1a     ....(...(.......
   16230:	0000f90c 0000fa28 0000fa1a 0000fa28     ....(.......(...
   16240:	0000f90c 0000fa30 0000fa30 0000fa30     ....0...0...0...
   16250:	0000fc34                                4...

00016254 <__sf_fake_stderr>:
	...

00016274 <__sf_fake_stdin>:
	...

00016294 <__sf_fake_stdout>:
	...

000162b4 <_global_impure_ptr>:
   162b4:	200002cc 4f500043 00584953 666e002e     ... C.POSIX...nf
   162c4:	696e6900 61007974 0000006e              .inity.an...

000162d0 <fpi.6129>:
   162d0:	00000035 fffffbce 000003cb 00000001     5...............
   162e0:	00000000                                ....

000162e4 <fpinan.6165>:
   162e4:	00000034 fffffbce 000003cb 00000001     4...............
   162f4:	00000000                                ....

000162f8 <tinytens>:
   162f8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   16308:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   16318:	64ac6f43 11680628                       Co.d(.h.

00016320 <_ctype_>:
   16320:	20202000 20202020 28282020 20282828     .         ((((( 
   16330:	20202020 20202020 20202020 20202020                     
   16340:	10108820 10101010 10101010 10101010      ...............
   16350:	04040410 04040404 10040404 10101010     ................
   16360:	41411010 41414141 01010101 01010101     ..AAAAAA........
   16370:	01010101 01010101 01010101 10101010     ................
   16380:	42421010 42424242 02020202 02020202     ..BBBBBB........
   16390:	02020202 02020202 02020202 10101010     ................
   163a0:	00000020 00000000 00000000 00000000      ...............
	...

00016428 <__mprec_bigtens>:
   16428:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   16438:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   16448:	7f73bf3c 75154fdd                       <.s..O.u

00016450 <__mprec_tens>:
   16450:	00000000 3ff00000 00000000 40240000     .......?......$@
   16460:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   16470:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   16480:	00000000 412e8480 00000000 416312d0     .......A......cA
   16490:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   164a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   164b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   164c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   164d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   164e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   164f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   16500:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   16510:	79d99db4 44ea7843                       ...yCx.D

00016518 <p05.6047>:
   16518:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
   16528:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
   16538:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
   16548:	35343332 39383736 64636261 00006665     23456789abcdef..
   16558:	00016576 00016579 0001657c 61462d41     ve..ye..|e..A-Fa
   16568:	3938662d 33323130 37363534 2d2b005d     -f8901234567].+-
   16578:	00303000 00005878                       .00.xX..

00016580 <_init>:
   16580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16582:	46c0      	nop			; (mov r8, r8)
   16584:	bcf8      	pop	{r3, r4, r5, r6, r7}
   16586:	bc08      	pop	{r3}
   16588:	469e      	mov	lr, r3
   1658a:	4770      	bx	lr

0001658c <__init_array_start>:
   1658c:	000000dd 	.word	0x000000dd

00016590 <_fini>:
   16590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16592:	46c0      	nop			; (mov r8, r8)
   16594:	bcf8      	pop	{r3, r4, r5, r6, r7}
   16596:	bc08      	pop	{r3}
   16598:	469e      	mov	lr, r3
   1659a:	4770      	bx	lr

0001659c <__fini_array_start>:
   1659c:	000000b5 	.word	0x000000b5
